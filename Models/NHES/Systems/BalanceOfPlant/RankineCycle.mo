within NHES.Systems.BalanceOfPlant;
package RankineCycle

  package BaseClasses
    extends Modelica.Icons.BasesPackage;

    partial model Partial_SubSystem
      import NHES;

      extends NHES.Systems.BalanceOfPlant.BaseClasses.Partial_SubSystem;

      extends Record_SubSystem;

      replaceable Partial_ControlSystem CS annotation (choicesAllMatching=true,
          Placement(transformation(extent={{-18,122},{-2,138}})));
      replaceable Partial_EventDriver ED annotation (choicesAllMatching=true,
          Placement(transformation(extent={{2,122},{18,138}})));
      replaceable Record_Data data
        annotation (Placement(transformation(extent={{42,122},{58,138}})));

      SignalSubBus_ActuatorInput actuatorBus
        annotation (Placement(transformation(extent={{10,80},{50,120}}),
            iconTransformation(extent={{10,80},{50,120}})));
      SignalSubBus_SensorOutput sensorBus
        annotation (Placement(transformation(extent={{-50,80},{-10,120}}),
            iconTransformation(extent={{-50,80},{-10,120}})));

      Modelica.Blocks.Sources.RealExpression Q_balance
        "Heat loss/gain not accounted for in connections (e.g., energy vented to atmosphere) [W]"
        annotation (Placement(transformation(extent={{-96,128},{-84,140}})));
      Modelica.Blocks.Sources.RealExpression W_balance
        "Electricity loss/gain not accounted for in connections (e.g., heating/cooling, pumps, etc.) [W]"
        annotation (Placement(transformation(extent={{-96,118},{-84,130}})));

    equation
      connect(sensorBus, ED.sensorBus) annotation (Line(
          points={{-30,100},{-16,100},{7.6,100},{7.6,122}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus, CS.sensorBus) annotation (Line(
          points={{-30,100},{-12.4,100},{-12.4,122}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus, CS.actuatorBus) annotation (Line(
          points={{30,100},{12,100},{-7.6,100},{-7.6,122}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus, ED.actuatorBus) annotation (Line(
          points={{30,100},{20,100},{12.4,100},{12.4,122}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));

      connect(sensorBus.Q_balance, Q_balance.y) annotation (Line(
          points={{-29.9,100.1},{-80,100.1},{-80,134},{-83.4,134}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.W_balance, W_balance.y) annotation (Line(
          points={{-29.9,100.1},{-29.9,100.1},{-80,100.1},{-80,124},{-83.4,124}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));

      annotation (
        defaultComponentName="BOP",
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                100}})),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                100,140}})));
    end Partial_SubSystem;

    partial model Partial_SubSystem_A

      import Modelica.Constants;

      extends Partial_SubSystem;
      extends Record_SubSystem_A;

      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
            Medium, m_flow(min=if allowFlowReversal then -Constants.inf else 0))
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-110,30},{-90,50}}),
            iconTransformation(extent={{-110,30},{-90,50}})));

      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
            Medium, m_flow(max=if allowFlowReversal then +Constants.inf else 0))
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-110,-50},{-90,-30}}),
            iconTransformation(extent={{-110,-50},{-90,-30}})));

      NHES.Electrical.Interfaces.ElectricalPowerPort_b portElec_b
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));

      annotation (
        defaultComponentName="BOP",
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                140}})));

    end Partial_SubSystem_A;

    partial model Partial_SubSystem_B

      import Modelica.Constants;

      extends Partial_SubSystem;
      extends Record_SubSystem_B;

      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
            Medium, m_flow(min=if allowFlowReversal then -Constants.inf else 0))
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-170,30},{-150,50}}),
            iconTransformation(extent={{-110,30},{-90,50}})));

      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
            Medium, m_flow(max=if allowFlowReversal then +Constants.inf else 0))
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-170,-50},{-150,-30}}),
            iconTransformation(extent={{-110,-50},{-90,-30}})));

      Modelica.Fluid.Interfaces.FluidPort_a port_a3[nPorts_a3](redeclare
          package Medium =
            Medium, m_flow(each min=if allowFlowReversal then -Constants.inf else 0))
        "Fluid connector a (positive design flow direction is from port_a_3 to port_b_3)"
        annotation (Placement(transformation(extent={{-90,-170},{-70,-150}}),
            iconTransformation(extent={{-50,-110},{-30,-90}})));

      NHES.Electrical.Interfaces.ElectricalPowerPort_b portElec_b
        annotation (Placement(transformation(extent={{150,-10},{170,10}}),
            iconTransformation(extent={{90,-10},{110,10}})));

      annotation (
        defaultComponentName="BOP",
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-160,-160},{160,
                140}})));

    end Partial_SubSystem_B;

    partial model Partial_SubSystem_C

      import Modelica.Constants;

      extends Partial_SubSystem;
      extends Record_SubSystem_C;

      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
            Medium, m_flow(min=if allowFlowReversal then -Constants.inf else 0))
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-170,30},{-150,50}}),
            iconTransformation(extent={{-110,30},{-90,50}})));

      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
            Medium, m_flow(max=if allowFlowReversal then +Constants.inf else 0))
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-170,-50},{-150,-30}}),
            iconTransformation(extent={{-110,-50},{-90,-30}})));

      NHES.Electrical.Interfaces.ElectricalPowerPort_b portElec_b
        annotation (Placement(transformation(extent={{150,-10},{170,10}}),
            iconTransformation(extent={{90,-10},{110,10}})));

      annotation (
        defaultComponentName="BOP",
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-160,-160},{160,
                140}})));

    end Partial_SubSystem_C;

    partial model Record_Data

      extends Modelica.Icons.Record;

      annotation (defaultComponentName="data",
      Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end Record_Data;

    partial record Record_SubSystem

      annotation (defaultComponentName="subsystem",
      Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end Record_SubSystem;

    partial record Record_SubSystem_A

      extends Record_SubSystem;

      replaceable package Medium = Modelica.Media.Water.StandardWater constrainedby
        Modelica.Media.Interfaces.PartialMedium "Medium at fluid ports"
        annotation (choicesAllMatching=true);

      /* Nominal Conditions */
      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_a_nominal(
          redeclare package Medium = Medium, h=Medium.specificEnthalpy(
            Medium.setState_pT(port_a_nominal.p, port_a_nominal.T))) "port_a"
        annotation (Dialog(tab="Nominal Conditions"));
      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_b_nominal(
        redeclare package Medium = Medium,
        h=Medium.specificEnthalpy(Medium.setState_pT(port_b_nominal.p,
            port_b_nominal.T)),
        m_flow=-port_a_nominal.m_flow) "port_b"
        annotation (Dialog(tab="Nominal Conditions"));

      /* Initialization */
      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_a_start(
        redeclare package Medium = Medium,
        p=port_a_nominal.p,
        T=port_a_nominal.T,
        h=Medium.specificEnthalpy(Medium.setState_pT(port_a_start.p, port_a_start.T)),
        m_flow=port_a_nominal.m_flow) "port_a"
        annotation (Dialog(tab="Initialization"));

      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_b_start(
        redeclare package Medium = Medium,
        p=port_b_nominal.p,
        T=port_b_nominal.T,
        h=Medium.specificEnthalpy(Medium.setState_pT(port_b_start.p, port_b_start.T)),
        m_flow=-port_a_start.m_flow) "port_b"
        annotation (Dialog(tab="Initialization"));

      /* Assumptions */
      parameter Boolean allowFlowReversal= true
        "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);

      annotation (defaultComponentName="subsystem",
      Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end Record_SubSystem_A;

    partial record Record_SubSystem_B

      extends Record_SubSystem;

      replaceable package Medium = Modelica.Media.Water.StandardWater constrainedby
        Modelica.Media.Interfaces.PartialMedium "Medium at fluid ports"
        annotation (choicesAllMatching=true);

      parameter Integer nPorts_a3=0 "Number of port_a3 connections"
        annotation (Dialog(connectorSizing=true));

      /* Assumptions */
      parameter Boolean allowFlowReversal= true
        "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);

      /* Nominal Conditions */
      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_a_nominal(
          redeclare package Medium = Medium, final T=Medium.temperature(
            Medium.setState_ph(port_a_nominal.p, port_a_nominal.h))) "port_a"
        annotation (Dialog(tab="Nominal Conditions"));
      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_b_nominal(
        redeclare package Medium = Medium,
        final T=Medium.temperature(Medium.setState_ph(port_b_nominal.p,
            port_b_nominal.h)),
        m_flow=-(port_a_nominal.m_flow+sum({port_a3_nominal_m_flow[i] for i in 1:nPorts_a3}))) "port_b"
        annotation (Dialog(tab="Nominal Conditions"));

      parameter SI.Pressure port_a3_nominal_p[nPorts_a3] = fill(port_b_nominal.p, nPorts_a3) annotation (Dialog(tab="Nominal Conditions",group="Conditional Ports"));
      final parameter SI.Temperature port_a3_nominal_T[nPorts_a3] = Medium.temperature(Medium.setState_ph(port_a3_nominal_p,port_a3_nominal_h)) annotation (Dialog(tab="Nominal Conditions",group="Conditional Ports"));
      parameter SI.SpecificEnthalpy port_a3_nominal_h[nPorts_a3] = fill(port_b_nominal.h, nPorts_a3) annotation (Dialog(tab="Nominal Conditions",group="Conditional Ports"));
      parameter SI.MassFlowRate port_a3_nominal_m_flow[nPorts_a3] = zeros(nPorts_a3) annotation (Dialog(tab="Nominal Conditions",group="Conditional Ports"));

      /* Initialization */
      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_a_start(
        redeclare package Medium = Medium,
        p=port_a_nominal.p,
        final T=Medium.temperature(Medium.setState_ph(port_a_start.p, port_a_start.h)),
        h=port_a_nominal.h,
        m_flow=port_a_nominal.m_flow) "port_a"
        annotation (Dialog(tab="Initialization"));

      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_b_start(
        redeclare package Medium = Medium,
        p=port_b_nominal.p,
        final T=Medium.temperature(Medium.setState_ph(port_a_start.p, port_a_start.h)),
        h=port_b_nominal.h,
        m_flow=port_b_nominal.m_flow) "port_b"
        annotation (Dialog(tab="Initialization"));

      parameter SI.Pressure port_a3_start_p[nPorts_a3] = port_a3_nominal_p annotation (Dialog(tab="Initialization",group="Conditional Ports"));
      final parameter SI.Temperature port_a3_start_T[nPorts_a3] = Medium.temperature(Medium.setState_ph(port_a3_start_p, port_a3_start_h)) annotation (Dialog(tab="Initialization",group="Conditional Ports"));
      parameter SI.SpecificEnthalpy port_a3_start_h[nPorts_a3] = port_a3_nominal_h annotation (Dialog(tab="Initialization",group="Conditional Ports"));
      parameter SI.MassFlowRate port_a3_start_m_flow[nPorts_a3] = port_a3_nominal_m_flow annotation (Dialog(tab="Initialization",group="Conditional Ports"));

      annotation (defaultComponentName="subsystem",
      Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end Record_SubSystem_B;

    partial record Record_SubSystem_C

      extends Record_SubSystem;

      replaceable package Medium = Modelica.Media.Water.StandardWater constrainedby
        Modelica.Media.Interfaces.PartialMedium "Medium at fluid ports"
        annotation (choicesAllMatching=true);

      /* Nominal Conditions */
      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_a_nominal(
          redeclare package Medium = Medium, final T=Medium.temperature(
            Medium.setState_ph(port_a_nominal.p, port_a_nominal.h))) "port_a"
        annotation (Dialog(tab="Nominal Conditions"));
      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_b_nominal(
        redeclare package Medium = Medium,
        final T=Medium.temperature(Medium.setState_ph(port_b_nominal.p,
            port_b_nominal.h)),
        m_flow=-port_a_nominal.m_flow) "port_b"
        annotation (Dialog(tab="Nominal Conditions"));

      /* Initialization */
      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_a_start(
        redeclare package Medium = Medium,
        p=port_a_nominal.p,
        final T=Medium.temperature(Medium.setState_ph(port_a_start.p, port_a_start.h)),
        h=port_a_nominal.h,
        m_flow=port_a_nominal.m_flow) "port_a"
        annotation (Dialog(tab="Initialization"));

      parameter NHES.Systems.BaseClasses.Record_fluidPorts port_b_start(
        redeclare package Medium = Medium,
        p=port_b_nominal.p,
        final T=Medium.temperature(Medium.setState_ph(port_a_start.p, port_a_start.h)),
        h=port_b_nominal.h,
        m_flow=port_b_nominal.m_flow) "port_b"
        annotation (Dialog(tab="Initialization"));

      /* Assumptions */
      parameter Boolean allowFlowReversal= true
        "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);

      annotation (defaultComponentName="subsystem",
      Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end Record_SubSystem_C;

    partial model Partial_ControlSystem

      extends NHES.Systems.BaseClasses.Partial_ControlSystem;

      SignalSubBus_ActuatorInput actuatorBus
        annotation (Placement(transformation(extent={{10,-120},{50,-80}}),
            iconTransformation(extent={{10,-120},{50,-80}})));
      SignalSubBus_SensorOutput sensorBus
        annotation (Placement(transformation(extent={{-50,-120},{-10,-80}}),
            iconTransformation(extent={{-50,-120},{-10,-80}})));

      annotation (
        defaultComponentName="CS",
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                100}})),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                100,100}})));

    end Partial_ControlSystem;

    partial model Partial_EventDriver

      extends NHES.Systems.BaseClasses.Partial_EventDriver;

      SignalSubBus_ActuatorInput actuatorBus
        annotation (Placement(transformation(extent={{10,-120},{50,-80}}),
            iconTransformation(extent={{10,-120},{50,-80}})));
      SignalSubBus_SensorOutput sensorBus
        annotation (Placement(transformation(extent={{-50,-120},{-10,-80}}),
            iconTransformation(extent={{-50,-120},{-10,-80}})));

      annotation (
        defaultComponentName="ED",
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                100}})));

    end Partial_EventDriver;

    expandable connector SignalSubBus_ActuatorInput

      extends NHES.Systems.Interfaces.SignalSubBus_ActuatorInput;

      Real opening_TCV "TCV fraction open";
      Real opening_TDV "TDV fraction open";
      Real opening_BV "BV fraction open";
      Real opening_BV_TCV "BV for TCV fraction open";

       annotation (defaultComponentName="actuatorSubBus",
      Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end SignalSubBus_ActuatorInput;

    expandable connector SignalSubBus_SensorOutput

      extends NHES.Systems.Interfaces.SignalSubBus_SensorOutput;

      SI.Power Q_balance
        "Heat loss (negative)/gain (positive) not accounted for in connections (e.g., energy vented to atmosphere)";
      SI.Power W_balance
        "Electricity loss (negative)/gain (positive) not accounted for in connections (e.g., heating/cooling, pumps, etc.)";
      SI.Power W_total "Total electrical power generated";
      SI.Power W_totalSetpoint "Total electrical power setpoint";
      SI.Pressure p_inlet_steamTurbine "Inlet pressure to steam turbine";

      annotation (defaultComponentName="sensorSubBus",
      Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end SignalSubBus_SensorOutput;
  end BaseClasses;

  package ControlSystems
    model CS_Dummy
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      Modelica.Blocks.Sources.Constant TCV_openingNominal(k=0.5)
        annotation (Placement(transformation(extent={{-10,10},{10,30}})));
      Modelica.Blocks.Sources.Constant BV_openingNominal(k=0.001)
        annotation (Placement(transformation(extent={{-10,-50},{10,-30}})));
      Modelica.Blocks.Sources.Constant TDV_openingNominal(k=0.5)
        annotation (Placement(transformation(extent={{-10,-20},{10,0}})));
      Modelica.Blocks.Sources.Constant BV_TCV_openingNominal(k=0.001)
        annotation (Placement(transformation(extent={{-10,-80},{10,-60}})));
    equation
      connect(actuatorBus.opening_TCV, TCV_openingNominal.y) annotation (
         Line(
          points={{30.1,-99.9},{30.1,20},{11,20}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.opening_BV, BV_openingNominal.y)
        annotation (Line(
          points={{30.1,-99.9},{30.1,-40},{11,-40}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.opening_TDV, TDV_openingNominal.y)
        annotation (Line(
          points={{30.1,-99.9},{30.1,-10},{11,-10}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.opening_BV_TCV, BV_TCV_openingNominal.y)
        annotation (Line(
          points={{30.1,-99.9},{30.1,-70},{11,-70}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      annotation (defaultComponentName="CS",
      Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end CS_Dummy;

    model CS_UserDefined
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real opening_TCV=0.5
        "Valve opening" annotation(Dialog(group="Inputs"));
      input Real opening_TDV=0.5
        "Valve opening" annotation(Dialog(group="Inputs"));
      input Real opening_BV=0.001
        "Valve opening" annotation(Dialog(group="Inputs"));
      input Real opening_BV_TCV=0.001
        "Valve opening" annotation(Dialog(group="Inputs"));

      Modelica.Blocks.Sources.RealExpression TCV_opening(y=opening_TCV)
        annotation (Placement(transformation(extent={{-10,10},{10,30}})));
      Modelica.Blocks.Sources.RealExpression BV_opening(y=opening_BV)
        annotation (Placement(transformation(extent={{-10,-50},{10,-30}})));
      Modelica.Blocks.Sources.RealExpression TDV_opening(y=opening_TDV)
        annotation (Placement(transformation(extent={{-10,-20},{10,0}})));
      Modelica.Blocks.Sources.RealExpression BV_TCV_opening(y=opening_BV_TCV)
        annotation (Placement(transformation(extent={{-10,-80},{10,-60}})));

    equation
      connect(actuatorBus.opening_TCV, TCV_opening.y)
        annotation (Line(
          points={{30.1,-99.9},{30.1,20},{11,20}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.opening_BV, BV_opening.y) annotation (
          Line(
          points={{30.1,-99.9},{30.1,-40},{11,-40}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.opening_TDV, TDV_opening.y)
        annotation (Line(
          points={{30.1,-99.9},{30.1,-10},{11,-10}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.opening_BV_TCV, BV_TCV_opening.y)
        annotation (Line(
          points={{30.1,-99.9},{30.1,-70},{11,-70}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      annotation (defaultComponentName="CS",
      Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end CS_UserDefined;

    model CS_PressureAndPowerControl
      extends BaseClasses.Partial_ControlSystem;

      parameter SI.Time delayStartTCV = 300 "Delay start of TCV control";
      parameter SI.Time delayStartBV = delayStartTCV "Delay start of BV control";

      parameter SI.Pressure p_nominal "Nominal steam turbine pressure";

      parameter Real TCV_opening_nominal = 0.5 "Nominal opening of TCV - controls power";
      parameter Real BV_opening_nominal = 0.001 "Nominal opening of BV - controls pressure";

      input SI.Power W_totalSetpoint "Total setpoint power from BOP" annotation(Dialog(group="Inputs"));

      Modelica.Blocks.Sources.Constant TCV_openingNominal(k=TCV_opening_nominal)
        annotation (Placement(transformation(extent={{-180,150},{-160,170}})));
      Modelica.Blocks.Logical.Switch switch_BV
        annotation (Placement(transformation(extent={{40,12},{60,32}})));
      Modelica.Blocks.Sources.Constant BV_openingNominal(k=BV_opening_nominal)
        annotation (Placement(transformation(extent={{-180,-40},{-160,-20}})));
      Modelica.Blocks.Logical.Greater greater5
        annotation (Placement(transformation(extent={{-140,210},{-120,190}})));
      Modelica.Blocks.Sources.ContinuousClock clock(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-180,60},{-160,80}})));
      Modelica.Blocks.Sources.Constant valvedelay(k=delayStartTCV)
        annotation (Placement(transformation(extent={{-180,210},{-160,230}})));
      TRANSFORM.Controls.LimPID
                           PID_TCV_opening(
        yMax=1 -TCV_openingNominal.k,
        yMin=-TCV_openingNominal.k + 0.0001,
        k_s=0.25e-8,
        k_m=0.25e-8,
        controllerType=Modelica.Blocks.Types.SimpleController.PI)
               annotation (Placement(transformation(extent={{-60,220},{-40,240}})));
      Modelica.Blocks.Logical.Switch switch_W_setpoint
        annotation (Placement(transformation(extent={{-100,190},{-80,210}})));
      Modelica.Blocks.Logical.Switch switch_TCV_setpoint
        annotation (Placement(transformation(extent={{40,212},{60,232}})));
      Modelica.Blocks.Sources.Constant TCV_diffopeningNominal(k=0)
        annotation (Placement(transformation(extent={{0,190},{20,210}})));
      Modelica.Blocks.Math.Add TCV_opening
        annotation (Placement(transformation(extent={{80,170},{100,190}})));
      Modelica.Blocks.Sources.Constant p_Nominal(k=p_nominal)
        annotation (Placement(transformation(extent={{-180,-10},{-160,10}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint
        annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
      Modelica.Blocks.Sources.Constant valvedelayBV(k=delayStartBV)
        annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
      Modelica.Blocks.Logical.Greater greater1
        annotation (Placement(transformation(extent={{-140,20},{-120,0}})));
      TRANSFORM.Controls.LimPID PID_BV_opening(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        yMax=1 - BV_openingNominal.k,
        yMin=-BV_openingNominal.k + 0.0001,
        k=-1,
        k_s=1/p_nominal,
        k_m=1/p_nominal)
        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
      Modelica.Blocks.Math.Add BV_opening
        annotation (Placement(transformation(extent={{80,-10},{100,10}})));
      Modelica.Blocks.Sources.Constant BV_diffopeningNominal(k=0)
        annotation (Placement(transformation(extent={{0,-10},{20,10}})));
      Modelica.Blocks.Sources.RealExpression W_totalSetpoint_BOP(y=W_totalSetpoint)
        annotation (Placement(transformation(extent={{-140,220},{-120,240}})));
    equation

      connect(clock.y, greater5.u1) annotation (Line(points={{-159,70},{-150,70},{-150,
              200},{-142,200}},
                              color={0,0,127}));
      connect(valvedelay.y, greater5.u2) annotation (Line(points={{-159,220},{-150,220},
              {-150,208},{-142,208}},
                                    color={0,0,127}));
      connect(greater5.y,switch_W_setpoint. u2)
        annotation (Line(points={{-119,200},{-102,200}},
                                                       color={255,0,255}));
      connect(TCV_diffopeningNominal.y, switch_TCV_setpoint.u3) annotation (Line(
            points={{21,200},{30,200},{30,214},{38,214}},
                                                      color={0,0,127}));
      connect(switch_TCV_setpoint.u1,PID_TCV_opening. y)
        annotation (Line(points={{38,230},{-39,230}},     color={0,0,127}));
      connect(switch_TCV_setpoint.u2,switch_W_setpoint. u2) annotation (Line(points={{38,222},
              {-30,222},{-30,184},{-108,184},{-108,200},{-102,200}},
            color={255,0,255}));
      connect(switch_TCV_setpoint.y,TCV_opening. u1) annotation (Line(points={{61,222},
              {70,222},{70,186},{78,186}},  color={0,0,127}));
      connect(TCV_openingNominal.y,TCV_opening. u2) annotation (Line(points={{-159,160},
              {20,160},{20,174},{78,174}},
                                        color={0,0,127}));
      connect(actuatorBus.opening_TCV, TCV_opening.y)
        annotation (Line(
          points={{30.1,-99.9},{160,-99.9},{160,180},{101,180}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.W_total,switch_W_setpoint. u1) annotation (Line(
          points={{-29.9,-99.9},{-110,-99.9},{-110,208},{-102,208}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(valvedelayBV.y, greater1.u2) annotation (Line(points={{-159,30},{-146,
              30},{-146,18},{-142,18}}, color={0,0,127}));
      connect(greater1.y, switch_P_setpoint.u2)
        annotation (Line(points={{-119,10},{-102,10}},   color={255,0,255}));
      connect(sensorBus.p_inlet_steamTurbine, switch_P_setpoint.u1)
        annotation (Line(
          points={{-29.9,-99.9},{-110,-99.9},{-110,18},{-102,18}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(p_Nominal.y, switch_P_setpoint.u3) annotation (Line(points={{-159,0},
              {-156,0},{-156,-14},{-114,-14},{-114,2},{-102,2}},       color={0,0,127}));
      connect(switch_P_setpoint.y, PID_BV_opening.u_m) annotation (Line(points={{-79,
              10},{-64,10},{-64,18},{-50,18}}, color={0,0,127}));
      connect(PID_BV_opening.u_s, switch_P_setpoint.u3) annotation (Line(points={{-62,
              30},{-114,30},{-114,2},{-102,2}}, color={0,0,127}));
      connect(greater1.u1, greater5.u1) annotation (Line(points={{-142,10},{-150,10},
              {-150,200},{-142,200}},
                                    color={0,0,127}));
      connect(BV_openingNominal.y, BV_opening.u2) annotation (Line(points={{-159,-30},
              {30,-30},{30,-6},{78,-6}}, color={0,0,127}));
      connect(switch_BV.y, BV_opening.u1)
        annotation (Line(points={{61,22},{70,22},{70,6},{78,6}}, color={0,0,127}));
      connect(PID_BV_opening.y, switch_BV.u1)
        annotation (Line(points={{-39,30},{38,30}}, color={0,0,127}));
      connect(switch_BV.u2, switch_P_setpoint.u2) annotation (Line(points={{38,22},{
              -30,22},{-30,-16},{-106,-16},{-106,10},{-102,10}}, color={255,0,255}));
      connect(BV_diffopeningNominal.y, switch_BV.u3)
        annotation (Line(points={{21,0},{30,0},{30,14},{38,14}}, color={0,0,127}));
      connect(switch_W_setpoint.y, PID_TCV_opening.u_m)
        annotation (Line(points={{-79,200},{-50,200},{-50,218}},
                                                              color={0,0,127}));
      connect(actuatorBus.opening_BV, BV_opening.y) annotation (
          Line(
          points={{30.1,-99.9},{160,-99.9},{160,0},{101,0}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(W_totalSetpoint_BOP.y, PID_TCV_opening.u_s)
        annotation (Line(points={{-119,230},{-62,230}}, color={0,0,127}));
      connect(switch_W_setpoint.u3, PID_TCV_opening.u_s) annotation (Line(points={{
              -102,192},{-114,192},{-114,230},{-62,230}}, color={0,0,127}));
    annotation (defaultComponentName="EM_CS",
    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
                                                       Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-180,-100},{160,260}})));
    end CS_PressureAndPowerControl;

    model CS_InputSetpoint
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      Modelica.Blocks.Math.Gain Q_normal_gain(k=0.25e-8)
        annotation (Placement(transformation(extent={{-20,20},{0,40}})));
      Modelica.Blocks.Math.Gain Q_normal_gain1(k=0.25e-8) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={10,-10})));
      TRANSFORM.Controls.LimPID
                           PID_TCV_opening(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        yMax=1,
        yMin=-1,
        k=0.1,
        Ti=95) annotation (Placement(transformation(extent={{20,20},{40,40}})));
      Modelica.Blocks.Logical.Switch switch_Q_setpoint
        annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
      Modelica.Blocks.Sources.Constant TCV_opening_nominal(k=0.5)
        annotation (Placement(transformation(extent={{20,80},{40,100}})));
      Modelica.Blocks.Math.Add TCV_opening
        annotation (Placement(transformation(extent={{100,60},{120,80}})));
      Modelica.Blocks.Sources.ContinuousClock clock
        annotation (Placement(transformation(extent={{-140,0},{-120,20}})));
      Modelica.Blocks.Sources.Constant TCVDelay(k=delayStartTCV)
        annotation (Placement(transformation(extent={{-140,-40},{-120,-20}})));
      Modelica.Blocks.Logical.Less less
        annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
      parameter SI.Time delayStartTCV=100 "Delay TCV control";
      Modelica.Blocks.Logical.Switch switch_Q_setpoint1
        annotation (Placement(transformation(extent={{64,20},{84,40}})));
      Modelica.Blocks.Sources.Constant const(k=0)
        annotation (Placement(transformation(extent={{20,50},{40,70}})));
    equation
      connect(switch_Q_setpoint.y, Q_normal_gain1.u)
        annotation (Line(points={{-39,-10},{-2,-10}}, color={0,0,127}));
      connect(Q_normal_gain1.y, PID_TCV_opening.u_m)
        annotation (Line(points={{21,-10},{30,-10},{30,18}}, color={0,0,127}));
      connect(TCV_opening_nominal.y, TCV_opening.u1) annotation (Line(points={{41,90},
              {50,90},{50,76},{98,76}}, color={0,0,127}));
      connect(Q_normal_gain.y, PID_TCV_opening.u_s)
        annotation (Line(points={{1,30},{18,30}}, color={0,0,127}));
      connect(clock.y, less.u1) annotation (Line(points={{-119,10},{-110,10},{-110,
              -10},{-102,-10}}, color={0,0,127}));
      connect(TCVDelay.y, less.u2) annotation (Line(points={{-119,-30},{-110,-30},{-110,
              -18},{-102,-18}}, color={0,0,127}));
      connect(less.y, switch_Q_setpoint.u2) annotation (Line(points={{-79,-10},{-70,
              -10},{-62,-10}}, color={255,0,255}));
      connect(PID_TCV_opening.y, switch_Q_setpoint1.u3) annotation (Line(points={{
              41,30},{50,30},{50,22},{62,22}}, color={0,0,127}));
      connect(switch_Q_setpoint1.u2, switch_Q_setpoint.u2) annotation (Line(points=
              {{62,30},{52,30},{52,10},{-68,10},{-68,-10},{-62,-10}}, color={255,0,
              255}));
      connect(switch_Q_setpoint1.y, TCV_opening.u2) annotation (Line(points={{85,30},
              {90,30},{90,64},{98,64}}, color={0,0,127}));
      connect(const.y, switch_Q_setpoint1.u1) annotation (Line(points={{41,60},{50,
              60},{50,38},{62,38}}, color={0,0,127}));
      connect(sensorBus.W_totalSetpoint, Q_normal_gain.u) annotation (
          Line(
          points={{-29.9,-99.9},{-52,-99.9},{-72,-99.9},{-72,30},{-22,30}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.W_total, switch_Q_setpoint.u3) annotation (Line(
          points={{-29.9,-99.9},{-72,-99.9},{-72,-18},{-62,-18}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.W_totalSetpoint, switch_Q_setpoint.u1)
        annotation (Line(
          points={{-29.9,-99.9},{-52,-99.9},{-72,-99.9},{-72,-2},{-62,-2}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.opening_TCV, TCV_opening.y) annotation (Line(
          points={{30.1,-99.9},{116,-99.9},{200,-99.9},{200,70},{121,70}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      annotation (defaultComponentName="CS",
      Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
                                                         Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-200,-100},{200,
                140}})));
    end CS_InputSetpoint;

    model CS_OTSG_Pressure
      extends BaseClasses.Partial_ControlSystem;

      parameter SI.Time delayStartTCV = 300 "Delay start of TCV control";
      parameter SI.Time delayStartBV = delayStartTCV "Delay start of BV control";

      parameter SI.Pressure p_nominal "Nominal steam turbine pressure";
      //parameter SI.Pressure

      parameter Real TCV_opening_nominal = 0.5 "Nominal opening of TCV - controls power";
      parameter Real BV_opening_nominal = 0.001 "Nominal opening of BV - controls pressure";

      input SI.Power W_totalSetpoint "Total setpoint power from BOP" annotation(Dialog(group="Inputs"));
      //input SI.Power W_totalSetpoint "Total setpoint power from BOP" annotation(Dialog(group="Inputs"));
      input SI.Power Reactor_Power "Reactor Power Level" annotation(Dialog(group="Inputs"));
      input SI.Power Nominal_Power "Nominal Power Level" annotation(Dialog(group="Inputs"));
      Modelica.Blocks.Sources.Constant TCV_openingNominal(k=TCV_opening_nominal)
        annotation (Placement(transformation(extent={{-180,150},{-160,170}})));
      Modelica.Blocks.Logical.Switch switch_BV
        annotation (Placement(transformation(extent={{40,12},{60,32}})));
      Modelica.Blocks.Sources.Constant BV_openingNominal(k=BV_opening_nominal)
        annotation (Placement(transformation(extent={{-180,-40},{-160,-20}})));
      Modelica.Blocks.Logical.Greater greater5
        annotation (Placement(transformation(extent={{-140,210},{-120,190}})));
      Modelica.Blocks.Sources.ContinuousClock clock(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-180,60},{-160,80}})));
      Modelica.Blocks.Sources.Constant valvedelay(k=delayStartTCV)
        annotation (Placement(transformation(extent={{-180,210},{-160,230}})));
      TRANSFORM.Controls.LimPID
                           PID_TCV_opening(
        yMax=1 -TCV_openingNominal.k,
        yMin=-TCV_openingNominal.k + 0.0001,
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k_s=0.25e-7,
        k_m=0.25e-7)
               annotation (Placement(transformation(extent={{-60,220},{-40,240}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV
        annotation (Placement(transformation(extent={{-100,190},{-80,210}})));
      Modelica.Blocks.Logical.Switch switch_TCV_setpoint
        annotation (Placement(transformation(extent={{40,212},{60,232}})));
      Modelica.Blocks.Sources.Constant TCV_diffopeningNominal(k=0)
        annotation (Placement(transformation(extent={{0,190},{20,210}})));
      Modelica.Blocks.Math.Add TCV_opening
        annotation (Placement(transformation(extent={{80,170},{100,190}})));
      Modelica.Blocks.Sources.Constant p_Nominal(k=p_nominal)
        annotation (Placement(transformation(extent={{-180,-10},{-160,10}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint
        annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
      Modelica.Blocks.Sources.Constant valvedelayBV(k=delayStartBV)
        annotation (Placement(transformation(extent={{-180,24},{-160,44}})));
      Modelica.Blocks.Logical.Greater greater1
        annotation (Placement(transformation(extent={{-140,20},{-120,0}})));
      TRANSFORM.Controls.LimPID PID_BV_opening(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        yMax=1 - BV_openingNominal.k,
        yMin=-BV_openingNominal.k + 0.0001,
        k=-1,
        k_s=1/p_nominal,
        k_m=1/p_nominal)
        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
      Modelica.Blocks.Math.Add BV_opening
        annotation (Placement(transformation(extent={{80,-10},{100,10}})));
      Modelica.Blocks.Sources.Constant BV_diffopeningNominal(k=0)
        annotation (Placement(transformation(extent={{0,-10},{20,10}})));
      Modelica.Blocks.Sources.Constant p_Nominal1(k=p_nominal)
        annotation (Placement(transformation(extent={{-146,230},{-126,250}})));
    equation

      connect(clock.y, greater5.u1) annotation (Line(points={{-159,70},{-150,70},{-150,
              200},{-142,200}},
                              color={0,0,127}));
      connect(valvedelay.y, greater5.u2) annotation (Line(points={{-159,220},{-150,220},
              {-150,208},{-142,208}},
                                    color={0,0,127}));
      connect(greater5.y, switch_P_setpoint_TCV.u2)
        annotation (Line(points={{-119,200},{-102,200}}, color={255,0,255}));
      connect(TCV_diffopeningNominal.y, switch_TCV_setpoint.u3) annotation (Line(
            points={{21,200},{30,200},{30,214},{38,214}},
                                                      color={0,0,127}));
      connect(switch_TCV_setpoint.u1,PID_TCV_opening. y)
        annotation (Line(points={{38,230},{-39,230}},     color={0,0,127}));
      connect(switch_TCV_setpoint.u2, switch_P_setpoint_TCV.u2) annotation (Line(
            points={{38,222},{-30,222},{-30,184},{-108,184},{-108,200},{-102,200}},
            color={255,0,255}));
      connect(switch_TCV_setpoint.y,TCV_opening. u1) annotation (Line(points={{61,222},
              {70,222},{70,186},{78,186}},  color={0,0,127}));
      connect(TCV_openingNominal.y,TCV_opening. u2) annotation (Line(points={{-159,160},
              {20,160},{20,174},{78,174}},
                                        color={0,0,127}));
      connect(actuatorBus.opening_TCV, TCV_opening.y)
        annotation (Line(
          points={{30.1,-99.9},{160,-99.9},{160,180},{101,180}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(valvedelayBV.y, greater1.u2) annotation (Line(points={{-159,34},{-146,
              34},{-146,18},{-142,18}}, color={0,0,127}));
      connect(greater1.y, switch_P_setpoint.u2)
        annotation (Line(points={{-119,10},{-102,10}},   color={255,0,255}));
      connect(p_Nominal.y, switch_P_setpoint.u3) annotation (Line(points={{-159,0},
              {-156,0},{-156,-14},{-114,-14},{-114,2},{-102,2}},       color={0,0,127}));
      connect(switch_P_setpoint.y, PID_BV_opening.u_m) annotation (Line(points={{-79,
              10},{-64,10},{-64,18},{-50,18}}, color={0,0,127}));
      connect(PID_BV_opening.u_s, switch_P_setpoint.u3) annotation (Line(points={{-62,
              30},{-114,30},{-114,2},{-102,2}}, color={0,0,127}));
      connect(greater1.u1, greater5.u1) annotation (Line(points={{-142,10},{-150,10},
              {-150,200},{-142,200}},
                                    color={0,0,127}));
      connect(BV_openingNominal.y, BV_opening.u2) annotation (Line(points={{-159,-30},
              {30,-30},{30,-6},{78,-6}}, color={0,0,127}));
      connect(switch_BV.y, BV_opening.u1)
        annotation (Line(points={{61,22},{70,22},{70,6},{78,6}}, color={0,0,127}));
      connect(PID_BV_opening.y, switch_BV.u1)
        annotation (Line(points={{-39,30},{38,30}}, color={0,0,127}));
      connect(switch_BV.u2, switch_P_setpoint.u2) annotation (Line(points={{38,22},{
              -30,22},{-30,-16},{-106,-16},{-106,10},{-102,10}}, color={255,0,255}));
      connect(BV_diffopeningNominal.y, switch_BV.u3)
        annotation (Line(points={{21,0},{30,0},{30,14},{38,14}}, color={0,0,127}));
      connect(actuatorBus.opening_BV, BV_opening.y) annotation (
          Line(
          points={{30.1,-99.9},{160,-99.9},{160,0},{101,0}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.p_inlet_steamTurbine, switch_P_setpoint_TCV.u1) annotation (
         Line(
          points={{-29.9,-99.9},{-110,-99.9},{-110,208},{-102,208}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(p_Nominal.y, switch_P_setpoint.u1) annotation (Line(points={{-159,0},
              {-142,0},{-142,-6},{-116,-6},{-116,18},{-102,18}}, color={0,0,127}));
      connect(p_Nominal1.y, switch_P_setpoint_TCV.u3) annotation (Line(points={{
              -125,240},{-114,240},{-114,192},{-102,192}}, color={0,0,127}));
      connect(p_Nominal1.y, PID_TCV_opening.u_m) annotation (Line(points={{-125,240},
              {-82,240},{-82,224},{-64,224},{-64,206},{-50,206},{-50,218}}, color={
              0,0,127}));
      connect(switch_P_setpoint_TCV.y, PID_TCV_opening.u_s) annotation (Line(points=
             {{-79,200},{-72,200},{-72,230},{-62,230}}, color={0,0,127}));
    annotation (defaultComponentName="EM_CS",
    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
                                                       Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-180,-100},{160,260}})));
    end CS_OTSG_Pressure;

    model CS_OTSG_Power_Control
      extends BaseClasses.Partial_ControlSystem;

      parameter SI.Time delayStartTCV = 300 "Delay start of TCV control";
      parameter SI.Time delayStartBV = delayStartTCV "Delay start of BV control";

      parameter SI.Pressure p_overpressure = 100e5 "OverPressure steam turbine pressure";
      parameter SI.Pressure p_nominal = 50e5 "Nominal steam pressure";

      parameter Real TCV_opening_nominal = 0.5 "Nominal opening of TCV - controls power";
      parameter Real BV_opening_nominal = 0.001 "Nominal opening of BV - controls pressure";

      input SI.Power W_totalSetpoint "Total setpoint power from BOP" annotation(Dialog(group="Inputs"));
      input SI.Power Reactor_Power "Reactor Power Level" annotation(Dialog(group="Inputs"));
      input SI.Power Nominal_Power "Nominal Power Level" annotation(Dialog(group="Inputs"));
      Modelica.Blocks.Sources.Constant TCV_openingNominal(k=TCV_opening_nominal)
        annotation (Placement(transformation(extent={{-180,150},{-160,170}})));
      Modelica.Blocks.Logical.Switch switch_BV
        annotation (Placement(transformation(extent={{40,12},{60,32}})));
      Modelica.Blocks.Sources.Constant BV_openingNominal(k=BV_opening_nominal)
        annotation (Placement(transformation(extent={{-180,-82},{-160,-62}})));
      Modelica.Blocks.Logical.Greater greater5
        annotation (Placement(transformation(extent={{-140,210},{-120,190}})));
      Modelica.Blocks.Sources.ContinuousClock clock(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-180,60},{-160,80}})));
      Modelica.Blocks.Sources.Constant valvedelay(k=delayStartTCV)
        annotation (Placement(transformation(extent={{-180,210},{-160,230}})));
      TRANSFORM.Controls.LimPID
                           PID_TCV_opening(
        yMax=1 -TCV_openingNominal.k,
        yMin=-TCV_openingNominal.k + 0.0001,
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k_s=0.25e-8,
        k_m=0.25e-8)
               annotation (Placement(transformation(extent={{-60,220},{-40,240}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV
        annotation (Placement(transformation(extent={{-100,190},{-80,210}})));
      Modelica.Blocks.Logical.Switch switch_TCV_setpoint
        annotation (Placement(transformation(extent={{40,212},{60,232}})));
      Modelica.Blocks.Sources.Constant TCV_diffopeningNominal(k=0)
        annotation (Placement(transformation(extent={{0,190},{20,210}})));
      Modelica.Blocks.Math.Add TCV_opening
        annotation (Placement(transformation(extent={{80,170},{100,190}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint
        annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
      Modelica.Blocks.Sources.Constant valvedelayBV(k=delayStartBV)
        annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
      Modelica.Blocks.Logical.Greater greater1
        annotation (Placement(transformation(extent={{-140,20},{-120,0}})));
      TRANSFORM.Controls.LimPID PID_BV_opening(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        yMax=1 - BV_openingNominal.k,
        yMin=-BV_openingNominal.k + 0.0001,
        k=1,
        Ti=10,
        k_s=1/(12.5*160e6),
        k_m=1/(12.5*160e6))
        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
      Modelica.Blocks.Math.Add BV_opening
        annotation (Placement(transformation(extent={{80,-10},{100,10}})));
      Modelica.Blocks.Sources.Constant BV_diffopeningNominal(k=0)
        annotation (Placement(transformation(extent={{0,-10},{20,10}})));
      Modelica.Blocks.Sources.RealExpression
                                       Power_Nominal(y=Nominal_Power)
        annotation (Placement(transformation(extent={{-180,-22},{-160,-2}})));
      Modelica.Blocks.Sources.RealExpression Power_Level(y=Reactor_Power)
        annotation (Placement(transformation(extent={{-180,-40},{-160,-20}})));
      Modelica.Blocks.Sources.Constant p_Nominal1(k=p_nominal)
        annotation (Placement(transformation(extent={{-138,220},{-118,240}})));
    equation

      connect(clock.y, greater5.u1) annotation (Line(points={{-159,70},{-150,70},{-150,
              200},{-142,200}},
                              color={0,0,127}));
      connect(valvedelay.y, greater5.u2) annotation (Line(points={{-159,220},{-150,220},
              {-150,208},{-142,208}},
                                    color={0,0,127}));
      connect(greater5.y, switch_P_setpoint_TCV.u2)
        annotation (Line(points={{-119,200},{-102,200}}, color={255,0,255}));
      connect(TCV_diffopeningNominal.y, switch_TCV_setpoint.u3) annotation (Line(
            points={{21,200},{30,200},{30,214},{38,214}},
                                                      color={0,0,127}));
      connect(switch_TCV_setpoint.u1,PID_TCV_opening. y)
        annotation (Line(points={{38,230},{-39,230}},     color={0,0,127}));
      connect(switch_TCV_setpoint.u2, switch_P_setpoint_TCV.u2) annotation (Line(
            points={{38,222},{-30,222},{-30,184},{-108,184},{-108,200},{-102,200}},
            color={255,0,255}));
      connect(switch_TCV_setpoint.y,TCV_opening. u1) annotation (Line(points={{61,222},
              {70,222},{70,186},{78,186}},  color={0,0,127}));
      connect(TCV_openingNominal.y,TCV_opening. u2) annotation (Line(points={{-159,160},
              {20,160},{20,174},{78,174}},
                                        color={0,0,127}));
      connect(actuatorBus.opening_TCV, TCV_opening.y)
        annotation (Line(
          points={{30.1,-99.9},{160,-99.9},{160,180},{101,180}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(valvedelayBV.y, greater1.u2) annotation (Line(points={{-159,30},{-146,
              30},{-146,18},{-142,18}}, color={0,0,127}));
      connect(greater1.y, switch_P_setpoint.u2)
        annotation (Line(points={{-119,10},{-102,10}},   color={255,0,255}));
      connect(switch_P_setpoint.y, PID_BV_opening.u_m) annotation (Line(points={{-79,
              10},{-64,10},{-64,18},{-50,18}}, color={0,0,127}));
      connect(greater1.u1, greater5.u1) annotation (Line(points={{-142,10},{-150,10},
              {-150,200},{-142,200}},
                                    color={0,0,127}));
      connect(BV_openingNominal.y, BV_opening.u2) annotation (Line(points={{-159,-72},
              {30,-72},{30,-6},{78,-6}}, color={0,0,127}));
      connect(switch_BV.y, BV_opening.u1)
        annotation (Line(points={{61,22},{70,22},{70,6},{78,6}}, color={0,0,127}));
      connect(PID_BV_opening.y, switch_BV.u1)
        annotation (Line(points={{-39,30},{38,30}}, color={0,0,127}));
      connect(switch_BV.u2, switch_P_setpoint.u2) annotation (Line(points={{38,22},{
              -30,22},{-30,-16},{-106,-16},{-106,10},{-102,10}}, color={255,0,255}));
      connect(BV_diffopeningNominal.y, switch_BV.u3)
        annotation (Line(points={{21,0},{30,0},{30,14},{38,14}}, color={0,0,127}));
      connect(actuatorBus.opening_BV, BV_opening.y) annotation (
          Line(
          points={{30.1,-99.9},{160,-99.9},{160,0},{101,0}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.W_total, switch_P_setpoint_TCV.u1) annotation (Line(
          points={{-29.9,-99.9},{-110,-99.9},{-110,208},{-102,208}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(switch_P_setpoint_TCV.y, PID_TCV_opening.u_m)
        annotation (Line(points={{-79,200},{-50,200},{-50,218}}, color={0,0,127}));
      connect(Power_Nominal.y, PID_BV_opening.u_s) annotation (Line(points={{-159,-12},
              {-114,-12},{-114,30},{-62,30}}, color={0,0,127}));
      connect(Power_Level.y, switch_P_setpoint.u1) annotation (Line(points={{-159,
              -30},{-132,-30},{-132,-28},{-108,-28},{-108,18},{-102,18}}, color={0,
              0,127}));
      connect(Power_Nominal.y, switch_P_setpoint.u3) annotation (Line(points={{-159,
              -12},{-112,-12},{-112,2},{-102,2}}, color={0,0,127}));
      connect(p_Nominal1.y, PID_TCV_opening.u_s)
        annotation (Line(points={{-117,230},{-62,230}}, color={0,0,127}));
      connect(p_Nominal1.y, switch_P_setpoint_TCV.u3) annotation (Line(points={{
              -117,230},{-114,230},{-114,192},{-102,192}}, color={0,0,127}));
    annotation (defaultComponentName="EM_CS",
    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
                                                       Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-180,-100},{160,260}})));
    end CS_OTSG_Power_Control;

    model CS_OTSG_TCV_Pressure_TBV_Power_Control
      extends BaseClasses.Partial_ControlSystem;

      parameter SI.Time delayStartTCV = 300 "Delay start of TCV control";
      parameter SI.Time delayStartBV = delayStartTCV "Delay start of BV control";

      parameter SI.Pressure p_nominal "Steam Pressure";
      //parameter SI.Pressure

      parameter Real TCV_opening_nominal = 0.5 "Nominal opening of TCV - controls power";
      parameter Real BV_opening_nominal = 0.001 "Nominal opening of BV - controls pressure";

      input SI.Power W_totalSetpoint "Total setpoint power from BOP" annotation(Dialog(group="Inputs"));

      Modelica.Blocks.Sources.Constant TCV_openingNominal(k=TCV_opening_nominal)
        annotation (Placement(transformation(extent={{-180,150},{-160,170}})));
      Modelica.Blocks.Logical.Switch switch_BV
        annotation (Placement(transformation(extent={{40,12},{60,32}})));
      Modelica.Blocks.Sources.Constant BV_openingNominal(k=BV_opening_nominal)
        annotation (Placement(transformation(extent={{-180,-82},{-160,-62}})));
      Modelica.Blocks.Logical.Greater greater5
        annotation (Placement(transformation(extent={{-140,210},{-120,190}})));
      Modelica.Blocks.Sources.ContinuousClock clock(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-180,60},{-160,80}})));
      Modelica.Blocks.Sources.Constant valvedelay(k=delayStartTCV)
        annotation (Placement(transformation(extent={{-180,210},{-160,230}})));
      TRANSFORM.Controls.LimPID
                           PID_TCV_opening(
        yMax=1 -TCV_openingNominal.k,
        yMin=-TCV_openingNominal.k + 0.0001,
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k_s=0.25e-8,
        k_m=0.25e-8)
               annotation (Placement(transformation(extent={{-60,240},{-40,220}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV
        annotation (Placement(transformation(extent={{-100,190},{-80,210}})));
      Modelica.Blocks.Logical.Switch switch_TCV_setpoint
        annotation (Placement(transformation(extent={{40,212},{60,232}})));
      Modelica.Blocks.Sources.Constant TCV_diffopeningNominal(k=0)
        annotation (Placement(transformation(extent={{0,190},{20,210}})));
      Modelica.Blocks.Math.Add TCV_opening
        annotation (Placement(transformation(extent={{80,170},{100,190}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint
        annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
      Modelica.Blocks.Sources.Constant valvedelayBV(k=delayStartBV)
        annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
      Modelica.Blocks.Logical.Greater greater1
        annotation (Placement(transformation(extent={{-140,20},{-120,0}})));
      TRANSFORM.Controls.LimPID PID_BV_opening(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        yMax=1 - BV_openingNominal.k,
        yMin=-BV_openingNominal.k + 0.0001,
        Ti=10,
        k_s=1/(12.5*160e6),
        k_m=1/(12.5*160e6),
        k=-1)
        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
      Modelica.Blocks.Math.Add BV_opening
        annotation (Placement(transformation(extent={{80,-10},{100,10}})));
      Modelica.Blocks.Sources.Constant BV_diffopeningNominal(k=0)
        annotation (Placement(transformation(extent={{0,-10},{20,10}})));
      Modelica.Blocks.Sources.RealExpression
                                       Power_Nominal(y=W_totalSetpoint)
        annotation (Placement(transformation(extent={{-180,-22},{-160,-2}})));
      Modelica.Blocks.Sources.Constant p_Nominal1(k=p_nominal)
        annotation (Placement(transformation(extent={{-138,220},{-118,240}})));
    equation

      connect(clock.y, greater5.u1) annotation (Line(points={{-159,70},{-150,70},{-150,
              200},{-142,200}},
                              color={0,0,127}));
      connect(valvedelay.y, greater5.u2) annotation (Line(points={{-159,220},{-150,220},
              {-150,208},{-142,208}},
                                    color={0,0,127}));
      connect(greater5.y, switch_P_setpoint_TCV.u2)
        annotation (Line(points={{-119,200},{-102,200}}, color={255,0,255}));
      connect(TCV_diffopeningNominal.y, switch_TCV_setpoint.u3) annotation (Line(
            points={{21,200},{30,200},{30,214},{38,214}},
                                                      color={0,0,127}));
      connect(switch_TCV_setpoint.u1,PID_TCV_opening. y)
        annotation (Line(points={{38,230},{-39,230}},     color={0,0,127}));
      connect(switch_TCV_setpoint.u2, switch_P_setpoint_TCV.u2) annotation (Line(
            points={{38,222},{-30,222},{-30,184},{-108,184},{-108,200},{-102,200}},
            color={255,0,255}));
      connect(switch_TCV_setpoint.y,TCV_opening. u1) annotation (Line(points={{61,222},
              {70,222},{70,186},{78,186}},  color={0,0,127}));
      connect(TCV_openingNominal.y,TCV_opening. u2) annotation (Line(points={{-159,
              160},{0,160},{0,174},{78,174}},
                                        color={0,0,127}));
      connect(actuatorBus.opening_TCV, TCV_opening.y)
        annotation (Line(
          points={{30.1,-99.9},{160,-99.9},{160,180},{101,180}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(valvedelayBV.y, greater1.u2) annotation (Line(points={{-159,30},{-146,
              30},{-146,18},{-142,18}}, color={0,0,127}));
      connect(greater1.y, switch_P_setpoint.u2)
        annotation (Line(points={{-119,10},{-102,10}},   color={255,0,255}));
      connect(switch_P_setpoint.y, PID_BV_opening.u_m) annotation (Line(points={{-79,
              10},{-64,10},{-64,18},{-50,18}}, color={0,0,127}));
      connect(greater1.u1, greater5.u1) annotation (Line(points={{-142,10},{-150,10},
              {-150,200},{-142,200}},
                                    color={0,0,127}));
      connect(BV_openingNominal.y, BV_opening.u2) annotation (Line(points={{-159,-72},
              {30,-72},{30,-6},{78,-6}}, color={0,0,127}));
      connect(switch_BV.y, BV_opening.u1)
        annotation (Line(points={{61,22},{70,22},{70,6},{78,6}}, color={0,0,127}));
      connect(PID_BV_opening.y, switch_BV.u1)
        annotation (Line(points={{-39,30},{38,30}}, color={0,0,127}));
      connect(switch_BV.u2, switch_P_setpoint.u2) annotation (Line(points={{38,22},{
              -30,22},{-30,-16},{-106,-16},{-106,10},{-102,10}}, color={255,0,255}));
      connect(BV_diffopeningNominal.y, switch_BV.u3)
        annotation (Line(points={{21,0},{30,0},{30,14},{38,14}}, color={0,0,127}));
      connect(actuatorBus.opening_BV, BV_opening.y) annotation (
          Line(
          points={{30.1,-99.9},{160,-99.9},{160,0},{101,0}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(Power_Nominal.y, PID_BV_opening.u_s) annotation (Line(points={{-159,-12},
              {-114,-12},{-114,30},{-62,30}}, color={0,0,127}));
      connect(Power_Nominal.y, switch_P_setpoint.u3) annotation (Line(points={{-159,
              -12},{-112,-12},{-112,2},{-102,2}}, color={0,0,127}));
      connect(p_Nominal1.y, switch_P_setpoint_TCV.u3) annotation (Line(points={{-117,
              230},{-114,230},{-114,192},{-102,192}}, color={0,0,127}));
      connect(sensorBus.W_total, switch_P_setpoint.u1) annotation (Line(
          points={{-29.9,-99.9},{-110,-99.9},{-110,18},{-102,18}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.p_inlet_steamTurbine, switch_P_setpoint_TCV.u1) annotation (
         Line(
          points={{-29.9,-99.9},{-110,-99.9},{-110,208},{-102,208}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(p_Nominal1.y, PID_TCV_opening.u_m) annotation (Line(points={{-117,230},
              {-84,230},{-84,248},{-50,248},{-50,242}}, color={0,0,127}));
      connect(switch_P_setpoint_TCV.y, PID_TCV_opening.u_s) annotation (Line(points=
             {{-79,200},{-72,200},{-72,230},{-62,230}}, color={0,0,127}));
    annotation (defaultComponentName="EM_CS",
    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
                                                       Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-180,-100},{160,260}})));
    end CS_OTSG_TCV_Pressure_TBV_Power_Control;

    model ED_Dummy

      extends BaseClasses.Partial_EventDriver;

      extends NHES.Icons.DummyIcon;

    equation

    annotation(defaultComponentName="PHS_CS");
    end ED_Dummy;

    model CS_Rankine_Xe100_Based_Secondary

      extends BaseClasses.Partial_ControlSystem;

      TRANSFORM.Controls.LimPID FWCP_Speed(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-1e-2,
        Ti=30,
        yMax=750,
        yMin=-1000,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-40,16},{-20,36}})));
      Modelica.Blocks.Sources.Constant const3(k=data.T_Steam_Ref)
        annotation (Placement(transformation(extent={{-72,16},{-52,36}})));
      Modelica.Blocks.Sources.Constant const4(k=1500)
        annotation (Placement(transformation(extent={{-16,34},{-8,42}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{0,22},{20,42}})));
      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=1e-5,
        Ti=15,
        yMax=1 - 1e-6,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-64,-72},{-44,-52}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-94,-72},{-74,-52}})));
      TRANSFORM.Controls.LimPID TCV_Position(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=1e-9,
        Ti=5,
        yMax=0,
        yMin=-1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-56,-18},{-36,-38}})));
      Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{-86,-38},{-66,-18}})));
      Modelica.Blocks.Sources.Constant const7(k=1)
        annotation (Placement(transformation(extent={{-28,-44},{-20,-36}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-10,-44},{10,-24}})));
      Modelica.Blocks.Sources.Constant const8(k=1e-6)
        annotation (Placement(transformation(extent={{-34,-78},{-26,-70}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-10,-78},{10,-58}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-34,-66},{-26,-58}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-40,52},{-20,72}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-80,52},{-60,72}})));
      Data.HTGR_Rankine
                      data
        annotation (Placement(transformation(extent={{-98,-4},{-78,16}})));
    equation

      connect(const3.y, FWCP_Speed.u_s) annotation (Line(points={{-51,26},{-42,26}},
                                  color={0,0,127}));
      connect(sensorBus.Steam_Temperature, FWCP_Speed.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,-8},{-30,-8},{-30,14}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const4.y, add.u1) annotation (Line(points={{-7.6,38},{-2,38}},
                                       color={0,0,127}));
      connect(FWCP_Speed.y, add.u2) annotation (Line(points={{-19,26},{-2,26}},
                        color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,32},{21,32}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const5.y, Turb_Divert_Valve.u_s)
        annotation (Line(points={{-73,-62},{-66,-62}},   color={0,0,127}));
      connect(sensorBus.Feedwater_Temp, Turb_Divert_Valve.u_m) annotation (Line(
          points={{-30,-100},{-54,-100},{-54,-74}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const6.y, TCV_Position.u_s)
        annotation (Line(points={{-65,-28},{-58,-28}},   color={0,0,127}));
      connect(sensorBus.Power, TCV_Position.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,-8},{-46,-8},{-46,-16}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y, add1.u2) annotation (Line(points={{-19.6,-40},{-12,-40}},
                                          color={0,0,127}));
      connect(TCV_Position.y, add1.u1) annotation (Line(points={{-35,-28},{-12,-28}},
                                                      color={0,0,127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-68},{11,-68}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(add2.u2, const8.y) annotation (Line(points={{-12,-74},{-25.6,-74}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1, timer.y) annotation (Line(points={{-12,-62},{-25.44,-62}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y, timer.u) annotation (Line(points={{-43,-62},{-34.8,
              -62}},                                                     color={0,0,
              127}));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-59,62},{-42,62}},   color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,44},{-30,44},{-30,50}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,62},{-19,62}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-32},{28,-32},{28,-34},{11,-34}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
    annotation(defaultComponentName="changeMe_CS", Icon(graphics));
    end CS_Rankine_Xe100_Based_Secondary;

    model CS_SteamTurbine_L2_PressurePowerFeedtemp
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand_int = data.Q_Nom;

      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=5e-3,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0.05,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,-58},{-38,-38}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
      TRANSFORM.Controls.LimPID TCV_Power(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=5e-7,
        Ti=30,
        k_s=1,
        k_m=1,
        yMax=0,
        yMin=-1 + 0.05,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-50,-2},{-30,-22}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand_int)
        annotation (Placement(transformation(extent={{-94,-6},{-80,6}})));
      Modelica.Blocks.Sources.Constant const7(k=1)
        annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
      Modelica.Blocks.Sources.Constant const8(k=0)
        annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
      replaceable Data.Turbine_2_Setpoints data(
        p_steam=3500000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=40e6,
        T_Feedwater=421.15)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{-78,-22},{-64,-8}})));
      Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
        annotation (Placement(transformation(extent={{-70,30},{-50,50}})));
      TRANSFORM.Controls.LimPID FWCP_Speed(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-7,
        Ti=10,
        yMax=250,
        yMin=-72,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
      Modelica.Blocks.Sources.Constant const4(k=72.1)
        annotation (Placement(transformation(extent={{-14,48},{-6,56}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{2,36},{22,56}})));
      Modelica.Blocks.Sources.Constant const2(k=1)
        annotation (Placement(transformation(extent={{2,74},{22,94}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-78,72},{-58,92}})));
    equation
      connect(const5.y,Turb_Divert_Valve. u_s)
        annotation (Line(points={{-71,-46},{-66,-46},{-66,-48},{-60,-48}},
                                                         color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-48,-100},{-48,-60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,8},{-40,8},{-40,0}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                          color={0,0,127}));
      connect(TCV_Power.y, add1.u1)
        annotation (Line(points={{-29,-12},{-10,-12}}, color={0,0,127}));
      connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-37,-48},{-36,
              -48},{-36,-40},{-32.8,-40}},                               color={0,0,
              127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-46},{13,-46}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-18},{13,-18}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(sensorBus.Steam_Pressure, FWCP_Speed.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,8},{-30,8},{-30,28}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.opening_BV, const2.y) annotation (Line(
          points={{30.1,-99.9},{30.1,84},{23,84}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const3.y, FWCP_Speed.u_s)
        annotation (Line(points={{-49,40},{-42,40}}, color={0,0,127}));
      connect(FWCP_Speed.y, add.u2)
        annotation (Line(points={{-19,40},{0,40}}, color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{-5.6,52},{0,52}}, color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,46},{23,46}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-57,82},{-40,82}}, color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,62},{-28,62},{-28,70}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,66},{-10,66},{-10,82},{-17,82}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const.y, TCV_Power.u_s) annotation (Line(points={{-63.3,-15},{-56,-15},
              {-56,-12},{-52,-12}}, color={0,0,127}));
    end CS_SteamTurbine_L2_PressurePowerFeedtemp;

    model CS_PowerBoostLoop_DivertPowerControl
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand
      annotation(Dialog(tab="General"));

      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2e-4,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-62,-116},{-42,-136}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-104,-136},{-84,-116}})));
      TRANSFORM.Controls.LimPID TCV_Power(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-8,
        Ti=1,
        k_s=1,
        k_m=1,
        yMax=0,
        yMin=-1 + 0.0001,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,-28},{-38,-48}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand)
        annotation (Placement(transformation(extent={{96,-32},{110,-20}})));
      Modelica.Blocks.Sources.Constant const7(k=1)
        annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-16,-54},{4,-34}})));
      Modelica.Blocks.Sources.Constant const8(k=0.015)
        annotation (Placement(transformation(extent={{-32,-140},{-24,-132}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-8,-140},{12,-120}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-32,-128},{-24,-120}})));
      replaceable Data.TES_Setpoints data(
        p_steam=3398000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=52e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15,
        m_flow_reactor=67.3)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const3(k=data.m_flow_reactor)
        annotation (Placement(transformation(extent={{-96,62},{-76,82}})));
      TRANSFORM.Controls.LimPID FWCP_mflow(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.1,
        Ti=20,
        Td=0.1,
        yMax=1250,
        yMin=-750,
        wp=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-66,62},{-46,82}})));
      Modelica.Blocks.Sources.Constant const4(k=1200)
        annotation (Placement(transformation(extent={{-40,80},{-32,88}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{-24,68},{-4,88}})));
      Modelica.Blocks.Sources.Constant const2(k=1)
        annotation (Placement(transformation(extent={{10,158},{30,178}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-58,134},{-38,154}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-98,134},{-78,154}})));
      Modelica.Blocks.Math.Add         add5
        annotation (Placement(transformation(extent={{112,-106},{92,-86}})));
      TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-4e-9,
        Ti=1,
        k_s=1,
        k_m=1,
        yMax=1 - 0.015,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{152,-78},{132,-98}})));
      Modelica.Blocks.Sources.Constant const10(k=0.015)
        annotation (Placement(transformation(extent={{152,-122},{144,-114}})));
      Modelica.Blocks.Sources.Constant const1(k=data.p_steam)
        annotation (Placement(transformation(extent={{-92,-48},{-72,-28}})));
      Modelica.Blocks.Math.Min min1
        annotation (Placement(transformation(extent={{92,-80},{112,-60}})));
      Modelica.Blocks.Math.Min min2
        annotation (Placement(transformation(extent={{174,-80},{194,-60}})));
      Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{50,-76},{74,-52}})));
      Modelica.Blocks.Sources.Constant const12(k=data.Q_Nom + 0.001e6)
        annotation (Placement(transformation(extent={{140,-84},{164,-60}})));
      Modelica.Blocks.Sources.Constant const11(k=0.01)
        annotation (Placement(transformation(extent={{156,32},{148,40}})));
      Modelica.Blocks.Math.Add         add4
        annotation (Placement(transformation(extent={{128,42},{108,62}})));
      Modelica.Blocks.Math.Add         add7
        annotation (Placement(transformation(extent={{116,90},{96,110}})));
      Modelica.Blocks.Sources.Constant const15(k=0.01)
        annotation (Placement(transformation(extent={{140,80},{132,88}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter(max=1 - 0.001)
        annotation (Placement(transformation(extent={{156,48},{136,68}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter1(max=1 - 0.01)
        annotation (Placement(transformation(extent={{160,96},{140,116}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression1(y=electric_demand)
        annotation (Placement(transformation(extent={{88,16},{102,28}})));
      TRANSFORM.Controls.LimPID TCV_SHS(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-9,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{186,48},{166,68}})));
      TRANSFORM.Controls.LimPID Discharge_OnOFF(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-9,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{206,96},{186,116}})));
    equation
      connect(const5.y,Turb_Divert_Valve. u_s)
        annotation (Line(points={{-83,-126},{-64,-126}}, color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-52,-100},{-52,-114}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y,add1. u2) annotation (Line(points={{-25.6,-50},{-18,-50}},
                                          color={0,0,127}));
      connect(TCV_Power.y, add1.u1)
        annotation (Line(points={{-37,-38},{-18,-38}}, color={0,0,127}));
      connect(add2.u2,const8. y) annotation (Line(points={{-10,-136},{-23.6,-136}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1,timer. y) annotation (Line(points={{-10,-124},{-23.44,-124}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-126},{
              -36,-126},{-36,-124},{-32.8,-124}},                        color={0,0,
              127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-130},{13,-130}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-44},{5,-44}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_BV, const2.y) annotation (Line(
          points={{30.1,-99.9},{30.1,118},{31,118},{31,168}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const3.y,FWCP_mflow. u_s)
        annotation (Line(points={{-75,72},{-68,72}}, color={0,0,127}));
      connect(FWCP_mflow.y, add.u2)
        annotation (Line(points={{-45,72},{-26,72}},
                                                   color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{-31.6,84},{-26,84}},
                                                    color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,78},{-3,78}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-77,144},{-60,144}},
                                                     color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,108},{-48,108},{-48,132}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,128},{-30,128},{-30,144},{-37,144}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(add5.u1, Charge_OnOff_Throttle.y)
        annotation (Line(points={{114,-90},{114,-88},{131,-88}},
                                                     color={0,0,127}));
      connect(add5.u2, const10.y) annotation (Line(points={{114,-102},{118,-102},{
              118,-118},{143.6,-118}},
                                color={0,0,127}));
      connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
          points={{30,-100},{30,-96},{91,-96}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Steam_Pressure, TCV_Power.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,-12},{-48,-12},{-48,-26}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(TCV_Power.u_s, const1.y)
        annotation (Line(points={{-60,-38},{-71,-38}}, color={0,0,127}));
      connect(sensorBus.Condensor_Output_mflow, FWCP_mflow.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,46},{-56,46},{-56,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Power, min1.u2) annotation (Line(
          points={{-30,-100},{-30,-74},{90,-74},{90,-76}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(min1.u1, const6.y)
        annotation (Line(points={{90,-64},{75.2,-64}}, color={0,0,127}));
      connect(Charge_OnOff_Throttle.u_m, min1.y) annotation (Line(points={{142,-76},
              {142,-66},{113,-66},{113,-70}}, color={0,0,127}));
      connect(realExpression.y, min2.u1) annotation (Line(points={{110.7,-26},{160,
              -26},{160,-64},{172,-64}}, color={0,0,127}));
      connect(min2.y, Charge_OnOff_Throttle.u_s) annotation (Line(points={{195,-70},
              {238,-70},{238,-88},{154,-88}}, color={0,0,127}));
      connect(min2.u2, const12.y) annotation (Line(points={{172,-76},{168,-76},{168,
              -72},{165.2,-72}}, color={0,0,127}));
      connect(const11.y,add4. u2) annotation (Line(points={{147.6,36},{140,36},{140,
              46},{130,46}},
                       color={0,0,127}));
      connect(actuatorBus.TCV_SHS,add4. y) annotation (Line(
          points={{30,-100},{30,52},{107,52}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(add7.u2,const15. y) annotation (Line(points={{118,94},{122,94},{122,
              88},{131.6,88},{131.6,84}}, color={0,0,127}));
      connect(actuatorBus.Discharge_OnOff_Throttle,add7. y) annotation (Line(
          points={{30,-100},{30,100},{95,100}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(minMaxFilter1.y,add7. u1)
        annotation (Line(points={{138.6,106},{118,106}},
                                                       color={0,0,127}));
      connect(add4.u1,minMaxFilter. y)
        annotation (Line(points={{130,58},{134.6,58}}, color={0,0,127}));
      connect(minMaxFilter.u,TCV_SHS. y)
        annotation (Line(points={{158,58},{165,58}}, color={0,0,127}));
      connect(sensorBus.Power,TCV_SHS. u_m) annotation (Line(
          points={{-30,-100},{-30,-10},{176,-10},{176,46}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(realExpression1.y, TCV_SHS.u_s) annotation (Line(points={{102.7,22},{
              192,22},{192,58},{188,58}}, color={0,0,127}));
      connect(minMaxFilter1.u,Discharge_OnOFF. y)
        annotation (Line(points={{162,106},{185,106}},
                                                     color={0,0,127}));
      connect(sensorBus.Power,Discharge_OnOFF. u_m) annotation (Line(
          points={{-30,-100},{-30,-10},{206,-10},{206,80},{196,80},{196,94}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(realExpression1.y, Discharge_OnOFF.u_s) annotation (Line(points={{
              102.7,22},{226,22},{226,106},{208,106}}, color={0,0,127}));
      annotation (Diagram(graphics={Text(
              extent={{-70,-142},{-20,-160}},
              textColor={28,108,200},
              textString="Feedwater")}));
    end CS_PowerBoostLoop_DivertPowerControl;

    model CS_DivertPowerControl
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand
      annotation(Dialog(tab="General"));
      input Real Overall_Power
      annotation(Dialog(tab="General"));

      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2e-4,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-62,-116},{-42,-136}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-104,-136},{-84,-116}})));
      TRANSFORM.Controls.LimPID TCV_Power(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-8,
        Ti=1,
        k_s=1,
        k_m=1,
        yMax=0,
        yMin=-1 + 0.0001,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,-28},{-38,-48}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand)
        annotation (Placement(transformation(extent={{96,-32},{110,-20}})));
      Modelica.Blocks.Sources.Constant const7(k=1)
        annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-16,-54},{4,-34}})));
      Modelica.Blocks.Sources.Constant const8(k=0.015)
        annotation (Placement(transformation(extent={{-32,-140},{-24,-132}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-8,-140},{12,-120}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-32,-128},{-24,-120}})));
      replaceable Data.TES_Setpoints data(
        p_steam=3398000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=48.57e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15,
        m_flow_reactor=67.3)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const3(k=data.m_flow_reactor)
        annotation (Placement(transformation(extent={{-96,62},{-76,82}})));
      TRANSFORM.Controls.LimPID FWCP_mflow(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.1,
        Ti=20,
        Td=0.1,
        yMax=1250,
        yMin=-750,
        wp=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-66,62},{-46,82}})));
      Modelica.Blocks.Sources.Constant const4(k=1200)
        annotation (Placement(transformation(extent={{-40,80},{-32,88}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{-24,68},{-4,88}})));
      Modelica.Blocks.Sources.Constant const2(k=1)
        annotation (Placement(transformation(extent={{10,158},{30,178}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-58,134},{-38,154}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-98,134},{-78,154}})));
      Modelica.Blocks.Math.Add         add5
        annotation (Placement(transformation(extent={{112,-106},{92,-86}})));
      TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-4e-7,
        Ti=5,
        k_s=1,
        k_m=1,
        yMax=1 - 0.015,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{152,-78},{132,-98}})));
      Modelica.Blocks.Sources.Constant const10(k=0.015)
        annotation (Placement(transformation(extent={{152,-122},{144,-114}})));
      Modelica.Blocks.Sources.Constant const1(k=data.p_steam)
        annotation (Placement(transformation(extent={{-92,-48},{-72,-28}})));
      Modelica.Blocks.Math.Min min1
        annotation (Placement(transformation(extent={{92,-80},{112,-60}})));
      Modelica.Blocks.Math.Min min2
        annotation (Placement(transformation(extent={{174,-80},{194,-60}})));
      Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{50,-76},{74,-52}})));
      Modelica.Blocks.Sources.Constant const12(k=data.Q_Nom + 0.001e6)
        annotation (Placement(transformation(extent={{116,-58},{140,-34}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression1(y=Overall_Power)
        annotation (Placement(transformation(extent={{80,24},{94,36}})));
    equation
      connect(const5.y,Turb_Divert_Valve. u_s)
        annotation (Line(points={{-83,-126},{-64,-126}}, color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-52,-100},{-52,-114}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y,add1. u2) annotation (Line(points={{-25.6,-50},{-18,-50}},
                                          color={0,0,127}));
      connect(TCV_Power.y, add1.u1)
        annotation (Line(points={{-37,-38},{-18,-38}}, color={0,0,127}));
      connect(add2.u2,const8. y) annotation (Line(points={{-10,-136},{-23.6,-136}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1,timer. y) annotation (Line(points={{-10,-124},{-23.44,-124}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-126},{
              -36,-126},{-36,-124},{-32.8,-124}},                        color={0,0,
              127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-130},{13,-130}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-44},{5,-44}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_BV, const2.y) annotation (Line(
          points={{30.1,-99.9},{30.1,118},{31,118},{31,168}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const3.y,FWCP_mflow. u_s)
        annotation (Line(points={{-75,72},{-68,72}}, color={0,0,127}));
      connect(FWCP_mflow.y, add.u2)
        annotation (Line(points={{-45,72},{-26,72}},
                                                   color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{-31.6,84},{-26,84}},
                                                    color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,78},{-3,78}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-77,144},{-60,144}},
                                                     color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,108},{-48,108},{-48,132}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,128},{-30,128},{-30,144},{-37,144}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(add5.u1, Charge_OnOff_Throttle.y)
        annotation (Line(points={{114,-90},{114,-88},{131,-88}},
                                                     color={0,0,127}));
      connect(add5.u2, const10.y) annotation (Line(points={{114,-102},{118,-102},{
              118,-118},{143.6,-118}},
                                color={0,0,127}));
      connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
          points={{30,-100},{30,-96},{91,-96}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Steam_Pressure, TCV_Power.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,-12},{-48,-12},{-48,-26}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(TCV_Power.u_s, const1.y)
        annotation (Line(points={{-60,-38},{-71,-38}}, color={0,0,127}));
      connect(sensorBus.Condensor_Output_mflow, FWCP_mflow.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,46},{-56,46},{-56,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(min1.u1, const6.y)
        annotation (Line(points={{90,-64},{75.2,-64}}, color={0,0,127}));
      connect(Charge_OnOff_Throttle.u_m, min1.y) annotation (Line(points={{142,-76},
              {142,-66},{113,-66},{113,-70}}, color={0,0,127}));
      connect(realExpression.y, min2.u1) annotation (Line(points={{110.7,-26},{160,
              -26},{160,-64},{172,-64}}, color={0,0,127}));
      connect(min2.y, Charge_OnOff_Throttle.u_s) annotation (Line(points={{195,-70},
              {238,-70},{238,-88},{154,-88}}, color={0,0,127}));
      connect(min2.u2, const12.y) annotation (Line(points={{172,-76},{168,-76},{168,
              -46},{141.2,-46}}, color={0,0,127}));
      connect(realExpression1.y, min1.u2) annotation (Line(points={{94.7,30},{98,30},
              {98,-16},{84,-16},{84,-76},{90,-76}}, color={0,0,127}));
      annotation (Diagram(graphics={Text(
              extent={{-70,-142},{-20,-160}},
              textColor={28,108,200},
              textString="Feedwater")}));
    end CS_DivertPowerControl;

    model CS_SmallCycle_NoFeedHeat
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand
      annotation(Dialog(tab="General"));

      replaceable Data.TES_Setpoints data(
        p_steam=1200000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=48.57e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
        annotation (Placement(transformation(extent={{-90,62},{-70,82}})));
      TRANSFORM.Controls.LimPID FWCP_Speed(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-4,
        Ti=5,
        Td=0.1,
        yMax=2500,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,62},{-38,82}})));
      Modelica.Blocks.Sources.Constant const4(k=100)
        annotation (Placement(transformation(extent={{-32,80},{-24,88}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{-16,68},{4,88}})));
      Modelica.Blocks.Sources.Constant const11(k=0.001)
        annotation (Placement(transformation(extent={{134,-10},{126,-2}})));
      Modelica.Blocks.Math.Add         add4
        annotation (Placement(transformation(extent={{106,0},{86,20}})));
      Modelica.Blocks.Math.Add         add7
        annotation (Placement(transformation(extent={{94,48},{74,68}})));
      Modelica.Blocks.Sources.Constant const15(k=0.01)
        annotation (Placement(transformation(extent={{118,38},{110,46}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter(max=1 - 0.001)
        annotation (Placement(transformation(extent={{134,6},{114,26}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter1(max=1 - 0.01)
        annotation (Placement(transformation(extent={{138,54},{118,74}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand - data.Q_Nom)
        annotation (Placement(transformation(extent={{66,-26},{80,-14}})));
      TRANSFORM.Controls.LimPID TCV_SHS(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-9,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{164,6},{144,26}})));
      TRANSFORM.Controls.LimPID Discharge_OnOFF(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-9,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{184,54},{164,74}})));
    equation
      connect(sensorBus.Steam_Pressure,FWCP_Speed. u_m) annotation (Line(
          points={{-30,-100},{-118,-100},{-118,40},{-48,40},{-48,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(const3.y,FWCP_Speed. u_s)
        annotation (Line(points={{-69,72},{-60,72}}, color={0,0,127}));
      connect(FWCP_Speed.y,add. u2)
        annotation (Line(points={{-37,72},{-18,72}},
                                                   color={0,0,127}));
      connect(const4.y,add. u1)
        annotation (Line(points={{-23.6,84},{-18,84}},
                                                    color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed,add. y) annotation (Line(
          points={{30,-100},{30,78},{5,78}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const11.y,add4. u2) annotation (Line(points={{125.6,-6},{118,-6},{118,
              4},{108,4}},
                       color={0,0,127}));
      connect(actuatorBus.TCV_SHS,add4. y) annotation (Line(
          points={{30,-100},{30,10},{85,10}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(add7.u2,const15. y) annotation (Line(points={{96,52},{100,52},{100,46},
              {109.6,46},{109.6,42}},     color={0,0,127}));
      connect(actuatorBus.Discharge_OnOff_Throttle,add7. y) annotation (Line(
          points={{30,-100},{30,58},{73,58}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(minMaxFilter1.y,add7. u1)
        annotation (Line(points={{116.6,64},{96,64}},  color={0,0,127}));
      connect(add4.u1,minMaxFilter. y)
        annotation (Line(points={{108,16},{112.6,16}}, color={0,0,127}));
      connect(minMaxFilter.u, TCV_SHS.y)
        annotation (Line(points={{136,16},{143,16}}, color={0,0,127}));
      connect(sensorBus.Power, TCV_SHS.u_m) annotation (Line(
          points={{-30,-100},{-30,-52},{154,-52},{154,4}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(realExpression.y, TCV_SHS.u_s) annotation (Line(points={{80.7,-20},{
              170,-20},{170,16},{166,16}}, color={0,0,127}));
      connect(minMaxFilter1.u, Discharge_OnOFF.y)
        annotation (Line(points={{140,64},{163,64}}, color={0,0,127}));
      connect(sensorBus.Power, Discharge_OnOFF.u_m) annotation (Line(
          points={{-30,-100},{-30,-52},{184,-52},{184,38},{174,38},{174,52}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(realExpression.y, Discharge_OnOFF.u_s) annotation (Line(points={{80.7,
              -20},{204,-20},{204,64},{186,64}}, color={0,0,127}));
    end CS_SmallCycle_NoFeedHeat;

    model CS_OTSG_TCV_Pressure_TBV_Power_Control_Intermediate
      extends BaseClasses.Partial_ControlSystem;

      parameter SI.Time delayStartTCV = 300 "Delay start of TCV control";
      parameter SI.Time delayStartBV = delayStartTCV "Delay start of BV control";

      parameter SI.Pressure p_nominal "Steam Pressure";
      //parameter SI.Pressure

      parameter Real TCV_opening_nominal = 0.5 "Nominal opening of TCV - controls power";
      parameter Real BV_opening_nominal = 0.001 "Nominal opening of BV - controls pressure";

      input SI.Power W_totalSetpoint "Total setpoint power from BOP" annotation(Dialog(group="Inputs"));

      Modelica.Blocks.Sources.Constant TCV_openingNominal(k=TCV_opening_nominal)
        annotation (Placement(transformation(extent={{-180,150},{-160,170}})));
      Modelica.Blocks.Logical.Switch switch_BV
        annotation (Placement(transformation(extent={{40,12},{60,32}})));
      Modelica.Blocks.Sources.Constant BV_openingNominal(k=BV_opening_nominal)
        annotation (Placement(transformation(extent={{-180,-82},{-160,-62}})));
      Modelica.Blocks.Logical.Greater greater5
        annotation (Placement(transformation(extent={{-140,210},{-120,190}})));
      Modelica.Blocks.Sources.ContinuousClock clock(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-180,60},{-160,80}})));
      Modelica.Blocks.Sources.Constant valvedelay(k=delayStartTCV)
        annotation (Placement(transformation(extent={{-180,210},{-160,230}})));
      TRANSFORM.Controls.LimPID
                           PID_TCV_opening(
        yMax=1 -TCV_openingNominal.k,
        yMin=-TCV_openingNominal.k + 0.0001,
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k_s=0.25e-8,
        k_m=0.25e-8)
               annotation (Placement(transformation(extent={{-60,240},{-40,220}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV
        annotation (Placement(transformation(extent={{-100,190},{-80,210}})));
      Modelica.Blocks.Logical.Switch switch_TCV_setpoint
        annotation (Placement(transformation(extent={{40,212},{60,232}})));
      Modelica.Blocks.Sources.Constant TCV_diffopeningNominal(k=0)
        annotation (Placement(transformation(extent={{0,190},{20,210}})));
      Modelica.Blocks.Math.Add TCV_opening
        annotation (Placement(transformation(extent={{80,170},{100,190}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint
        annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
      Modelica.Blocks.Sources.Constant valvedelayBV(k=delayStartBV)
        annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
      Modelica.Blocks.Logical.Greater greater1
        annotation (Placement(transformation(extent={{-140,20},{-120,0}})));
      TRANSFORM.Controls.LimPID PID_BV_opening(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        yMax=1 - BV_openingNominal.k,
        yMin=-BV_openingNominal.k + 0.0001,
        Ti=10,
        k_s=1/(12.5*160e6),
        k_m=1/(12.5*160e6),
        k=-1)
        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
      Modelica.Blocks.Math.Add BV_opening
        annotation (Placement(transformation(extent={{80,-10},{100,10}})));
      Modelica.Blocks.Sources.Constant BV_diffopeningNominal(k=0)
        annotation (Placement(transformation(extent={{0,-10},{20,10}})));
      Modelica.Blocks.Sources.RealExpression
                                       Power_Nominal(y=W_totalSetpoint)
        annotation (Placement(transformation(extent={{-180,-22},{-160,-2}})));
      Modelica.Blocks.Sources.Constant p_Nominal1(k=p_nominal)
        annotation (Placement(transformation(extent={{-138,220},{-118,240}})));
      Modelica.Blocks.Sources.Constant const5(k=421.15)
        annotation (Placement(transformation(extent={{-82,98},{-62,118}})));
      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=1e-5,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=1e-3,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-50,98},{-30,118}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-22,110},{-14,118}})));
      Modelica.Blocks.Sources.Constant const8(k=0)
        annotation (Placement(transformation(extent={{-22,98},{-14,106}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{2,98},{22,118}})));
    equation

      connect(clock.y, greater5.u1) annotation (Line(points={{-159,70},{-150,70},{-150,
              200},{-142,200}},
                              color={0,0,127}));
      connect(valvedelay.y, greater5.u2) annotation (Line(points={{-159,220},{-150,220},
              {-150,208},{-142,208}},
                                    color={0,0,127}));
      connect(greater5.y, switch_P_setpoint_TCV.u2)
        annotation (Line(points={{-119,200},{-102,200}}, color={255,0,255}));
      connect(TCV_diffopeningNominal.y, switch_TCV_setpoint.u3) annotation (Line(
            points={{21,200},{30,200},{30,214},{38,214}},
                                                      color={0,0,127}));
      connect(switch_TCV_setpoint.u1,PID_TCV_opening. y)
        annotation (Line(points={{38,230},{-39,230}},     color={0,0,127}));
      connect(switch_TCV_setpoint.u2, switch_P_setpoint_TCV.u2) annotation (Line(
            points={{38,222},{-30,222},{-30,184},{-108,184},{-108,200},{-102,200}},
            color={255,0,255}));
      connect(switch_TCV_setpoint.y,TCV_opening. u1) annotation (Line(points={{61,222},
              {70,222},{70,186},{78,186}},  color={0,0,127}));
      connect(TCV_openingNominal.y,TCV_opening. u2) annotation (Line(points={{-159,
              160},{0,160},{0,174},{78,174}},
                                        color={0,0,127}));
      connect(actuatorBus.opening_TCV, TCV_opening.y)
        annotation (Line(
          points={{30.1,-99.9},{160,-99.9},{160,180},{101,180}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(valvedelayBV.y, greater1.u2) annotation (Line(points={{-159,30},{-146,
              30},{-146,18},{-142,18}}, color={0,0,127}));
      connect(greater1.y, switch_P_setpoint.u2)
        annotation (Line(points={{-119,10},{-102,10}},   color={255,0,255}));
      connect(switch_P_setpoint.y, PID_BV_opening.u_m) annotation (Line(points={{-79,
              10},{-64,10},{-64,18},{-50,18}}, color={0,0,127}));
      connect(greater1.u1, greater5.u1) annotation (Line(points={{-142,10},{-150,10},
              {-150,200},{-142,200}},
                                    color={0,0,127}));
      connect(BV_openingNominal.y, BV_opening.u2) annotation (Line(points={{-159,-72},
              {30,-72},{30,-6},{78,-6}}, color={0,0,127}));
      connect(switch_BV.y, BV_opening.u1)
        annotation (Line(points={{61,22},{70,22},{70,6},{78,6}}, color={0,0,127}));
      connect(PID_BV_opening.y, switch_BV.u1)
        annotation (Line(points={{-39,30},{38,30}}, color={0,0,127}));
      connect(switch_BV.u2, switch_P_setpoint.u2) annotation (Line(points={{38,22},{
              -30,22},{-30,-16},{-106,-16},{-106,10},{-102,10}}, color={255,0,255}));
      connect(BV_diffopeningNominal.y, switch_BV.u3)
        annotation (Line(points={{21,0},{30,0},{30,14},{38,14}}, color={0,0,127}));
      connect(actuatorBus.opening_BV, BV_opening.y) annotation (
          Line(
          points={{30.1,-99.9},{160,-99.9},{160,0},{101,0}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(Power_Nominal.y, PID_BV_opening.u_s) annotation (Line(points={{-159,-12},
              {-114,-12},{-114,30},{-62,30}}, color={0,0,127}));
      connect(Power_Nominal.y, switch_P_setpoint.u3) annotation (Line(points={{-159,
              -12},{-112,-12},{-112,2},{-102,2}}, color={0,0,127}));
      connect(p_Nominal1.y, switch_P_setpoint_TCV.u3) annotation (Line(points={{-117,
              230},{-114,230},{-114,192},{-102,192}}, color={0,0,127}));
      connect(sensorBus.W_total, switch_P_setpoint.u1) annotation (Line(
          points={{-29.9,-99.9},{-110,-99.9},{-110,18},{-102,18}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.p_inlet_steamTurbine, switch_P_setpoint_TCV.u1) annotation (
         Line(
          points={{-29.9,-99.9},{-110,-99.9},{-110,208},{-102,208}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(p_Nominal1.y, PID_TCV_opening.u_m) annotation (Line(points={{-117,230},
              {-84,230},{-84,248},{-50,248},{-50,242}}, color={0,0,127}));
      connect(switch_P_setpoint_TCV.y, PID_TCV_opening.u_s) annotation (Line(points=
             {{-79,200},{-72,200},{-72,230},{-62,230}}, color={0,0,127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{160,-100},{160,108},{23,108}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const5.y, Turb_Divert_Valve.u_s)
        annotation (Line(points={{-61,108},{-52,108}}, color={0,0,127}));
      connect(Turb_Divert_Valve.y, timer.u) annotation (Line(points={{-29,108},{-26,
              108},{-26,112},{-22.8,112},{-22.8,114}}, color={0,0,127}));
      connect(timer.y, add2.u1) annotation (Line(points={{-13.44,114},{-12,114},{
              -12,124},{0,124},{0,114}}, color={0,0,127}));
      connect(const8.y, add2.u2) annotation (Line(points={{-13.6,102},{-12,102},{
              -12,92},{0,92},{0,102}}, color={0,0,127}));
    annotation (defaultComponentName="EM_CS",
    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
                                                       Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-180,-100},{160,260}})));
    end CS_OTSG_TCV_Pressure_TBV_Power_Control_Intermediate;

    package ObsoleteCS
      model CS_IntermediateControl_PID_TESUC_1_Intermediate_SmallCycle_AR
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand
        annotation(Dialog(tab="General"));

        Data.TES_Setpoints data(
          p_steam=1200000,
          p_steam_vent=15000000,
          T_Steam_Ref=579.75,
          Q_Nom=42e6,
          T_Feedwater=421.15,
          T_SHS_Return=491.15)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
          annotation (Placement(transformation(extent={{-90,62},{-70,82}})));
        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5e-4,
          Ti=5,
          Td=0.1,
          yMax=2500,
          yMin=0,
          wd=1,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-58,62},{-38,82}})));
        Modelica.Blocks.Sources.Constant const4(k=100)
          annotation (Placement(transformation(extent={{-32,80},{-24,88}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{-16,68},{4,88}})));
        Modelica.Blocks.Sources.Constant const11(k=0.001)
          annotation (Placement(transformation(extent={{134,-10},{126,-2}})));
        Modelica.Blocks.Math.Add         add4
          annotation (Placement(transformation(extent={{106,0},{86,20}})));
        Modelica.Blocks.Math.Add         add7
          annotation (Placement(transformation(extent={{94,48},{74,68}})));
        Modelica.Blocks.Sources.Constant const15(k=0.01)
          annotation (Placement(transformation(extent={{118,38},{110,46}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=0)
          annotation (Placement(transformation(extent={{218,8},{238,28}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.PI_Control_Reset_Input
          PI_DFV(
          k=5,
          Ti=30,
          k_s=5e-9,
          k_m=5e-9)
          annotation (Placement(transformation(extent={{178,54},{158,74}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.PI_Control_Reset_Input
          PI_DCV1(
          k=5,
          Ti=30,
          k_s=5e-9,
          k_m=5e-9)
          annotation (Placement(transformation(extent={{164,6},{144,26}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
          minMaxFilter(max=1 - 0.001)
          annotation (Placement(transformation(extent={{134,6},{114,26}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
          minMaxFilter1(max=1 - 0.01)
          annotation (Placement(transformation(extent={{138,54},{118,74}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand - data.Q_Nom)
          annotation (Placement(transformation(extent={{66,-24},{80,-12}})));
      equation
        connect(sensorBus.Steam_Pressure,FWCP_Speed. u_m) annotation (Line(
            points={{-30,-100},{-118,-100},{-118,40},{-48,40},{-48,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(const3.y,FWCP_Speed. u_s)
          annotation (Line(points={{-69,72},{-60,72}}, color={0,0,127}));
        connect(FWCP_Speed.y,add. u2)
          annotation (Line(points={{-37,72},{-18,72}},
                                                     color={0,0,127}));
        connect(const4.y,add. u1)
          annotation (Line(points={{-23.6,84},{-18,84}},
                                                      color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed,add. y) annotation (Line(
            points={{30,-100},{30,78},{5,78}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const11.y,add4. u2) annotation (Line(points={{125.6,-6},{118,-6},{118,
                4},{108,4}},
                         color={0,0,127}));
        connect(actuatorBus.TCV_SHS,add4. y) annotation (Line(
            points={{30,-100},{30,10},{85,10}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(add7.u2,const15. y) annotation (Line(points={{96,52},{100,52},{100,46},
                {109.6,46},{109.6,42}},     color={0,0,127}));
        connect(actuatorBus.Discharge_OnOff_Throttle,add7. y) annotation (Line(
            points={{30,-100},{30,58},{73,58}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(realExpression.y,greaterThreshold. u) annotation (Line(points={{80.7,
                -18},{202,-18},{202,18},{216,18}}, color={0,0,127}));
        connect(greaterThreshold.y,PI_DFV. k_in) annotation (Line(points={{239,18},{
                272,18},{272,14},{298,14},{298,72},{180,72}}, color={255,0,255}));
        connect(PI_DFV.u_s, realExpression.y) annotation (Line(points={{180,64},{188,
                64},{188,-18},{80.7,-18}},  color={0,0,127}));
        connect(sensorBus.Power,PI_DFV. u_m) annotation (Line(
            points={{-30,-100},{-30,-52},{172,-52},{172,52},{168,52}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power,PI_DCV1. u_m) annotation (Line(
            points={{-30,-100},{-30,-52},{166,-52},{166,-6},{154,-6},{154,4}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(realExpression.y,PI_DCV1. u_s) annotation (Line(points={{80.7,-18},{
                166,-18},{166,16}}, color={0,0,127}));
        connect(greaterThreshold.y,PI_DCV1. k_in) annotation (Line(points={{239,18},{
                282,18},{282,38},{166,38},{166,24}}, color={255,0,255}));
        connect(PI_DFV.y,minMaxFilter1. u)
          annotation (Line(points={{157,64},{140,64}}, color={0,0,127}));
        connect(minMaxFilter1.y,add7. u1)
          annotation (Line(points={{116.6,64},{96,64}},  color={0,0,127}));
        connect(add4.u1,minMaxFilter. y)
          annotation (Line(points={{108,16},{112.6,16}}, color={0,0,127}));
        connect(minMaxFilter.u,PI_DCV1. y)
          annotation (Line(points={{136,16},{143,16}}, color={0,0,127}));
      end CS_IntermediateControl_PID_TESUC_1_Intermediate_SmallCycle_AR;

      model CS_IntermediateControl_PID_TESUC_ImpControl_2_Mikk
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand
        annotation(Dialog(tab="General"));

        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-4,
          Ti=5,
          Td=0.1,
          yMax=1,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-62,-116},{-42,-136}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-104,-136},{-84,-116}})));
        TRANSFORM.Controls.LimPID TCV_Power(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-8,
          Ti=1,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-58,-28},{-38,-48}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand)
          annotation (Placement(transformation(extent={{96,-32},{110,-20}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-16,-54},{4,-34}})));
        Modelica.Blocks.Sources.Constant const8(k=0.015)
          annotation (Placement(transformation(extent={{-32,-140},{-24,-132}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-140},{12,-120}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2) annotation (Placement(transformation(extent={{
                  -32,-128},{-24,-120}})));
        Data.TES_Setpoints data(
          p_steam=3398000,
          p_steam_vent=15000000,
          T_Steam_Ref=579.75,
          Q_Nom=46.5e6,
          T_Feedwater=421.15,
          T_SHS_Return=491.15)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Constant const3(k=67.3)
          annotation (Placement(transformation(extent={{-96,62},{-76,82}})));
        TRANSFORM.Controls.LimPID FWCP_mflow(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=20,
          Td=0.1,
          yMax=1250,
          yMin=-750,
          wp=0,
          wd=1,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-66,62},{-46,82}})));
        Modelica.Blocks.Sources.Constant const4(k=1200)
          annotation (Placement(transformation(extent={{-40,80},{-32,88}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{-24,68},{-4,88}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{10,158},{30,178}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-58,134},{-38,154}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-98,134},{-78,154}})));
        Modelica.Blocks.Sources.Constant const11(k=0.001)
          annotation (Placement(transformation(extent={{156,-10},{148,-2}})));
        Modelica.Blocks.Math.Add         add4
          annotation (Placement(transformation(extent={{128,0},{108,20}})));
        Modelica.Blocks.Math.Add         add5
          annotation (Placement(transformation(extent={{112,-106},{92,-86}})));
        TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-4e-9,
          Ti=1,
          k_s=1,
          k_m=1,
          yMax=1 - 0.015,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{152,-78},{132,-98}})));
        Modelica.Blocks.Sources.Constant const10(k=0.015)
          annotation (Placement(transformation(extent={{152,-122},{144,-114}})));
        Modelica.Blocks.Math.Add         add7
          annotation (Placement(transformation(extent={{116,48},{96,68}})));
        Modelica.Blocks.Sources.Constant const15(k=0.01)
          annotation (Placement(transformation(extent={{140,38},{132,46}})));
        Modelica.Blocks.Sources.Constant const1(k=data.p_steam)
          annotation (Placement(transformation(extent={{-92,-48},{-72,-28}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=48e6)
          annotation (Placement(transformation(extent={{240,8},{260,28}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.PI_Control_Reset_Input
          PI_DFV(
          k=10,
          Ti=25,
          k_s=5e-9,
          k_m=5e-9)
          annotation (Placement(transformation(extent={{200,54},{180,74}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.PI_Control_Reset_Input
          PI_DCV1(
          k=10,
          Ti=25,
          k_s=5e-9,
          k_m=5e-9)
          annotation (Placement(transformation(extent={{186,6},{166,26}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
          minMaxFilter(max=1 - 0.001)
          annotation (Placement(transformation(extent={{156,6},{136,26}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
          minMaxFilter1(max=1 - 0.01)
          annotation (Placement(transformation(extent={{160,54},{140,74}})));
        Modelica.Blocks.Math.Min min1
          annotation (Placement(transformation(extent={{92,-80},{112,-60}})));
        Modelica.Blocks.Math.Min min2
          annotation (Placement(transformation(extent={{174,-80},{194,-60}})));
        Modelica.Blocks.Sources.Constant const6(k=48e6)
          annotation (Placement(transformation(extent={{50,-76},{74,-52}})));
        Modelica.Blocks.Sources.Constant const12(k=48.001e6)
          annotation (Placement(transformation(extent={{140,-84},{164,-60}})));
      equation
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-83,-126},{-64,-126}}, color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-52,-100},{-52,-114}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-25.6,-50},{-18,-50}},
                                            color={0,0,127}));
        connect(TCV_Power.y, add1.u1)
          annotation (Line(points={{-37,-38},{-18,-38}}, color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-136},{-23.6,-136}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-124},{-23.44,-124}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-126},{
                -36,-126},{-36,-124},{-32.8,-124}},                        color={0,0,
                127}));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-130},{13,-130}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
            points={{30.1,-99.9},{30.1,-44},{5,-44}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_BV, const2.y) annotation (Line(
            points={{30.1,-99.9},{30.1,118},{31,118},{31,168}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const3.y,FWCP_mflow. u_s)
          annotation (Line(points={{-75,72},{-68,72}}, color={0,0,127}));
        connect(FWCP_mflow.y, add.u2)
          annotation (Line(points={{-45,72},{-26,72}},
                                                     color={0,0,127}));
        connect(const4.y, add.u1)
          annotation (Line(points={{-31.6,84},{-26,84}},
                                                      color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
            points={{30,-100},{30,78},{-3,78}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const9.y, PI_TBV.u_s)
          annotation (Line(points={{-77,144},{-60,144}},
                                                       color={0,0,127}));
        connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
            points={{-30,-100},{-120,-100},{-120,108},{-48,108},{-48,132}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
            points={{30,-100},{30,128},{-30,128},{-30,144},{-37,144}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const11.y, add4.u2) annotation (Line(points={{147.6,-6},{140,-6},{140,
                4},{130,4}},
                         color={0,0,127}));
        connect(actuatorBus.TCV_SHS, add4.y) annotation (Line(
            points={{30,-100},{30,10},{107,10}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(add5.u1, Charge_OnOff_Throttle.y)
          annotation (Line(points={{114,-90},{114,-88},{131,-88}},
                                                       color={0,0,127}));
        connect(add5.u2, const10.y) annotation (Line(points={{114,-102},{118,-102},{
                118,-118},{143.6,-118}},
                                  color={0,0,127}));
        connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
            points={{30,-100},{30,-96},{91,-96}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(add7.u2, const15.y) annotation (Line(points={{118,52},{122,52},{122,
                46},{131.6,46},{131.6,42}}, color={0,0,127}));
        connect(actuatorBus.Discharge_OnOff_Throttle, add7.y) annotation (Line(
            points={{30,-100},{30,58},{95,58}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Steam_Pressure, TCV_Power.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,-12},{-48,-12},{-48,-26}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(TCV_Power.u_s, const1.y)
          annotation (Line(points={{-60,-38},{-71,-38}}, color={0,0,127}));
        connect(realExpression.y, greaterThreshold.u) annotation (Line(points={{110.7,
                -26},{224,-26},{224,18},{238,18}}, color={0,0,127}));
        connect(greaterThreshold.y, PI_DFV.k_in) annotation (Line(points={{261,18},{
                294,18},{294,14},{320,14},{320,72},{202,72}}, color={255,0,255}));
        connect(PI_DFV.u_s, realExpression.y) annotation (Line(points={{202,64},{210,
                64},{210,-26},{110.7,-26}}, color={0,0,127}));
        connect(sensorBus.Power, PI_DFV.u_m) annotation (Line(
            points={{-30,-100},{-30,-52},{194,-52},{194,52},{190,52}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power, PI_DCV1.u_m) annotation (Line(
            points={{-30,-100},{-30,-52},{186,-52},{186,-6},{176,-6},{176,4}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(realExpression.y, PI_DCV1.u_s) annotation (Line(points={{110.7,-26},{
                188,-26},{188,16}}, color={0,0,127}));
        connect(greaterThreshold.y, PI_DCV1.k_in) annotation (Line(points={{261,18},{
                304,18},{304,38},{188,38},{188,24}}, color={255,0,255}));
        connect(PI_DFV.y, minMaxFilter1.u)
          annotation (Line(points={{179,64},{162,64}}, color={0,0,127}));
        connect(minMaxFilter1.y, add7.u1)
          annotation (Line(points={{138.6,64},{118,64}}, color={0,0,127}));
        connect(add4.u1, minMaxFilter.y)
          annotation (Line(points={{130,16},{134.6,16}}, color={0,0,127}));
        connect(minMaxFilter.u, PI_DCV1.y)
          annotation (Line(points={{158,16},{165,16}}, color={0,0,127}));
        connect(sensorBus.Condensor_Output_mflow, FWCP_mflow.u_m) annotation (Line(
            points={{-30,-100},{-120,-100},{-120,46},{-56,46},{-56,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power, min1.u2) annotation (Line(
            points={{-30,-100},{-30,-74},{90,-74},{90,-76}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(min1.u1, const6.y)
          annotation (Line(points={{90,-64},{75.2,-64}}, color={0,0,127}));
        connect(Charge_OnOff_Throttle.u_m, min1.y) annotation (Line(points={{142,-76},
                {142,-66},{113,-66},{113,-70}}, color={0,0,127}));
        connect(realExpression.y, min2.u1) annotation (Line(points={{110.7,-26},{160,
                -26},{160,-64},{172,-64}}, color={0,0,127}));
        connect(min2.y, Charge_OnOff_Throttle.u_s) annotation (Line(points={{195,-70},
                {238,-70},{238,-88},{154,-88}}, color={0,0,127}));
        connect(min2.u2, const12.y) annotation (Line(points={{172,-76},{168,-76},{168,
                -72},{165.2,-72}}, color={0,0,127}));
        annotation (Diagram(graphics={Text(
                extent={{-70,-142},{-20,-160}},
                textColor={28,108,200},
                textString="Feedwater")}));
      end CS_IntermediateControl_PID_TESUC_ImpControl_2_Mikk;

      model CS_IntermediateControl_PID_TESUC_ImpControl_3
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand
        annotation(Dialog(tab="General"));

        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-4,
          Ti=5,
          Td=0.1,
          yMax=1,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-60,-58},{-40,-38}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Power(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-50,-2},{-30,-22}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand)
          annotation (Placement(transformation(extent={{114,-32},{128,-20}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=0.015)
          annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2)
          annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
        Data.TES_Setpoints data(
          p_steam=3398000,
          p_steam_vent=15000000,
          T_Steam_Ref=579.75,
          Q_Nom=46.5e6,
          T_Feedwater=421.15,
          T_SHS_Return=491.15)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Trapezoid trapezoid(
          amplitude=-10e6,
          rising=720,
          width=7200,
          falling=720,
          period=18000,
          nperiod=-2,
          offset=45e6,
          startTime=20000)
          annotation (Placement(transformation(extent={{68,74},{82,88}})));
        Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
          annotation (Placement(transformation(extent={{-70,30},{-50,50}})));
        TRANSFORM.Controls.LimPID FWCP_mflow(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5e-4,
          Ti=30,
          Td=0.1,
          yMax=8000,
          yMin=-1450,
          wd=1,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
        Modelica.Blocks.Sources.Constant const4(k=1500)
          annotation (Placement(transformation(extent={{-14,48},{-6,56}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,36},{22,56}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{2,74},{22,94}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,72},{-58,92}})));
        TRANSFORM.Controls.LimPID MFlow_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-6,
          Ti=5,
          Td=0.1,
          yMax=0,
          yMin=-1,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-46,-80},{-34,-68}})));
        Modelica.Blocks.Sources.Constant const1(k=data.m_flow_reactor)
          annotation (Placement(transformation(extent={{-92,-88},{-72,-68}})));
        Modelica.Blocks.Sources.Constant const6(k=1)
          annotation (Placement(transformation(extent={{-26,-84},{-18,-76}})));
        Modelica.Blocks.Math.Add         add3
          annotation (Placement(transformation(extent={{-2,-84},{18,-64}})));
        TRANSFORM.Controls.LimPID SHS_TCV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{98,28},{78,8}})));
        Modelica.Blocks.Sources.Constant const11(k=1)
          annotation (Placement(transformation(extent={{86,-10},{78,-2}})));
        Modelica.Blocks.Math.Add         add4
          annotation (Placement(transformation(extent={{62,0},{42,20}})));
        Modelica.Blocks.Math.Add         add5
          annotation (Placement(transformation(extent={{58,-76},{38,-56}})));
        TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-0.5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=1 - 0.015,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{90,-50},{70,-70}})));
        Modelica.Blocks.Sources.Constant const10(k=0.015)
          annotation (Placement(transformation(extent={{82,-86},{74,-78}})));
        Modelica.Blocks.Math.Add add6
          annotation (Placement(transformation(extent={{134,-68},{114,-48}})));
        Modelica.Blocks.Sources.Constant const12(k=-data.Q_Nom)
          annotation (Placement(transformation(extent={{178,-74},{158,-54}})));
        Modelica.Blocks.Sources.Constant const13(k=0)
          annotation (Placement(transformation(extent={{98,-32},{90,-24}})));
        Modelica.Blocks.Math.Add         add7
          annotation (Placement(transformation(extent={{116,48},{96,68}})));
        TRANSFORM.Controls.LimPID Discharge_OnOff_Throttle(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-0.25e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=1 - 0.01,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{152,74},{132,54}})));
        Modelica.Blocks.Sources.Constant const14(k=0)
          annotation (Placement(transformation(extent={{156,92},{148,100}})));
        Modelica.Blocks.Sources.Constant const15(k=0.01)
          annotation (Placement(transformation(extent={{140,38},{132,46}})));
        Modelica.Blocks.Math.Add add8(k1=-1)
          annotation (Placement(transformation(extent={{192,56},{172,76}})));
        Modelica.Blocks.Sources.Constant const16(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{236,50},{216,70}})));
      equation
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-66,-46},{-66,-48},{-62,-48}},
                                                           color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-50,-100},{-50,-60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-40,8},{-40,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Power.y, add1.u1)
          annotation (Line(points={{-29,-12},{-10,-12}}, color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-39,-48},{-36,
                -48},{-36,-40},{-32.8,-40}},                               color={0,0,
                127}));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-46},{13,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
            points={{30.1,-99.9},{30.1,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure,FWCP_mflow. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-30,8},{-30,28}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.opening_BV, const2.y) annotation (Line(
            points={{30.1,-99.9},{30.1,84},{23,84}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const3.y,FWCP_mflow. u_s)
          annotation (Line(points={{-49,40},{-42,40}}, color={0,0,127}));
        connect(FWCP_mflow.y, add.u2)
          annotation (Line(points={{-19,40},{0,40}}, color={0,0,127}));
        connect(const4.y, add.u1)
          annotation (Line(points={{-5.6,52},{0,52}}, color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
            points={{30,-100},{30,46},{23,46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const9.y, PI_TBV.u_s)
          annotation (Line(points={{-57,82},{-40,82}}, color={0,0,127}));
        connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,62},{-28,62},{-28,70}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
            points={{30,-100},{30,66},{-10,66},{-10,82},{-17,82}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const1.y, MFlow_Valve.u_s) annotation (Line(points={{-71,-78},{-64,-78},
                {-64,-70},{-56,-70},{-56,-74},{-47.2,-74}}, color={0,0,127}));
        connect(MFlow_Valve.y, add3.u1) annotation (Line(points={{-33.4,-74},{-32,-74},
                {-32,-72},{-10,-72},{-10,-68},{-4,-68}}, color={0,0,127}));
        connect(const6.y, add3.u2) annotation (Line(points={{-17.6,-80},{-16,-80},{-16,
                -76},{-8,-76},{-8,-86},{-4,-86},{-4,-80}}, color={0,0,127}));
        connect(sensorBus.Power, SHS_TCV.u_m) annotation (Line(
            points={{-30,-100},{106,-100},{106,36},{88,36},{88,30}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(SHS_TCV.y, add4.u1) annotation (Line(points={{77,18},{70,18},{70,16},
                {64,16}}, color={0,0,127}));
        connect(const11.y, add4.u2) annotation (Line(points={{77.6,-6},{70,-6},{70,4},
                {64,4}}, color={0,0,127}));
        connect(actuatorBus.TCV_SHS, add4.y) annotation (Line(
            points={{30,-100},{30,10},{41,10}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(realExpression.y, SHS_TCV.u_s) annotation (Line(points={{128.7,-26},{
                134,-26},{134,16},{100,16},{100,18}}, color={0,0,127}));
        connect(realExpression.y, TCV_Power.u_s) annotation (Line(points={{128.7,-26},
                {132,-26},{132,-38},{54,-38},{54,-2},{20,-2},{20,4},{-60,4},{-60,-12},
                {-52,-12}}, color={0,0,127}));
        connect(add5.u1, Charge_OnOff_Throttle.y)
          annotation (Line(points={{60,-60},{69,-60}}, color={0,0,127}));
        connect(add5.u2, const10.y) annotation (Line(points={{60,-72},{66,-72},{66,
                -82},{73.6,-82}}, color={0,0,127}));
        connect(Charge_OnOff_Throttle.u_s, add6.y) annotation (Line(points={{92,-60},
                {104,-60},{104,-58},{113,-58}}, color={0,0,127}));
        connect(realExpression.y, add6.u1) annotation (Line(points={{128.7,-26},{146,
                -26},{146,-52},{136,-52}}, color={0,0,127}));
        connect(add6.u2, const12.y)
          annotation (Line(points={{136,-64},{157,-64}}, color={0,0,127}));
        connect(const13.y, Charge_OnOff_Throttle.u_m)
          annotation (Line(points={{89.6,-28},{80,-28},{80,-48}}, color={0,0,127}));
        connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
            points={{30,-100},{30,-66},{37,-66}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(add7.u1, Discharge_OnOff_Throttle.y)
          annotation (Line(points={{118,64},{131,64}}, color={0,0,127}));
        connect(add7.u2, const15.y) annotation (Line(points={{118,52},{122,52},{122,
                46},{131.6,46},{131.6,42}}, color={0,0,127}));
        connect(Discharge_OnOff_Throttle.u_s, add8.y) annotation (Line(points={{154,
                64},{161,64},{161,66},{171,66}}, color={0,0,127}));
        connect(Discharge_OnOff_Throttle.u_m, const14.y)
          annotation (Line(points={{142,76},{142,96},{147.6,96}}, color={0,0,127}));
        connect(add8.u2, const16.y)
          annotation (Line(points={{194,60},{215,60}}, color={0,0,127}));
        connect(realExpression.y, add8.u1) annotation (Line(points={{128.7,-26},{174,
                -26},{174,-18},{206,-18},{206,72},{194,72}}, color={0,0,127}));
        connect(actuatorBus.Discharge_OnOff_Throttle, add7.y) annotation (Line(
            points={{30,-100},{30,58},{95,58}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Reactor_mflow, MFlow_Valve.u_m) annotation (Line(
            points={{-30,-100},{-30,-86},{-40,-86},{-40,-81.2}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.Reactor_mflow, add3.y) annotation (Line(
            points={{30,-100},{30,-74},{19,-74}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
      end CS_IntermediateControl_PID_TESUC_ImpControl_3;

      model CS_IntermediateControl_PID_TESUC_1_Intermediate_SmallCycle
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand
        annotation(Dialog(tab="General"));

        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand)
          annotation (Placement(transformation(extent={{114,-32},{128,-20}})));
        Data.TES_Setpoints data(
          p_steam=1200000,
          p_steam_vent=15000000,
          T_Steam_Ref=579.75,
          Q_Nom=46.5e6,
          T_Feedwater=421.15,
          T_SHS_Return=491.15)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Trapezoid trapezoid(
          amplitude=-10e6,
          rising=720,
          width=7200,
          falling=720,
          period=18000,
          nperiod=-2,
          offset=45e6,
          startTime=20000)
          annotation (Placement(transformation(extent={{68,74},{82,88}})));
        TRANSFORM.Controls.LimPID SHS_TCV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.005,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{98,28},{78,8}})));
        Modelica.Blocks.Sources.Constant const11(k=1)
          annotation (Placement(transformation(extent={{86,-10},{78,-2}})));
        Modelica.Blocks.Math.Add         add4
          annotation (Placement(transformation(extent={{62,0},{42,20}})));
        Modelica.Blocks.Math.Add         add7
          annotation (Placement(transformation(extent={{116,48},{96,68}})));
        TRANSFORM.Controls.LimPID Discharge_OnOff_Throttle(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-0.5e-9,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=1 - 0.01,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{152,74},{132,54}})));
        Modelica.Blocks.Sources.Constant const14(k=0)
          annotation (Placement(transformation(extent={{156,92},{148,100}})));
        Modelica.Blocks.Sources.Constant const15(k=0.01)
          annotation (Placement(transformation(extent={{140,38},{132,46}})));
        Modelica.Blocks.Math.Add add8(k1=-1)
          annotation (Placement(transformation(extent={{192,56},{172,76}})));
        Modelica.Blocks.Sources.Constant const16(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{236,50},{216,70}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression1(y=electric_demand - data.Q_Nom)
          annotation (Placement(transformation(extent={{166,12},{152,24}})));
        Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
          annotation (Placement(transformation(extent={{-90,62},{-70,82}})));
        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5e-4,
          Ti=5,
          Td=0.1,
          yMax=2500,
          yMin=0,
          wd=1,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-58,62},{-38,82}})));
        Modelica.Blocks.Sources.Constant const4(k=100)
          annotation (Placement(transformation(extent={{-32,80},{-24,88}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{-16,68},{4,88}})));
      equation
        connect(sensorBus.Power, SHS_TCV.u_m) annotation (Line(
            points={{-30,-100},{106,-100},{106,36},{88,36},{88,30}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(SHS_TCV.y, add4.u1) annotation (Line(points={{77,18},{70,18},{70,16},
                {64,16}}, color={0,0,127}));
        connect(const11.y, add4.u2) annotation (Line(points={{77.6,-6},{70,-6},{70,4},
                {64,4}}, color={0,0,127}));
        connect(actuatorBus.TCV_SHS, add4.y) annotation (Line(
            points={{30,-100},{30,10},{41,10}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(add7.u1, Discharge_OnOff_Throttle.y)
          annotation (Line(points={{118,64},{131,64}}, color={0,0,127}));
        connect(add7.u2, const15.y) annotation (Line(points={{118,52},{122,52},{122,
                46},{131.6,46},{131.6,42}}, color={0,0,127}));
        connect(Discharge_OnOff_Throttle.u_s, add8.y) annotation (Line(points={{154,
                64},{161,64},{161,66},{171,66}}, color={0,0,127}));
        connect(Discharge_OnOff_Throttle.u_m, const14.y)
          annotation (Line(points={{142,76},{142,96},{147.6,96}}, color={0,0,127}));
        connect(add8.u2, const16.y)
          annotation (Line(points={{194,60},{215,60}}, color={0,0,127}));
        connect(realExpression.y, add8.u1) annotation (Line(points={{128.7,-26},{174,
                -26},{174,-18},{206,-18},{206,72},{194,72}}, color={0,0,127}));
        connect(actuatorBus.Discharge_OnOff_Throttle, add7.y) annotation (Line(
            points={{30,-100},{30,58},{95,58}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(realExpression1.y, SHS_TCV.u_s)
          annotation (Line(points={{151.3,18},{100,18}}, color={0,0,127}));
        connect(sensorBus.Steam_Pressure,FWCP_Speed. u_m) annotation (Line(
            points={{-30,-100},{-118,-100},{-118,40},{-48,40},{-48,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(const3.y,FWCP_Speed. u_s)
          annotation (Line(points={{-69,72},{-60,72}}, color={0,0,127}));
        connect(FWCP_Speed.y,add. u2)
          annotation (Line(points={{-37,72},{-18,72}},
                                                     color={0,0,127}));
        connect(const4.y,add. u1)
          annotation (Line(points={{-23.6,84},{-18,84}},
                                                      color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed,add. y) annotation (Line(
            points={{30,-100},{30,78},{5,78}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
      end CS_IntermediateControl_PID_TESUC_1_Intermediate_SmallCycle;

      model CS_IntermediateControl_PID_TESUC_1_intermediate
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand
        annotation(Dialog(tab="General"));

        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-4,
          Ti=5,
          Td=0.1,
          yMax=1,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-60,-58},{-40,-38}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Power(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-50,-2},{-30,-22}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand)
          annotation (Placement(transformation(extent={{114,-32},{128,-20}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=0.015)
          annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2)
          annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
        Data.TES_Setpoints data(
          p_steam=3398000,
          p_steam_vent=15000000,
          T_Steam_Ref=579.75,
          Q_Nom=46.5e6,
          T_Feedwater=421.15,
          T_SHS_Return=491.15)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Trapezoid trapezoid(
          amplitude=-10e6,
          rising=720,
          width=7200,
          falling=720,
          period=18000,
          nperiod=-2,
          offset=45e6,
          startTime=20000)
          annotation (Placement(transformation(extent={{68,74},{82,88}})));
        Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
          annotation (Placement(transformation(extent={{-72,30},{-52,50}})));
        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PID,
          k=2.5e-5,
          Ti=20,
          Td=0.1,
          yMax=250,
          yMin=-67,
          wp=0,
          wd=1,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
        Modelica.Blocks.Sources.Constant const4(k=67)
          annotation (Placement(transformation(extent={{-14,48},{-6,56}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,36},{22,56}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{2,74},{22,94}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,72},{-58,92}})));
        TRANSFORM.Controls.LimPID SHS_TCV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{98,28},{78,8}})));
        Modelica.Blocks.Sources.Constant const11(k=1)
          annotation (Placement(transformation(extent={{86,-10},{78,-2}})));
        Modelica.Blocks.Math.Add         add4
          annotation (Placement(transformation(extent={{62,0},{42,20}})));
        Modelica.Blocks.Math.Add         add5
          annotation (Placement(transformation(extent={{58,-76},{38,-56}})));
        TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-1e-9,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=1 - 0.015,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{90,-50},{70,-70}})));
        Modelica.Blocks.Sources.Constant const10(k=0.015)
          annotation (Placement(transformation(extent={{82,-86},{74,-78}})));
        Modelica.Blocks.Math.Add add6
          annotation (Placement(transformation(extent={{134,-68},{114,-48}})));
        Modelica.Blocks.Sources.Constant const12(k=-data.Q_Nom)
          annotation (Placement(transformation(extent={{178,-74},{158,-54}})));
        Modelica.Blocks.Sources.Constant const13(k=0)
          annotation (Placement(transformation(extent={{98,-32},{90,-24}})));
        Modelica.Blocks.Math.Add         add7
          annotation (Placement(transformation(extent={{116,48},{96,68}})));
        TRANSFORM.Controls.LimPID Discharge_OnOff_Throttle(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-0.5e-9,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=1 - 0.01,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{152,74},{132,54}})));
        Modelica.Blocks.Sources.Constant const14(k=0)
          annotation (Placement(transformation(extent={{156,92},{148,100}})));
        Modelica.Blocks.Sources.Constant const15(k=0.01)
          annotation (Placement(transformation(extent={{140,38},{132,46}})));
        Modelica.Blocks.Math.Add add8(k1=-1)
          annotation (Placement(transformation(extent={{192,56},{172,76}})));
        Modelica.Blocks.Sources.Constant const16(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{236,50},{216,70}})));
      equation
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-66,-46},{-66,-48},{-62,-48}},
                                                           color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-50,-100},{-50,-60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-40,8},{-40,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Power.y, add1.u1)
          annotation (Line(points={{-29,-12},{-10,-12}}, color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-39,-48},{-36,
                -48},{-36,-40},{-32.8,-40}},                               color={0,0,
                127}));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-46},{13,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
            points={{30.1,-99.9},{30.1,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure, FWCP_Speed.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-30,8},{-30,28}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.opening_BV, const2.y) annotation (Line(
            points={{30.1,-99.9},{30.1,84},{23,84}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const3.y, FWCP_Speed.u_s)
          annotation (Line(points={{-51,40},{-42,40}}, color={0,0,127}));
        connect(FWCP_Speed.y, add.u2)
          annotation (Line(points={{-19,40},{0,40}}, color={0,0,127}));
        connect(const4.y, add.u1)
          annotation (Line(points={{-5.6,52},{0,52}}, color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
            points={{30,-100},{30,46},{23,46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const9.y, PI_TBV.u_s)
          annotation (Line(points={{-57,82},{-40,82}}, color={0,0,127}));
        connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,62},{-28,62},{-28,70}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
            points={{30,-100},{30,66},{-10,66},{-10,82},{-17,82}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Power, SHS_TCV.u_m) annotation (Line(
            points={{-30,-100},{106,-100},{106,36},{88,36},{88,30}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(SHS_TCV.y, add4.u1) annotation (Line(points={{77,18},{70,18},{70,16},
                {64,16}}, color={0,0,127}));
        connect(const11.y, add4.u2) annotation (Line(points={{77.6,-6},{70,-6},{70,4},
                {64,4}}, color={0,0,127}));
        connect(actuatorBus.TCV_SHS, add4.y) annotation (Line(
            points={{30,-100},{30,10},{41,10}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(realExpression.y, SHS_TCV.u_s) annotation (Line(points={{128.7,-26},{
                134,-26},{134,16},{100,16},{100,18}}, color={0,0,127}));
        connect(realExpression.y, TCV_Power.u_s) annotation (Line(points={{128.7,-26},
                {132,-26},{132,-38},{54,-38},{54,-2},{20,-2},{20,4},{-60,4},{-60,-12},
                {-52,-12}}, color={0,0,127}));
        connect(add5.u1, Charge_OnOff_Throttle.y)
          annotation (Line(points={{60,-60},{69,-60}}, color={0,0,127}));
        connect(add5.u2, const10.y) annotation (Line(points={{60,-72},{66,-72},{66,
                -82},{73.6,-82}}, color={0,0,127}));
        connect(Charge_OnOff_Throttle.u_s, add6.y) annotation (Line(points={{92,-60},
                {104,-60},{104,-58},{113,-58}}, color={0,0,127}));
        connect(realExpression.y, add6.u1) annotation (Line(points={{128.7,-26},{146,
                -26},{146,-52},{136,-52}}, color={0,0,127}));
        connect(add6.u2, const12.y)
          annotation (Line(points={{136,-64},{157,-64}}, color={0,0,127}));
        connect(const13.y, Charge_OnOff_Throttle.u_m)
          annotation (Line(points={{89.6,-28},{80,-28},{80,-48}}, color={0,0,127}));
        connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
            points={{30,-100},{30,-66},{37,-66}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(add7.u1, Discharge_OnOff_Throttle.y)
          annotation (Line(points={{118,64},{131,64}}, color={0,0,127}));
        connect(add7.u2, const15.y) annotation (Line(points={{118,52},{122,52},{122,
                46},{131.6,46},{131.6,42}}, color={0,0,127}));
        connect(Discharge_OnOff_Throttle.u_s, add8.y) annotation (Line(points={{154,
                64},{161,64},{161,66},{171,66}}, color={0,0,127}));
        connect(Discharge_OnOff_Throttle.u_m, const14.y)
          annotation (Line(points={{142,76},{142,96},{147.6,96}}, color={0,0,127}));
        connect(add8.u2, const16.y)
          annotation (Line(points={{194,60},{215,60}}, color={0,0,127}));
        connect(realExpression.y, add8.u1) annotation (Line(points={{128.7,-26},{174,
                -26},{174,-18},{206,-18},{206,72},{194,72}}, color={0,0,127}));
        connect(actuatorBus.Discharge_OnOff_Throttle, add7.y) annotation (Line(
            points={{30,-100},{30,58},{95,58}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
      end CS_IntermediateControl_PID_TESUC_1_intermediate;

      model CS_IntermediateControl_PID_TESUC_ImpControl_2
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand
        annotation(Dialog(tab="General"));

        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-4,
          Ti=5,
          Td=0.1,
          yMax=1,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-60,-58},{-40,-38}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Power(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-50,-2},{-30,-22}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand)
          annotation (Placement(transformation(extent={{114,-32},{128,-20}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=0.015)
          annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2)
          annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
        Data.TES_Setpoints data(
          p_steam=3398000,
          p_steam_vent=15000000,
          T_Steam_Ref=579.75,
          Q_Nom=46.5e6,
          T_Feedwater=421.15,
          T_SHS_Return=491.15)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Trapezoid trapezoid(
          amplitude=-10e6,
          rising=720,
          width=7200,
          falling=720,
          period=18000,
          nperiod=-2,
          offset=45e6,
          startTime=20000)
          annotation (Placement(transformation(extent={{68,74},{82,88}})));
        Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
          annotation (Placement(transformation(extent={{-70,30},{-50,50}})));
        TRANSFORM.Controls.LimPID FWCP_mflow(
          controllerType=Modelica.Blocks.Types.SimpleController.PID,
          k=2.5e-5,
          Ti=20,
          Td=0.1,
          yMax=250,
          yMin=-67,
          wp=0,
          wd=1,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
        Modelica.Blocks.Sources.Constant const4(k=67)
          annotation (Placement(transformation(extent={{-14,48},{-6,56}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,36},{22,56}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{2,74},{22,94}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,72},{-58,92}})));
        TRANSFORM.Controls.LimPID SHS_Pump_MFR(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-3,
          Ti=5,
          Td=0.1,
          yMax=100,
          yMin=-19.9,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-46,-80},{-34,-68}})));
        Modelica.Blocks.Sources.Constant const1(k=data.T_SHS_Return)
          annotation (Placement(transformation(extent={{-92,-88},{-72,-68}})));
        Modelica.Blocks.Sources.Constant const6(k=20)
          annotation (Placement(transformation(extent={{-26,-84},{-18,-76}})));
        Modelica.Blocks.Math.Add         add3
          annotation (Placement(transformation(extent={{-2,-84},{18,-64}})));
        TRANSFORM.Controls.LimPID SHS_TCV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{98,28},{78,8}})));
        Modelica.Blocks.Sources.Constant const11(k=1)
          annotation (Placement(transformation(extent={{86,-10},{78,-2}})));
        Modelica.Blocks.Math.Add         add4
          annotation (Placement(transformation(extent={{62,0},{42,20}})));
        Modelica.Blocks.Math.Add         add5
          annotation (Placement(transformation(extent={{58,-76},{38,-56}})));
        TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-1e-9,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=1 - 0.015,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{90,-50},{70,-70}})));
        Modelica.Blocks.Sources.Constant const10(k=0.015)
          annotation (Placement(transformation(extent={{82,-86},{74,-78}})));
        Modelica.Blocks.Math.Add add6
          annotation (Placement(transformation(extent={{134,-68},{114,-48}})));
        Modelica.Blocks.Sources.Constant const12(k=-data.Q_Nom)
          annotation (Placement(transformation(extent={{178,-74},{158,-54}})));
        Modelica.Blocks.Sources.Constant const13(k=0)
          annotation (Placement(transformation(extent={{98,-32},{90,-24}})));
        Modelica.Blocks.Math.Add         add7
          annotation (Placement(transformation(extent={{116,48},{96,68}})));
        TRANSFORM.Controls.LimPID Discharge_OnOff_Throttle(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-0.5e-9,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=1 - 0.01,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{152,74},{132,54}})));
        Modelica.Blocks.Sources.Constant const14(k=0)
          annotation (Placement(transformation(extent={{156,92},{148,100}})));
        Modelica.Blocks.Sources.Constant const15(k=0.01)
          annotation (Placement(transformation(extent={{140,38},{132,46}})));
        Modelica.Blocks.Math.Add add8(k1=-1)
          annotation (Placement(transformation(extent={{192,56},{172,76}})));
        Modelica.Blocks.Sources.Constant const16(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{236,50},{216,70}})));
      equation
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-66,-46},{-66,-48},{-62,-48}},
                                                           color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-50,-100},{-50,-60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-40,8},{-40,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Power.y, add1.u1)
          annotation (Line(points={{-29,-12},{-10,-12}}, color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-39,-48},{-36,
                -48},{-36,-40},{-32.8,-40}},                               color={0,0,
                127}));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-46},{13,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
            points={{30.1,-99.9},{30.1,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure,FWCP_mflow. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-30,8},{-30,28}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.opening_BV, const2.y) annotation (Line(
            points={{30.1,-99.9},{30.1,84},{23,84}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const3.y,FWCP_mflow. u_s)
          annotation (Line(points={{-49,40},{-42,40}}, color={0,0,127}));
        connect(FWCP_mflow.y, add.u2)
          annotation (Line(points={{-19,40},{0,40}}, color={0,0,127}));
        connect(const4.y, add.u1)
          annotation (Line(points={{-5.6,52},{0,52}}, color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
            points={{30,-100},{30,46},{23,46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const9.y, PI_TBV.u_s)
          annotation (Line(points={{-57,82},{-40,82}}, color={0,0,127}));
        connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,62},{-28,62},{-28,70}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
            points={{30,-100},{30,66},{-10,66},{-10,82},{-17,82}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.SHS_Return_T, SHS_Pump_MFR.u_m) annotation (Line(
            points={{-30,-100},{-40,-100},{-40,-81.2}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(const1.y, SHS_Pump_MFR.u_s) annotation (Line(points={{-71,-78},{-56,-78},
                {-56,-74},{-47.2,-74}}, color={0,0,127}));
        connect(SHS_Pump_MFR.y, add3.u1) annotation (Line(points={{-33.4,-74},{-32,-74},
                {-32,-72},{-10,-72},{-10,-68},{-4,-68}}, color={0,0,127}));
        connect(const6.y, add3.u2) annotation (Line(points={{-17.6,-80},{-16,-80},{-16,
                -76},{-8,-76},{-8,-86},{-4,-86},{-4,-80}}, color={0,0,127}));
        connect(sensorBus.Power, SHS_TCV.u_m) annotation (Line(
            points={{-30,-100},{106,-100},{106,36},{88,36},{88,30}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(SHS_TCV.y, add4.u1) annotation (Line(points={{77,18},{70,18},{70,16},
                {64,16}}, color={0,0,127}));
        connect(const11.y, add4.u2) annotation (Line(points={{77.6,-6},{70,-6},{70,4},
                {64,4}}, color={0,0,127}));
        connect(actuatorBus.TCV_SHS, add4.y) annotation (Line(
            points={{30,-100},{30,10},{41,10}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(realExpression.y, SHS_TCV.u_s) annotation (Line(points={{128.7,-26},{
                134,-26},{134,16},{100,16},{100,18}}, color={0,0,127}));
        connect(realExpression.y, TCV_Power.u_s) annotation (Line(points={{128.7,-26},
                {132,-26},{132,-38},{54,-38},{54,-2},{20,-2},{20,4},{-60,4},{-60,-12},
                {-52,-12}}, color={0,0,127}));
        connect(add5.u1, Charge_OnOff_Throttle.y)
          annotation (Line(points={{60,-60},{69,-60}}, color={0,0,127}));
        connect(add5.u2, const10.y) annotation (Line(points={{60,-72},{66,-72},{66,
                -82},{73.6,-82}}, color={0,0,127}));
        connect(Charge_OnOff_Throttle.u_s, add6.y) annotation (Line(points={{92,-60},
                {104,-60},{104,-58},{113,-58}}, color={0,0,127}));
        connect(realExpression.y, add6.u1) annotation (Line(points={{128.7,-26},{146,
                -26},{146,-52},{136,-52}}, color={0,0,127}));
        connect(add6.u2, const12.y)
          annotation (Line(points={{136,-64},{157,-64}}, color={0,0,127}));
        connect(const13.y, Charge_OnOff_Throttle.u_m)
          annotation (Line(points={{89.6,-28},{80,-28},{80,-48}}, color={0,0,127}));
        connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
            points={{30,-100},{30,-66},{37,-66}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(add7.u1, Discharge_OnOff_Throttle.y)
          annotation (Line(points={{118,64},{131,64}}, color={0,0,127}));
        connect(add7.u2, const15.y) annotation (Line(points={{118,52},{122,52},{122,
                46},{131.6,46},{131.6,42}}, color={0,0,127}));
        connect(Discharge_OnOff_Throttle.u_s, add8.y) annotation (Line(points={{154,
                64},{161,64},{161,66},{171,66}}, color={0,0,127}));
        connect(Discharge_OnOff_Throttle.u_m, const14.y)
          annotation (Line(points={{142,76},{142,96},{147.6,96}}, color={0,0,127}));
        connect(add8.u2, const16.y)
          annotation (Line(points={{194,60},{215,60}}, color={0,0,127}));
        connect(realExpression.y, add8.u1) annotation (Line(points={{128.7,-26},{174,
                -26},{174,-18},{206,-18},{206,72},{194,72}}, color={0,0,127}));
        connect(actuatorBus.Discharge_OnOff_Throttle, add7.y) annotation (Line(
            points={{30,-100},{30,58},{95,58}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
      end CS_IntermediateControl_PID_TESUC_ImpControl_2;

      model CS_IntermediateControl_PID_TESUC_ImpControl
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand
        annotation(Dialog(tab="General"));

        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-4,
          Ti=5,
          Td=0.1,
          yMax=1,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-60,-58},{-40,-38}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Power(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-50,-2},{-30,-22}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand)
          annotation (Placement(transformation(extent={{114,-32},{128,-20}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=0.015)
          annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2)
          annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
        Data.TES_Setpoints data(
          p_steam=3398000,
          p_steam_vent=15000000,
          T_Steam_Ref=579.75,
          Q_Nom=40e6,
          T_Feedwater=421.15,
          T_SHS_Return=491.15)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Trapezoid trapezoid(
          amplitude=-10e6,
          rising=720,
          width=7200,
          falling=720,
          period=18000,
          nperiod=-2,
          offset=45e6,
          startTime=20000)
          annotation (Placement(transformation(extent={{68,74},{82,88}})));
        Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
          annotation (Placement(transformation(extent={{-70,30},{-50,50}})));
        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5e-7,
          Ti=20,
          yMax=250,
          yMin=-72,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
        Modelica.Blocks.Sources.Constant const4(k=72.1)
          annotation (Placement(transformation(extent={{-14,48},{-6,56}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,36},{22,56}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{2,74},{22,94}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,72},{-58,92}})));
        TRANSFORM.Controls.LimPID SHS_Pump_MFR(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-3,
          Ti=5,
          Td=0.1,
          yMax=100,
          yMin=-19.9,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-46,-80},{-34,-68}})));
        Modelica.Blocks.Sources.Constant const1(k=data.T_SHS_Return)
          annotation (Placement(transformation(extent={{-92,-88},{-72,-68}})));
        Modelica.Blocks.Sources.Constant const6(k=20)
          annotation (Placement(transformation(extent={{-26,-84},{-18,-76}})));
        Modelica.Blocks.Math.Add         add3
          annotation (Placement(transformation(extent={{-2,-84},{18,-64}})));
        TRANSFORM.Controls.LimPID SHS_TCV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{98,28},{78,8}})));
        Modelica.Blocks.Sources.Constant const11(k=1)
          annotation (Placement(transformation(extent={{86,-10},{78,-2}})));
        Modelica.Blocks.Math.Add         add4
          annotation (Placement(transformation(extent={{62,0},{42,20}})));
        Modelica.Blocks.Math.Add         add5
          annotation (Placement(transformation(extent={{58,-76},{38,-56}})));
        TRANSFORM.Controls.LimPID SHS_Throttle(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-1e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=1 - 0.015,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{90,-50},{70,-70}})));
        Modelica.Blocks.Sources.Constant const10(k=0.015)
          annotation (Placement(transformation(extent={{82,-86},{74,-78}})));
        Modelica.Blocks.Math.Add add6
          annotation (Placement(transformation(extent={{134,-68},{114,-48}})));
        Modelica.Blocks.Sources.Constant const12(k=-data.Q_Nom)
          annotation (Placement(transformation(extent={{178,-74},{158,-54}})));
        Modelica.Blocks.Sources.Constant const13(k=0)
          annotation (Placement(transformation(extent={{98,-32},{90,-24}})));
        Modelica.Blocks.Math.Add         add7
          annotation (Placement(transformation(extent={{116,48},{96,68}})));
        TRANSFORM.Controls.LimPID Discharge_MassFlow(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-2e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-18,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{150,74},{130,54}})));
        Modelica.Blocks.Sources.Constant const14(k=0)
          annotation (Placement(transformation(extent={{156,92},{148,100}})));
        Modelica.Blocks.Sources.Constant const15(k=20)
          annotation (Placement(transformation(extent={{140,38},{132,46}})));
        Modelica.Blocks.Math.Add add8(k1=-1)
          annotation (Placement(transformation(extent={{192,56},{172,76}})));
        Modelica.Blocks.Sources.Constant const16(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{236,50},{216,70}})));
      equation
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-66,-46},{-66,-48},{-62,-48}},
                                                           color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-50,-100},{-50,-60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-40,8},{-40,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Power.y, add1.u1)
          annotation (Line(points={{-29,-12},{-10,-12}}, color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-39,-48},{-36,
                -48},{-36,-40},{-32.8,-40}},                               color={0,0,
                127}));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-46},{13,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
            points={{30.1,-99.9},{30.1,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure, FWCP_Speed.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-30,8},{-30,28}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.opening_BV, const2.y) annotation (Line(
            points={{30.1,-99.9},{30.1,84},{23,84}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const3.y, FWCP_Speed.u_s)
          annotation (Line(points={{-49,40},{-42,40}}, color={0,0,127}));
        connect(FWCP_Speed.y, add.u2)
          annotation (Line(points={{-19,40},{0,40}}, color={0,0,127}));
        connect(const4.y, add.u1)
          annotation (Line(points={{-5.6,52},{0,52}}, color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
            points={{30,-100},{30,46},{23,46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const9.y, PI_TBV.u_s)
          annotation (Line(points={{-57,82},{-40,82}}, color={0,0,127}));
        connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,62},{-28,62},{-28,70}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
            points={{30,-100},{30,66},{-10,66},{-10,82},{-17,82}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.SHS_Return_T, SHS_Pump_MFR.u_m) annotation (Line(
            points={{-30,-100},{-40,-100},{-40,-81.2}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(const1.y, SHS_Pump_MFR.u_s) annotation (Line(points={{-71,-78},{-56,-78},
                {-56,-74},{-47.2,-74}}, color={0,0,127}));
        connect(SHS_Pump_MFR.y, add3.u1) annotation (Line(points={{-33.4,-74},{-32,-74},
                {-32,-72},{-10,-72},{-10,-68},{-4,-68}}, color={0,0,127}));
        connect(const6.y, add3.u2) annotation (Line(points={{-17.6,-80},{-16,-80},{-16,
                -76},{-8,-76},{-8,-86},{-4,-86},{-4,-80}}, color={0,0,127}));
        connect(sensorBus.Power, SHS_TCV.u_m) annotation (Line(
            points={{-30,-100},{106,-100},{106,36},{88,36},{88,30}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(SHS_TCV.y, add4.u1) annotation (Line(points={{77,18},{70,18},{70,16},
                {64,16}}, color={0,0,127}));
        connect(const11.y, add4.u2) annotation (Line(points={{77.6,-6},{70,-6},{70,4},
                {64,4}}, color={0,0,127}));
        connect(actuatorBus.TCV_SHS, add4.y) annotation (Line(
            points={{30,-100},{30,10},{41,10}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(realExpression.y, SHS_TCV.u_s) annotation (Line(points={{128.7,-26},{
                134,-26},{134,16},{100,16},{100,18}}, color={0,0,127}));
        connect(realExpression.y, TCV_Power.u_s) annotation (Line(points={{128.7,-26},
                {132,-26},{132,-38},{54,-38},{54,-2},{20,-2},{20,4},{-60,4},{-60,-12},
                {-52,-12}}, color={0,0,127}));
        connect(add5.u1, SHS_Throttle.y)
          annotation (Line(points={{60,-60},{69,-60}}, color={0,0,127}));
        connect(add5.u2, const10.y) annotation (Line(points={{60,-72},{66,-72},{66,
                -82},{73.6,-82}}, color={0,0,127}));
        connect(SHS_Throttle.u_s, add6.y) annotation (Line(points={{92,-60},{104,-60},
                {104,-58},{113,-58}}, color={0,0,127}));
        connect(realExpression.y, add6.u1) annotation (Line(points={{128.7,-26},{146,
                -26},{146,-52},{136,-52}}, color={0,0,127}));
        connect(add6.u2, const12.y)
          annotation (Line(points={{136,-64},{157,-64}}, color={0,0,127}));
        connect(const13.y, SHS_Throttle.u_m)
          annotation (Line(points={{89.6,-28},{80,-28},{80,-48}}, color={0,0,127}));
        connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
            points={{30,-100},{30,-66},{37,-66}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.condensor_pump, add7.y) annotation (Line(
            points={{30,-100},{30,58},{95,58}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(add7.u1, Discharge_MassFlow.y)
          annotation (Line(points={{118,64},{129,64}}, color={0,0,127}));
        connect(add7.u2, const15.y) annotation (Line(points={{118,52},{122,52},{122,
                46},{131.6,46},{131.6,42}}, color={0,0,127}));
        connect(Discharge_MassFlow.u_s, add8.y) annotation (Line(points={{152,64},{
                161,64},{161,66},{171,66}}, color={0,0,127}));
        connect(Discharge_MassFlow.u_m, const14.y)
          annotation (Line(points={{140,76},{140,96},{147.6,96}}, color={0,0,127}));
        connect(add8.u2, const16.y)
          annotation (Line(points={{194,60},{215,60}}, color={0,0,127}));
        connect(realExpression.y, add8.u1) annotation (Line(points={{128.7,-26},{174,
                -26},{174,-18},{206,-18},{206,72},{194,72}}, color={0,0,127}));
      end CS_IntermediateControl_PID_TESUC_ImpControl;

      model CS_IntermediateControl_PID_6_Pressure
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand_int = data.Q_Nom;

        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-4,
          Ti=60,
          Td=0.1,
          yMax=1,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-60,-58},{-40,-38}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Power(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-50,-2},{-30,-22}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand_int)
          annotation (Placement(transformation(extent={{-94,-6},{-80,6}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=0)
          annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2)
          annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
        Data.TES_Setpoints data(
          p_steam(displayUnit="Pa") = 1197000,
          p_steam_vent(displayUnit="Pa") = 15000000,
          T_Steam_Ref=491.15,
          Q_Nom=18.57e6,
          T_Feedwater=309.9)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Constant const(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{62,-12},{82,8}})));
        Modelica.Blocks.Sources.Trapezoid trapezoid(
          amplitude=-10e6,
          rising=720,
          width=7200,
          falling=720,
          period=18000,
          nperiod=-2,
          offset=45e6,
          startTime=20000)
          annotation (Placement(transformation(extent={{-92,-22},{-78,-8}})));
        Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
          annotation (Placement(transformation(extent={{-70,30},{-50,50}})));
        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5,
          Ti=5,
          yMax=100,
          yMin=-12,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
        Modelica.Blocks.Sources.Constant const4(k=12e5)
          annotation (Placement(transformation(extent={{-14,48},{-6,56}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,36},{22,56}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{2,74},{22,94}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,72},{-58,92}})));
      equation
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-66,-46},{-66,-48},{-62,-48}},
                                                           color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-50,-100},{-50,-60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-40,8},{-40,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Power.y, add1.u1)
          annotation (Line(points={{-29,-12},{-10,-12}}, color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-39,-48},{-36,
                -48},{-36,-40},{-32.8,-40}},                               color={0,0,
                127}));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-46},{13,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
            points={{30.1,-99.9},{30.1,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure, FWCP_Speed.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-30,8},{-30,28}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.opening_BV, const2.y) annotation (Line(
            points={{30.1,-99.9},{30.1,84},{23,84}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const3.y, FWCP_Speed.u_s)
          annotation (Line(points={{-49,40},{-42,40}}, color={0,0,127}));
        connect(FWCP_Speed.y, add.u2)
          annotation (Line(points={{-19,40},{0,40}}, color={0,0,127}));
        connect(const4.y, add.u1)
          annotation (Line(points={{-5.6,52},{0,52}}, color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
            points={{30,-100},{30,46},{23,46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const9.y, PI_TBV.u_s)
          annotation (Line(points={{-57,82},{-40,82}}, color={0,0,127}));
        connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,62},{-28,62},{-28,70}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
            points={{30,-100},{30,66},{-10,66},{-10,82},{-17,82}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(TCV_Power.u_s, const.y) annotation (Line(points={{-52,-12},{-58,-12},
                {-58,4},{50,4},{50,18},{88,18},{88,-2},{83,-2}}, color={0,0,127}));
      end CS_IntermediateControl_PID_6_Pressure;

      model CS_IntermediateControl_PID_TESUC
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand_int = data.Q_Nom;

        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-4,
          Ti=5,
          Td=0.1,
          yMax=1,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-60,-58},{-40,-38}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Power(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-50,-2},{-30,-22}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand_int)
          annotation (Placement(transformation(extent={{-94,-6},{-80,6}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=0.015)
          annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2)
          annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
        Data.TES_Setpoints data(
          p_steam=3398000,
          p_steam_vent=15000000,
          T_Steam_Ref=579.75,
          Q_Nom=67.38e6,
          T_Feedwater=421.15)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Constant const(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{62,-12},{82,8}})));
        Modelica.Blocks.Sources.Trapezoid trapezoid(
          amplitude=-10e6,
          rising=720,
          width=7200,
          falling=720,
          period=18000,
          nperiod=-2,
          offset=45e6,
          startTime=20000)
          annotation (Placement(transformation(extent={{-92,-22},{-78,-8}})));
        Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
          annotation (Placement(transformation(extent={{-70,30},{-50,50}})));
        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5e-7,
          Ti=20,
          yMax=250,
          yMin=-72,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
        Modelica.Blocks.Sources.Constant const4(k=72.1)
          annotation (Placement(transformation(extent={{-14,48},{-6,56}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,36},{22,56}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{2,74},{22,94}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,72},{-58,92}})));
      equation
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-66,-46},{-66,-48},{-62,-48}},
                                                           color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-50,-100},{-50,-60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-40,8},{-40,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Power.y, add1.u1)
          annotation (Line(points={{-29,-12},{-10,-12}}, color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-39,-48},{-36,
                -48},{-36,-40},{-32.8,-40}},                               color={0,0,
                127}));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-46},{13,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
            points={{30.1,-99.9},{30.1,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure, FWCP_Speed.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-30,8},{-30,28}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.opening_BV, const2.y) annotation (Line(
            points={{30.1,-99.9},{30.1,84},{23,84}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const3.y, FWCP_Speed.u_s)
          annotation (Line(points={{-49,40},{-42,40}}, color={0,0,127}));
        connect(FWCP_Speed.y, add.u2)
          annotation (Line(points={{-19,40},{0,40}}, color={0,0,127}));
        connect(const4.y, add.u1)
          annotation (Line(points={{-5.6,52},{0,52}}, color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
            points={{30,-100},{30,46},{23,46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const9.y, PI_TBV.u_s)
          annotation (Line(points={{-57,82},{-40,82}}, color={0,0,127}));
        connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,62},{-28,62},{-28,70}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
            points={{30,-100},{30,66},{-10,66},{-10,82},{-17,82}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const.y, TCV_Power.u_s) annotation (Line(points={{83,-2},{88,-2},{88,
                14},{-14,14},{-14,4},{-60,4},{-60,-12},{-52,-12}}, color={0,0,127}));
      end CS_IntermediateControl_PID_TESUC;

      model CS_IntermediateControl_PID_6
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand_int = data.Q_Nom;

        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-4,
          Ti=60,
          Td=0.1,
          yMax=1,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-60,-58},{-40,-38}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Power(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-50,-2},{-30,-22}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand_int)
          annotation (Placement(transformation(extent={{-94,-6},{-80,6}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=0)
          annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
        Data.TES_Setpoints data(
          p_steam(displayUnit="bar") = 3400000,
          p_steam_vent(displayUnit="Pa") = 15000000,
          T_Steam_Ref=579.15,
          Q_Nom=30e6,
          T_Feedwater=323.15)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Constant const(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{62,-12},{82,8}})));
        Modelica.Blocks.Sources.Trapezoid trapezoid(
          amplitude=-10e6,
          rising=720,
          width=7200,
          falling=720,
          period=18000,
          nperiod=-2,
          offset=45e6,
          startTime=20000)
          annotation (Placement(transformation(extent={{-92,-22},{-78,-8}})));
        Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
          annotation (Placement(transformation(extent={{-70,30},{-50,50}})));
        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5e-5,
          Ti=20,
          yMax=250,
          yMin=-20,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
        Modelica.Blocks.Sources.Constant const4(k=200)
          annotation (Placement(transformation(extent={{-14,48},{-6,56}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,36},{22,56}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{2,74},{22,94}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,72},{-58,92}})));
      equation
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-66,-46},{-66,-48},{-62,-48}},
                                                           color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-50,-100},{-50,-60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-40,8},{-40,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Power.y, add1.u1)
          annotation (Line(points={{-29,-12},{-10,-12}}, color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                               color=
                {0,0,127}));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-46},{13,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
            points={{30.1,-99.9},{30.1,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure, FWCP_Speed.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-30,8},{-30,28}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.opening_BV, const2.y) annotation (Line(
            points={{30.1,-99.9},{30.1,84},{23,84}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const3.y, FWCP_Speed.u_s)
          annotation (Line(points={{-49,40},{-42,40}}, color={0,0,127}));
        connect(FWCP_Speed.y, add.u2)
          annotation (Line(points={{-19,40},{0,40}}, color={0,0,127}));
        connect(const4.y, add.u1)
          annotation (Line(points={{-5.6,52},{0,52}}, color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
            points={{30,-100},{30,46},{23,46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const9.y, PI_TBV.u_s)
          annotation (Line(points={{-57,82},{-40,82}}, color={0,0,127}));
        connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,62},{-28,62},{-28,70}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
            points={{30,-100},{30,66},{-10,66},{-10,82},{-17,82}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(TCV_Power.u_s, const.y) annotation (Line(points={{-52,-12},{-58,-12},
                {-58,4},{50,4},{50,18},{88,18},{88,-2},{83,-2}}, color={0,0,127}));
        connect(Turb_Divert_Valve.y, add2.u1)
          annotation (Line(points={{-39,-48},{-39,-40},{-10,-40}}, color={0,0,127}));
      end CS_IntermediateControl_PID_6;

      model CS_IntermediateControl_PID_5
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand_int = data.Q_Nom;

        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-4,
          Ti=60,
          Td=0.1,
          yMax=1,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-60,-58},{-40,-38}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Power(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=5e-8,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-50,-2},{-30,-22}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand_int)
          annotation (Placement(transformation(extent={{-94,-6},{-80,6}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=0)
          annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2)
          annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
        Data.TES_Setpoints data(
          p_steam=3500000,
          p_steam_vent=15000000,
          T_Steam_Ref=579.75,
          Q_Nom=60e6,
          T_Feedwater=421.15)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Constant const(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{62,-12},{82,8}})));
        Modelica.Blocks.Sources.Trapezoid trapezoid(
          amplitude=-10e6,
          rising=720,
          width=7200,
          falling=720,
          period=18000,
          nperiod=-2,
          offset=45e6,
          startTime=20000)
          annotation (Placement(transformation(extent={{-92,-22},{-78,-8}})));
        Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
          annotation (Placement(transformation(extent={{-70,30},{-50,50}})));
        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5e-7,
          Ti=20,
          yMax=250,
          yMin=-72,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
        Modelica.Blocks.Sources.Constant const4(k=72.1)
          annotation (Placement(transformation(extent={{-14,48},{-6,56}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,36},{22,56}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{2,74},{22,94}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,72},{-58,92}})));
      equation
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-66,-46},{-66,-48},{-62,-48}},
                                                           color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-50,-100},{-50,-60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-40,8},{-40,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Power.y, add1.u1)
          annotation (Line(points={{-29,-12},{-10,-12}}, color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-39,-48},{-36,
                -48},{-36,-40},{-32.8,-40}},                               color={0,0,
                127}));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-46},{13,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
            points={{30.1,-99.9},{30.1,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure, FWCP_Speed.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-30,8},{-30,28}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.opening_BV, const2.y) annotation (Line(
            points={{30.1,-99.9},{30.1,84},{23,84}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const3.y, FWCP_Speed.u_s)
          annotation (Line(points={{-49,40},{-42,40}}, color={0,0,127}));
        connect(FWCP_Speed.y, add.u2)
          annotation (Line(points={{-19,40},{0,40}}, color={0,0,127}));
        connect(const4.y, add.u1)
          annotation (Line(points={{-5.6,52},{0,52}}, color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
            points={{30,-100},{30,46},{23,46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const9.y, PI_TBV.u_s)
          annotation (Line(points={{-57,82},{-40,82}}, color={0,0,127}));
        connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,62},{-28,62},{-28,70}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
            points={{30,-100},{30,66},{-10,66},{-10,82},{-17,82}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(TCV_Power.u_s, const.y) annotation (Line(points={{-52,-12},{-58,-12},
                {-58,4},{50,4},{50,18},{88,18},{88,-2},{83,-2}}, color={0,0,127}));
      end CS_IntermediateControl_PID_5;

      model CS_IntermediateControl_PID_3
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-1,
          Ti=15,
          yMax=750,
          yMin=-1500,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-38,32},{-18,52}})));
        Modelica.Blocks.Sources.Constant const3(k=data.T_Steam_Ref)
          annotation (Placement(transformation(extent={{-70,32},{-50,52}})));
        Modelica.Blocks.Sources.Constant const4(k=1500)
          annotation (Placement(transformation(extent={{-14,50},{-6,58}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,38},{22,58}})));
        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1e-5,
          Ti=5,
          Td=0.1,
          yMax=1,
          yMin=1e-3,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-60,-56},{-40,-36}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Position(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1e-9,
          Ti=5,
          yMax=0,
          yMin=-1,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-54,-2},{-34,-22}})));
        Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{-84,-22},{-64,-2}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=0)
          annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2)
          annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-1e-9,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,68},{-18,88}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,68},{-58,88}})));
        Fluid.Intermediate_Rankine data(
          p_steam_vent=3600000,
          T_Steam_Ref=579.75,
          Q_Nom=60e6,
          T_Feedwater=421.15)
          annotation (Placement(transformation(extent={{-96,12},{-76,32}})));
        Modelica.Blocks.Math.Add         add3
          annotation (Placement(transformation(extent={{-8,-82},{12,-62}})));
        Modelica.Blocks.Sources.Constant const1(k=0)
          annotation (Placement(transformation(extent={{-32,-82},{-24,-74}})));
        TRANSFORM.Controls.LimPID CondensorBalance(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-1e-2,
          Ti=15,
          yMax=2000,
          yMin=-2000,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500,
          y_start=0)
          annotation (Placement(transformation(extent={{-86,-90},{-66,-70}})));
      equation
        connect(const3.y,FWCP_Speed. u_s) annotation (Line(points={{-49,42},{-40,42}},
                                    color={0,0,127}));
        connect(sensorBus.Steam_Temperature,FWCP_Speed. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-28,8},{-28,30}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const4.y,add. u1) annotation (Line(points={{-5.6,54},{0,54}},
                                         color={0,0,127}));
        connect(FWCP_Speed.y,add. u2) annotation (Line(points={{-17,42},{0,42}},
                          color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed,add. y) annotation (Line(
            points={{30,-100},{30,48},{23,48}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-62,-46}},   color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-50,-100},{-50,-58}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const6.y,TCV_Position. u_s)
          annotation (Line(points={{-63,-12},{-56,-12}},   color={0,0,127}));
        connect(sensorBus.Power,TCV_Position. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-44,8},{-44,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Position.y,add1. u1) annotation (Line(points={{-33,-12},{-10,-12}},
                                                        color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-39,-46},{-36,
                -46},{-36,-40},{-32.8,-40}},                               color={0,0,
                127}));
        connect(const9.y,PI_TBV. u_s)
          annotation (Line(points={{-57,78},{-40,78}},   color={0,0,127}));
        connect(sensorBus.Steam_Pressure,PI_TBV. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,60},{-28,60},{-28,66}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.opening_TCV,add1. y) annotation (Line(
            points={{30.1,-99.9},{30.1,-16},{30,-16},{30,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(CondensorBalance.u_m, sensorBus.Condensor_Output_mflow) annotation (
            Line(points={{-76,-92},{-76,-100},{-30,-100}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(CondensorBalance.u_s, sensorBus.Condensor_Input_mflow) annotation (
            Line(points={{-88,-80},{-100,-80},{-100,-100},{-30,-100}}, color={0,0,127}),
            Text(
            string="%second",
            index=1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(CondensorBalance.y, add3.u1) annotation (Line(points={{-65,-80},{-54,
                -80},{-54,-66},{-10,-66}}, color={0,0,127}));
        connect(const1.y, add3.u2)
          annotation (Line(points={{-23.6,-78},{-10,-78}}, color={0,0,127}));
        connect(add3.y, actuatorBus.CondensorFlow) annotation (Line(points={{13,-72},
                {30,-72},{30,-100}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-46},{13,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_BV, PI_TBV.y) annotation (Line(
            points={{30.1,-99.9},{30.1,78},{-17,78}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
      end CS_IntermediateControl_PID_3;

      model CS_IntermediateControl_PID_2
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-1e-2,
          Ti=30,
          yMax=750,
          yMin=-1000,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-38,32},{-18,52}})));
        Modelica.Blocks.Sources.Constant const3(k=data.T_Steam_Ref)
          annotation (Placement(transformation(extent={{-70,32},{-50,52}})));
        Modelica.Blocks.Sources.Constant const4(k=1500)
          annotation (Placement(transformation(extent={{-14,50},{-6,58}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,38},{22,58}})));
        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1e-5,
          Ti=15,
          yMax=1 - 1e-6,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-62,-56},{-42,-36}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Position(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1e-9,
          Ti=5,
          yMax=0,
          yMin=-1,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-54,-2},{-34,-22}})));
        Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{-84,-22},{-64,-2}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=1e-6)
          annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2)
          annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,68},{-18,88}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,68},{-58,88}})));
        Fluid.Intermediate_Rankine data
          annotation (Placement(transformation(extent={{-96,12},{-76,32}})));
        Modelica.Blocks.Sources.Constant ExternalDivertValve(k=1)
          annotation (Placement(transformation(extent={{80,-28},{60,-8}})));
        Modelica.Blocks.Sources.Constant Volume_pump(k=200)
          annotation (Placement(transformation(extent={{80,14},{60,34}})));
        Modelica.Blocks.Math.Add         add3
          annotation (Placement(transformation(extent={{-8,-82},{12,-62}})));
        Modelica.Blocks.Sources.Constant const1(k=0)
          annotation (Placement(transformation(extent={{-32,-82},{-24,-74}})));
        TRANSFORM.Controls.LimPID Turb_Divert_Valve1(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1e-2,
          Ti=15,
          yMax=200,
          yMin=-200,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-86,-90},{-66,-70}})));
      equation
        connect(const3.y,FWCP_Speed. u_s) annotation (Line(points={{-49,42},{-40,42}},
                                    color={0,0,127}));
        connect(sensorBus.Steam_Temperature,FWCP_Speed. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-28,8},{-28,30}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const4.y,add. u1) annotation (Line(points={{-5.6,54},{0,54}},
                                         color={0,0,127}));
        connect(FWCP_Speed.y,add. u2) annotation (Line(points={{-17,42},{0,42}},
                          color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed,add. y) annotation (Line(
            points={{30,-100},{30,48},{23,48}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-64,-46}},   color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-52,-100},{-52,-58}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const6.y,TCV_Position. u_s)
          annotation (Line(points={{-63,-12},{-56,-12}},   color={0,0,127}));
        connect(sensorBus.Power,TCV_Position. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-44,8},{-44,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Position.y,add1. u1) annotation (Line(points={{-33,-12},{-10,-12}},
                                                        color={0,0,127}));
        connect(actuatorBus.Divert_Valve_Position,add2. y) annotation (Line(
            points={{30,-100},{30,-46},{13,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-46},{-36,
                -46},{-36,-40},{-32.8,-40}},                               color={0,0,
                127}));
        connect(const9.y,PI_TBV. u_s)
          annotation (Line(points={{-57,78},{-40,78}},   color={0,0,127}));
        connect(sensorBus.Steam_Pressure,PI_TBV. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,60},{-28,60},{-28,66}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TBV,PI_TBV. y) annotation (Line(
            points={{30,-100},{30,78},{-17,78}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.opening_TCV,add1. y) annotation (Line(
            points={{30.1,-99.9},{30.1,-16},{30,-16},{30,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(ExternalDivertValve.y, actuatorBus.opening_BV) annotation (Line(
              points={{59,-18},{30.1,-18},{30.1,-99.9}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(Volume_pump.y, actuatorBus.Volume_Pump) annotation (Line(points={{59,24},
                {30,24},{30,-100}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(Turb_Divert_Valve1.u_m, sensorBus.Condensor_Output_mflow) annotation (
           Line(points={{-76,-92},{-76,-100},{-30,-100}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(Turb_Divert_Valve1.u_s, sensorBus.Condensor_Input_mflow) annotation (
            Line(points={{-88,-80},{-100,-80},{-100,-100},{-30,-100}}, color={0,0,127}),
            Text(
            string="%second",
            index=1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(Turb_Divert_Valve1.y, add3.u1) annotation (Line(points={{-65,-80},{
                -54,-80},{-54,-66},{-10,-66}}, color={0,0,127}));
        connect(const1.y, add3.u2)
          annotation (Line(points={{-23.6,-78},{-10,-78}}, color={0,0,127}));
        connect(add3.y, actuatorBus.CondensorFlow) annotation (Line(points={{13,-72},
                {30,-72},{30,-100}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
      end CS_IntermediateControl_PID_2;

      model CS_IntermediateControl_PID
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        TRANSFORM.Controls.LimPID FWCP_Speed(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-1e-2,
          Ti=30,
          yMax=750,
          yMin=-1000,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-38,32},{-18,52}})));
        Modelica.Blocks.Sources.Constant const3(k=data.T_Steam_Ref)
          annotation (Placement(transformation(extent={{-70,32},{-50,52}})));
        Modelica.Blocks.Sources.Constant const4(k=1500)
          annotation (Placement(transformation(extent={{-14,50},{-6,58}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{2,38},{22,58}})));
        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1e-5,
          Ti=15,
          yMax=1 - 1e-6,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-62,-56},{-42,-36}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
        TRANSFORM.Controls.LimPID TCV_Position(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1e-9,
          Ti=5,
          yMax=0,
          yMin=-1,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-54,-2},{-34,-22}})));
        Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{-84,-22},{-64,-2}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
        Modelica.Blocks.Sources.Constant const8(k=1e-6)
          annotation (Placement(transformation(extent={{-32,-62},{-24,-54}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-62},{12,-42}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2)
          annotation (Placement(transformation(extent={{-32,-50},{-24,-42}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-38,68},{-18,88}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-78,68},{-58,88}})));
        Fluid.Intermediate_Rankine data
          annotation (Placement(transformation(extent={{-96,12},{-76,32}})));
        Modelica.Blocks.Sources.Constant ExternalDivertValve(k=1e-6)
          annotation (Placement(transformation(extent={{80,-28},{60,-8}})));
        Modelica.Blocks.Sources.Constant Volume_pump(k=200)
          annotation (Placement(transformation(extent={{80,14},{60,34}})));
      equation
        connect(const3.y,FWCP_Speed. u_s) annotation (Line(points={{-49,42},{-40,42}},
                                    color={0,0,127}));
        connect(sensorBus.Steam_Temperature,FWCP_Speed. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-28,8},{-28,30}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const4.y,add. u1) annotation (Line(points={{-5.6,54},{0,54}},
                                         color={0,0,127}));
        connect(FWCP_Speed.y,add. u2) annotation (Line(points={{-17,42},{0,42}},
                          color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed,add. y) annotation (Line(
            points={{30,-100},{30,48},{23,48}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-71,-46},{-64,-46}},   color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-52,-100},{-52,-58}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const6.y,TCV_Position. u_s)
          annotation (Line(points={{-63,-12},{-56,-12}},   color={0,0,127}));
        connect(sensorBus.Power,TCV_Position. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,8},{-44,8},{-44,0}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                            color={0,0,127}));
        connect(TCV_Position.y,add1. u1) annotation (Line(points={{-33,-12},{-10,-12}},
                                                        color={0,0,127}));
        connect(actuatorBus.Divert_Valve_Position,add2. y) annotation (Line(
            points={{30,-100},{30,-52},{13,-52}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-58},{-23.6,-58}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-46},{-23.44,-46}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-46},{-32.8,
                -46}},                                                     color={0,0,
                127}));
        connect(const9.y,PI_TBV. u_s)
          annotation (Line(points={{-57,78},{-40,78}},   color={0,0,127}));
        connect(sensorBus.Steam_Pressure,PI_TBV. u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,60},{-28,60},{-28,66}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TBV,PI_TBV. y) annotation (Line(
            points={{30,-100},{30,78},{-17,78}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.opening_TCV,add1. y) annotation (Line(
            points={{30.1,-99.9},{30.1,-16},{30,-16},{30,-18},{13,-18}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(ExternalDivertValve.y, actuatorBus.opening_BV) annotation (Line(
              points={{59,-18},{30.1,-18},{30.1,-99.9}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(Volume_pump.y, actuatorBus.Volume_Pump) annotation (Line(points={{59,24},
                {30,24},{30,-100}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
      end CS_IntermediateControl_PID;

      model CS_IntermediateControl
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        Modelica.Blocks.Sources.Constant TCV_openingNominal(k=0.5)
          annotation (Placement(transformation(extent={{-10,10},{10,30}})));
        Modelica.Blocks.Sources.Constant Feed_Pump_Speed(k=2500)
          annotation (Placement(transformation(extent={{72,42},{52,62}})));
        Modelica.Blocks.Sources.Constant Divert_Valve_Position(k=0.1)
          annotation (Placement(transformation(extent={{-10,42},{10,62}})));
        Modelica.Blocks.Sources.Pulse pulse(
          amplitude=0,
          period=50,
          offset=0.001,
          startTime=20)
          annotation (Placement(transformation(extent={{-10,-42},{10,-22}})));
        Modelica.Blocks.Sources.Constant Feed_Pump_dp(k=18)
          annotation (Placement(transformation(extent={{72,-6},{52,14}})));
        Modelica.Blocks.Sources.Constant TBV(k=0)
          annotation (Placement(transformation(extent={{72,-46},{52,-26}})));
      equation
        connect(actuatorBus.opening_TCV, TCV_openingNominal.y) annotation (
           Line(
            points={{30.1,-99.9},{30.1,20},{11,20}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.Divert_Valve_Position, Divert_Valve_Position.y)
          annotation (Line(
            points={{30,-100},{30,52},{11,52}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.Feed_Pump_Speed, Feed_Pump_Speed.y)
          annotation (Line(
            points={{30,-100},{30,52},{51,52}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(pulse.y, actuatorBus.opening_BV) annotation (Line(points={{11,-32},{30.1,
                -32},{30.1,-99.9}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(Feed_Pump_dp.y, actuatorBus.condensor_pump) annotation (Line(points={
                {51,4},{30,4},{30,-100}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(TBV.y, actuatorBus.TBV) annotation (Line(points={{51,-36},{30,-36},{
                30,-100}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
      end CS_IntermediateControl;

      model CS_DirectCoupling
        extends
          NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

        extends NHES.Icons.DummyIcon;

        input Real electric_demand_large
        annotation(Dialog(tab="General"));

        TRANSFORM.Controls.LimPID Turb_Divert_Valve(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2e-4,
          Ti=5,
          Td=0.1,
          yMax=1,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.NoInit,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-62,-116},{-42,-136}})));
        Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
          annotation (Placement(transformation(extent={{-104,-136},{-84,-116}})));
        TRANSFORM.Controls.LimPID TCV_Power(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-8,
          Ti=1,
          k_s=1,
          k_m=1,
          yMax=0,
          yMin=-1 + 0.0001,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-58,-28},{-38,-48}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression(y=electric_demand_large)
          annotation (Placement(transformation(extent={{96,-32},{110,-20}})));
        Modelica.Blocks.Sources.Constant const7(k=1)
          annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
        Modelica.Blocks.Math.Add         add1
          annotation (Placement(transformation(extent={{-16,-54},{4,-34}})));
        Modelica.Blocks.Sources.Constant const8(k=0.015)
          annotation (Placement(transformation(extent={{-32,-140},{-24,-132}})));
        Modelica.Blocks.Math.Add         add2
          annotation (Placement(transformation(extent={{-8,-140},{12,-120}})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=1e-2) annotation (Placement(transformation(extent={{
                  -32,-128},{-24,-120}})));
        replaceable Data.TES_Setpoints data(
          p_steam=3398000,
          p_steam_vent=15000000,
          T_Steam_Ref=579.75,
          Q_Nom=48.57e6,
          T_Feedwater=421.15,
          T_SHS_Return=491.15,
          m_flow_reactor=67.3)
          annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
        Modelica.Blocks.Sources.Constant const3(k=data.m_flow_reactor)
          annotation (Placement(transformation(extent={{-96,62},{-76,82}})));
        TRANSFORM.Controls.LimPID FWCP_mflow(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=20,
          Td=0.1,
          yMax=1250,
          yMin=-750,
          wp=0,
          wd=1,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{-66,62},{-46,82}})));
        Modelica.Blocks.Sources.Constant const4(k=1200)
          annotation (Placement(transformation(extent={{-40,80},{-32,88}})));
        Modelica.Blocks.Math.Add         add
          annotation (Placement(transformation(extent={{-24,68},{-4,88}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{10,158},{30,178}})));
        TRANSFORM.Controls.LimPID PI_TBV(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-5e-7,
          Ti=15,
          yMax=1.0,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.NoInit)
          annotation (Placement(transformation(extent={{-58,134},{-38,154}})));
        Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
          annotation (Placement(transformation(extent={{-98,134},{-78,154}})));
        Modelica.Blocks.Math.Add         add5
          annotation (Placement(transformation(extent={{112,-106},{92,-86}})));
        TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-4e-7,
          Ti=5,
          k_s=1,
          k_m=1,
          yMax=1 - 0.015,
          yMin=0,
          initType=Modelica.Blocks.Types.Init.InitialState,
          xi_start=1500)
          annotation (Placement(transformation(extent={{152,-78},{132,-98}})));
        Modelica.Blocks.Sources.Constant const10(k=0.015)
          annotation (Placement(transformation(extent={{152,-122},{144,-114}})));
        Modelica.Blocks.Sources.Constant const1(k=data.p_steam)
          annotation (Placement(transformation(extent={{-92,-48},{-72,-28}})));
        Modelica.Blocks.Math.Min min1
          annotation (Placement(transformation(extent={{92,-80},{112,-60}})));
        Modelica.Blocks.Math.Min min2
          annotation (Placement(transformation(extent={{174,-80},{194,-60}})));
        Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
          annotation (Placement(transformation(extent={{50,-76},{74,-52}})));
        Modelica.Blocks.Sources.Constant const12(k=data.Q_Nom + 0.001e6)
          annotation (Placement(transformation(extent={{116,-58},{140,-34}})));
      equation
        connect(const5.y,Turb_Divert_Valve. u_s)
          annotation (Line(points={{-83,-126},{-64,-126}}, color={0,0,127}));
        connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
            points={{-30,-100},{-52,-100},{-52,-114}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const7.y,add1. u2) annotation (Line(points={{-25.6,-50},{-18,-50}},
                                            color={0,0,127}));
        connect(TCV_Power.y, add1.u1)
          annotation (Line(points={{-37,-38},{-18,-38}}, color={0,0,127}));
        connect(add2.u2,const8. y) annotation (Line(points={{-10,-136},{-23.6,-136}},
                                                                               color=
                {0,0,127}));
        connect(add2.u1,timer. y) annotation (Line(points={{-10,-124},{-23.44,-124}},
                                                                      color={0,0,127}));
        connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-126},{
                -36,-126},{-36,-124},{-32.8,-124}},                        color={0,0,
                127}));
        connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
            points={{30,-100},{30,-130},{13,-130}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
            points={{30.1,-99.9},{30.1,-44},{5,-44}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(actuatorBus.opening_BV, const2.y) annotation (Line(
            points={{30.1,-99.9},{30.1,118},{31,118},{31,168}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const3.y,FWCP_mflow. u_s)
          annotation (Line(points={{-75,72},{-68,72}}, color={0,0,127}));
        connect(FWCP_mflow.y, add.u2)
          annotation (Line(points={{-45,72},{-26,72}},
                                                     color={0,0,127}));
        connect(const4.y, add.u1)
          annotation (Line(points={{-31.6,84},{-26,84}},
                                                      color={0,0,127}));
        connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
            points={{30,-100},{30,78},{-3,78}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const9.y, PI_TBV.u_s)
          annotation (Line(points={{-77,144},{-60,144}},
                                                       color={0,0,127}));
        connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
            points={{-30,-100},{-120,-100},{-120,108},{-48,108},{-48,132}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
            points={{30,-100},{30,128},{-30,128},{-30,144},{-37,144}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(add5.u1, Charge_OnOff_Throttle.y)
          annotation (Line(points={{114,-90},{114,-88},{131,-88}},
                                                       color={0,0,127}));
        connect(add5.u2, const10.y) annotation (Line(points={{114,-102},{118,-102},{
                118,-118},{143.6,-118}},
                                  color={0,0,127}));
        connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
            points={{30,-100},{30,-96},{91,-96}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Steam_Pressure, TCV_Power.u_m) annotation (Line(
            points={{-30,-100},{-100,-100},{-100,-12},{-48,-12},{-48,-26}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(TCV_Power.u_s, const1.y)
          annotation (Line(points={{-60,-38},{-71,-38}}, color={0,0,127}));
        connect(sensorBus.Condensor_Output_mflow, FWCP_mflow.u_m) annotation (Line(
            points={{-30,-100},{-120,-100},{-120,46},{-56,46},{-56,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(min1.u1, const6.y)
          annotation (Line(points={{90,-64},{75.2,-64}}, color={0,0,127}));
        connect(Charge_OnOff_Throttle.u_m, min1.y) annotation (Line(points={{142,-76},
                {142,-66},{113,-66},{113,-70}}, color={0,0,127}));
        connect(realExpression.y, min2.u1) annotation (Line(points={{110.7,-26},{160,
                -26},{160,-64},{172,-64}}, color={0,0,127}));
        connect(min2.y, Charge_OnOff_Throttle.u_s) annotation (Line(points={{195,-70},
                {238,-70},{238,-88},{154,-88}}, color={0,0,127}));
        connect(min2.u2, const12.y) annotation (Line(points={{172,-76},{168,-76},{168,
                -46},{141.2,-46}}, color={0,0,127}));
        connect(sensorBus.Power, min1.u2) annotation (Line(
            points={{-30,-100},{-30,-84},{84,-84},{84,-76},{90,-76}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        annotation (Diagram(graphics={Text(
                extent={{-70,-142},{-20,-160}},
                textColor={28,108,200},
                textString="Feedwater")}));
      end CS_DirectCoupling;
    end ObsoleteCS;

    model CS_DivertPowerControl_Argonne
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand_large
      annotation(Dialog(tab="General"));

      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2e-4,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-62,-116},{-42,-136}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-104,-136},{-84,-116}})));
      TRANSFORM.Controls.LimPID TCV_Power(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-8,
        Ti=1,
        k_s=1,
        k_m=1,
        yMax=0,
        yMin=-1 + 0.0001,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,-28},{-38,-48}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand_large)
        annotation (Placement(transformation(extent={{96,-32},{110,-20}})));
      Modelica.Blocks.Sources.Constant const7(k=1)
        annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-16,-54},{4,-34}})));
      Modelica.Blocks.Sources.Constant const8(k=0.015)
        annotation (Placement(transformation(extent={{-32,-140},{-24,-132}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-8,-140},{12,-120}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-32,-128},{-24,-120}})));
      replaceable Data.TES_Setpoints data(
        p_steam=3398000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=48.57e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15,
        m_flow_reactor=67.3)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const3(k=data.m_flow_reactor)
        annotation (Placement(transformation(extent={{-96,62},{-76,82}})));
      TRANSFORM.Controls.LimPID FWCP_mflow(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.1,
        Ti=20,
        Td=0.1,
        yMax=1250,
        yMin=-750,
        wp=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-66,62},{-46,82}})));
      Modelica.Blocks.Sources.Constant const4(k=1200)
        annotation (Placement(transformation(extent={{-40,80},{-32,88}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{-24,68},{-4,88}})));
      Modelica.Blocks.Sources.Constant const2(k=1)
        annotation (Placement(transformation(extent={{10,158},{30,178}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-58,134},{-38,154}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-98,134},{-78,154}})));
      Modelica.Blocks.Math.Add         add5
        annotation (Placement(transformation(extent={{112,-106},{92,-86}})));
      TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-4e-7,
        Ti=5,
        k_s=1,
        k_m=1,
        yMax=1 - 0.015,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{152,-78},{132,-98}})));
      Modelica.Blocks.Sources.Constant const10(k=0.015)
        annotation (Placement(transformation(extent={{152,-122},{144,-114}})));
      Modelica.Blocks.Sources.Constant const1(k=data.p_steam)
        annotation (Placement(transformation(extent={{-92,-48},{-72,-28}})));
      Modelica.Blocks.Math.Min min1
        annotation (Placement(transformation(extent={{92,-80},{112,-60}})));
      Modelica.Blocks.Math.Min min2
        annotation (Placement(transformation(extent={{174,-80},{194,-60}})));
      Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{50,-76},{74,-52}})));
      Modelica.Blocks.Sources.Constant const12(k=data.Q_Nom + 0.001e6)
        annotation (Placement(transformation(extent={{116,-58},{140,-34}})));
    equation
      connect(const5.y,Turb_Divert_Valve. u_s)
        annotation (Line(points={{-83,-126},{-64,-126}}, color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-52,-100},{-52,-114}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y,add1. u2) annotation (Line(points={{-25.6,-50},{-18,-50}},
                                          color={0,0,127}));
      connect(TCV_Power.y, add1.u1)
        annotation (Line(points={{-37,-38},{-18,-38}}, color={0,0,127}));
      connect(add2.u2,const8. y) annotation (Line(points={{-10,-136},{-23.6,-136}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1,timer. y) annotation (Line(points={{-10,-124},{-23.44,-124}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-126},{
              -36,-126},{-36,-124},{-32.8,-124}},                        color={0,0,
              127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-130},{13,-130}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-44},{5,-44}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_BV, const2.y) annotation (Line(
          points={{30.1,-99.9},{30.1,118},{31,118},{31,168}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const3.y,FWCP_mflow. u_s)
        annotation (Line(points={{-75,72},{-68,72}}, color={0,0,127}));
      connect(FWCP_mflow.y, add.u2)
        annotation (Line(points={{-45,72},{-26,72}},
                                                   color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{-31.6,84},{-26,84}},
                                                    color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,78},{-3,78}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-77,144},{-60,144}},
                                                     color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,108},{-48,108},{-48,132}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,128},{-30,128},{-30,144},{-37,144}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(add5.u1, Charge_OnOff_Throttle.y)
        annotation (Line(points={{114,-90},{114,-88},{131,-88}},
                                                     color={0,0,127}));
      connect(add5.u2, const10.y) annotation (Line(points={{114,-102},{118,-102},{
              118,-118},{143.6,-118}},
                                color={0,0,127}));
      connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
          points={{30,-100},{30,-96},{91,-96}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Steam_Pressure, TCV_Power.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,-12},{-48,-12},{-48,-26}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(TCV_Power.u_s, const1.y)
        annotation (Line(points={{-60,-38},{-71,-38}}, color={0,0,127}));
      connect(sensorBus.Condensor_Output_mflow, FWCP_mflow.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,46},{-56,46},{-56,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(min1.u1, const6.y)
        annotation (Line(points={{90,-64},{75.2,-64}}, color={0,0,127}));
      connect(Charge_OnOff_Throttle.u_m, min1.y) annotation (Line(points={{142,-76},
              {142,-66},{113,-66},{113,-70}}, color={0,0,127}));
      connect(realExpression.y, min2.u1) annotation (Line(points={{110.7,-26},{160,
              -26},{160,-64},{172,-64}}, color={0,0,127}));
      connect(min2.y, Charge_OnOff_Throttle.u_s) annotation (Line(points={{195,-70},
              {238,-70},{238,-88},{154,-88}}, color={0,0,127}));
      connect(min2.u2, const12.y) annotation (Line(points={{172,-76},{168,-76},{168,
              -46},{141.2,-46}}, color={0,0,127}));
      connect(sensorBus.Power, min1.u2) annotation (Line(
          points={{-30,-100},{-30,-84},{84,-84},{84,-76},{90,-76}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      annotation (Diagram(graphics={Text(
              extent={{-70,-142},{-20,-160}},
              textColor={28,108,200},
              textString="Feedwater")}));
    end CS_DivertPowerControl_Argonne;

    model CS_SmallCycle_NoFeedHeat_Argonne
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand_TES
      annotation(Dialog(tab="General"));

      replaceable Data.TES_Setpoints data(
        p_steam=1200000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=48.57e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
        annotation (Placement(transformation(extent={{-90,62},{-70,82}})));
      TRANSFORM.Controls.LimPID FWCP_Speed(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-4,
        Ti=5,
        Td=0.1,
        yMax=2500,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,62},{-38,82}})));
      Modelica.Blocks.Sources.Constant const4(k=100)
        annotation (Placement(transformation(extent={{-32,80},{-24,88}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{-16,68},{4,88}})));
      Modelica.Blocks.Sources.Constant const11(k=0.001)
        annotation (Placement(transformation(extent={{134,-10},{126,-2}})));
      Modelica.Blocks.Math.Add         add4
        annotation (Placement(transformation(extent={{106,0},{86,20}})));
      Modelica.Blocks.Math.Add         add7
        annotation (Placement(transformation(extent={{94,48},{74,68}})));
      Modelica.Blocks.Sources.Constant const15(k=0.01)
        annotation (Placement(transformation(extent={{118,38},{110,46}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter(max=1 - 0.001)
        annotation (Placement(transformation(extent={{134,6},{114,26}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter1(max=1 - 0.01)
        annotation (Placement(transformation(extent={{138,54},{118,74}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand_TES)
        annotation (Placement(transformation(extent={{66,-26},{80,-14}})));
      TRANSFORM.Controls.LimPID TCV_SHS(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-9,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{164,6},{144,26}})));
      TRANSFORM.Controls.LimPID Discharge_OnOFF(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-9,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{184,54},{164,74}})));
    equation
      connect(sensorBus.Steam_Pressure,FWCP_Speed. u_m) annotation (Line(
          points={{-30,-100},{-118,-100},{-118,40},{-48,40},{-48,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(const3.y,FWCP_Speed. u_s)
        annotation (Line(points={{-69,72},{-60,72}}, color={0,0,127}));
      connect(FWCP_Speed.y,add. u2)
        annotation (Line(points={{-37,72},{-18,72}},
                                                   color={0,0,127}));
      connect(const4.y,add. u1)
        annotation (Line(points={{-23.6,84},{-18,84}},
                                                    color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed,add. y) annotation (Line(
          points={{30,-100},{30,78},{5,78}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const11.y,add4. u2) annotation (Line(points={{125.6,-6},{118,-6},{118,
              4},{108,4}},
                       color={0,0,127}));
      connect(actuatorBus.TCV_SHS,add4. y) annotation (Line(
          points={{30,-100},{30,10},{85,10}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(add7.u2,const15. y) annotation (Line(points={{96,52},{100,52},{100,46},
              {109.6,46},{109.6,42}},     color={0,0,127}));
      connect(actuatorBus.Discharge_OnOff_Throttle,add7. y) annotation (Line(
          points={{30,-100},{30,58},{73,58}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(minMaxFilter1.y,add7. u1)
        annotation (Line(points={{116.6,64},{96,64}},  color={0,0,127}));
      connect(add4.u1,minMaxFilter. y)
        annotation (Line(points={{108,16},{112.6,16}}, color={0,0,127}));
      connect(minMaxFilter.u, TCV_SHS.y)
        annotation (Line(points={{136,16},{143,16}}, color={0,0,127}));
      connect(sensorBus.Power, TCV_SHS.u_m) annotation (Line(
          points={{-30,-100},{-30,-52},{154,-52},{154,4}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(realExpression.y, TCV_SHS.u_s) annotation (Line(points={{80.7,-20},{
              170,-20},{170,16},{166,16}}, color={0,0,127}));
      connect(minMaxFilter1.u, Discharge_OnOFF.y)
        annotation (Line(points={{140,64},{163,64}}, color={0,0,127}));
      connect(sensorBus.Power, Discharge_OnOFF.u_m) annotation (Line(
          points={{-30,-100},{-30,-52},{184,-52},{184,38},{174,38},{174,52}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(realExpression.y, Discharge_OnOFF.u_s) annotation (Line(points={{80.7,
              -20},{204,-20},{204,64},{186,64}}, color={0,0,127}));
    end CS_SmallCycle_NoFeedHeat_Argonne;

    model CS_DivertPowerControl_HTGR
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand
      annotation(Dialog(tab="General"));
      input Real Overall_Power
      annotation(Dialog(tab="General"));

      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2e-5,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-62,-116},{-42,-136}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-104,-136},{-84,-116}})));
      TRANSFORM.Controls.LimPID TCV_Power(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-6,
        Ti=10,
        k_s=1,
        k_m=1,
        yMax=0,
        yMin=-1 + 0.01,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,-28},{-38,-48}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand)
        annotation (Placement(transformation(extent={{96,-32},{110,-20}})));
      Modelica.Blocks.Sources.Constant const7(k=1)
        annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-16,-54},{4,-34}})));
      Modelica.Blocks.Sources.Constant const8(k=0.015)
        annotation (Placement(transformation(extent={{-32,-140},{-24,-132}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-8,-140},{12,-120}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-32,-128},{-24,-120}})));
      replaceable Data.TES_Setpoints data(
        p_steam=3398000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=48.57e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15,
        m_flow_reactor=67.3)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const3(k=data.m_flow_reactor)
        annotation (Placement(transformation(extent={{-96,62},{-76,82}})));
      TRANSFORM.Controls.LimPID FWCP_mflow(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.1,
        Ti=20,
        Td=0.1,
        yMax=3000,
        yMin=-750,
        wd=1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-66,62},{-46,82}})));
      Modelica.Blocks.Sources.Constant const4(k=1200)
        annotation (Placement(transformation(extent={{-40,80},{-32,88}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{-24,68},{-4,88}})));
      Modelica.Blocks.Sources.Constant const2(k=1)
        annotation (Placement(transformation(extent={{10,158},{30,178}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-58,134},{-38,154}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-98,134},{-78,154}})));
      Modelica.Blocks.Math.Add         add5
        annotation (Placement(transformation(extent={{112,-106},{92,-86}})));
      TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=20,
        Td=0.01,
        k_s=1,
        k_m=1,
        yMax=1 - 0.015,
        yMin=0,
        wp=1,
        wd=0.1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{152,-78},{132,-98}})));
      Modelica.Blocks.Sources.Constant const10(k=0.015)
        annotation (Placement(transformation(extent={{152,-122},{144,-114}})));
      Modelica.Blocks.Sources.Constant const1(k=data.p_steam)
        annotation (Placement(transformation(extent={{-92,-48},{-72,-28}})));
      Modelica.Blocks.Math.Min min1
        annotation (Placement(transformation(extent={{92,-80},{112,-60}})));
      Modelica.Blocks.Math.Min min2
        annotation (Placement(transformation(extent={{174,-80},{194,-60}})));
      Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{50,-76},{74,-52}})));
      Modelica.Blocks.Sources.Constant const12(k=data.Q_Nom + 0.001e6)
        annotation (Placement(transformation(extent={{116,-58},{140,-34}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression1(y=Overall_Power)
        annotation (Placement(transformation(extent={{80,24},{94,36}})));
    equation
      connect(const5.y,Turb_Divert_Valve. u_s)
        annotation (Line(points={{-83,-126},{-64,-126}}, color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-52,-100},{-52,-114}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y,add1. u2) annotation (Line(points={{-25.6,-50},{-18,-50}},
                                          color={0,0,127}));
      connect(TCV_Power.y, add1.u1)
        annotation (Line(points={{-37,-38},{-18,-38}}, color={0,0,127}));
      connect(add2.u2,const8. y) annotation (Line(points={{-10,-136},{-23.6,-136}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1,timer. y) annotation (Line(points={{-10,-124},{-23.44,-124}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-126},{
              -36,-126},{-36,-124},{-32.8,-124}},                        color={0,0,
              127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-130},{13,-130}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-44},{5,-44}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_BV, const2.y) annotation (Line(
          points={{30.1,-99.9},{30.1,118},{31,118},{31,168}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const3.y,FWCP_mflow. u_s)
        annotation (Line(points={{-75,72},{-68,72}}, color={0,0,127}));
      connect(FWCP_mflow.y, add.u2)
        annotation (Line(points={{-45,72},{-26,72}},
                                                   color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{-31.6,84},{-26,84}},
                                                    color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,78},{-3,78}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-77,144},{-60,144}},
                                                     color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,108},{-48,108},{-48,132}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,128},{-30,128},{-30,144},{-37,144}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(add5.u1, Charge_OnOff_Throttle.y)
        annotation (Line(points={{114,-90},{114,-88},{131,-88}},
                                                     color={0,0,127}));
      connect(add5.u2, const10.y) annotation (Line(points={{114,-102},{118,-102},{
              118,-118},{143.6,-118}},
                                color={0,0,127}));
      connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
          points={{30,-100},{30,-96},{91,-96}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Steam_Pressure, TCV_Power.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,-12},{-48,-12},{-48,-26}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(TCV_Power.u_s, const1.y)
        annotation (Line(points={{-60,-38},{-71,-38}}, color={0,0,127}));
      connect(sensorBus.Condensor_Output_mflow, FWCP_mflow.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,46},{-56,46},{-56,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(min1.u1, const6.y)
        annotation (Line(points={{90,-64},{75.2,-64}}, color={0,0,127}));
      connect(realExpression.y, min2.u1) annotation (Line(points={{110.7,-26},{160,
              -26},{160,-64},{172,-64}}, color={0,0,127}));
      connect(min2.y, Charge_OnOff_Throttle.u_s) annotation (Line(points={{195,-70},
              {238,-70},{238,-88},{154,-88}}, color={0,0,127}));
      connect(min2.u2, const12.y) annotation (Line(points={{172,-76},{168,-76},{168,
              -46},{141.2,-46}}, color={0,0,127}));
      connect(min1.u2, const6.y) annotation (Line(points={{90,-76},{80,-76},{80,-64},
              {75.2,-64}}, color={0,0,127}));
      connect(sensorBus.Power, Charge_OnOff_Throttle.u_m) annotation (Line(
          points={{-30,-100},{-28,-100},{-28,-70},{142,-70},{142,-76}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      annotation (Diagram(graphics={Text(
              extent={{-70,-142},{-20,-160}},
              textColor={28,108,200},
              textString="Feedwater")}));
    end CS_DivertPowerControl_HTGR;

    model CS_DivertPowerControl_HTGR_3
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand
      annotation(Dialog(tab="General"));
      input Real Overall_Power
      annotation(Dialog(tab="General"));

      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2e-5,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-62,-116},{-42,-136}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-104,-136},{-84,-116}})));
      TRANSFORM.Controls.LimPID TCV_Power(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-6,
        Ti=10,
        k_s=1,
        k_m=1,
        yMax=0,
        yMin=-1 + 0.01,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,-28},{-38,-48}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand)
        annotation (Placement(transformation(extent={{96,-32},{110,-20}})));
      Modelica.Blocks.Sources.Constant const7(k=1)
        annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-16,-54},{4,-34}})));
      Modelica.Blocks.Sources.Constant const8(k=0.015)
        annotation (Placement(transformation(extent={{-32,-140},{-24,-132}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-8,-140},{12,-120}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-32,-128},{-24,-120}})));
      replaceable Data.TES_Setpoints data(
        p_steam=3398000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=48.57e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15,
        m_flow_reactor=67.3)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const3(k=data.m_flow_reactor)
        annotation (Placement(transformation(extent={{-96,62},{-76,82}})));
      TRANSFORM.Controls.LimPID FWCP_mflow(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.1,
        Ti=20,
        Td=0.1,
        yMax=3000,
        yMin=-750,
        wd=1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-66,62},{-46,82}})));
      Modelica.Blocks.Sources.Constant const4(k=1200)
        annotation (Placement(transformation(extent={{-40,80},{-32,88}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{-24,68},{-4,88}})));
      Modelica.Blocks.Sources.Constant const2(k=1)
        annotation (Placement(transformation(extent={{10,158},{30,178}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-58,134},{-38,154}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-98,134},{-78,154}})));
      Modelica.Blocks.Math.Add         add5
        annotation (Placement(transformation(extent={{112,-106},{92,-86}})));
      TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=20,
        Td=0.01,
        k_s=1,
        k_m=1,
        yMax=1 - 0.015,
        yMin=0,
        wp=1,
        wd=0.1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{152,-78},{132,-98}})));
      Modelica.Blocks.Sources.Constant const10(k=0.015)
        annotation (Placement(transformation(extent={{152,-122},{144,-114}})));
      Modelica.Blocks.Sources.Constant const1(k=data.p_steam)
        annotation (Placement(transformation(extent={{-92,-48},{-72,-28}})));
      Modelica.Blocks.Math.Min min1
        annotation (Placement(transformation(extent={{92,-80},{112,-60}})));
      Modelica.Blocks.Math.Min min2
        annotation (Placement(transformation(extent={{174,-80},{194,-60}})));
      Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{50,-76},{74,-52}})));
      Modelica.Blocks.Sources.Constant const12(k=data.Q_Nom + 0.001e6)
        annotation (Placement(transformation(extent={{116,-58},{140,-34}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression1(y=Overall_Power)
        annotation (Placement(transformation(extent={{80,24},{94,36}})));
    equation
      connect(const5.y,Turb_Divert_Valve. u_s)
        annotation (Line(points={{-83,-126},{-64,-126}}, color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-52,-100},{-52,-114}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y,add1. u2) annotation (Line(points={{-25.6,-50},{-18,-50}},
                                          color={0,0,127}));
      connect(TCV_Power.y, add1.u1)
        annotation (Line(points={{-37,-38},{-18,-38}}, color={0,0,127}));
      connect(add2.u2,const8. y) annotation (Line(points={{-10,-136},{-23.6,-136}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1,timer. y) annotation (Line(points={{-10,-124},{-23.44,-124}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-126},{
              -36,-126},{-36,-124},{-32.8,-124}},                        color={0,0,
              127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-130},{13,-130}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-44},{5,-44}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_BV, const2.y) annotation (Line(
          points={{30.1,-99.9},{30.1,118},{31,118},{31,168}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const3.y,FWCP_mflow. u_s)
        annotation (Line(points={{-75,72},{-68,72}}, color={0,0,127}));
      connect(FWCP_mflow.y, add.u2)
        annotation (Line(points={{-45,72},{-26,72}},
                                                   color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{-31.6,84},{-26,84}},
                                                    color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,78},{-3,78}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-77,144},{-60,144}},
                                                     color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,108},{-48,108},{-48,132}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,128},{-30,128},{-30,144},{-37,144}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(add5.u1, Charge_OnOff_Throttle.y)
        annotation (Line(points={{114,-90},{114,-88},{131,-88}},
                                                     color={0,0,127}));
      connect(add5.u2, const10.y) annotation (Line(points={{114,-102},{118,-102},{
              118,-118},{143.6,-118}},
                                color={0,0,127}));
      connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
          points={{30,-100},{30,-96},{91,-96}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Steam_Pressure, TCV_Power.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,-12},{-48,-12},{-48,-26}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(TCV_Power.u_s, const1.y)
        annotation (Line(points={{-60,-38},{-71,-38}}, color={0,0,127}));
      connect(sensorBus.Condensor_Output_mflow, FWCP_mflow.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,46},{-56,46},{-56,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(min1.u1, const6.y)
        annotation (Line(points={{90,-64},{75.2,-64}}, color={0,0,127}));
      connect(realExpression.y, min2.u1) annotation (Line(points={{110.7,-26},{160,
              -26},{160,-64},{172,-64}}, color={0,0,127}));
      connect(min2.y, Charge_OnOff_Throttle.u_s) annotation (Line(points={{195,-70},
              {238,-70},{238,-88},{154,-88}}, color={0,0,127}));
      connect(min2.u2, const12.y) annotation (Line(points={{172,-76},{168,-76},{168,
              -46},{141.2,-46}}, color={0,0,127}));
      connect(min1.u2, const6.y) annotation (Line(points={{90,-76},{80,-76},{80,-64},
              {75.2,-64}}, color={0,0,127}));
      connect(sensorBus.Power, Charge_OnOff_Throttle.u_m) annotation (Line(
          points={{-30,-100},{-28,-100},{-28,-70},{142,-70},{142,-76}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      annotation (Diagram(graphics={Text(
              extent={{-70,-142},{-20,-160}},
              textColor={28,108,200},
              textString="Feedwater")}));
    end CS_DivertPowerControl_HTGR_3;

    model CS_PowerBoostLoop_DivertPowerControl_HTGR
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand
      annotation(Dialog(tab="General"));

      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2e-4,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-62,-116},{-42,-136}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-104,-136},{-84,-116}})));
      TRANSFORM.Controls.LimPID TCV_Power(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-6,
        Ti=10,
        k_s=1,
        k_m=1,
        yMax=0,
        yMin=-1 + 0.0001,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,-28},{-38,-48}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand)
        annotation (Placement(transformation(extent={{96,-32},{110,-20}})));
      Modelica.Blocks.Sources.Constant const7(k=1)
        annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-16,-54},{4,-34}})));
      Modelica.Blocks.Sources.Constant const8(k=0.015)
        annotation (Placement(transformation(extent={{-32,-140},{-24,-132}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-8,-140},{12,-120}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-32,-128},{-24,-120}})));
      replaceable Data.TES_Setpoints data(
        p_steam=3398000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=52e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15,
        m_flow_reactor=67.3)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const3(k=data.m_flow_reactor)
        annotation (Placement(transformation(extent={{-96,62},{-76,82}})));
      TRANSFORM.Controls.LimPID FWCP_mflow(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.1,
        Ti=20,
        Td=0.1,
        yMax=1250,
        yMin=-750,
        wp=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-66,62},{-46,82}})));
      Modelica.Blocks.Sources.Constant const4(k=1200)
        annotation (Placement(transformation(extent={{-40,80},{-32,88}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{-24,68},{-4,88}})));
      Modelica.Blocks.Sources.Constant const2(k=1)
        annotation (Placement(transformation(extent={{10,158},{30,178}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-58,134},{-38,154}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-98,134},{-78,154}})));
      Modelica.Blocks.Math.Add         add5
        annotation (Placement(transformation(extent={{112,-106},{92,-86}})));
      TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-4e-9,
        Ti=1,
        k_s=1,
        k_m=1,
        yMax=1 - 0.015,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{152,-78},{132,-98}})));
      Modelica.Blocks.Sources.Constant const10(k=0.015)
        annotation (Placement(transformation(extent={{152,-122},{144,-114}})));
      Modelica.Blocks.Sources.Constant const1(k=data.p_steam)
        annotation (Placement(transformation(extent={{-92,-48},{-72,-28}})));
      Modelica.Blocks.Math.Min min1
        annotation (Placement(transformation(extent={{92,-80},{112,-60}})));
      Modelica.Blocks.Math.Min min2
        annotation (Placement(transformation(extent={{174,-80},{194,-60}})));
      Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{50,-76},{74,-52}})));
      Modelica.Blocks.Sources.Constant const12(k=data.Q_Nom + 0.001e6)
        annotation (Placement(transformation(extent={{140,-84},{164,-60}})));
      Modelica.Blocks.Sources.Constant const11(k=0.01)
        annotation (Placement(transformation(extent={{156,32},{148,40}})));
      Modelica.Blocks.Math.Add         add4
        annotation (Placement(transformation(extent={{128,42},{108,62}})));
      Modelica.Blocks.Math.Add         add7
        annotation (Placement(transformation(extent={{116,90},{96,110}})));
      Modelica.Blocks.Sources.Constant const15(k=0.01)
        annotation (Placement(transformation(extent={{140,80},{132,88}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter(max=1 - 0.001)
        annotation (Placement(transformation(extent={{156,48},{136,68}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter1(max=1 - 0.01)
        annotation (Placement(transformation(extent={{160,96},{140,116}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression1(y=electric_demand)
        annotation (Placement(transformation(extent={{88,16},{102,28}})));
      TRANSFORM.Controls.LimPID TCV_SHS(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-9,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{186,48},{166,68}})));
      TRANSFORM.Controls.LimPID Discharge_OnOFF(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-9,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{206,96},{186,116}})));
    equation
      connect(const5.y,Turb_Divert_Valve. u_s)
        annotation (Line(points={{-83,-126},{-64,-126}}, color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-52,-100},{-52,-114}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y,add1. u2) annotation (Line(points={{-25.6,-50},{-18,-50}},
                                          color={0,0,127}));
      connect(TCV_Power.y, add1.u1)
        annotation (Line(points={{-37,-38},{-18,-38}}, color={0,0,127}));
      connect(add2.u2,const8. y) annotation (Line(points={{-10,-136},{-23.6,-136}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1,timer. y) annotation (Line(points={{-10,-124},{-23.44,-124}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-126},{
              -36,-126},{-36,-124},{-32.8,-124}},                        color={0,0,
              127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-130},{13,-130}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-44},{5,-44}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_BV, const2.y) annotation (Line(
          points={{30.1,-99.9},{30.1,118},{31,118},{31,168}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const3.y,FWCP_mflow. u_s)
        annotation (Line(points={{-75,72},{-68,72}}, color={0,0,127}));
      connect(FWCP_mflow.y, add.u2)
        annotation (Line(points={{-45,72},{-26,72}},
                                                   color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{-31.6,84},{-26,84}},
                                                    color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,78},{-3,78}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-77,144},{-60,144}},
                                                     color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,108},{-48,108},{-48,132}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,128},{-30,128},{-30,144},{-37,144}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(add5.u1, Charge_OnOff_Throttle.y)
        annotation (Line(points={{114,-90},{114,-88},{131,-88}},
                                                     color={0,0,127}));
      connect(add5.u2, const10.y) annotation (Line(points={{114,-102},{118,-102},{
              118,-118},{143.6,-118}},
                                color={0,0,127}));
      connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
          points={{30,-100},{30,-96},{91,-96}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Steam_Pressure, TCV_Power.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,-12},{-48,-12},{-48,-26}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(TCV_Power.u_s, const1.y)
        annotation (Line(points={{-60,-38},{-71,-38}}, color={0,0,127}));
      connect(sensorBus.Condensor_Output_mflow, FWCP_mflow.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,46},{-56,46},{-56,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Power, min1.u2) annotation (Line(
          points={{-30,-100},{-30,-74},{90,-74},{90,-76}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(min1.u1, const6.y)
        annotation (Line(points={{90,-64},{75.2,-64}}, color={0,0,127}));
      connect(Charge_OnOff_Throttle.u_m, min1.y) annotation (Line(points={{142,-76},
              {142,-66},{113,-66},{113,-70}}, color={0,0,127}));
      connect(realExpression.y, min2.u1) annotation (Line(points={{110.7,-26},{160,
              -26},{160,-64},{172,-64}}, color={0,0,127}));
      connect(min2.y, Charge_OnOff_Throttle.u_s) annotation (Line(points={{195,-70},
              {238,-70},{238,-88},{154,-88}}, color={0,0,127}));
      connect(min2.u2, const12.y) annotation (Line(points={{172,-76},{168,-76},{168,
              -72},{165.2,-72}}, color={0,0,127}));
      connect(const11.y,add4. u2) annotation (Line(points={{147.6,36},{140,36},{140,
              46},{130,46}},
                       color={0,0,127}));
      connect(actuatorBus.TCV_SHS,add4. y) annotation (Line(
          points={{30,-100},{30,52},{107,52}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(add7.u2,const15. y) annotation (Line(points={{118,94},{122,94},{122,
              88},{131.6,88},{131.6,84}}, color={0,0,127}));
      connect(actuatorBus.Discharge_OnOff_Throttle,add7. y) annotation (Line(
          points={{30,-100},{30,100},{95,100}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(minMaxFilter1.y,add7. u1)
        annotation (Line(points={{138.6,106},{118,106}},
                                                       color={0,0,127}));
      connect(add4.u1,minMaxFilter. y)
        annotation (Line(points={{130,58},{134.6,58}}, color={0,0,127}));
      connect(minMaxFilter.u,TCV_SHS. y)
        annotation (Line(points={{158,58},{165,58}}, color={0,0,127}));
      connect(sensorBus.Power,TCV_SHS. u_m) annotation (Line(
          points={{-30,-100},{-30,-10},{176,-10},{176,46}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(realExpression1.y, TCV_SHS.u_s) annotation (Line(points={{102.7,22},{
              192,22},{192,58},{188,58}}, color={0,0,127}));
      connect(minMaxFilter1.u,Discharge_OnOFF. y)
        annotation (Line(points={{162,106},{185,106}},
                                                     color={0,0,127}));
      connect(sensorBus.Power,Discharge_OnOFF. u_m) annotation (Line(
          points={{-30,-100},{-30,-10},{206,-10},{206,80},{196,80},{196,94}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(realExpression1.y, Discharge_OnOFF.u_s) annotation (Line(points={{
              102.7,22},{226,22},{226,106},{208,106}}, color={0,0,127}));
      annotation (Diagram(graphics={Text(
              extent={{-70,-142},{-20,-160}},
              textColor={28,108,200},
              textString="Feedwater")}));
    end CS_PowerBoostLoop_DivertPowerControl_HTGR;

    model CS_SmallCycle_NoFeedHeat_HTGR
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand_TES
      annotation(Dialog(tab="General"));

      replaceable Data.TES_Setpoints data(
        p_steam=1200000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=48.57e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
        annotation (Placement(transformation(extent={{-90,62},{-70,82}})));
      TRANSFORM.Controls.LimPID FWCP_Speed(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-4,
        Ti=5,
        Td=0.1,
        yMax=2500,
        yMin=-1000,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,62},{-38,82}})));
      Modelica.Blocks.Sources.Constant const4(k=100)
        annotation (Placement(transformation(extent={{-32,80},{-24,88}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{-16,68},{4,88}})));
      Modelica.Blocks.Sources.Constant const11(k=0.001)
        annotation (Placement(transformation(extent={{134,-10},{126,-2}})));
      Modelica.Blocks.Math.Add         add4
        annotation (Placement(transformation(extent={{106,0},{86,20}})));
      Modelica.Blocks.Math.Add         add7
        annotation (Placement(transformation(extent={{94,48},{74,68}})));
      Modelica.Blocks.Sources.Constant const15(k=0.01)
        annotation (Placement(transformation(extent={{118,38},{110,46}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter(max=1 - 0.001)
        annotation (Placement(transformation(extent={{134,6},{114,26}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter1(max=1 - 0.01)
        annotation (Placement(transformation(extent={{138,54},{118,74}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand_TES)
        annotation (Placement(transformation(extent={{66,-26},{80,-14}})));
      TRANSFORM.Controls.LimPID TCV_SHS(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-9,
        Ti=15,
        Td=0.1,
        yMax=1,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{164,6},{144,26}})));
      TRANSFORM.Controls.LimPID Discharge_OnOFF(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5e-9,
        Ti=15,
        Td=0.1,
        yMax=1,
        yMin=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{184,54},{164,74}})));
    equation
      connect(sensorBus.Steam_Pressure,FWCP_Speed. u_m) annotation (Line(
          points={{-30,-100},{-118,-100},{-118,40},{-48,40},{-48,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(const3.y,FWCP_Speed. u_s)
        annotation (Line(points={{-69,72},{-60,72}}, color={0,0,127}));
      connect(FWCP_Speed.y,add. u2)
        annotation (Line(points={{-37,72},{-18,72}},
                                                   color={0,0,127}));
      connect(const4.y,add. u1)
        annotation (Line(points={{-23.6,84},{-18,84}},
                                                    color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed,add. y) annotation (Line(
          points={{30,-100},{30,78},{5,78}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const11.y,add4. u2) annotation (Line(points={{125.6,-6},{118,-6},{118,
              4},{108,4}},
                       color={0,0,127}));
      connect(actuatorBus.TCV_SHS,add4. y) annotation (Line(
          points={{30,-100},{30,10},{85,10}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(add7.u2,const15. y) annotation (Line(points={{96,52},{100,52},{100,46},
              {109.6,46},{109.6,42}},     color={0,0,127}));
      connect(actuatorBus.Discharge_OnOff_Throttle,add7. y) annotation (Line(
          points={{30,-100},{30,58},{73,58}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(minMaxFilter1.y,add7. u1)
        annotation (Line(points={{116.6,64},{96,64}},  color={0,0,127}));
      connect(add4.u1,minMaxFilter. y)
        annotation (Line(points={{108,16},{112.6,16}}, color={0,0,127}));
      connect(minMaxFilter.u, TCV_SHS.y)
        annotation (Line(points={{136,16},{143,16}}, color={0,0,127}));
      connect(sensorBus.Power, TCV_SHS.u_m) annotation (Line(
          points={{-30,-100},{-30,-52},{154,-52},{154,4}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(realExpression.y, TCV_SHS.u_s) annotation (Line(points={{80.7,-20},{
              170,-20},{170,16},{166,16}}, color={0,0,127}));
      connect(minMaxFilter1.u, Discharge_OnOFF.y)
        annotation (Line(points={{140,64},{163,64}}, color={0,0,127}));
      connect(sensorBus.Power, Discharge_OnOFF.u_m) annotation (Line(
          points={{-30,-100},{-30,-52},{184,-52},{184,38},{174,38},{174,52}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(realExpression.y, Discharge_OnOFF.u_s) annotation (Line(points={{80.7,
              -20},{204,-20},{204,64},{186,64}}, color={0,0,127}));
    end CS_SmallCycle_NoFeedHeat_HTGR;

    model CS_SteamTurbine_L2_PressurePowerFeedtemp_HTGR
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand_int = data.Q_Nom;

      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-1e-7,
        Ti=15,
        Td=0.1,
        yMax=0.9,
        yMin=-0.0935,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-54,-60},{-34,-40}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-92,-56},{-72,-36}})));
      TRANSFORM.Controls.LimPID TCV_Power(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=1e-11,
        Ti=5,
        k_s=1,
        k_m=1,
        yMax=0.95,
        yMin=-0.04,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-50,-2},{-30,-22}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand_int)
        annotation (Placement(transformation(extent={{-94,-6},{-80,6}})));
      Modelica.Blocks.Sources.Constant const7(k=0.01)
        annotation (Placement(transformation(extent={{-26,-28},{-18,-20}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-8,-28},{12,-8}})));
      Modelica.Blocks.Sources.Constant const8(k=0.1)
        annotation (Placement(transformation(extent={{-32,-56},{-24,-48}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-8,-56},{12,-36}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-32,-44},{-24,-36}})));
      replaceable Data.Turbine_2_Setpoints data(
        p_steam=3500000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=40e6,
        T_Feedwater=421.15)
        annotation (Placement(transformation(extent={{-98,12},{-78,32}})));
      Modelica.Blocks.Sources.Constant const(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{-78,-22},{-64,-8}})));
      Modelica.Blocks.Sources.Constant const3(k=540 + 273.15)
        annotation (Placement(transformation(extent={{-180,44},{-160,64}})));
      TRANSFORM.Controls.LimPID FWCP_Speed(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-2,
        Ti=120,
        Td=1,
        yMax=3000,
        yMin=-1500,
        wp=1,
        wd=0.5,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-40,30},{-20,50}})));
      Modelica.Blocks.Sources.Constant const4(k=2800)
        annotation (Placement(transformation(extent={{-14,48},{-6,56}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{2,36},{22,56}})));
      Modelica.Blocks.Sources.Constant const2(k=1)
        annotation (Placement(transformation(extent={{2,74},{22,94}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-78,72},{-58,92}})));
      Modelica.Blocks.Sources.ContinuousClock clock(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-222,-2},{-202,18}})));
      Modelica.Blocks.Sources.Constant valvedelay(k=0)
        annotation (Placement(transformation(extent={{-218,34},{-198,54}})));
      Modelica.Blocks.Logical.Greater greater5
        annotation (Placement(transformation(extent={{-178,34},{-158,14}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV
        annotation (Placement(transformation(extent={{-138,14},{-118,34}})));
    equation
      connect(const5.y,Turb_Divert_Valve. u_s)
        annotation (Line(points={{-71,-46},{-66,-46},{-66,-50},{-56,-50}},
                                                         color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-44,-100},{-44,-62}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,8},{-40,8},{-40,0}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y,add1. u2) annotation (Line(points={{-17.6,-24},{-10,-24}},
                                          color={0,0,127}));
      connect(TCV_Power.y, add1.u1)
        annotation (Line(points={{-29,-12},{-10,-12}}, color={0,0,127}));
      connect(add2.u2,const8. y) annotation (Line(points={{-10,-52},{-23.6,-52}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1,timer. y) annotation (Line(points={{-10,-40},{-23.44,-40}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-33,-50},{-36,
              -50},{-36,-40},{-32.8,-40}},                               color={0,0,
              127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-46},{13,-46}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-18},{13,-18}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_BV, const2.y) annotation (Line(
          points={{30.1,-99.9},{30.1,84},{23,84}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const3.y, FWCP_Speed.u_s)
        annotation (Line(points={{-159,54},{-50,54},{-50,40},{-42,40}},
                                                     color={0,0,127}));
      connect(FWCP_Speed.y, add.u2)
        annotation (Line(points={{-19,40},{0,40}}, color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{-5.6,52},{0,52}}, color={0,0,127}));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-57,82},{-40,82}}, color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-100,-100},{-100,62},{-28,62},{-28,70}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,66},{-10,66},{-10,82},{-17,82}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const.y, TCV_Power.u_s) annotation (Line(points={{-63.3,-15},{-56,-15},
              {-56,-12},{-52,-12}}, color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,46},{23,46}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(valvedelay.y,greater5. u2) annotation (Line(points={{-197,44},{-188,
              44},{-188,32},{-180,32}},
                                    color={0,0,127}));
      connect(clock.y,greater5. u1) annotation (Line(points={{-201,8},{-188,8},{
              -188,24},{-180,24}},
                              color={0,0,127}));
      connect(greater5.y,switch_P_setpoint_TCV. u2)
        annotation (Line(points={{-157,24},{-140,24}},   color={255,0,255}));
      connect(const3.y, switch_P_setpoint_TCV.u3) annotation (Line(points={{-159,54},
              {-154,54},{-154,16},{-140,16}}, color={0,0,127}));
      connect(switch_P_setpoint_TCV.y, FWCP_Speed.u_m) annotation (Line(points={{
              -117,24},{-110,24},{-110,42},{-62,42},{-62,20},{-30,20},{-30,28}},
            color={0,0,127}));
      connect(sensorBus.Steam_Temperature, switch_P_setpoint_TCV.u1) annotation (
          Line(
          points={{-30,-100},{-150,-100},{-150,32},{-140,32}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
    end CS_SteamTurbine_L2_PressurePowerFeedtemp_HTGR;

    model CS_Rankine_Xe100_Based_Secondary_TransientControl

      extends BaseClasses.Partial_ControlSystem;

      Modelica.Blocks.Sources.Constant const3(k=data.T_Steam_Ref)
        annotation (Placement(transformation(extent={{-72,16},{-52,36}})));
      Modelica.Blocks.Sources.Constant const4(k=1200)
        annotation (Placement(transformation(extent={{42,72},{50,80}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{64,60},{84,80}})));
      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=1e-5,
        Ti=15,
        yMax=1 - 1e-6,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-64,-72},{-44,-52}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-94,-72},{-74,-52}})));
      TRANSFORM.Controls.LimPID TCV_Position(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=1e-9,
        Ti=5,
        yMax=0,
        yMin=-1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-56,-18},{-36,-38}})));
      Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{-86,-38},{-66,-18}})));
      Modelica.Blocks.Sources.Constant const7(k=1)
        annotation (Placement(transformation(extent={{-28,-44},{-20,-36}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-10,-44},{10,-24}})));
      Modelica.Blocks.Sources.Constant const8(k=1e-6)
        annotation (Placement(transformation(extent={{-34,-78},{-26,-70}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-10,-78},{10,-58}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-34,-66},{-26,-58}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-40,52},{-20,72}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-80,52},{-60,72}})));
      Data.HTGR_Rankine
                      data(p_steam_vent=15000000, Q_Nom=44e6)
        annotation (Placement(transformation(extent={{-98,-4},{-78,16}})));
      Modelica.Blocks.Sources.ContinuousClock clock(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{44,-44},{64,-24}})));
      Modelica.Blocks.Sources.Constant valvedelay(k=1e6)
        annotation (Placement(transformation(extent={{48,-8},{68,12}})));
      Modelica.Blocks.Logical.Greater greater5
        annotation (Placement(transformation(extent={{88,-8},{108,-28}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV
        annotation (Placement(transformation(extent={{128,-28},{148,-8}})));
      Modelica.Blocks.Sources.Trapezoid trapezoid(
        amplitude=-0.00740122,
        rising=780,
        width=1020,
        falling=780,
        period=3600,
        nperiod=1,
        offset=0.0098683,
        startTime=1e6 + 900)
        annotation (Placement(transformation(extent={{88,16},{108,36}})));
      Modelica.Blocks.Sources.ContinuousClock clock2(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-174,104},{-154,124}})));
      SupportComponents.VarLimVarK_PID PID(
        use_k_in=true,
        use_lowlim_in=true,
        use_uplim_in=true,
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        with_FF=true,
        k=-5e-1,
        Ti=30) annotation (Placement(transformation(extent={{-4,16},{16,36}})));
      Modelica.Blocks.Sources.Constant valvedelay2(k=6e5)
        annotation (Placement(transformation(extent={{-170,140},{-150,160}})));
      Modelica.Blocks.Logical.Greater greater2
        annotation (Placement(transformation(extent={{-130,140},{-110,120}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV1
        annotation (Placement(transformation(extent={{-90,120},{-70,140}})));
      Modelica.Blocks.Sources.Constant const1(k=-280)
        annotation (Placement(transformation(extent={{-122,150},{-114,158}})));
      Modelica.Blocks.Sources.Constant const2(k=-150)
        annotation (Placement(transformation(extent={{-124,96},{-116,104}})));
      Modelica.Blocks.Sources.Constant const10(k=5000)
        annotation (Placement(transformation(extent={{-64,154},{-56,162}})));
      Modelica.Blocks.Sources.Constant const11(k=-1e-1)
        annotation (Placement(transformation(extent={{-120,182},{-112,190}})));
      Modelica.Blocks.Sources.ContinuousClock clock1(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-170,188},{-150,208}})));
      Modelica.Blocks.Sources.Constant valvedelay1(k=8.5e5)
        annotation (Placement(transformation(extent={{-166,224},{-146,244}})));
      Modelica.Blocks.Logical.Greater greater1
        annotation (Placement(transformation(extent={{-126,224},{-106,204}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV2
        annotation (Placement(transformation(extent={{-86,204},{-66,224}})));
      Modelica.Blocks.Sources.Ramp ramp(
        height=-0.5e-1,
        duration=1e5,
        offset=-1e-1,
        startTime=8.7e5)
        annotation (Placement(transformation(extent={{-124,244},{-104,264}})));
      Modelica.Blocks.Sources.Trapezoid trapezoid1(
        amplitude=-280,
        rising=780,
        width=1020,
        falling=780,
        period=3600,
        nperiod=1,
        offset=0,
        startTime=1e6 + 900)
        annotation (Placement(transformation(extent={{-150,20},{-130,40}})));
    equation

      connect(const4.y, add.u1) annotation (Line(points={{50.4,76},{62,76}},
                                       color={0,0,127}));
      connect(const5.y, Turb_Divert_Valve.u_s)
        annotation (Line(points={{-73,-62},{-66,-62}},   color={0,0,127}));
      connect(sensorBus.Feedwater_Temp, Turb_Divert_Valve.u_m) annotation (Line(
          points={{-30,-100},{-54,-100},{-54,-74}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const6.y, TCV_Position.u_s)
        annotation (Line(points={{-65,-28},{-58,-28}},   color={0,0,127}));
      connect(sensorBus.Power, TCV_Position.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,-8},{-46,-8},{-46,-16}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y, add1.u2) annotation (Line(points={{-19.6,-40},{-12,-40}},
                                          color={0,0,127}));
      connect(TCV_Position.y, add1.u1) annotation (Line(points={{-35,-28},{-12,-28}},
                                                      color={0,0,127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-68},{11,-68}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(add2.u2, const8.y) annotation (Line(points={{-12,-74},{-25.6,-74}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1, timer.y) annotation (Line(points={{-12,-62},{-25.44,-62}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y, timer.u) annotation (Line(points={{-43,-62},{-34.8,
              -62}},                                                     color={0,0,
              127}));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-59,62},{-42,62}},   color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,44},{-30,44},{-30,50}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,62},{-19,62}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(clock.y, greater5.u1) annotation (Line(points={{65,-34},{80,-34},{80,
              -18},{86,-18}}, color={0,0,127}));
      connect(valvedelay.y, greater5.u2) annotation (Line(points={{69,2},{80,2},{80,
              -10},{86,-10}}, color={0,0,127}));
      connect(greater5.y, switch_P_setpoint_TCV.u2)
        annotation (Line(points={{109,-18},{126,-18}}, color={255,0,255}));
      connect(add1.y, switch_P_setpoint_TCV.u3) annotation (Line(points={{11,-34},{
              18,-34},{18,-56},{122,-56},{122,-26},{126,-26}}, color={0,0,127}));
      connect(actuatorBus.opening_TCV, switch_P_setpoint_TCV.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-62},{158,-62},{158,-18},{149,-18}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(trapezoid.y, switch_P_setpoint_TCV.u1) annotation (Line(points={{109,
              26},{118,26},{118,-10},{126,-10}}, color={0,0,127}));
      connect(clock2.y, greater2.u1) annotation (Line(points={{-153,114},{-138,114},
              {-138,130},{-132,130}}, color={0,0,127}));
      connect(valvedelay2.y, greater2.u2) annotation (Line(points={{-149,150},{-138,
              150},{-138,138},{-132,138}}, color={0,0,127}));
      connect(greater2.y, switch_P_setpoint_TCV1.u2)
        annotation (Line(points={{-109,130},{-92,130}}, color={255,0,255}));
      connect(const2.y, switch_P_setpoint_TCV1.u3) annotation (Line(points={{-115.6,
              100},{-110,100},{-110,118},{-92,118},{-92,122}}, color={0,0,127}));
      connect(const1.y, switch_P_setpoint_TCV1.u1) annotation (Line(points={{-113.6,
              154},{-98,154},{-98,138},{-92,138}}, color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,50},{92,50},{92,70},{85,70}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const10.y, PID.upperlim) annotation (Line(points={{-55.6,158},{-24,
              158},{-24,140},{-12,140},{-12,37},{0,37}},      color={0,0,127}));
      connect(switch_P_setpoint_TCV1.y, PID.lowerlim) annotation (Line(points={{-69,130},
              {-36,130},{-36,124},{-6,124},{-6,50},{-14,50},{-14,37},{6,37}},
            color={0,0,127}));
      connect(sensorBus.Steam_Temperature, PID.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,-8},{6,-8},{6,14}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(const3.y, PID.u_s)
        annotation (Line(points={{-51,26},{-6,26}}, color={0,0,127}));
      connect(PID.y, add.u2) annotation (Line(points={{17,26},{34,26},{34,34},{48,
              34},{48,64},{62,64}}, color={0,0,127}));
      connect(clock1.y, greater1.u1) annotation (Line(points={{-149,198},{-134,198},
              {-134,214},{-128,214}}, color={0,0,127}));
      connect(valvedelay1.y, greater1.u2) annotation (Line(points={{-145,234},{-134,
              234},{-134,222},{-128,222}}, color={0,0,127}));
      connect(greater1.y, switch_P_setpoint_TCV2.u2)
        annotation (Line(points={{-105,214},{-88,214}}, color={255,0,255}));
      connect(const11.y, switch_P_setpoint_TCV2.u3) annotation (Line(points={{
              -111.6,186},{-104,186},{-104,188},{-98,188},{-98,206},{-88,206}},
            color={0,0,127}));
      connect(switch_P_setpoint_TCV2.y, PID.prop_k) annotation (Line(points={{-65,214},
              {-48,214},{-48,212},{-16,212},{-16,37.4},{13.4,37.4}},    color={0,0,
              127}));
      connect(ramp.y, switch_P_setpoint_TCV2.u1) annotation (Line(points={{-103,254},
              {-96,254},{-96,222},{-88,222}}, color={0,0,127}));
      connect(trapezoid1.y, PID.u_ff) annotation (Line(points={{-129,30},{-78,30},{
              -78,40},{-12,40},{-12,34},{-6,34}}, color={0,0,127}));
    annotation(defaultComponentName="changeMe_CS", Icon(graphics));
    end CS_Rankine_Xe100_Based_Secondary_TransientControl;

    model CS_threeStagedTurbine_HTGR

      extends BaseClasses.Partial_ControlSystem;

      Modelica.Blocks.Sources.Constant const3(k=data.T_Steam_Ref)
        annotation (Placement(transformation(extent={{-72,16},{-52,36}})));
      Modelica.Blocks.Sources.Constant const4(k=1200)
        annotation (Placement(transformation(extent={{42,72},{50,80}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{64,60},{84,80}})));
      TRANSFORM.Controls.LimPID LTV2_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=1e-5,
        Ti=15,
        yMax=1 - 1e-6,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-64,-72},{-44,-52}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-94,-72},{-74,-52}})));
      TRANSFORM.Controls.LimPID TCV_Position(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-3e-9,
        Ti=360,
        yMax=0,
        yMin=-1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-56,-18},{-36,-38}})));
      Modelica.Blocks.Sources.Constant const8(k=1e-6)
        annotation (Placement(transformation(extent={{-34,-78},{-26,-70}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-10,-78},{10,-58}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-34,-66},{-26,-58}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=500,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-40,52},{-20,72}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-148,54},{-132,70}})));
      Data.HTGR_Rankine
                      data(
        p_steam_vent=14000000,
        T_Steam_Ref=788.15,                       Q_Nom=44e6)
        annotation (Placement(transformation(extent={{-98,-4},{-78,16}})));
      Modelica.Blocks.Sources.ContinuousClock clock2(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-174,146},{-154,166}})));
      Modelica.Blocks.Sources.Constant valvedelay2(k=6e5)
        annotation (Placement(transformation(extent={{-170,182},{-150,202}})));
      Modelica.Blocks.Logical.Greater greater2
        annotation (Placement(transformation(extent={{-130,182},{-110,162}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV1
        annotation (Placement(transformation(extent={{-90,162},{-70,182}})));
      Modelica.Blocks.Sources.Constant const1(k=-150)
        annotation (Placement(transformation(extent={{-122,192},{-114,200}})));
      Modelica.Blocks.Sources.Constant const2(k=-150)
        annotation (Placement(transformation(extent={{-124,138},{-116,146}})));
      Modelica.Blocks.Sources.Constant const10(k=5000)
        annotation (Placement(transformation(extent={{-64,196},{-56,204}})));
      SupportComponents.VarLimVarK_PID PID(
        use_k_in=true,
        use_lowlim_in=true,
        use_uplim_in=true,
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        with_FF=true,
        k=-5e-1,
        Ti=30) annotation (Placement(transformation(extent={{-4,16},{16,36}})));
      Modelica.Blocks.Sources.Constant const11(k=-1e-1)
        annotation (Placement(transformation(extent={{-120,224},{-112,232}})));
      Modelica.Blocks.Sources.ContinuousClock clock1(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-170,230},{-150,250}})));
      Modelica.Blocks.Sources.Constant valvedelay1(k=8.5e5)
        annotation (Placement(transformation(extent={{-166,266},{-146,286}})));
      Modelica.Blocks.Logical.Greater greater1
        annotation (Placement(transformation(extent={{-126,266},{-106,246}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV2
        annotation (Placement(transformation(extent={{-86,246},{-66,266}})));
      Modelica.Blocks.Sources.Constant
                                   const(k=-1e-1)
        annotation (Placement(transformation(extent={{-124,286},{-104,306}})));
      TRANSFORM.Controls.LimPID LTV1_Divert_Valve1(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-1e-8,
        Ti=300,
        yMax=1 - 1e-6,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=0.2)
        annotation (Placement(transformation(extent={{-56,112},{-40,128}})));
      Modelica.Blocks.Sources.Constant const_LTV1bypass_power(k=44e6)
        annotation (Placement(transformation(extent={{-148,86},{-132,102}})));
      Modelica.Blocks.Sources.Trapezoid trap_LTV1bypass_massflow(
        amplitude=30,
        rising=5e4,
        width=5e4,
        falling=5e4,
        period=20e4,
        nperiod=-1,
        offset=15,
        startTime=1e5 + 900)
        annotation (Placement(transformation(extent={{-202,112},{-186,128}})));
      Modelica.Blocks.Sources.Ramp ramp_LTV1bypass_massflow(
        height=-15,
        duration=5e4,
        offset=15,
        startTime=1e5 + 900)
        annotation (Placement(transformation(extent={{-202,62},{-186,78}})));
      Modelica.Blocks.Sources.Constant const_LTV1bypass_massflow(k=30)
        annotation (Placement(transformation(extent={{-202,86},{-186,102}})));
      Modelica.Blocks.Sources.Trapezoid trap_LTV1bypass_power(
        amplitude=-16e6,
        rising=7200,
        width=3600,
        falling=7200,
        period=21600,
        nperiod=-1,
        offset=44e6,
        startTime=1e4)
        annotation (Placement(transformation(extent={{-150,112},{-134,128}})));
      Modelica.Blocks.Sources.Constant RPM_TEST(k=1000)
        annotation (Placement(transformation(extent={{42,90},{50,98}})));
      Modelica.Blocks.Sources.Constant const12(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-196,-72},{-178,-54}})));
      Modelica.Blocks.Sources.Constant valvedelay3(k=1e5)
        annotation (Placement(transformation(extent={{-236,-18},{-216,2}})));
      Modelica.Blocks.Sources.ContinuousClock clock3(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-236,-58},{-216,-38}})));
      Modelica.Blocks.Logical.Greater greater3
        annotation (Placement(transformation(extent={{-196,-18},{-176,-38}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV3
        annotation (Placement(transformation(extent={{-156,-38},{-136,-18}})));
      Modelica.Blocks.Sources.Constant valvedelay4(k=14e6)
        annotation (Placement(transformation(extent={{-196,-4},{-176,16}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-10,-44},{10,-24}})));
      Modelica.Blocks.Sources.Constant const7(k=1.0)
        annotation (Placement(transformation(extent={{-28,-44},{-20,-36}})));
      Modelica.Blocks.Sources.Constant constant_0(k=0)
        annotation (Placement(transformation(extent={{-144,24},{-128,40}})));
    equation

      connect(const5.y,LTV2_Divert_Valve. u_s)
        annotation (Line(points={{-73,-62},{-66,-62}},   color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,LTV2_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-54,-100},{-54,-74}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-68},{11,-68}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(add2.u2, const8.y) annotation (Line(points={{-12,-74},{-25.6,-74}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1, timer.y) annotation (Line(points={{-12,-62},{-25.44,-62}},
                                                                    color={0,0,127}));
      connect(LTV2_Divert_Valve.y, timer.u) annotation (Line(points={{-43,-62},{-34.8,
              -62}},                                                     color={0,0,
              127}));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-131.2,62},{-42,62}},color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,44},{-30,44},{-30,50}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,62},{-19,62}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(clock2.y, greater2.u1) annotation (Line(points={{-153,156},{-138,156},
              {-138,172},{-132,172}}, color={0,0,127}));
      connect(valvedelay2.y, greater2.u2) annotation (Line(points={{-149,192},{-138,
              192},{-138,180},{-132,180}}, color={0,0,127}));
      connect(greater2.y, switch_P_setpoint_TCV1.u2)
        annotation (Line(points={{-109,172},{-92,172}}, color={255,0,255}));
      connect(const2.y, switch_P_setpoint_TCV1.u3) annotation (Line(points={{-115.6,
              142},{-110,142},{-110,160},{-92,160},{-92,164}}, color={0,0,127}));
      connect(const1.y, switch_P_setpoint_TCV1.u1) annotation (Line(points={{-113.6,
              196},{-98,196},{-98,180},{-92,180}}, color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,50},{92,50},{92,70},{85,70}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const10.y, PID.upperlim) annotation (Line(points={{-55.6,200},{0,200},
              {0,37}},                                        color={0,0,127}));
      connect(switch_P_setpoint_TCV1.y, PID.lowerlim) annotation (Line(points={{-69,172},
              {6,172},{6,37}},
            color={0,0,127}));
      connect(sensorBus.Steam_Temperature, PID.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,-8},{6,-8},{6,14}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(const3.y, PID.u_s)
        annotation (Line(points={{-51,26},{-6,26}}, color={0,0,127}));
      connect(PID.y, add.u2) annotation (Line(points={{17,26},{34,26},{34,34},{48,
              34},{48,64},{62,64}}, color={0,0,127}));
      connect(clock1.y, greater1.u1) annotation (Line(points={{-149,240},{-134,240},
              {-134,256},{-128,256}}, color={0,0,127}));
      connect(valvedelay1.y, greater1.u2) annotation (Line(points={{-145,276},{-134,
              276},{-134,264},{-128,264}}, color={0,0,127}));
      connect(greater1.y, switch_P_setpoint_TCV2.u2)
        annotation (Line(points={{-105,256},{-88,256}}, color={255,0,255}));
      connect(const11.y, switch_P_setpoint_TCV2.u3) annotation (Line(points={{-111.6,
              228},{-104,228},{-104,230},{-98,230},{-98,248},{-88,248}},
            color={0,0,127}));
      connect(switch_P_setpoint_TCV2.y, PID.prop_k) annotation (Line(points={{-65,256},
              {14,256},{14,37.4},{13.4,37.4}},                          color={0,0,
              127}));
      connect(const.y, switch_P_setpoint_TCV2.u1) annotation (Line(points={{-103,
              296},{-96,296},{-96,264},{-88,264}}, color={0,0,127}));
      connect(actuatorBus.openingLPTv,LTV1_Divert_Valve1. y) annotation (Line(
          points={{30,-100},{120,-100},{120,120},{-39.2,120}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(sensorBus.Power, LTV1_Divert_Valve1.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,100},{-48,100},{-48,110.4}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(sensorBus.Steam_Pressure, TCV_Position.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,-10},{-46,-10},{-46,-16}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(valvedelay3.y, greater3.u2) annotation (Line(points={{-215,-8},{-212,
              -8},{-212,-20},{-198,-20}}, color={0,0,127}));
      connect(clock3.y, greater3.u1) annotation (Line(points={{-215,-48},{-212,-48},
              {-212,-28},{-198,-28}}, color={0,0,127}));
      connect(const12.y, switch_P_setpoint_TCV3.u3) annotation (Line(points={{
              -177.1,-63},{-166,-63},{-166,-36},{-158,-36}}, color={0,0,127}));
      connect(greater3.y, switch_P_setpoint_TCV3.u2)
        annotation (Line(points={{-175,-28},{-158,-28}}, color={255,0,255}));
      connect(valvedelay4.y, switch_P_setpoint_TCV3.u1) annotation (Line(points={{
              -175,6},{-166,6},{-166,-20},{-158,-20}}, color={0,0,127}));
      connect(switch_P_setpoint_TCV3.y, TCV_Position.u_s)
        annotation (Line(points={{-135,-28},{-58,-28}}, color={0,0,127}));
      connect(TCV_Position.y, add1.u1)
        annotation (Line(points={{-35,-28},{-12,-28}}, color={0,0,127}));
      connect(const7.y, add1.u2)
        annotation (Line(points={{-19.6,-40},{-12,-40}}, color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{50.4,76},{62,76}}, color={0,0,127}));
      connect(trap_LTV1bypass_power.y, LTV1_Divert_Valve1.u_s)
        annotation (Line(points={{-133.2,120},{-57.6,120}}, color={0,0,127}));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-34},{11,-34}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(constant_0.y, PID.u_ff) annotation (Line(points={{-127.2,32},{-76,32},
              {-76,40},{-14,40},{-14,34},{-6,34}}, color={0,0,127}));
    annotation(defaultComponentName="changeMe_CS", Icon(graphics));
    end CS_threeStagedTurbine_HTGR;

    model CS_DivertPowerControl_ANL_v2
      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand_large
      annotation(Dialog(tab="General"));

      TRANSFORM.Controls.LimPID Turb_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2e-4,
        Ti=5,
        Td=0.1,
        yMax=1,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-62,-116},{-42,-136}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-104,-136},{-84,-116}})));
      TRANSFORM.Controls.LimPID TCV_Power(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=1e-9,
        Ti=5,
        k_s=1,
        k_m=1,
        yMax=1 - const7.k,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-58,-28},{-38,-48}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand_large)
        annotation (Placement(transformation(extent={{54,-8},{68,4}})));
      Modelica.Blocks.Sources.Constant const7(k=5e-3)
        annotation (Placement(transformation(extent={{-34,-54},{-26,-46}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-16,-54},{4,-34}})));
      Modelica.Blocks.Sources.Constant const8(k=0.015)
        annotation (Placement(transformation(extent={{-32,-140},{-24,-132}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-8,-140},{12,-120}})));
      NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
        timer(Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-32,-128},{-24,-120}})));
      replaceable NHES.Systems.BalanceOfPlant.RankineCycle.Data.TES_Setpoints data(
        p_steam=3398000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=48.57e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15,
        m_flow_reactor=67.3)
        annotation (Placement(transformation(extent={{78,78},{98,98}})));
      Modelica.Blocks.Sources.Constant const3(k=data.m_flow_reactor)
        annotation (Placement(transformation(extent={{-96,34},{-76,54}})));
      TRANSFORM.Controls.LimPID FWCP_mflow(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.1,
        Ti=20,
        Td=0.1,
        yMax=1250,
        yMin=-750,
        wp=0,
        wd=1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-66,34},{-46,54}})));
      Modelica.Blocks.Sources.Constant const4(k=1200)
        annotation (Placement(transformation(extent={{-40,52},{-32,60}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{-24,40},{-4,60}})));
      Modelica.Blocks.Sources.Constant const2(k=1)
        annotation (Placement(transformation(extent={{10,74},{30,94}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=15,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-58,74},{-38,94}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-98,74},{-78,94}})));
      Modelica.Blocks.Math.Add         add5
        annotation (Placement(transformation(extent={{112,-106},{92,-86}})));
      TRANSFORM.Controls.LimPID Charge_OnOff_Throttle(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-4e-7,
        Ti=5,
        k_s=1,
        k_m=1,
        yMax=1 - 0.015,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{146,-78},{126,-98}})));
      Modelica.Blocks.Sources.Constant const10(k=0.015)
        annotation (Placement(transformation(extent={{138,-122},{130,-114}})));
      Modelica.Blocks.Math.Min min1
        annotation (Placement(transformation(extent={{92,-80},{112,-60}})));
      Modelica.Blocks.Math.Min min2
        annotation (Placement(transformation(extent={{90,-18},{110,2}})));
      Modelica.Blocks.Sources.Constant const6(k=data.Q_Nom)
        annotation (Placement(transformation(extent={{50,-76},{74,-52}})));
      Modelica.Blocks.Sources.Constant const12(k=data.Q_Nom + 0.001e6)
        annotation (Placement(transformation(extent={{54,-34},{78,-10}})));
    equation
      connect(const5.y,Turb_Divert_Valve. u_s)
        annotation (Line(points={{-83,-126},{-64,-126}}, color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,Turb_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-52,-100},{-52,-114}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const7.y,add1. u2) annotation (Line(points={{-25.6,-50},{-18,-50}},
                                          color={0,0,127}));
      connect(TCV_Power.y, add1.u1)
        annotation (Line(points={{-37,-38},{-18,-38}}, color={0,0,127}));
      connect(add2.u2,const8. y) annotation (Line(points={{-10,-136},{-23.6,-136}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1,timer. y) annotation (Line(points={{-10,-124},{-23.44,-124}},
                                                                    color={0,0,127}));
      connect(Turb_Divert_Valve.y,timer. u) annotation (Line(points={{-41,-126},{
              -36,-126},{-36,-124},{-32.8,-124}},                        color={0,0,
              127}));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-130},{13,-130}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-44},{5,-44}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(actuatorBus.opening_BV, const2.y) annotation (Line(
          points={{30.1,-99.9},{30.1,58},{31,58},{31,84}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const3.y,FWCP_mflow. u_s)
        annotation (Line(points={{-75,44},{-68,44}}, color={0,0,127}));
      connect(FWCP_mflow.y, add.u2)
        annotation (Line(points={{-45,44},{-26,44}},
                                                   color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{-31.6,56},{-26,56}},
                                                    color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,50},{-3,50}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-77,84},{-60,84}}, color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,62},{-48,62},{-48,72}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,68},{-30,68},{-30,84},{-37,84}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(add5.u1, Charge_OnOff_Throttle.y)
        annotation (Line(points={{114,-90},{114,-88},{125,-88}},
                                                     color={0,0,127}));
      connect(add5.u2, const10.y) annotation (Line(points={{114,-102},{118,-102},
              {118,-118},{129.6,-118}},
                                color={0,0,127}));
      connect(actuatorBus.SHS_throttle, add5.y) annotation (Line(
          points={{30,-100},{30,-96},{91,-96}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Condensor_Output_mflow, FWCP_mflow.u_m) annotation (Line(
          points={{-30,-100},{-120,-100},{-120,18},{-56,18},{-56,32}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(min1.u1, const6.y)
        annotation (Line(points={{90,-64},{75.2,-64}}, color={0,0,127}));
      connect(Charge_OnOff_Throttle.u_m, min1.y) annotation (Line(points={{136,-76},
              {136,-70},{113,-70}},           color={0,0,127}));
      connect(realExpression.y, min2.u1) annotation (Line(points={{68.7,-2},{88,
              -2}},                      color={0,0,127}));
      connect(min2.y, Charge_OnOff_Throttle.u_s) annotation (Line(points={{111,-8},
              {148,-8},{148,-88}},            color={0,0,127}));
      connect(min2.u2, const12.y) annotation (Line(points={{88,-14},{79.2,-14},
              {79.2,-22}},       color={0,0,127}));
      connect(sensorBus.Power, min1.u2) annotation (Line(
          points={{-30,-100},{-30,-84},{84,-84},{84,-76},{90,-76}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(min2.y, TCV_Power.u_s) annotation (Line(points={{111,-8},{114,-8},
              {114,-38},{8,-38},{8,-18},{-66,-18},{-66,-38},{-60,-38}}, color={
              0,0,127}));
      connect(sensorBus.Power, TCV_Power.u_m) annotation (Line(
          points={{-30,-100},{-30,-58},{-24,-58},{-24,-52},{-22,-52},{-22,-36},
              {-32,-36},{-32,-20},{-48,-20},{-48,-26}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      annotation (Diagram(graphics={Text(
              extent={{-70,-142},{-20,-160}},
              textColor={28,108,200},
              textString="Feedwater")}));
    end CS_DivertPowerControl_ANL_v2;

    model CS_NoFeedHeat_mFlow_Control

      // Modified from CS_SmallCycle_NoFeedHeat_Argonne

      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_ControlSystem;

      extends NHES.Icons.DummyIcon;

      input Real electric_demand_large
      annotation(Dialog(tab="General"));

      replaceable NHES.Systems.BalanceOfPlant.RankineCycle.Data.TES_Setpoints data(
        p_steam=1200000,
        p_steam_vent=15000000,
        T_Steam_Ref=579.75,
        Q_Nom=48.57e6,
        T_Feedwater=421.15,
        T_SHS_Return=491.15)
        annotation (Placement(transformation(extent={{64,42},{78,56}})));
      Modelica.Blocks.Sources.Constant const3(k=data.p_steam)
        annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
      TRANSFORM.Controls.LimPID FWP_mFlow(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=1e-7,
        Ti=5,
        Td=0.1,
        yMax=50,
        yMin=0.9,
        wd=1,
        initType=Modelica.Blocks.Types.Init.NoInit,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-28,14},{-8,34}})));
      Modelica.Blocks.Sources.Constant const4(k=0)
        annotation (Placement(transformation(extent={{-14,44},{-6,52}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{20,20},{40,40}})));
      Modelica.Blocks.Sources.Constant const11(k=1e-4)
        annotation (Placement(transformation(extent={{-4,-56},{4,-48}})));
      Modelica.Blocks.Math.Add         add4
        annotation (Placement(transformation(extent={{20,-40},{40,-20}})));
      NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
        minMaxFilter(min=0, max=1)
        annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));
      Modelica.Blocks.Sources.RealExpression
                                       realExpression(y=electric_demand_large)
        annotation (Placement(transformation(extent={{-74,18},{-60,30}})));
      TRANSFORM.Controls.LimPID TCV_SHS(
        controllerType=Modelica.Blocks.Types.SimpleController.P,
        k=-1e-9,
        Ti=1,
        Td=0.1,
        yMax=1 - const11.k,
        yMin=0,
        wd=1,
        Ni=0.9,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-50,-40},{-30,-20}})));
    equation
      connect(FWP_mFlow.y, add.u2)
        annotation (Line(points={{-7,24},{18,24}}, color={0,0,127}));
      connect(const4.y,add. u1)
        annotation (Line(points={{-5.6,48},{12,48},{12,36},{18,36}},
                                                    color={0,0,127}));
      connect(const11.y,add4. u2) annotation (Line(points={{4.4,-52},{12,-52},{
              12,-36},{18,-36}},
                       color={0,0,127}));
      connect(add4.u1,minMaxFilter. y)
        annotation (Line(points={{18,-24},{8,-24},{8,-30},{1.4,-30}},
                                                       color={0,0,127}));
      connect(minMaxFilter.u, TCV_SHS.y)
        annotation (Line(points={{-22,-30},{-29,-30}},
                                                     color={0,0,127}));
      connect(realExpression.y, FWP_mFlow.u_s)
        annotation (Line(points={{-59.3,24},{-30,24}}, color={0,0,127}));
      connect(sensorBus.Power, FWP_mFlow.u_m) annotation (Line(
          points={{-30,-100},{-30,-70},{-86,-70},{-86,12},{-18,12}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(const3.y, TCV_SHS.u_s)
        annotation (Line(points={{-59,-30},{-52,-30}}, color={0,0,127}));
      connect(sensorBus.Steam_Pressure, TCV_SHS.u_m) annotation (Line(
          points={{-30,-100},{-30,-50},{-40,-50},{-40,-42}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TCV_SHS, add4.y) annotation (Line(
          points={{30,-100},{30,-70},{48,-70},{48,-30},{41,-30}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.Feed_Pump_mFlow, add.y) annotation (Line(
          points={{30,-100},{30,-72},{50,-72},{50,30},{41,30}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      annotation (
        Diagram(coordinateSystem(extent={{-100,-100},{100,60}})),
        Icon(coordinateSystem(extent={{-100,-100},{100,60}})),
        experiment(
          StopTime=200,
          Interval=10,
          __Dymola_Algorithm="Esdirk45a"));
    end CS_NoFeedHeat_mFlow_Control;

    model CS_threeStagedTurbine_HTGR_JY

      extends BaseClasses.Partial_ControlSystem;

      Modelica.Blocks.Sources.Constant const3(k=data.T_Steam_Ref)
        annotation (Placement(transformation(extent={{-72,16},{-52,36}})));
      Modelica.Blocks.Sources.Constant const4(k=1200)
        annotation (Placement(transformation(extent={{42,72},{50,80}})));
      Modelica.Blocks.Math.Add         add
        annotation (Placement(transformation(extent={{64,60},{84,80}})));
      TRANSFORM.Controls.LimPID LTV2_Divert_Valve(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=1e-5,
        Ti=15,
        yMax=1 - 1e-6,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-64,-72},{-44,-52}})));
      Modelica.Blocks.Sources.Constant const5(k=data.T_Feedwater)
        annotation (Placement(transformation(extent={{-94,-72},{-74,-52}})));
      TRANSFORM.Controls.LimPID TCV_Position(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-3e-9,
        Ti=360,
        yMax=0,
        yMin=-1,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=1500)
        annotation (Placement(transformation(extent={{-56,-18},{-36,-38}})));
      Modelica.Blocks.Sources.Constant const8(k=1e-6)
        annotation (Placement(transformation(extent={{-34,-78},{-26,-70}})));
      Modelica.Blocks.Math.Add         add2
        annotation (Placement(transformation(extent={{-10,-78},{10,-58}})));
      Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer timer(
          Start_Time=1e-2)
        annotation (Placement(transformation(extent={{-34,-66},{-26,-58}})));
      TRANSFORM.Controls.LimPID PI_TBV(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-5e-7,
        Ti=500,
        yMax=1.0,
        yMin=0.0,
        initType=Modelica.Blocks.Types.Init.NoInit)
        annotation (Placement(transformation(extent={{-40,52},{-20,72}})));
      Modelica.Blocks.Sources.Constant const9(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-148,54},{-132,70}})));
      Data.HTGR_Rankine
                      data(
        p_steam_vent=14000000,
        T_Steam_Ref=788.15,                       Q_Nom=44e6)
        annotation (Placement(transformation(extent={{-98,-4},{-78,16}})));
      Modelica.Blocks.Sources.ContinuousClock clock2(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-174,146},{-154,166}})));
      Modelica.Blocks.Sources.Constant valvedelay2(k=6e5)
        annotation (Placement(transformation(extent={{-170,182},{-150,202}})));
      Modelica.Blocks.Logical.Greater greater2
        annotation (Placement(transformation(extent={{-130,182},{-110,162}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV1
        annotation (Placement(transformation(extent={{-90,162},{-70,182}})));
      Modelica.Blocks.Sources.Constant const1(k=-150)
        annotation (Placement(transformation(extent={{-122,192},{-114,200}})));
      Modelica.Blocks.Sources.Constant const2(k=-150)
        annotation (Placement(transformation(extent={{-124,138},{-116,146}})));
      Modelica.Blocks.Sources.Constant const10(k=5000)
        annotation (Placement(transformation(extent={{-64,196},{-56,204}})));
      SupportComponents.VarLimVarK_PID PID(
        use_k_in=true,
        use_lowlim_in=true,
        use_uplim_in=true,
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        with_FF=true,
        k=-5e-1,
        Ti=30) annotation (Placement(transformation(extent={{-4,16},{16,36}})));
      Modelica.Blocks.Sources.Constant const11(k=-1e-1)
        annotation (Placement(transformation(extent={{-120,224},{-112,232}})));
      Modelica.Blocks.Sources.ContinuousClock clock1(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-170,230},{-150,250}})));
      Modelica.Blocks.Sources.Constant valvedelay1(k=8.5e5)
        annotation (Placement(transformation(extent={{-166,266},{-146,286}})));
      Modelica.Blocks.Logical.Greater greater1
        annotation (Placement(transformation(extent={{-126,266},{-106,246}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV2
        annotation (Placement(transformation(extent={{-86,246},{-66,266}})));
      Modelica.Blocks.Sources.Constant
                                   const(k=-1e-1)
        annotation (Placement(transformation(extent={{-124,286},{-104,306}})));
      TRANSFORM.Controls.LimPID LTV1_Divert_Valve1(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=-1e-8,
        Ti=300,
        yMax=1 - 1e-6,
        yMin=0,
        initType=Modelica.Blocks.Types.Init.InitialState,
        xi_start=0.2)
        annotation (Placement(transformation(extent={{-56,112},{-40,128}})));
      Modelica.Blocks.Sources.Constant const_LTV1bypass_power(k=44e6)
        annotation (Placement(transformation(extent={{-148,86},{-132,102}})));
      Modelica.Blocks.Sources.Trapezoid trap_LTV1bypass_massflow(
        amplitude=30,
        rising=5e4,
        width=5e4,
        falling=5e4,
        period=20e4,
        nperiod=-1,
        offset=15,
        startTime=1e5 + 900)
        annotation (Placement(transformation(extent={{-202,112},{-186,128}})));
      Modelica.Blocks.Sources.Ramp ramp_LTV1bypass_massflow(
        height=-15,
        duration=5e4,
        offset=15,
        startTime=1e5 + 900)
        annotation (Placement(transformation(extent={{-202,62},{-186,78}})));
      Modelica.Blocks.Sources.Constant const_LTV1bypass_massflow(k=30)
        annotation (Placement(transformation(extent={{-202,86},{-186,102}})));
      Modelica.Blocks.Sources.Trapezoid trap_LTV1bypass_power(
        amplitude=-16e6,
        rising=7200,
        width=3600,
        falling=7200,
        period=21600,
        nperiod=-1,
        offset=44e6,
        startTime=1e4)
        annotation (Placement(transformation(extent={{-150,112},{-134,128}})));
      Modelica.Blocks.Sources.Constant RPM_TEST(k=1000)
        annotation (Placement(transformation(extent={{42,90},{50,98}})));
      Modelica.Blocks.Sources.Constant const12(k=data.p_steam_vent)
        annotation (Placement(transformation(extent={{-196,-72},{-178,-54}})));
      Modelica.Blocks.Sources.Constant valvedelay3(k=1e5)
        annotation (Placement(transformation(extent={{-236,-18},{-216,2}})));
      Modelica.Blocks.Sources.ContinuousClock clock3(offset=0, startTime=0)
        annotation (Placement(transformation(extent={{-236,-58},{-216,-38}})));
      Modelica.Blocks.Logical.Greater greater3
        annotation (Placement(transformation(extent={{-196,-18},{-176,-38}})));
      Modelica.Blocks.Logical.Switch switch_P_setpoint_TCV3
        annotation (Placement(transformation(extent={{-156,-38},{-136,-18}})));
      Modelica.Blocks.Sources.Constant valvedelay4(k=14e6)
        annotation (Placement(transformation(extent={{-196,-4},{-176,16}})));
      Modelica.Blocks.Math.Add         add1
        annotation (Placement(transformation(extent={{-10,-44},{10,-24}})));
      Modelica.Blocks.Sources.Constant const7(k=1.0)
        annotation (Placement(transformation(extent={{-28,-44},{-20,-36}})));
      Modelica.Blocks.Sources.Constant constant_0(k=0)
        annotation (Placement(transformation(extent={{-144,24},{-128,40}})));
    equation

      connect(const5.y,LTV2_Divert_Valve. u_s)
        annotation (Line(points={{-73,-62},{-66,-62}},   color={0,0,127}));
      connect(sensorBus.Feedwater_Temp,LTV2_Divert_Valve. u_m) annotation (Line(
          points={{-30,-100},{-54,-100},{-54,-74}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.Divert_Valve_Position, add2.y) annotation (Line(
          points={{30,-100},{30,-68},{11,-68}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(add2.u2, const8.y) annotation (Line(points={{-12,-74},{-25.6,-74}},
                                                                             color=
              {0,0,127}));
      connect(add2.u1, timer.y) annotation (Line(points={{-12,-62},{-25.44,-62}},
                                                                    color={0,0,127}));
      connect(LTV2_Divert_Valve.y, timer.u) annotation (Line(points={{-43,-62},{-34.8,
              -62}},                                                     color={0,0,
              127}));
      connect(const9.y, PI_TBV.u_s)
        annotation (Line(points={{-131.2,62},{-42,62}},color={0,0,127}));
      connect(sensorBus.Steam_Pressure, PI_TBV.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,44},{-30,44},{-30,50}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.TBV, PI_TBV.y) annotation (Line(
          points={{30,-100},{30,62},{-19,62}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(clock2.y, greater2.u1) annotation (Line(points={{-153,156},{-138,156},
              {-138,172},{-132,172}}, color={0,0,127}));
      connect(valvedelay2.y, greater2.u2) annotation (Line(points={{-149,192},{-138,
              192},{-138,180},{-132,180}}, color={0,0,127}));
      connect(greater2.y, switch_P_setpoint_TCV1.u2)
        annotation (Line(points={{-109,172},{-92,172}}, color={255,0,255}));
      connect(const2.y, switch_P_setpoint_TCV1.u3) annotation (Line(points={{-115.6,
              142},{-110,142},{-110,160},{-92,160},{-92,164}}, color={0,0,127}));
      connect(const1.y, switch_P_setpoint_TCV1.u1) annotation (Line(points={{-113.6,
              196},{-98,196},{-98,180},{-92,180}}, color={0,0,127}));
      connect(actuatorBus.Feed_Pump_Speed, add.y) annotation (Line(
          points={{30,-100},{30,50},{92,50},{92,70},{85,70}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(const10.y, PID.upperlim) annotation (Line(points={{-55.6,200},{0,200},
              {0,37}},                                        color={0,0,127}));
      connect(switch_P_setpoint_TCV1.y, PID.lowerlim) annotation (Line(points={{-69,172},
              {6,172},{6,37}},
            color={0,0,127}));
      connect(sensorBus.Steam_Temperature, PID.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,-8},{6,-8},{6,14}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(const3.y, PID.u_s)
        annotation (Line(points={{-51,26},{-6,26}}, color={0,0,127}));
      connect(PID.y, add.u2) annotation (Line(points={{17,26},{34,26},{34,34},{48,
              34},{48,64},{62,64}}, color={0,0,127}));
      connect(clock1.y, greater1.u1) annotation (Line(points={{-149,240},{-134,240},
              {-134,256},{-128,256}}, color={0,0,127}));
      connect(valvedelay1.y, greater1.u2) annotation (Line(points={{-145,276},{-134,
              276},{-134,264},{-128,264}}, color={0,0,127}));
      connect(greater1.y, switch_P_setpoint_TCV2.u2)
        annotation (Line(points={{-105,256},{-88,256}}, color={255,0,255}));
      connect(const11.y, switch_P_setpoint_TCV2.u3) annotation (Line(points={{-111.6,
              228},{-104,228},{-104,230},{-98,230},{-98,248},{-88,248}},
            color={0,0,127}));
      connect(switch_P_setpoint_TCV2.y, PID.prop_k) annotation (Line(points={{-65,256},
              {14,256},{14,37.4},{13.4,37.4}},                          color={0,0,
              127}));
      connect(const.y, switch_P_setpoint_TCV2.u1) annotation (Line(points={{-103,
              296},{-96,296},{-96,264},{-88,264}}, color={0,0,127}));
      connect(actuatorBus.openingLPTv,LTV1_Divert_Valve1. y) annotation (Line(
          points={{30,-100},{120,-100},{120,120},{-39.2,120}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(sensorBus.Power, LTV1_Divert_Valve1.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,100},{-48,100},{-48,110.4}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(sensorBus.Steam_Pressure, TCV_Position.u_m) annotation (Line(
          points={{-30,-100},{-104,-100},{-104,-10},{-46,-10},{-46,-16}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(valvedelay3.y, greater3.u2) annotation (Line(points={{-215,-8},{-212,
              -8},{-212,-20},{-198,-20}}, color={0,0,127}));
      connect(clock3.y, greater3.u1) annotation (Line(points={{-215,-48},{-212,-48},
              {-212,-28},{-198,-28}}, color={0,0,127}));
      connect(const12.y, switch_P_setpoint_TCV3.u3) annotation (Line(points={{
              -177.1,-63},{-166,-63},{-166,-36},{-158,-36}}, color={0,0,127}));
      connect(greater3.y, switch_P_setpoint_TCV3.u2)
        annotation (Line(points={{-175,-28},{-158,-28}}, color={255,0,255}));
      connect(valvedelay4.y, switch_P_setpoint_TCV3.u1) annotation (Line(points={{
              -175,6},{-166,6},{-166,-20},{-158,-20}}, color={0,0,127}));
      connect(switch_P_setpoint_TCV3.y, TCV_Position.u_s)
        annotation (Line(points={{-135,-28},{-58,-28}}, color={0,0,127}));
      connect(TCV_Position.y, add1.u1)
        annotation (Line(points={{-35,-28},{-12,-28}}, color={0,0,127}));
      connect(const7.y, add1.u2)
        annotation (Line(points={{-19.6,-40},{-12,-40}}, color={0,0,127}));
      connect(const4.y, add.u1)
        annotation (Line(points={{50.4,76},{62,76}}, color={0,0,127}));
      connect(trap_LTV1bypass_power.y, LTV1_Divert_Valve1.u_s)
        annotation (Line(points={{-133.2,120},{-57.6,120}}, color={0,0,127}));
      connect(actuatorBus.opening_TCV, add1.y) annotation (Line(
          points={{30.1,-99.9},{30.1,-34},{11,-34}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(constant_0.y, PID.u_ff) annotation (Line(points={{-127.2,32},{-76,32},
              {-76,40},{-14,40},{-14,34},{-6,34}}, color={0,0,127}));
    annotation(defaultComponentName="changeMe_CS", Icon(graphics));
    end CS_threeStagedTurbine_HTGR_JY;
  end ControlSystems;

  package Data

    model IdealTurbine

      extends BaseClasses.Record_Data;

      annotation (
        defaultComponentName="data",
        Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
              lineColor={0,0,0},
              extent={{-100,-90},{100,-70}},
              textString="IdealTurbine")}),
        Diagram(coordinateSystem(preserveAspectRatio=false)));
    end IdealTurbine;

    model HTGR_Rankine
      parameter Modelica.Units.SI.Pressure p_steam_vent = 150e5 "Overpressurization relief valve setpoint"; //error associated with too high Temperature calling using the steam generator pipe surface temperature and the water fluid pressure is your indicator that the system is overpressurized and leaving the steam tables
      parameter Modelica.Units.SI.Temperature T_Steam_Ref = 540+273.15 "Reference steam temperature";
      parameter Modelica.Units.SI.Power Q_Nom = 36e6 "Reference electrical power";
      parameter Modelica.Units.SI.Temperature T_Feedwater = 208+273.15 "Reference feedwater temperature";

      extends BaseClasses.Record_Data;

      annotation (
        defaultComponentName="data",
        Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
              lineColor={0,0,0},
              extent={{-100,-90},{100,-70}},
              textString="Rankine")}),
        Diagram(coordinateSystem(preserveAspectRatio=false)));
    end HTGR_Rankine;

    model TES_Setpoints
      parameter Modelica.Units.SI.Pressure p_steam = 35e5 "Reference steam pressure";
      parameter Modelica.Units.SI.Temperature T_Steam_Ref = 306.6+273.15 "Reference steam temperature";
      parameter Modelica.Units.SI.Power Q_Nom = 60e6 "Reference electrical power";
      parameter Modelica.Units.SI.Temperature T_Feedwater = 148+273.15 "Reference feedwater temperature";
      parameter Modelica.Units.SI.Pressure p_steam_vent = 150e5 "Overpressurization relief valve setpoint"; //error associated with too high Temperature calling using the steam generator pipe surface temperature and the water fluid pressure is your indicator that the system is overpressurized and leaving the steam tables
      parameter Modelica.Units.SI.Temperature T_SHS_Return = 218+273.15 "Reference SHS Return temperature";
      parameter Modelica.Units.SI.MassFlowRate m_flow_reactor = 67 "Reference mass flow rate";

      extends BaseClasses.Record_Data;

      annotation (
        defaultComponentName="data",
        Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
              lineColor={0,0,0},
              extent={{-100,-90},{100,-70}},
              textString="Rankine")}),
        Diagram(coordinateSystem(preserveAspectRatio=false)));
    end TES_Setpoints;

    model TESTurbine

      extends BaseClasses.Record_Data;

      //Controlled Setpoints
      parameter Modelica.Units.SI.Pressure p_steam_vent = 150e5 "Overpressurization relief valve setpoint"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Temperature T_Steam_Ref = 306.6+273.15 "Reference steam temperature"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Power Q_Nom = 60e6 "Reference electrical power"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Temperature T_Feedwater = 148+273.15 "Reference feedwater temperature"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Pressure p_steam = 35e5 "Reference steam pressure"
      annotation (Dialog(tab="System Setpoints"));

      //BOP General Parameters
          //Systems
      parameter Modelica.Units.SI.Pressure p_in_nominal = 3447380 "Nominal input pressure"
      annotation (Dialog(tab="General Parameters", group="System"));
          //Component Pressures
      parameter Modelica.Units.SI.Pressure p_condensor = 10000 "Condensor pressure"
      annotation (Dialog(tab="General Parameters",group = "Pressures"));
      parameter Modelica.Units.SI.Pressure p_boundary = 100000 "Boundary pressure for venting"
      annotation (Dialog(tab="General Parameters", group= "Pressures"));
          //Component Volumes
      parameter Modelica.Units.SI.Volume  V_condensor = 150 "Condensor volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
      parameter Modelica.Units.SI.Volume  V_tee = 5 "Tee volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
      parameter Modelica.Units.SI.Volume  V_moistureseperator = 0.01 "Moisture Seperator volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
      parameter Modelica.Units.SI.Volume  V_FeedwaterMixVolume = 80 "Feedwater Mixing volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
      parameter Modelica.Units.SI.Volume  V_Header = 1 "Header Mixing volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
            //Moment of Inertia
      parameter Modelica.Units.SI.MomentOfInertia generator_MoI = 1e4 "Generator Moment of inertia"
      annotation (Dialog(tab="General Parameters",group = "Generator"));
            //Component Temperatures
      parameter Modelica.Units.SI.Temperature T_boundary = 573.15 "Boundary Temperature for venting"
      annotation (Dialog(tab="General Parameters", group= "Temperatures"));

          //Resistances
      parameter TRANSFORM.Units.HydraulicResistance  R_bypass = 1000 "Hydraulic Resistance of internal bypass stream"
      annotation (Dialog(tab="General Parameters", group = "Resistances"));
      parameter TRANSFORM.Units.HydraulicResistance  R_entry = 1 "Hydraulic Resistance of steam entry stream"
      annotation (Dialog(tab="General Parameters", group = "Resistances"));
      parameter TRANSFORM.Units.HydraulicResistance  R_feedwater = 1 "Hydraulic Resistance of LPT feedwater stream"
      annotation (Dialog(tab="General Parameters", group = "Resistances"));

      //Valve Parameters
      parameter Modelica.Units.SI.MassFlowRate valve_TCV_mflow = 300 "Turbine Control valve nominal mass flow"
      annotation (Dialog(tab="Valves", group="Turbine Control Valve"));
      parameter Modelica.Units.SI.Pressure valve_TCV_dp_nominal = 1000000 "Nominal pressure drop for turbine control"
      annotation (Dialog(tab="Valves", group="Turbine Control Valve"));
       parameter Modelica.Units.SI.MassFlowRate valve_SHS_mflow = 60 "Turbine Control valve nominal mass flow"
      annotation (Dialog(tab="Valves", group="Turbine Control Valve"));
      parameter Modelica.Units.SI.Pressure valve_SHS_dp_nominal = 450000 "Nominal pressure drop for turbine control"
      annotation (Dialog(tab="Valves", group="Turbine Control Valve"));
      parameter Modelica.Units.SI.MassFlowRate valve_TCV_LPT_mflow = 300 "Turbine Control valve nominal mass flow"
      annotation (Dialog(tab="Valves", group="Turbine Control Valve"));
      parameter Modelica.Units.SI.Pressure valve_TCV_LPT_dp_nominal = 100000 "Nominal pressure drop for turbine control"
      annotation (Dialog(tab="Valves", group="Turbine Control Valve"));
      parameter Modelica.Units.SI.MassFlowRate valve_LPT_Bypass_mflow = 5 "LPT Bypass valve nominal mass flow"
      annotation (Dialog(tab="Valves", group="LPT Bypass Valve"));
      parameter Modelica.Units.SI.Pressure valve_LPT_Bypass_dp_nominal = 10000 "Nominal pressure drop for LPT Bypass Valve"
      annotation (Dialog(tab="Valves", group="LPT Bypass Valve"));
      parameter Modelica.Units.SI.MassFlowRate valve_TBV_mflow = 50 "Turbine External Bypass valve nominal mass flow"
      annotation (Dialog(tab="Valves", group="Turbine External Bypass Valve"));
      parameter Modelica.Units.SI.Pressure valve_TBV_dp_nominal = 100000 "Nominal pressure drop for turbine external bypass"
      annotation (Dialog(tab="Valves", group="Turbine External Bypass Valve"));
      parameter Modelica.Units.SI.MassFlowRate InternalBypassValve_mflow_small = 1e-2 "Internal Bypass valve nominal mass flow"
      annotation (Dialog(tab="Valves", group="Internal Bypass Valve"));
      parameter Modelica.Units.SI.Pressure InternalBypassValve_p_spring = 5500000 "Internal Bypass valve spring pressure"
      annotation (Dialog(tab="Valves", group="Internal Bypass Valve"));
      parameter Real InternalBypassValve_K( unit="1/(m.kg)") = 60 "Internal Bypass valve K nominal"
      annotation (Dialog(tab="Valves", group="Internal Bypass Valve"));
      parameter Real InternalBypassValve_tau(unit="1/s") = 0.0001 "Internal Bypass valve time constant"
      annotation (Dialog(tab="Valves", group="Internal Bypass Valve"));

      //Turbine Parameters
      parameter Modelica.Units.SI.Pressure HPT_p_exit_nominal = 700000 "Nominal HPT outlet pressure"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature HPT_T_in_nominal = 563.15 "Nominal HPT inlet temperature"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Modelica.Units.SI.MassFlowRate HPT_nominal_mflow = 70 "HPT nominal mass flow"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Real HPT_efficiency = 0.93 "HPT mechanical efficiency"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));

      parameter Modelica.Units.SI.Pressure LPT_p_in_nominal = 700000 "Nominal LPT inlet pressure"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.Pressure LPT_p_exit_nominal = 8000 "Nominal LPT outlet pressure"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature LPT_T_in_nominal = 523.15 "Nominal LPT inlet temperature"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.MassFlowRate LPT_nominal_mflow = 70 "LPT nominal mass flow"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Real LPT_efficiency = 0.93 "LPT mechanical efficiency"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));

      //Pump Parameters
      parameter Modelica.Units.SI.Pressure firstfeedpump_p_nominal = 1000000 "Pressure rise in first feedwater pump"
      annotation (Dialog(tab="Pumps", group="First Feedwater Pump"));
      parameter Modelica.Units.SI.Pressure secondfeedpump_p_nominal = 3600000 "Pressure rise in second feedwater pump"
      annotation (Dialog(tab="Pumps", group="Second Feedwater Pump"));
      parameter Modelica.Units.SI.MassFlowRate controlledfeedpump_mflow_nominal = 80 "Nominal mass flow in controlled feedwater pump"
      annotation (Dialog(tab="Pumps", group="Controlled Feedwater Pump"));

      //Heat Exchangers
        //Main Feedwater Heater
      parameter Real MainFeedHeater_NTU = 20 "NTU of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Real MainFeedHeater_K_tube(unit = "1/m4") = 17000 "K value of tube in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Real MainFeedHeater_K_shell(unit = "1/m4") = 500 "K value of shell in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Volume  MainFeedHeater_V_tube = 5 "Tube side volume in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Volume  MainFeedHeater_V_shell = 5 "Shell side volume in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));

        //Bypass Feedwater Heater
      parameter Real BypassFeedHeater_NTU = 20 "NTU of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Real BypassFeedHeater_K_tube(unit = "1/m4") = 17000 "K value of tube in bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Real BypassFeedHeater_K_shell(unit = "1/m4") = 500 "K value of shell in bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Volume  BypassFeedHeater_V_tube = 5 "Tube side volume in bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Volume  BypassFeedHeater_V_shell = 5 "Shell side volume in bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));

      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"),
                  Dialog(tab="System Setpoints"),
                  Dialog(tab="System Setpoints"),
        defaultComponentName="data",
        Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
              lineColor={0,0,0},
              extent={{-100,-90},{100,-70}},
              textString="IdealTurbine")}),
        Diagram(coordinateSystem(preserveAspectRatio=false)));

    end TESTurbine;

    model IntermediateTurbineInitialisation

      extends BaseClasses.Record_Data;

      //Controlled Setpoints
      parameter Modelica.Units.SI.Pressure p_steam_vent = 150e5 "Overpressurization relief valve setpoint"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Temperature T_Steam_Ref = 306.6+273.15 "Reference steam temperature"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Power Q_Nom = 60e6 "Reference electrical power"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Temperature T_Feedwater = 148+273.15 "Reference feedwater temperature"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Pressure p_steam = 35e5 "Reference steam pressure"
      annotation (Dialog(tab="System Setpoints"));

      //BOP General Parameters
          //Component Pressures
      parameter Modelica.Units.SI.Pressure tee_p_start = 700000 "Tee initial pressure"
      annotation (Dialog(tab="General Parameters",group = "Pressures"));
      parameter Modelica.Units.SI.Pressure moisturesep_p_start = 20000 "Moisture Seperator inital pressure"
      annotation (Dialog(tab="General Parameters",group = "Pressures"));
      parameter Modelica.Units.SI.Pressure FeedwaterMixVolume_p_start = 650000 "Feedwater mixing initial pressure"
      annotation (Dialog(tab="General Parameters", group="Pressures"));
      parameter Modelica.Units.SI.Pressure header_p_start = 3437400 "Header mixing initial pressure"
      annotation (Dialog(tab="General Parameters", group="Pressures"));
          //Component specific enthalpies
      parameter Modelica.Units.SI.SpecificEnthalpy header_h_start = 3e6 "Header mixing initial specific enthalpy"
      annotation (Dialog(tab="General Parameters", group="Enthalpies"));
      parameter Modelica.Units.SI.SpecificEnthalpy FeedwaterMixVolume_h_start = 3.5e6 "Feedwater mixing initial specific enthalpy"
      annotation (Dialog(tab="General Parameters", group="Enthalpies"));
          //Component Volumes
      parameter Modelica.Units.SI.Volume  condensor_V_liquid_start = 1.2 "Condensor initial liquid volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
          //Temperatures
      parameter Modelica.Units.SI.Temperature moisturesep_T_start = 338.15 "Moisture Seperator inital temperature"
      annotation (Dialog(tab="General Parameters",group = "Temperatures"));

      //Valves
      parameter Modelica.Units.SI.Pressure InternalBypassValve_dp_start = 1000000 "Initial pressure drop in spring valve"
      annotation (Dialog(tab="Valves", group="InternalBypassValve"));
      parameter Modelica.Units.SI.MassFlowRate InternalBypassValve_mflow_start = 0 "Initial mass flow in spring valve"
      annotation (Dialog(tab="Valves", group="InternalBypassValve"));

      //Turbine Parameters
      parameter Modelica.Units.SI.Pressure HPT_p_a_start = 3400000 "Initial HPT inlet pressure"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Modelica.Units.SI.Pressure HPT_p_b_start = 700000 "Initial HPT outlet pressure"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature HPT_T_a_start = 579.15 "Initial HPT inlet temperature"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature HPT_T_b_start = 473.15 "Initial HPT outlet temperature"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));

      parameter Modelica.Units.SI.Pressure LPT_p_a_start = 700000 "Initial LPT inlet pressure"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.Pressure LPT_p_b_start = 8000 "Initial LPT outlet pressure"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature LPT_T_a_start = 473.15 "Initial LPT inlet temperature"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature LPT_T_b_start = 373.15 "Initial LPT outlet temperature"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));

      //Heat Exchangers
        //Main Feedwater Heater
      parameter Modelica.Units.SI.Pressure MainFeedHeater_p_start_tube = 1000000 "Initial Tube pressure of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure MainFeedHeater_p_start_shell = 600000 "Initial Shell pressure of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy MainFeedHeater_h_start_tube_inlet = 1e6 "Initial Tube inlet specific enthalpy of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy MainFeedHeater_h_start_tube_outlet = 1.05e6 "Initial Tube outlet specific enthalpy of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy MainFeedHeater_h_start_shell_inlet = 3e6 "Initial Shell inlet specific enthalpy of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy MainFeedHeater_h_start_shell_outlet = 2.9e6 "Initial Shell outlet specific enthalpy of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure MainFeedHeater_dp_init_tube = 0 "Initial Tube pressure drop of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure MainFeedHeater_dp_init_shell = 100000 "Initial Shell pressure drop of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.MassFlowRate MainFeedHeater_m_start_tube = 50 "Initial tube mass flow rate in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.MassFlowRate MainFeedHeater_m_start_shell = 26 "Initial shell mass flow rate in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Power MainFeedHeater_Q_init = 1e6 "Initial Heat Flow in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
        //Bypass Feedwater Heater
      parameter Modelica.Units.SI.Pressure BypassFeedHeater_p_start_tube = 3600000 "Initial Tube pressure of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure BypassFeedHeater_p_start_shell = 2400000 "Initial Shell pressure of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy BypassFeedHeater_h_start_tube_inlet = 2e6 "Initial Tube inlet specific enthalpy of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy BypassFeedHeater_h_start_tube_outlet = 3e6 "Initial Tube outlet specific enthalpy of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy BypassFeedHeater_h_start_shell_inlet = 3e6 "Initial Shell inlet specific enthalpy of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy BypassFeedHeater_h_start_shell_outlet = 2.9e6 "Initial Shell outlet specific enthalpy of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure BypassFeedHeater_dp_init_tube = 0 "Initial Tube pressure drop of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure BypassFeedHeater_dp_init_shell = 100000 "Initial Shell pressure drop of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.MassFlowRate BypassFeedHeater_m_start_tube = 72 "Initial tube mass flow rate in bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.MassFlowRate BypassFeedHeater_m_start_shell = 10 "Initial shell mass flow rate in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Power  BypassFeedHeater_Q_init = 1e6 "Initial Heat Flow in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));

      annotation (Dialog(tab="Initialization", group="init_file"),
                  Dialog(tab="System Setpoints"),
                  Dialog(tab="System Setpoints"),
        defaultComponentName="init",
        Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
              lineColor={0,0,0},
              extent={{-100,-90},{100,-70}},
              textString="IdealTurbineInitialisation")}),
        Diagram(coordinateSystem(preserveAspectRatio=false)));
    end IntermediateTurbineInitialisation;

    model Turbine_2

      extends BaseClasses.Record_Data;

      //Controlled Setpoints
      parameter Modelica.Units.SI.Pressure p_steam_vent = 150e5 "Overpressurization relief valve setpoint"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Temperature T_Steam_Ref = 306.6+273.15 "Reference steam temperature"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Power Q_Nom = 60e6 "Reference electrical power"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Temperature T_Feedwater = 148+273.15 "Reference feedwater temperature"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Pressure p_steam = 35e5 "Reference steam pressure"
      annotation (Dialog(tab="System Setpoints"));

      //BOP General Parameters
          //Systems
      parameter Modelica.Units.SI.Pressure p_in_nominal = 3447380 "Nominal input pressure"
      annotation (Dialog(tab="General Parameters", group="System"));
          //Component Pressures
      parameter Modelica.Units.SI.Pressure p_condensor = 8000 "Condensor pressure"
      annotation (Dialog(tab="General Parameters",group = "Pressures"));
      parameter Modelica.Units.SI.Pressure p_boundary = 100000 "Boundary pressure for venting"
      annotation (Dialog(tab="General Parameters", group= "Pressures"));
          //Component Volumes
      parameter Modelica.Units.SI.Volume  V_condensor = 150 "Condensor volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
      parameter Modelica.Units.SI.Volume  V_tee = 5 "Tee volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
      parameter Modelica.Units.SI.Volume  V_moistureseperator = 0.01 "Moisture Seperator volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
      parameter Modelica.Units.SI.Volume  V_FeedwaterMixVolume = 80 "Feedwater Mixing volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
      parameter Modelica.Units.SI.Volume  V_Header = 1 "Header Mixing volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
            //Moment of Inertia
      parameter Modelica.Units.SI.MomentOfInertia generator_MoI = 1e4 "Generator Moment of inertia"
      annotation (Dialog(tab="General Parameters",group = "Generator"));
            //Component Temperatures
      parameter Modelica.Units.SI.Temperature T_boundary = 573.15 "Boundary Temperature for venting"
      annotation (Dialog(tab="General Parameters", group= "Temperatures"));

          //Resistances
      parameter TRANSFORM.Units.HydraulicResistance  R_bypass = 1000 "Hydraulic Resistance of internal bypass stream"
      annotation (Dialog(tab="General Parameters", group = "Resistances"));
      parameter TRANSFORM.Units.HydraulicResistance  R_entry = 1 "Hydraulic Resistance of steam entry stream"
      annotation (Dialog(tab="General Parameters", group = "Resistances"));
      parameter TRANSFORM.Units.HydraulicResistance  R_feedwater = 1 "Hydraulic Resistance of LPT feedwater stream"
      annotation (Dialog(tab="General Parameters", group = "Resistances"));

      //Valve Parameters
      parameter Modelica.Units.SI.MassFlowRate valve_TCV_mflow = 300 "Turbine Control valve nominal mass flow"
      annotation (Dialog(tab="Valves", group="Turbine Control Valve"));
      parameter Modelica.Units.SI.Pressure valve_TCV_dp_nominal = 1000000 "Nominal pressure drop for turbine control"
      annotation (Dialog(tab="Valves", group="Turbine Control Valve"));
      parameter Modelica.Units.SI.MassFlowRate valve_LPT_Bypass_mflow = 5 "LPT Bypass valve nominal mass flow"
      annotation (Dialog(tab="Valves", group="LPT Bypass Valve"));
      parameter Modelica.Units.SI.Pressure valve_LPT_Bypass_dp_nominal = 10000 "Nominal pressure drop for LPT Bypass Valve"
      annotation (Dialog(tab="Valves", group="LPT Bypass Valve"));
      parameter Modelica.Units.SI.MassFlowRate valve_TBV_mflow = 50 "Turbine External Bypass valve nominal mass flow"
      annotation (Dialog(tab="Valves", group="Turbine External Bypass Valve"));
      parameter Modelica.Units.SI.Pressure valve_TBV_dp_nominal = 100000 "Nominal pressure drop for turbine external bypass"
      annotation (Dialog(tab="Valves", group="Turbine External Bypass Valve"));
      parameter Modelica.Units.SI.MassFlowRate InternalBypassValve_mflow_small = 1e-2 "Internal Bypass valve nominal mass flow"
      annotation (Dialog(tab="Valves", group="Internal Bypass Valve"));
      parameter Modelica.Units.SI.Pressure InternalBypassValve_p_spring = 5500000 "Internal Bypass valve spring pressure"
      annotation (Dialog(tab="Valves", group="Internal Bypass Valve"));
      parameter Real InternalBypassValve_K( unit="1/(m.kg)") = 60 "Internal Bypass valve K nominal"
      annotation (Dialog(tab="Valves", group="Internal Bypass Valve"));
      parameter Real InternalBypassValve_tau(unit="1/s") = 0.0001 "Internal Bypass valve time constant"
      annotation (Dialog(tab="Valves", group="Internal Bypass Valve"));

      //Turbine Parameters
      parameter Modelica.Units.SI.Pressure HPT_p_exit_nominal = 700000 "Nominal HPT outlet pressure"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature HPT_T_in_nominal = 563.15 "Nominal HPT inlet temperature"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Modelica.Units.SI.MassFlowRate HPT_nominal_mflow = 70 "HPT nominal mass flow"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Real HPT_efficiency = 0.93 "HPT mechanical efficiency"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));

      parameter Modelica.Units.SI.Pressure LPT_p_in_nominal = 700000 "Nominal LPT inlet pressure"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.Pressure LPT_p_exit_nominal = 8000 "Nominal LPT outlet pressure"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature LPT_T_in_nominal = 523.15 "Nominal LPT inlet temperature"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.MassFlowRate LPT_nominal_mflow = 70 "LPT nominal mass flow"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Real LPT_efficiency = 0.93 "LPT mechanical efficiency"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));

      //Pump Parameters
      parameter Modelica.Units.SI.Pressure firstfeedpump_p_nominal = 1000000 "Pressure rise in first feedwater pump"
      annotation (Dialog(tab="Pumps", group="First Feedwater Pump"));
      parameter Modelica.Units.SI.Pressure secondfeedpump_p_nominal = 3600000 "Pressure rise in second feedwater pump"
      annotation (Dialog(tab="Pumps", group="Second Feedwater Pump"));
      parameter Modelica.Units.SI.MassFlowRate controlledfeedpump_mflow_nominal = 80 "Nominal mass flow in controlled feedwater pump"
      annotation (Dialog(tab="Pumps", group="Controlled Feedwater Pump"));

      //Heat Exchangers
        //Main Feedwater Heater
      parameter Real MainFeedHeater_NTU = 20 "NTU of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Real MainFeedHeater_K_tube(unit = "1/m4") = 17000 "K value of tube in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Real MainFeedHeater_K_shell(unit = "1/m4") = 500 "K value of shell in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Volume  MainFeedHeater_V_tube = 5 "Tube side volume in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Volume  MainFeedHeater_V_shell = 5 "Shell side volume in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));

        //Bypass Feedwater Heater
      parameter Real BypassFeedHeater_NTU = 20 "NTU of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Real BypassFeedHeater_K_tube(unit = "1/m4") = 17000 "K value of tube in bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Real BypassFeedHeater_K_shell(unit = "1/m4") = 500 "K value of shell in bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Volume  BypassFeedHeater_V_tube = 5 "Tube side volume in bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Volume  BypassFeedHeater_V_shell = 5 "Shell side volume in bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));

      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"),
                  Dialog(tab="System Setpoints"),
                  Dialog(tab="System Setpoints"),
        defaultComponentName="data",
        Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
              lineColor={0,0,0},
              extent={{-100,-90},{100,-70}},
              textString="IdealTurbine")}),
        Diagram(coordinateSystem(preserveAspectRatio=false)));

    end Turbine_2;

    model Turbine_2_init

      extends BaseClasses.Record_Data;

      //Controlled Setpoints
      parameter Modelica.Units.SI.Pressure p_steam_vent = 150e5 "Overpressurization relief valve setpoint"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Temperature T_Steam_Ref = 306.6+273.15 "Reference steam temperature"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Power Q_Nom = 60e6 "Reference electrical power"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Temperature T_Feedwater = 148+273.15 "Reference feedwater temperature"
      annotation (Dialog(tab="System Setpoints"));
      parameter Modelica.Units.SI.Pressure p_steam = 35e5 "Reference steam pressure"
      annotation (Dialog(tab="System Setpoints"));

      //BOP General Parameters
          //Component Pressures
      parameter Modelica.Units.SI.Pressure tee_p_start = 700000 "Tee initial pressure"
      annotation (Dialog(tab="General Parameters",group = "Pressures"));
      parameter Modelica.Units.SI.Pressure moisturesep_p_start = 20000 "Moisture Seperator inital pressure"
      annotation (Dialog(tab="General Parameters",group = "Pressures"));
      parameter Modelica.Units.SI.Pressure FeedwaterMixVolume_p_start = 650000 "Feedwater mixing initial pressure"
      annotation (Dialog(tab="General Parameters", group="Pressures"));
      parameter Modelica.Units.SI.Pressure header_p_start = 3437400 "Header mixing initial pressure"
      annotation (Dialog(tab="General Parameters", group="Pressures"));
          //Component specific enthalpies
      parameter Modelica.Units.SI.SpecificEnthalpy header_h_start = 3e6 "Header mixing initial specific enthalpy"
      annotation (Dialog(tab="General Parameters", group="Enthalpies"));
      parameter Modelica.Units.SI.SpecificEnthalpy FeedwaterMixVolume_h_start = 3.5e6 "Feedwater mixing initial specific enthalpy"
      annotation (Dialog(tab="General Parameters", group="Enthalpies"));
          //Component Volumes
      parameter Modelica.Units.SI.Volume  condensor_V_liquid_start = 1.2 "Condensor initial liquid volume"
      annotation (Dialog(tab="General Parameters", group = "Volumes"));
          //Temperatures
      parameter Modelica.Units.SI.Temperature moisturesep_T_start = 273.15 + 200 "Moisture Seperator inital temperature"
      annotation (Dialog(tab="General Parameters",group = "Temperatures"));

      //Valves
      parameter Modelica.Units.SI.Pressure InternalBypassValve_dp_start = 1000000 "Initial pressure drop in spring valve"
      annotation (Dialog(tab="Valves", group="InternalBypassValve"));
      parameter Modelica.Units.SI.MassFlowRate InternalBypassValve_mflow_start = 0 "Initial mass flow in spring valve"
      annotation (Dialog(tab="Valves", group="InternalBypassValve"));

      //Turbine Parameters
      parameter Modelica.Units.SI.Pressure HPT_p_a_start = 3400000 "Initial HPT inlet pressure"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Modelica.Units.SI.Pressure HPT_p_b_start = 700000 "Initial HPT outlet pressure"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature HPT_T_a_start = 579.15 "Initial HPT inlet temperature"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature HPT_T_b_start = 473.15 "Initial HPT outlet temperature"
      annotation (Dialog(tab="Turbines", group="High Pressure Turbine"));

      parameter Modelica.Units.SI.Pressure LPT_p_a_start = 700000 "Initial LPT inlet pressure"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.Pressure LPT_p_b_start = 8000 "Initial LPT outlet pressure"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature LPT_T_a_start = 473.15 "Initial LPT inlet temperature"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));
      parameter Modelica.Units.SI.Temperature LPT_T_b_start = 373.15 "Initial LPT outlet temperature"
      annotation (Dialog(tab="Turbines", group="Low Pressure Turbine"));

      //Heat Exchangers
        //Main Feedwater Heater
      parameter Modelica.Units.SI.Pressure MainFeedHeater_p_start_tube = 1000000 "Initial Tube pressure of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure MainFeedHeater_p_start_shell = 600000 "Initial Shell pressure of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy MainFeedHeater_h_start_tube_inlet = 1e6 "Initial Tube inlet specific enthalpy of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy MainFeedHeater_h_start_tube_outlet = 1.05e6 "Initial Tube outlet specific enthalpy of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy MainFeedHeater_h_start_shell_inlet = 3e6 "Initial Shell inlet specific enthalpy of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy MainFeedHeater_h_start_shell_outlet = 2.9e6 "Initial Shell outlet specific enthalpy of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure MainFeedHeater_dp_init_tube = 0 "Initial Tube pressure drop of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure MainFeedHeater_dp_init_shell = 100000 "Initial Shell pressure drop of main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.MassFlowRate MainFeedHeater_m_start_tube = 50 "Initial tube mass flow rate in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.MassFlowRate MainFeedHeater_m_start_shell = 26 "Initial shell mass flow rate in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
      parameter Modelica.Units.SI.Power MainFeedHeater_Q_init = 1e6 "Initial Heat Flow in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Main Feedwater Heater"));
        //Bypass Feedwater Heater
      parameter Modelica.Units.SI.Pressure BypassFeedHeater_p_start_tube = 3600000 "Initial Tube pressure of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure BypassFeedHeater_p_start_shell = 2400000 "Initial Shell pressure of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy BypassFeedHeater_h_start_tube_inlet = 2e6 "Initial Tube inlet specific enthalpy of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy BypassFeedHeater_h_start_tube_outlet = 3e6 "Initial Tube outlet specific enthalpy of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy BypassFeedHeater_h_start_shell_inlet = 3e6 "Initial Shell inlet specific enthalpy of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.SpecificEnthalpy BypassFeedHeater_h_start_shell_outlet = 2.9e6 "Initial Shell outlet specific enthalpy of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure BypassFeedHeater_dp_init_tube = 0 "Initial Tube pressure drop of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Pressure BypassFeedHeater_dp_init_shell = 100000 "Initial Shell pressure drop of bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.MassFlowRate BypassFeedHeater_m_start_tube = 72 "Initial tube mass flow rate in bypass feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.MassFlowRate BypassFeedHeater_m_start_shell = 10 "Initial shell mass flow rate in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));
      parameter Modelica.Units.SI.Power  BypassFeedHeater_Q_init = 1e6 "Initial Heat Flow in main feedwater heater"
      annotation (Dialog(tab="Heat Exchangers", group="Bypass Feedwater Heater"));

      annotation (Dialog(tab="Initialization"),
                  Dialog(tab="System Setpoints"),
                  Dialog(tab="System Setpoints"),
        defaultComponentName="init",
        Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
              lineColor={0,0,0},
              extent={{-100,-90},{100,-70}},
              textString="IdealTurbineInitialisation")}),
        Diagram(coordinateSystem(preserveAspectRatio=false)));

    end Turbine_2_init;

    model Turbine_2_Setpoints

      parameter Modelica.Units.SI.Pressure p_steam = 35e5 "Reference steam pressure";
      parameter Modelica.Units.SI.Temperature T_Steam_Ref = 306.6+273.15 "Reference steam temperature";
      parameter Modelica.Units.SI.Power Q_Nom = 60e6 "Reference electrical power";
      parameter Modelica.Units.SI.Temperature T_Feedwater = 148+273.15 "Reference feedwater temperature";
      parameter Modelica.Units.SI.Pressure p_steam_vent = 150e5 "Overpressurization relief valve setpoint"; //error associated with too high Temperature calling using the steam generator pipe surface temperature and the water fluid pressure is your indicator that the system is overpressurized and leaving the steam tables

      extends BaseClasses.Record_Data;

      annotation (
        defaultComponentName="data",
        Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
              lineColor={0,0,0},
              extent={{-100,-90},{100,-70}},
              textString="Rankine")}),
        Diagram(coordinateSystem(preserveAspectRatio=false)));

    end Turbine_2_Setpoints;

    record DataInitial_HTGR_BoP_3stage

      extends TRANSFORM.Icons.Record;

      // HPT Boundary conditions
    parameter SI.Pressure HPT_P_inlet =     4.1384e6 annotation (Evaluate=true, Dialog(group="HPT_conditions"));
    parameter SI.Pressure HPT_P_outlet =    4.0723e5 annotation (Evaluate=true, Dialog(group="HPT_conditions"));
    parameter SI.Temperature HPT_T_inlet =  540.13 + 273.15 annotation (Evaluate=true, Dialog(group="HPT_conditions"));
    parameter SI.Temperature HPT_T_outlet = 253.77 + 273.15 annotation (Evaluate=true, Dialog(group="HPT_conditions"));

      // LPT1 Boundary conditions
    parameter SI.Pressure LPT1_P_inlet =     4.0562e5 annotation (Evaluate=true, Dialog(group="LPT1_conditions"));
    parameter SI.Pressure LPT1_P_outlet =    2.0920e5 annotation (Evaluate=true, Dialog(group="LPT1_conditions"));
    parameter SI.Temperature LPT1_T_inlet =  253.77 + 273.15 annotation (Evaluate=true, Dialog(group="LPT1_conditions"));
    parameter SI.Temperature LPT1_T_outlet = 121.64 + 273.15 annotation (Evaluate=true, Dialog(group="LPT1_conditions"));

      // LPT2 Boundary conditions
    parameter SI.Pressure LPT2_P_inlet =     2.0920e5 annotation (Evaluate=true, Dialog(group="LPT2_conditions"));
    parameter SI.Pressure LPT2_P_outlet =    0.0080e5 annotation (Evaluate=true, Dialog(group="LPT2_conditions"));
    parameter SI.Temperature LPT2_T_inlet =  121.64 + 273.15 annotation (Evaluate=true, Dialog(group="LPT2_conditions"));
    parameter SI.Temperature LPT2_T_outlet =  41.52 + 273.15 annotation (Evaluate=true, Dialog(group="LPT2_conditions"));

      // Circulation Pump Boundary conditions
      parameter SI.Pressure cirPump_P_nomi =     5.5e6 annotation (Evaluate=true, Dialog(group="CirculationPump_conditions"));

      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                                                    Text(
              lineColor={0,0,0},
              extent={{-100,-90},{100,-70}},
              textString="BOP_3stage")}),                            Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end DataInitial_HTGR_BoP_3stage;

    record DataInitial_HTGR_Pebble

      extends TRANSFORM.Icons.Record;

    parameter SI.Pressure P_Turbine_Ref = 19.9e5 annotation(dialog(tab = "Physical Components"));
    parameter SI.Temperature TStart_In_Turbine = 850+273.15 annotation(dialog(tab = "Physical Components"));
    parameter SI.Temperature TStart_Out_Turbine = 478+273.15 annotation(dialog(tab = "Physical Components"));

    parameter SI.Pressure P_LP_Comp_Ref = 19.3e5 annotation(dialog(tab = "Physical Components"));
    parameter SI.Temperature TStart_LP_Comp_In = 33+273.15 annotation(dialog(tab = "Physical Components"));
    parameter SI.Temperature TStart_LP_Comp_Out = 123+273.15 annotation(dialog(tab = "Physical Components"));

    parameter SI.Pressure P_HP_Comp_Ref = 19.9e5 annotation(dialog(tab = "Physical Components"));
    parameter SI.Temperature TStart_HP_Comp_In = 850+273.15 annotation(dialog(tab = "Physical Components"));
    parameter SI.Temperature TStart_HP_Comp_Out = 478+273.15 annotation(dialog(tab = "Physical Components"));

    parameter SI.Power HX_Aux_Q_Init = -1e6 annotation(dialog(tab = "HX_Aux"));
    parameter SI.SpecificEnthalpy HX_Aux_h_tube_in = 100e3 annotation(dialog(tab = "HX_Aux"));
    parameter SI.SpecificEnthalpy HX_Aux_h_tube_out = 900e3 annotation(dialog(tab = "HX_Aux"));
    parameter SI.Pressure HX_Aux_p_tube = 1e5 annotation(dialog(tab = "HX_Aux"));

      parameter SI.Pressure P_Core_Inlet = 60e5 annotation(dialog(tab = "Core"));
      parameter SI.Pressure P_Core_Outlet = 59.4e5 annotation(dialog(tab = "Core"));
    parameter SI.Temperature T_Core_Inlet = 623.15 annotation(dialog(tab = "Core"));
    parameter SI.Temperature T_Core_Outlet = 1023.15 annotation(dialog(tab = "Core"));
    parameter SI.Temperature T_Pebble_Init = T_Core_Outlet annotation(dialog(tab = "Core"));
    parameter SI.Temperature T_Fuel_Center_Init = 1473.15 annotation(dialog(tab = "Core"));

    parameter SI.Pressure Recuperator_P_Tube = 19.4e5 annotation(dialog(tab = "Recuperator HX"));
    parameter SI.SpecificEnthalpy Recuperator_h_Tube_Inlet = 2307e3 annotation(dialog(tab = "Recuperator HX"));
    parameter SI.SpecificEnthalpy Recuperator_h_Tube_Outlet = 3600e3 annotation(dialog(tab = "Recuperator HX"));
    parameter SI.Pressure Recuperator_dp_Tube = 0.3e5 annotation(dialog(tab = "Recuperator HX"));
    parameter SI.MassFlowRate Recuperator_m_Tube = 296.1 annotation(dialog(tab = "Recuperator HX"));

    parameter SI.Pressure Recuperator_P_Shell = 60.4e5 annotation(dialog(tab = "Recuperator HX"));
    parameter SI.SpecificEnthalpy Recuperator_h_Shell_Inlet = 3600e3 annotation(dialog(tab = "Recuperator HX"));
    parameter SI.SpecificEnthalpy Recuperator_h_Shell_Outlet = 2700e3 annotation(dialog(tab = "Recuperator HX"));
    parameter SI.Pressure Recuperator_dp_Shell = 0.4e5 annotation(dialog(tab = "Recuperator HX"));
    parameter SI.MassFlowRate Recuperator_m_Shell = 296.1 annotation(dialog(tab = "Recuperator HX"));

    parameter SI.Pressure P_Intercooler = 59.2e5;
    parameter SI.Pressure P_Precooler = 30e5;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                                                    Text(
              lineColor={0,0,0},
              extent={{-100,-90},{100,-70}},
              textString="Pebble Bed")}),                            Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end DataInitial_HTGR_Pebble;
  end Data;

  package Examples
    extends Modelica.Icons.ExamplesPackage;

    model SteamTurbine_L1_boundaries_Test_a
      import NHES;
      extends Modelica.Icons.Example;
      NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_L1_boundaries
        BOP(
        nPorts_a3=1,
        port_a3_nominal_m_flow={10},
        port_a_nominal(
          m_flow=493.7058,
          p=5550000,
          h=BOP.Medium.specificEnthalpy_pT(BOP.port_a_nominal.p, 591)),
        port_b_nominal(p=1000000, h=BOP.Medium.specificEnthalpy_pT(BOP.port_b_nominal.p,
              318.95)),
        redeclare
          NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_PressureAndPowerControl
          CS(p_nominal=BOP.port_a_nominal.p, W_totalSetpoint=sine.y))
        annotation (Placement(transformation(extent={{-30,-30},{30,30}})));
      TRANSFORM.Electrical.Sources.FrequencySource
                                         sinkElec(f=60)
        annotation (Placement(transformation(extent={{90,-10},{70,10}})));
      Modelica.Fluid.Sources.Boundary_pT sink(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        nPorts=1,
        p(displayUnit="MPa") = BOP.port_b_nominal.p,
        T(displayUnit="K") = BOP.port_b_nominal.T)
        annotation (Placement(transformation(extent={{-88,-2},{-68,-22}})));
      Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-40,-22},{-60,-2}})));
      Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-60,2},{-40,22}})));
      Fluid.Sensors.stateDisplay stateDisplay
        annotation (Placement(transformation(extent={{-72,-60},{-28,-30}})));
      Fluid.Sensors.stateDisplay stateDisplay1
        annotation (Placement(transformation(extent={{-72,20},{-28,50}})));
      Modelica.Fluid.Sources.MassFlowSource_h source1(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        nPorts=1,
        use_m_flow_in=false,
        m_flow=10,
        h=3e6)
        annotation (Placement(transformation(extent={{-40,-90},{-20,-70}})));
      Modelica.Fluid.Sources.Boundary_ph      source(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        nPorts=1,
        p=BOP.port_a_nominal.p,
        h=BOP.port_a_nominal.h,
        use_p_in=true)
        annotation (Placement(transformation(extent={{-88,2},{-68,22}})));
      Modelica.Blocks.Sources.Sine sine(
        f=1/200,
        offset=4e8,
        startTime=350,
        amplitude=2e8)
        annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
      Modelica.Blocks.Sources.Pulse pulse(
        period=100,
        startTime=10,
        offset=BOP.port_a_nominal.p,
        amplitude=0.5*BOP.port_a_nominal.p)
        annotation (Placement(transformation(extent={{-120,10},{-100,30}})));
    equation

      connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
            points={{-50,31.1},{-50,31.1},{-50,12.05},{-49.95,12.05}}, color={0,0,0}));
      connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
            points={{-50,-48.9},{-50,-11.95},{-50.05,-11.95}}, color={0,0,0}));
      connect(sink.ports[1], stateSensor.port_b) annotation (Line(points={{-68,-12},
              {-64,-12},{-60,-12}}, color={0,127,255}));
      connect(stateSensor.port_a, BOP.port_b)
        annotation (Line(points={{-40,-12},{-30,-12}}, color={0,127,255}));
      connect(stateSensor1.port_b, BOP.port_a)
        annotation (Line(points={{-40,12},{-30,12}}, color={0,127,255}));
      connect(source1.ports[1], BOP.port_a3[1]) annotation (Line(points={{-20,-80},
              {-12,-80},{-12,-30}}, color={0,127,255}));
      connect(source.ports[1], stateSensor1.port_a)
        annotation (Line(points={{-68,12},{-60,12}}, color={0,127,255}));
      connect(pulse.y, source.p_in)
        annotation (Line(points={{-99,20},{-90,20}}, color={0,0,127}));
      connect(BOP.portElec_b, sinkElec.port)
        annotation (Line(points={{30,0},{70,0}}, color={255,0,0}));
      annotation (experiment(StopTime=500));
    end SteamTurbine_L1_boundaries_Test_a;

    model SteamTurbine_L1_boundaries_Test_b
      import NHES;
      extends Modelica.Icons.Example;
      NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_L1_boundaries
        BOP(
        nPorts_a3=1,
        port_a3_nominal_m_flow={10},
        port_a_nominal(
          m_flow=493.7058,
          p=5550000,
          h=BOP.Medium.specificEnthalpy_pT(BOP.port_a_nominal.p, 591)),
        port_b_nominal(p=1000000, h=BOP.Medium.specificEnthalpy_pT(BOP.port_b_nominal.p,
              318.95)),
        redeclare
          NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_PressureAndPowerControl
          CS(p_nominal=BOP.port_a_nominal.p, W_totalSetpoint=sine.y))
        annotation (Placement(transformation(extent={{-30,-30},{30,30}})));
      TRANSFORM.Electrical.Sources.FrequencySource
                                         sinkElec(f=60)
        annotation (Placement(transformation(extent={{90,-10},{70,10}})));
      Modelica.Fluid.Sources.Boundary_pT sink(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        nPorts=1,
        p(displayUnit="MPa") = BOP.port_b_nominal.p,
        T(displayUnit="K") = BOP.port_b_nominal.T)
        annotation (Placement(transformation(extent={{-88,-2},{-68,-22}})));
      Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-40,-22},{-60,-2}})));
      Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-60,2},{-40,22}})));
      Fluid.Sensors.stateDisplay stateDisplay
        annotation (Placement(transformation(extent={{-72,-60},{-28,-30}})));
      Fluid.Sensors.stateDisplay stateDisplay1
        annotation (Placement(transformation(extent={{-72,20},{-28,50}})));
      Modelica.Fluid.Sources.MassFlowSource_h source1(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        nPorts=1,
        use_m_flow_in=false,
        m_flow=10,
        h=3e6)
        annotation (Placement(transformation(extent={{-40,-90},{-20,-70}})));
      Modelica.Blocks.Sources.Sine sine(
        f=1/200,
        offset=4e8,
        startTime=350,
        amplitude=2e8)
        annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
      Modelica.Fluid.Sources.MassFlowSource_T source(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        nPorts=1,
        m_flow=BOP.port_a_nominal.m_flow,
        T(displayUnit="K") = BOP.port_a_nominal.T,
        use_m_flow_in=true)
        annotation (Placement(transformation(extent={{-88,2},{-68,22}})));
      Modelica.Blocks.Sources.Pulse pulse(
        period=100,
        startTime=10,
        offset=BOP.port_a_nominal.m_flow,
        amplitude=0.8*BOP.port_a_nominal.m_flow)
        annotation (Placement(transformation(extent={{-120,10},{-100,30}})));
    equation

      connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
            points={{-50,31.1},{-50,31.1},{-50,12.05},{-49.95,12.05}}, color={0,0,0}));
      connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
            points={{-50,-48.9},{-50,-11.95},{-50.05,-11.95}}, color={0,0,0}));
      connect(sink.ports[1], stateSensor.port_b) annotation (Line(points={{-68,-12},
              {-64,-12},{-60,-12}}, color={0,127,255}));
      connect(stateSensor.port_a, BOP.port_b)
        annotation (Line(points={{-40,-12},{-30,-12}}, color={0,127,255}));
      connect(stateSensor1.port_b, BOP.port_a)
        annotation (Line(points={{-40,12},{-30,12}}, color={0,127,255}));
      connect(source1.ports[1], BOP.port_a3[1]) annotation (Line(points={{-20,-80},
              {-12,-80},{-12,-30}}, color={0,127,255}));
      connect(source.ports[1], stateSensor1.port_a)
        annotation (Line(points={{-68,12},{-60,12}}, color={0,127,255}));
      connect(pulse.y, source.m_flow_in)
        annotation (Line(points={{-99,20},{-88,20}}, color={0,0,127}));
      connect(BOP.portElec_b, sinkElec.port)
        annotation (Line(points={{30,0},{70,0}}, color={255,0,0}));
      annotation (experiment(StopTime=1000, __Dymola_NumberOfIntervals=1000));
    end SteamTurbine_L1_boundaries_Test_b;

    model SteamTurbine_L2_ClosedFeedHeat_Test_a
      import NHES;

      extends Modelica.Icons.Example;
      NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_L2_ClosedFeedHeat
        BOP(
        redeclare
          NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp
          CS(data(Q_Nom=45e6)),
        redeclare replaceable Data.Turbine_2 data(
          V_tee=50,
          valve_TCV_mflow=150,
          valve_TCV_dp_nominal=100000,
          valve_TBV_mflow=4,
          valve_TBV_dp_nominal=2000000,
          InternalBypassValve_p_spring=6500000,
          InternalBypassValve_K(unit="1/(m.kg)"),
          InternalBypassValve_tau(unit="1/s"),
          MainFeedHeater_K_tube(unit="1/m4"),
          MainFeedHeater_K_shell(unit="1/m4"),
          BypassFeedHeater_K_tube(unit="1/m4"),
          BypassFeedHeater_K_shell(unit="1/m4")),
        port_a_nominal(
          m_flow=67,
          p=3400000,
          h=3e6),
        port_b_nominal(p=3500000, h=1e6),
        init(
          tee_p_start=800000,
          moisturesep_p_start=700000,
          FeedwaterMixVolume_p_start=100000,
          HPT_T_b_start=578.15,
          MainFeedHeater_p_start_shell=100000,
          MainFeedHeater_h_start_shell_inlet=2e6,
          MainFeedHeater_h_start_shell_outlet=1.8e6,
          MainFeedHeater_dp_init_shell=90000,
          MainFeedHeater_m_start_tube=67,
          MainFeedHeater_m_start_shell=67,
          BypassFeedHeater_h_start_tube_inlet=1.1e6,
          BypassFeedHeater_h_start_tube_outlet=1.2e6,
          BypassFeedHeater_m_start_tube=67,
          BypassFeedHeater_m_start_shell=4))
        annotation (Placement(transformation(extent={{0,-30},{60,30}})));
      TRANSFORM.Electrical.Sources.FrequencySource
                                         sinkElec(f=60)
        annotation (Placement(transformation(extent={{90,-10},{70,10}})));
      Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
      Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
      Fluid.Sensors.stateDisplay stateDisplay
        annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
      Fluid.Sensors.stateDisplay stateDisplay1
        annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
      Modelica.Blocks.Sources.Sine sine(
        f=1/200,
        offset=4e8,
        startTime=350,
        amplitude=2e8)
        annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
      NHES.Fluid.Pipes.StraightPipe_withWall pipe(
        redeclare package Medium =
            Modelica.Media.Water.StandardWater,
        p_a_start=3400000,
        p_b_start=3500000,
        use_Ts_start=false,
        T_a_start=421.15,
        T_b_start=579.15,
        h_a_start=3.6e6,
        h_b_start=1.2e6,
        m_flow_a_start=67,
        length=10,
        diameter=1,
        redeclare package Wall_Material = NHES.Media.Solids.SS316,
        th_wall=0.001) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-60,0})));
      TRANSFORM.HeatAndMassTransfer.BoundaryConditions.Heat.HeatFlow boundary(use_port=
            true, Q_flow=500e6)
        annotation (Placement(transformation(extent={{-96,-10},{-76,10}})));
      Modelica.Blocks.Sources.Pulse pulse(
        amplitude=10e6,
        period=5000,
        offset=170e6,
        startTime=3000)
        annotation (Placement(transformation(extent={{-118,-10},{-98,10}})));
    equation

      connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
            points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                       color={0,0,0}));
      connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
            points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                               color={0,0,0}));
      connect(stateSensor.port_a, BOP.port_b)
        annotation (Line(points={{-18,-12},{0,-12}},   color={0,127,255}));
      connect(stateSensor1.port_b, BOP.port_a)
        annotation (Line(points={{-18,12},{0,12}},   color={0,127,255}));
      connect(BOP.portElec_b, sinkElec.port)
        annotation (Line(points={{60,0},{70,0}}, color={255,0,0}));
      connect(stateSensor.port_b, pipe.port_a) annotation (Line(points={{-38,-12},{-46,
              -12},{-46,-14},{-60,-14},{-60,-10}}, color={0,127,255}));
      connect(pipe.port_b, stateSensor1.port_a)
        annotation (Line(points={{-60,10},{-60,12},{-38,12}}, color={0,127,255}));
      connect(boundary.port, pipe.heatPorts[1])
        annotation (Line(points={{-76,0},{-64.4,0},{-64.4,0.1}}, color={191,0,0}));
      connect(pulse.y, boundary.Q_flow_ext)
        annotation (Line(points={{-97,0},{-90,0}}, color={0,0,127}));
      annotation (experiment(
          StopTime=300,
          Interval=10,
          __Dymola_Algorithm="Esdirk45a"));
    end SteamTurbine_L2_ClosedFeedHeat_Test_a;

    model SteamTurbine_L2_ClosedFeedHeat_Test_b
      import NHES;

      extends Modelica.Icons.Example;
      NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_L2_ClosedFeedHeat
        BOP(
        redeclare
          NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp
          CS,
        redeclare replaceable Data.Turbine_2 data(
          V_tee=50,
          valve_TCV_mflow=150,
          valve_TCV_dp_nominal=100000,
          valve_TBV_mflow=4,
          valve_TBV_dp_nominal=2000000,
          InternalBypassValve_p_spring=6500000,
          InternalBypassValve_K(unit="1/(m.kg)"),
          InternalBypassValve_tau(unit="1/s"),
          MainFeedHeater_K_tube(unit="1/m4"),
          MainFeedHeater_K_shell(unit="1/m4"),
          BypassFeedHeater_K_tube(unit="1/m4"),
          BypassFeedHeater_K_shell(unit="1/m4")),
        port_a_nominal(
          m_flow=67,
          p=3400000,
          h=3e6),
        port_b_nominal(p=3500000, h=1e6),
        init(
          tee_p_start=800000,
          moisturesep_p_start=700000,
          FeedwaterMixVolume_p_start=100000,
          HPT_T_b_start=578.15,
          MainFeedHeater_p_start_shell=100000,
          MainFeedHeater_h_start_shell_inlet=2e6,
          MainFeedHeater_h_start_shell_outlet=1.8e6,
          MainFeedHeater_dp_init_shell=90000,
          MainFeedHeater_m_start_tube=67,
          MainFeedHeater_m_start_shell=67,
          BypassFeedHeater_h_start_tube_inlet=1.1e6,
          BypassFeedHeater_h_start_tube_outlet=1.2e6,
          BypassFeedHeater_m_start_tube=67,
          BypassFeedHeater_m_start_shell=4))
        annotation (Placement(transformation(extent={{0,-30},{60,30}})));
      TRANSFORM.Electrical.Sources.FrequencySource
                                         sinkElec(f=60)
        annotation (Placement(transformation(extent={{90,-10},{70,10}})));
      Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
      Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
      Fluid.Sensors.stateDisplay stateDisplay
        annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
      Fluid.Sensors.stateDisplay stateDisplay1
        annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
      Modelica.Blocks.Sources.Sine sine(
        f=1/200,
        offset=4e8,
        startTime=350,
        amplitude=2e8)
        annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
      Modelica.Fluid.Sources.Boundary_pT sink(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        use_p_in=false,
        nPorts=1,
        p(displayUnit="bar") = 3400000,
        T(displayUnit="degC") = 579.15)
        annotation (Placement(transformation(extent={{-80,22},{-60,2}})));
      Modelica.Fluid.Sources.Boundary_pT sink1(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        use_p_in=false,
        nPorts=1,
        p(displayUnit="bar") = 3400000,
        T(displayUnit="degC") = 421.15)
        annotation (Placement(transformation(extent={{-80,-6},{-60,-26}})));
    equation

      connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
            points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                       color={0,0,0}));
      connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
            points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                               color={0,0,0}));
      connect(stateSensor.port_a, BOP.port_b)
        annotation (Line(points={{-18,-12},{0,-12}},   color={0,127,255}));
      connect(stateSensor1.port_b, BOP.port_a)
        annotation (Line(points={{-18,12},{0,12}},   color={0,127,255}));
      connect(BOP.portElec_b, sinkElec.port)
        annotation (Line(points={{60,0},{70,0}}, color={255,0,0}));
      connect(sink.ports[1], stateSensor1.port_a)
        annotation (Line(points={{-60,12},{-38,12}}, color={0,127,255}));
      connect(sink1.ports[1], stateSensor.port_b) annotation (Line(points={{-60,-16},
              {-44,-16},{-44,-12},{-38,-12}}, color={0,127,255}));
      annotation (experiment(
          StopTime=300,
          Interval=10,
          __Dymola_Algorithm="Esdirk45a"));
    end SteamTurbine_L2_ClosedFeedHeat_Test_b;

    model SteamTurbine_OpenFeedHeat_DivertPowerControl_Test
      "TES use case demonstration of a NuScale-style LWR operating within an energy arbitrage IES, storing and dispensing energy on demand from a two tank molten salt energy storage system nominally using HITEC salt to store heat."
     // parameter Real fracNominal_BOP = abs(EM.port_b2_nominal.m_flow)/EM.port_a1_nominal.m_flow;
     // parameter Real fracNominal_Other = sum(abs(EM.port_b3_nominal_m_flow))/EM.port_a1_nominal.m_flow;
     parameter Modelica.Units.SI.Time timeScale=60*60
        "Time scale of first table column";
     parameter String fileName=Modelica.Utilities.Files.loadResource(
        "modelica://NHES/Resources/Data/RAVEN/DMM_Dissertation_Demand.txt")
      "File where matrix is stored";
        replaceable package Storage_Medium =
          TRANSFORM.Media.Fluids.Therminol_66.TableBasedTherminol66 constrainedby
        Modelica.Media.Interfaces.PartialMedium                                                                           annotation(Dialog(tab="General", group="Mediums"), choicesAllMatching=true);

        replaceable package Charging_Medium =
          Modelica.Media.Water.StandardWater                                     constrainedby
        Modelica.Media.Interfaces.PartialMedium annotation (Dialog(tab="General",
            group="Mediums"), choicesAllMatching=true);

        replaceable package Discharging_Medium =
          Modelica.Media.Water.StandardWater                                          constrainedby
        Modelica.Media.Interfaces.PartialMedium annotation (Dialog(tab="General",
            group="Mediums"), choicesAllMatching=true);

    //  Real demandChange=
    //  min(1.05,
    //  max(SC.W_totalSetpoint_BOP/SC.W_nominal_BOP*fracNominal_BOP
    //      + sum(EM.port_b3.m_flow./EM.port_b3_nominal_m_flow)*fracNominal_Other,
    //      0.5));

      NHES.Systems.SwitchYard.SimpleYard.SimpleConnections SY(nPorts_a=1)
        annotation (Placement(transformation(extent={{60,38},{100,82}})));
      NHES.Systems.ElectricalGrid.InfiniteGrid.Infinite EG
        annotation (Placement(transformation(extent={{120,40},{160,80}})));
      NHES.Systems.Examples.BaseClasses.Data_Capacity dataCapacity(IP_capacity(
            displayUnit="MW") = 53303300, BOP_capacity(displayUnit="MW")=
          1165000000)
        annotation (Placement(transformation(extent={{100,-62},{120,-42}})));
      NHES.Systems.SupervisoryControl.InputSetpointData SC(
        delayStart=0,
        W_nominal_BOP(displayUnit="MW") = 50000000,
        fileName=Modelica.Utilities.Files.loadResource(
            "modelica://NHES/Resources/Data/RAVEN/Nominal_50_timeSeries.txt"))
        annotation (Placement(transformation(extent={{120,-62},{160,-22}})));

      TRANSFORM.Electrical.Sensors.PowerSensor sensorW
        annotation (Placement(transformation(extent={{104,54},{116,66}})));

      NHES.Fluid.Sensors.stateSensor stateSensor5(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{30,22},{44,38}})));
      NHES.Systems.EnergyManifold.SteamManifold.SteamManifold_L1_boundaries EM(
        port_a1_nominal(
          p(displayUnit="Pa") = 3.398e6,
          h=2.99767e6,
          m_flow=67.07),
        port_b1_nominal(p=3447380, h=629361),
        port_b3_nominal_m_flow={-0.67},
        nPorts_b3=1)
        annotation (Placement(transformation(extent={{-60,40},{-20,80}})));
      NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_OpenFeedHeat_DivertPowerControl
        BOP(
        port_a_nominal(
          p=EM.port_b2_nominal.p,
          h=EM.port_b2_nominal.h,
          m_flow=-EM.port_b2_nominal.m_flow),
        port_b_nominal(p=EM.port_a2_nominal.p, h=EM.port_a2_nominal.h),
        redeclare
          NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_DivertPowerControl_ANL_v2
          CS(electric_demand_large=MW_W_Gain_BOP.y, data(Q_Nom=49e6)))
        annotation (Placement(transformation(extent={{6,40},{46,80}})));
      NHES.Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-80,60},{-66,76}})));
      NHES.Fluid.Sensors.stateSensor stateSensor2(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-14,60},{0,76}})));
      NHES.Fluid.Sensors.stateSensor stateSensor3(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-66,44},{-80,60}})));
      Modelica.Fluid.Sources.Boundary_pT sink(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        use_p_in=false,
        nPorts=1,
        p(displayUnit="bar") = 3400000,
        T(displayUnit="degC") = 421.15)
        annotation (Placement(transformation(extent={{-120,60},{-104,44}})));
      Modelica.Fluid.Sources.MassFlowSource_T SteamSource(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        use_m_flow_in=false,
        m_flow=67.53,
        T(displayUnit="K") = 581.24,
        nPorts=1)
        annotation (Placement(transformation(extent={{-120,58},{-100,78}})));
      NHES.Fluid.Sensors.stateSensor stateSensor4(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-20,22},{-6,38}})));
      Modelica.Fluid.Sources.MassFlowSource_h Storage_Med_Source(
        redeclare package Medium = Storage_Medium,
        use_m_flow_in=false,
        m_flow=400,
        h=257097,
        nPorts=1) annotation (Placement(transformation(extent={{80,2},{60,22}})));
      Modelica.Fluid.Sources.Boundary_pT Oil_Sink(
        redeclare package Medium = Storage_Medium,
        use_p_in=false,
        p(displayUnit="bar") = 130000,
        T(displayUnit="degC") = 523.15,
        nPorts=1)
        annotation (Placement(transformation(extent={{-40,20},{-24,4}})));
      NHES.Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase
                                                          CHX(
        shell_av_b=true,
        use_derQ=true,
        tau=1,
        NTU=20,
        K_tube=1000,
        K_shell=1000,
        redeclare package Tube_medium = Storage_Medium,
        redeclare package Shell_medium = Charging_Medium,
        V_Tube=10,
        V_Shell=25,
        use_T_start_tube=true,
        T_start_tube_inlet=573.15,
        T_start_tube_outlet=573.15,
        dp_init_tube=20000,
        Q_init=1)          annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={14,16})));
      NHES.Fluid.Sensors.stateSensor stateSensor6(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{50,4},{36,20}})));
      NHES.Fluid.Sensors.stateSensor stateSensor7(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-6,4},{-20,20}})));
      Modelica.Blocks.Sources.Pulse pulse_BOP(
        period=7200,
        offset=17,
        startTime=2500,
        amplitude=10)
        annotation (Placement(transformation(extent={{-106,4},{-94,16}})));
      Modelica.Blocks.Math.Add add_BOP
        annotation (Placement(transformation(extent={{-86,10},{-66,30}})));
      Modelica.Blocks.Math.Gain MW_W_Gain_BOP(k=1e6)
        annotation (Placement(transformation(extent={{-58,14},{-46,26}})));
      Modelica.Blocks.Interfaces.RealInput BOP_Demand_MW annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=0,
            origin={-106,26}), iconTransformation(extent={{-120,48},{-96,72}})));
      Modelica.Blocks.Interfaces.RealOutput BOP_Electric_Power
        annotation (Placement(transformation(extent={{112,16},{128,32}}),
            iconTransformation(extent={{128,68},{152,92}})));
      Modelica.Blocks.Interfaces.RealOutput BOP_Turbine_Pressure
        annotation (Placement(transformation(extent={{112,0},{128,16}}),
            iconTransformation(extent={{128,44},{152,68}})));
    equation
       BOP_Electric_Power = BOP.sensorW.W;
       BOP_Turbine_Pressure = BOP.HPT.portHP.p;

      connect(SY.port_Grid, sensorW.port_a)
        annotation (Line(points={{100,60},{104,60}},
                                                   color={255,0,0}));
      connect(sensorW.port_b, EG.portElec_a)
        annotation (Line(points={{116,60},{120,60}},
                                                   color={255,0,0}));
      connect(EM.port_a2, BOP.port_b)
        annotation (Line(points={{-20,52},{6,52}}, color={0,127,255}));
      connect(EM.port_b2,stateSensor2. port_a) annotation (Line(points={{-20,68},
              {-14,68}},                          color={0,127,255}));
      connect(stateSensor2.port_b, BOP.port_a)
        annotation (Line(points={{1.77636e-15,68},{6,68}}, color={0,127,255}));
      connect(EM.port_a1,stateSensor1. port_b)
        annotation (Line(points={{-60,68},{-66,68}}, color={0,127,255}));
      connect(EM.port_b1,stateSensor3. port_a)
        annotation (Line(points={{-60,52},{-66,52}}, color={0,127,255}));
      connect(stateSensor3.port_b,sink. ports[1]) annotation (Line(points={{-80,52},
              {-104,52}},                       color={0,127,255}));
      connect(SteamSource.ports[1],stateSensor1. port_a) annotation (Line(
            points={{-100,68},{-80,68}},                   color={0,127,255}));
      connect(BOP.portElec_b, SY.port_a[1])
        annotation (Line(points={{46,60},{60,60}}, color={255,0,0}));
      connect(EM.port_b3[1], stateSensor4.port_a) annotation (Line(points={{-32,40},
              {-32,30},{-20,30}},                       color={0,127,255}));
      connect(BOP.port_a1, stateSensor5.port_b) annotation (Line(points={{13.2,40.8},
              {34,40.8},{34,34},{50,34},{50,30},{44,30}},       color={0,127,
              255}));
      connect(stateSensor4.port_b, CHX.Shell_in) annotation (Line(points={{-6,30},{0,
              30},{0,18},{4,18}},         color={0,127,255}));
      connect(CHX.Shell_out, stateSensor5.port_a) annotation (Line(points={{24,18},{
              26,18},{26,30},{30,30}},
                                    color={0,127,255}));
      connect(CHX.Tube_in, stateSensor6.port_b)
        annotation (Line(points={{24,12},{36,12}},  color={0,127,255}));
      connect(Storage_Med_Source.ports[1], stateSensor6.port_a)
        annotation (Line(points={{60,12},{50,12}}, color={0,127,255}));
      connect(CHX.Tube_out, stateSensor7.port_a)
        annotation (Line(points={{4,12},{-6,12}},      color={0,127,255}));
      connect(stateSensor7.port_b, Oil_Sink.ports[1])
        annotation (Line(points={{-20,12},{-24,12}},   color={0,127,255}));
      connect(add_BOP.y,MW_W_Gain_BOP. u)
        annotation (Line(points={{-65,20},{-59.2,20}}, color={0,0,127}));
      connect(BOP_Demand_MW,add_BOP. u1) annotation (Line(points={{-106,26},{-88,26}},
                                    color={0,0,127}));
      connect(pulse_BOP.y,add_BOP. u2) annotation (Line(points={{-93.4,10},{-88,10},
              {-88,14}},            color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -60},{160,100}}),  graphics={
            Ellipse(lineColor = {75,138,73},
                    fillColor={255,255,255},
                    fillPattern = FillPattern.Solid,
                    extent={{-54,-102},{146,98}}),
            Polygon(lineColor = {0,0,255},
                    fillColor = {75,138,73},
                    pattern = LinePattern.None,
                    fillPattern = FillPattern.Solid,
                    points={{16,62},{116,2},{16,-58},{16,62}})}),
                                    Diagram(coordinateSystem(preserveAspectRatio=
                false, extent={{-120,-60},{160,100}})),
        experiment(
          StopTime=5000,
          Interval=10,
          Tolerance=1e-06,
          __Dymola_Algorithm="Esdirk45a"),
        Documentation(info="<html>
<p>NuScale style reactor system. System has a nominal thermal output of 160MWt rather than the updated 200MWt.</p>
<p>System is based upon report: Frick, Konor L. Status Report on the NuScale Module Developed in the Modelica Framework. United States: N. p., 2019. Web. doi:10.2172/1569288.</p>
</html>"),
        __Dymola_experimentSetupOutput(events=false));
    end SteamTurbine_OpenFeedHeat_DivertPowerControl_Test;

    package Example_FMU_construction
      model SteamTurbine_L1_FMU
        import NHES;
        extends Modelica.Icons.Example;
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_L1_boundaries
          BOP(
          nPorts_a3=1,
          port_a_nominal(
            m_flow=67,
            p=3470000,
            h=BOP.Medium.specificEnthalpy_pT(BOP.port_a_nominal.p, 591)),
          port_b_nominal(p=1000000, h=BOP.Medium.specificEnthalpy_pT(BOP.port_b_nominal.p,
                318.95)),
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_OTSG_TCV_Pressure_TBV_Power_Control
            CS(
            delayStartTCV=20,
            p_nominal=3447400,
            W_totalSetpoint=BOP_Demand))
          annotation (Placement(transformation(extent={{-18,-30},{42,30}})));
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(use_port=false,
                                                    f=60)
          annotation (Placement(transformation(extent={{90,-10},{70,10}})));
        Modelica.Fluid.Sources.Boundary_pT sink(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          use_T_in=false,
          nPorts=1,
          p(displayUnit="MPa") = BOP.port_b_nominal.p,
          T(displayUnit="K") = BOP.port_b_nominal.T)
          annotation (Placement(transformation(extent={{-88,-2},{-68,-22}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-40,-22},{-60,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-60,2},{-40,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-72,-52},{-28,-22}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-72,20},{-28,50}})));
        Modelica.Fluid.Sources.MassFlowSource_h source1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          nPorts=1,
          use_m_flow_in=false,
          h=3e6)
          annotation (Placement(transformation(extent={{-40,-90},{-20,-70}})));
        Modelica.Fluid.Sources.MassFlowSource_h source(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_m_flow_in=true,
          use_h_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-88,2},{-68,22}})));
        Modelica.Blocks.Interfaces.RealInput Enthalpy
          annotation (Placement(transformation(extent={{-140,-8},{-100,32}})));
        Modelica.Blocks.Interfaces.RealInput mass_flow
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealOutput enthalpy_out
          annotation (Placement(transformation(extent={{-100,-58},{-124,-34}})));
        Modelica.Blocks.Interfaces.RealOutput pressure_out
          annotation (Placement(transformation(extent={{-100,-92},{-124,-68}})));
        Modelica.Blocks.Interfaces.RealOutput Power
          annotation (Placement(transformation(extent={{100,48},{124,72}})));
        Modelica.Blocks.Interfaces.RealOutput freq
          annotation (Placement(transformation(extent={{100,8},{124,32}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=BOP.port_b.h_outflow)
          annotation (Placement(transformation(extent={{-64,-72},{-84,-52}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=BOP.port_b.p)
          annotation (Placement(transformation(extent={{-64,-90},{-84,-70}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=BOP.portElec_b.W)
          annotation (Placement(transformation(extent={{62,50},{82,70}})));
        Modelica.Blocks.Sources.RealExpression realExpression3(y=BOP.portElec_b.f)
          annotation (Placement(transformation(extent={{64,18},{84,38}})));
        Modelica.Blocks.Sources.RealExpression realExpression4(y=BOP.port_a.p)
          annotation (Placement(transformation(extent={{-66,60},{-86,80}})));
        Modelica.Blocks.Interfaces.RealOutput port_inlet_pressure
          "This is a feedback of the pressure going into the balance of plant"
          annotation (Placement(transformation(extent={{-100,60},{-124,84}})));
        Modelica.Blocks.Interfaces.RealInput BOP_Demand annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,120})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-50,31.1},{-50,31.1},{-50,12.05},{-49.95,12.05}}, color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-50,-40.9},{-50,-11.95},{-50.05,-11.95}}, color={0,0,0}));
        connect(sink.ports[1], stateSensor.port_b) annotation (Line(points={{-68,-12},
                {-64,-12},{-60,-12}}, color={0,127,255}));
        connect(stateSensor.port_a, BOP.port_b)
          annotation (Line(points={{-40,-12},{-18,-12}}, color={0,127,255}));
        connect(stateSensor1.port_b, BOP.port_a)
          annotation (Line(points={{-40,12},{-18,12}}, color={0,127,255}));
        connect(source1.ports[1], BOP.port_a3[1]) annotation (Line(points={{-20,-80},
                {0,-80},{0,-30}},     color={0,127,255}));
        connect(source.ports[1], stateSensor1.port_a)
          annotation (Line(points={{-68,12},{-60,12}}, color={0,127,255}));
        connect(BOP.portElec_b, sinkElec.port)
          annotation (Line(points={{42,0},{70,0}}, color={255,0,0}));
        connect(Enthalpy, source.h_in) annotation (Line(points={{-120,12},{-96,12},{
                -96,16},{-90,16}}, color={0,0,127}));
        connect(realExpression.y, enthalpy_out) annotation (Line(points={{-85,-62},{
                -92,-62},{-92,-46},{-112,-46}}, color={0,0,127}));
        connect(realExpression1.y, pressure_out)
          annotation (Line(points={{-85,-80},{-112,-80}}, color={0,0,127}));
        connect(realExpression2.y, Power)
          annotation (Line(points={{83,60},{112,60}}, color={0,0,127}));
        connect(realExpression3.y, freq) annotation (Line(points={{85,28},{88,28},{88,
                20},{112,20}}, color={0,0,127}));
        connect(mass_flow, source.m_flow_in) annotation (Line(points={{-120,40},{-96,
                40},{-96,20},{-88,20}}, color={0,0,127}));
        connect(realExpression4.y, port_inlet_pressure) annotation (Line(points={{-87,
                70},{-94,70},{-94,72},{-112,72}}, color={0,0,127}));
        annotation (experiment(
            StopTime=1000,
            __Dymola_NumberOfIntervals=1000,
            __Dymola_Algorithm="Esdirk45a"), Documentation(info="<html>
<p>Created by: Konor Frick </p>
<p>Date: 9/28/2020</p>
<p>Adaptation of the balance of plant model to become an FMI/FMU. This model can be exported as in either model exchange or co-simulation mode. </p>
<p>Reference: K. Frick, A. Alfonsi, C. Rabiti. &quot;Flexible Modelica/RAVEN Framework for IES&quot;. Idaho National Laboratory. INL/EXT-20-00419.</p>
</html>"));
      end SteamTurbine_L1_FMU;

      model SteamTurbine_L1_FMU_adaptor
        import NHES;
        extends Modelica.Icons.Example;
        replaceable package Medium=Modelica.Media.Water.StandardWater;
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_L1_boundaries
          BOP(
          redeclare package Medium = Medium,
          nPorts_a3=1,
          port_a_nominal(
            m_flow=67,
            p=3470000,
            h=BOP.Medium.specificEnthalpy_pT(BOP.port_a_nominal.p, 591)),
          port_b_nominal(p=1000000, h=BOP.Medium.specificEnthalpy_pT(BOP.port_b_nominal.p,
                318.95)),
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_OTSG_TCV_Pressure_TBV_Power_Control
            CS(
            delayStartTCV=20,
            p_nominal=3447400,
            W_totalSetpoint=BOP_Demand))
          annotation (Placement(transformation(extent={{-18,-30},{42,30}})));
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(use_port=false,
                                                    f=60)
          annotation (Placement(transformation(extent={{90,-10},{70,10}})));
        Modelica.Fluid.Sources.MassFlowSource_h source1(
          redeclare package Medium = Medium,
          nPorts=1,
          use_m_flow_in=false,
          h=3e6)
          annotation (Placement(transformation(extent={{56,-66},{36,-46}})));
        Modelica.Blocks.Interfaces.RealOutput Power
          annotation (Placement(transformation(extent={{100,48},{124,72}})));
        Modelica.Blocks.Interfaces.RealOutput freq
          annotation (Placement(transformation(extent={{100,8},{124,32}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=BOP.portElec_b.W)
          annotation (Placement(transformation(extent={{62,50},{82,70}})));
        Modelica.Blocks.Sources.RealExpression realExpression3(y=BOP.portElec_b.f)
          annotation (Placement(transformation(extent={{64,18},{84,38}})));
        Modelica.Blocks.Interfaces.RealInput BOP_Demand annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={0,120})));
        NHES.Utilities.FMI_Templates.Adaptors.MSLFluidAdaptors.MassFlowToPressure
          massFlowToPressure(redeclare package Medium = Medium,
                             p_atm=BOP.port_b_nominal.p)
          annotation (Placement(transformation(extent={{10,-26},{-10,26}},
              rotation=90,
              origin={-18,-68})));
        NHES.Utilities.FMI_Templates.Adaptors.MSLFluidAdaptors.PressureToMassFlow
          pressureToMassFlow(redeclare package Medium = Medium,
                             p_atm=BOP.port_a_nominal.p)
          annotation (Placement(transformation(extent={{-70,-20},{-50,32}})));
        Modelica.Blocks.Interfaces.RealInput C_in_port_a[size(pressureToMassFlow.C_in,
          1)] "Prescribed mass fractions" annotation (Placement(transformation(extent=
                 {{-118,-100},{-100,-82}}), iconTransformation(extent={{-118,-100},{-100,
                  -82}})));
        Modelica.Blocks.Interfaces.RealInput X_in_port_a[size(pressureToMassFlow.X_in,
          1)] "Prescribed mass fractions" annotation (Placement(transformation(extent=
                 {{-118,-58},{-100,-40}}), iconTransformation(extent={{-118,-58},{-100,
                  -40}})));
        Modelica.Blocks.Interfaces.RealInput h_in_port_a
          "Prescribed specific enthalpy" annotation (Placement(transformation(extent=
                  {{-118,-78},{-100,-60}}), iconTransformation(extent={{-118,-78},{-100,
                  -60}})));
        Modelica.Blocks.Interfaces.RealInput p_in_port_a "Prescribed pressure"
          annotation (Placement(transformation(extent={{-118,-38},{-100,-20}}),
              iconTransformation(extent={{-118,-38},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealInput m_in_port_b "Prescribed pressure"
          annotation (Placement(transformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-78,-108}), iconTransformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-94,-108})));
        Modelica.Blocks.Interfaces.RealInput h_in_port_b "Prescribed pressure"
          annotation (Placement(transformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-58,-108}), iconTransformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-74,-108})));
        Modelica.Blocks.Interfaces.RealInput X_in_port_b[size(massFlowToPressure.X_in,
          1)] "Prescribed mass fractions" annotation (Placement(transformation(
              extent={{-9,-9},{9,9}},
              rotation=90,
              origin={-39,-109}), iconTransformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-56,-108})));
        Modelica.Blocks.Interfaces.RealInput C_in_port_b[size(massFlowToPressure.C_in,
          1)] "Prescribed mass fractions" annotation (Placement(transformation(
              extent={{-9,-9},{9,9}},
              rotation=90,
              origin={-23,-109}), iconTransformation(
              extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-34,-108})));
        Modelica.Blocks.Interfaces.RealOutput m_flow_out_port_a annotation (Placement(
              transformation(extent={{-100,42},{-124,66}}), iconTransformation(extent=
                 {{-100,42},{-124,66}})));
        Modelica.Blocks.Interfaces.RealOutput X_out_port_a[size(pressureToMassFlow.X_out,
          1)] "Prescribed traces" annotation (Placement(transformation(extent={{-100,
                  70},{-124,94}}), iconTransformation(extent={{-100,70},{-124,94}})));
        Modelica.Blocks.Interfaces.RealOutput h_out_port_a annotation (Placement(
              transformation(extent={{-100,12},{-124,36}}), iconTransformation(extent=
                 {{-100,12},{-124,36}})));
        Modelica.Blocks.Interfaces.RealOutput C_out_port_a[size(pressureToMassFlow.C_out,
          1)] "Prescribed Mass Fractions" annotation (Placement(transformation(extent=
                 {{-100,-4},{-124,20}}), iconTransformation(extent={{-100,-4},{-124,
                  20}})));
        Modelica.Blocks.Interfaces.RealOutput p_out_port_b annotation (Placement(
              transformation(
              extent={{-12,-12},{12,12}},
              rotation=-90,
              origin={8,-112}), iconTransformation(
              extent={{12,-12},{-12,12}},
              rotation=90,
              origin={32,-112})));
        Modelica.Blocks.Interfaces.RealOutput h_out_port_b annotation (Placement(
              transformation(
              extent={{-12,-12},{12,12}},
              rotation=-90,
              origin={30,-112}), iconTransformation(
              extent={{12,-12},{-12,12}},
              rotation=90,
              origin={4,-112})));
        Modelica.Blocks.Interfaces.RealOutput C_out_port_b[size(massFlowToPressure.C_out,
          1)] "Prescribed Flows" annotation (Placement(transformation(
              extent={{12,-12},{-12,12}},
              rotation=90,
              origin={92,-112}), iconTransformation(
              extent={{12,-12},{-12,12}},
              rotation=90,
              origin={60,-112})));
        Modelica.Blocks.Interfaces.RealOutput X_out_port_b[size(massFlowToPressure.X_out,
          1)] "Prescribed Traces" annotation (Placement(transformation(
              extent={{12,-12},{-12,12}},
              rotation=90,
              origin={60,-112}), iconTransformation(
              extent={{12,-12},{-12,12}},
              rotation=90,
              origin={88,-112})));
      equation

        connect(source1.ports[1], BOP.port_a3[1]) annotation (Line(points={{36,-56},{
                0,-56},{0,-30}},      color={0,127,255}));
        connect(BOP.portElec_b, sinkElec.port)
          annotation (Line(points={{42,0},{70,0}}, color={255,0,0}));
        connect(realExpression2.y, Power)
          annotation (Line(points={{83,60},{112,60}}, color={0,0,127}));
        connect(realExpression3.y, freq) annotation (Line(points={{85,28},{88,28},{88,
                20},{112,20}}, color={0,0,127}));
        connect(BOP.port_b, massFlowToPressure.fluidPort) annotation (Line(points={{-18,-12},
                {-34,-12},{-34,-44},{-18,-44},{-18,-58}},color={0,127,255}));
        connect(BOP.port_a, pressureToMassFlow.fluidPort) annotation (Line(points={{-18,12},
                {-48,12},{-48,6.2},{-49.8,6.2}},           color={0,127,255}));
        connect(pressureToMassFlow.C_in, C_in_port_a) annotation (Line(points={{-72,-18},
                {-72,-91},{-109,-91}}, color={0,0,127}));
        connect(pressureToMassFlow.p_in, p_in_port_a) annotation (Line(points={{-72,0},
                {-102,0},{-102,-29},{-109,-29}}, color={0,0,127}));
        connect(m_in_port_b, massFlowToPressure.m_flow_in) annotation (Line(points={{
                -78,-108},{-78,-98},{-42,-98},{-42,-80}}, color={0,0,127}));
        connect(pressureToMassFlow.h_out, h_out_port_a)
          annotation (Line(points={{-72,24},{-112,24}}, color={0,0,127}));
        connect(C_in_port_b, massFlowToPressure.C_in) annotation (Line(points={{-23,-109},
                {-23,-100},{-24,-100},{-24,-80}}, color={0,0,127}));
        connect(X_in_port_b, massFlowToPressure.X_in) annotation (Line(points={{-39,-109},
                {-39,-98},{-30,-98},{-30,-80}}, color={0,0,127}));
        connect(h_in_port_b, massFlowToPressure.h_in) annotation (Line(points={{-58,-108},
                {-58,-100},{-36,-100},{-36,-80}}, color={0,0,127}));
        connect(X_in_port_a, pressureToMassFlow.X_in) annotation (Line(points={{-109,
                -49},{-96,-49},{-96,-12},{-72,-12}}, color={0,0,127}));
        connect(h_in_port_a, pressureToMassFlow.h_in) annotation (Line(points={{-109,
                -69},{-96,-69},{-96,-6},{-72,-6}}, color={0,0,127}));
        connect(pressureToMassFlow.C_out, C_out_port_a) annotation (Line(points={{-72,
                12},{-86,12},{-86,8},{-112,8}}, color={0,0,127}));
        connect(pressureToMassFlow.m_flow_out, m_flow_out_port_a) annotation (Line(
              points={{-72,30},{-90,30},{-90,54},{-112,54}}, color={0,0,127}));
        connect(massFlowToPressure.p_out, p_out_port_b) annotation (Line(points={{-12,
                -80},{-12,-94},{8,-94},{8,-112}}, color={0,0,127}));
        connect(massFlowToPressure.h_out, h_out_port_b) annotation (Line(points={{-6,
                -80},{-6,-94},{30,-94},{30,-112}}, color={0,0,127}));
        connect(X_out_port_b, massFlowToPressure.X_out) annotation (Line(points={{60,
                -112},{60,-94},{0,-94},{0,-80}}, color={0,0,127}));
        connect(C_out_port_b, massFlowToPressure.C_out) annotation (Line(points={{92,
                -112},{92,-94},{6,-94},{6,-80}}, color={0,0,127}));
        connect(pressureToMassFlow.X_out, X_out_port_a) annotation (Line(points={{-72,
                18},{-80,18},{-80,82},{-112,82}}, color={0,0,127}));
        annotation (experiment(
            StopTime=1000,
            __Dymola_NumberOfIntervals=1000,
            __Dymola_Algorithm="Esdirk45a"), Documentation(info="<html>
<p>Created by: Konor Frick </p>
<p>Date: 10/28/2020</p>
<p>Creation of FMU/FMU using the FMI Utility adaptor system.  This unit can be exported as an FMI/FMU in either model exchange or co-simulation mode.</p>
<p>Reference: K Frick, A. Alfonsi, C. Rabiti, S. Bragg-Sitton. &quot;Development of the IES Plug and Play Framework&quot;. Idaho National Laboratory. INL/EXT-21-62050.</p>
</html>"));
      end SteamTurbine_L1_FMU_adaptor;
    end Example_FMU_construction;

    package ObsoleteBOPExamples
      model SteamTurbine_L2
        import NHES;
        extends Modelica.Icons.Example;
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_OpenFeedHeat_DivertPowerControl
          intermediate_Rankine_Cycle_TESUC_3_Peaking_IC_2_AR(
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_DivertPowerControl
            CS(electric_demand=sine.y, Overall_Power=sensorW.W),
          port_a_nominal(
            p=3400000,
            h=3e6,
            m_flow=67),
          port_b_nominal(p=3400000, h=1e6))
          annotation (Placement(transformation(extent={{-30,-30},{30,30}})));

        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{90,-10},{70,10}})));
        Modelica.Fluid.Sources.Boundary_pT sink(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          nPorts=1,
          p(displayUnit="bar") = 3400000,
          T(displayUnit="degC") = 421.15)
          annotation (Placement(transformation(extent={{-88,-2},{-68,-22}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-40,-22},{-60,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-60,2},{-40,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-72,-60},{-28,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-72,20},{-28,50}})));
        Modelica.Fluid.Sources.MassFlowSource_h source1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_m_flow_in=false,
          m_flow=10,
          h=2e6,
          nPorts=1)
          annotation (Placement(transformation(extent={{-48,-88},{-28,-68}})));
        Modelica.Fluid.Sources.Boundary_ph source(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          nPorts=1,
          p=3400000,
          h=3e6,
          use_p_in=false)
          annotation (Placement(transformation(extent={{-88,2},{-68,22}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{46,-6},{60,6}})));
        Modelica.Blocks.Sources.Sine sine(
          amplitude=10e6,
          f=1/20000,
          offset=38e6,
          startTime=2000)
          annotation (Placement(transformation(extent={{-56,58},{-36,78}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-50,31.1},{-50,31.1},{-50,12.05},{-49.95,12.05}}, color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-50,-48.9},{-50,-11.95},{-50.05,-11.95}}, color={0,0,0}));
        connect(sink.ports[1], stateSensor.port_b) annotation (Line(points={{-68,-12},
                {-64,-12},{-60,-12}}, color={0,127,255}));
        connect(stateSensor.port_a,
          intermediate_Rankine_Cycle_TESUC_3_Peaking_IC_2_AR.port_b)
          annotation (Line(points={{-40,-12},{-30,-12}}, color={0,127,255}));
        connect(stateSensor1.port_b,
          intermediate_Rankine_Cycle_TESUC_3_Peaking_IC_2_AR.port_a)
          annotation (Line(points={{-40,12},{-30,12}}, color={0,127,255}));
        connect(source.ports[1], stateSensor1.port_a)
          annotation (Line(points={{-68,12},{-60,12}}, color={0,127,255}));
        connect(source1.ports[1], intermediate_Rankine_Cycle_TESUC_3_Peaking_IC_2_AR.port_a1)
          annotation (Line(points={{-28,-78},{-22,-78},{-22,-28.8},{-19.2,-28.8}},
              color={0,127,255}));
        connect(intermediate_Rankine_Cycle_TESUC_3_Peaking_IC_2_AR.portElec_b,
          sensorW.port_a) annotation (Line(points={{30,0},{46,0}}, color={255,0,0}));
        connect(sensorW.port_b, sinkElec.port)
          annotation (Line(points={{60,0},{70,0}}, color={255,0,0}));
        annotation (experiment(StopTime=500));
      end SteamTurbine_L2;

      model SteamTurbine_L3
        import NHES;
        extends Modelica.Icons.Example;
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_Basic_NoFeedHeat
          intermediate_Rankine_Cycle_TESUC_1_Independent_SmallCycle(
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_SmallCycle_NoFeedHeat
            CS(electric_demand=sine.y),
          port_a_nominal(
            p=1200000,
            h=2e6,
            m_flow=26),
          port_b_nominal(p=1200000, h=1e6))
          annotation (Placement(transformation(extent={{-32,-30},{28,30}})));

        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{90,-10},{70,10}})));
        Modelica.Fluid.Sources.Boundary_pT sink(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          nPorts=1,
          p(displayUnit="bar") = 1200000,
          T(displayUnit="degC") = 421.15)
          annotation (Placement(transformation(extent={{-88,-2},{-68,-22}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-40,-22},{-60,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-60,2},{-40,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-72,-60},{-28,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-72,20},{-28,50}})));
        Modelica.Fluid.Sources.Boundary_ph source(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          nPorts=1,
          p=1200000,
          h=2e6,
          use_p_in=false)
          annotation (Placement(transformation(extent={{-88,2},{-68,22}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{46,-6},{60,6}})));
        Modelica.Blocks.Sources.Sine sine(
          amplitude=10e6,
          f=1/20000,
          offset=2e6,
          startTime=2000)
          annotation (Placement(transformation(extent={{-56,58},{-36,78}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-50,31.1},{-50,31.1},{-50,12.05},{-49.95,12.05}}, color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-50,-48.9},{-50,-11.95},{-50.05,-11.95}}, color={0,0,0}));
        connect(sink.ports[1], stateSensor.port_b) annotation (Line(points={{-68,-12},
                {-64,-12},{-60,-12}}, color={0,127,255}));
        connect(stateSensor.port_a,
          intermediate_Rankine_Cycle_TESUC_1_Independent_SmallCycle.port_b)
          annotation (Line(points={{-40,-12},{-32,-12}}, color={0,127,255}));
        connect(stateSensor1.port_b,
          intermediate_Rankine_Cycle_TESUC_1_Independent_SmallCycle.port_a)
          annotation (Line(points={{-40,12},{-32,12}}, color={0,127,255}));
        connect(source.ports[1], stateSensor1.port_a)
          annotation (Line(points={{-68,12},{-60,12}}, color={0,127,255}));
        connect(intermediate_Rankine_Cycle_TESUC_1_Independent_SmallCycle.portElec_b,
          sensorW.port_a) annotation (Line(points={{28,0},{46,0}}, color={255,0,0}));
        connect(sensorW.port_b, sinkElec.port)
          annotation (Line(points={{60,0},{70,0}}, color={255,0,0}));
        annotation (experiment(StopTime=500));
      end SteamTurbine_L3;

      model SteamTurbine_L4
        import NHES;
        extends Modelica.Icons.Example;
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_L2_ClosedFeedHeat
          intermediate_Rankine_Cycle_4_1(
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.ObsoleteCS.CS_IntermediateControl_PID_6
            CS,
          port_a_nominal(
            p=3400000,
            h=3e6,
            m_flow=67),
          port_b_nominal(p=3400000, h=1e6))
          annotation (Placement(transformation(extent={{-30,-30},{30,30}})));

        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{90,-10},{70,10}})));
        Modelica.Fluid.Sources.Boundary_pT sink(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          nPorts=1,
          p(displayUnit="bar") = 3400000,
          T(displayUnit="degC") = 421.15)
          annotation (Placement(transformation(extent={{-88,-2},{-68,-22}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-40,-22},{-60,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-60,2},{-40,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-72,-60},{-28,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-72,20},{-28,50}})));
        Modelica.Fluid.Sources.Boundary_ph source(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          nPorts=1,
          p=3400000,
          h=3e6,
          use_p_in=false)
          annotation (Placement(transformation(extent={{-88,2},{-68,22}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{46,-6},{60,6}})));
        Modelica.Blocks.Sources.Sine sine(
          amplitude=10e6,
          f=1/20000,
          offset=38e6,
          startTime=2000)
          annotation (Placement(transformation(extent={{-56,58},{-36,78}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-50,31.1},{-50,31.1},{-50,12.05},{-49.95,12.05}}, color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-50,-48.9},{-50,-11.95},{-50.05,-11.95}}, color={0,0,0}));
        connect(sink.ports[1], stateSensor.port_b) annotation (Line(points={{-68,-12},
                {-64,-12},{-60,-12}}, color={0,127,255}));
        connect(stateSensor.port_a, intermediate_Rankine_Cycle_4_1.port_b)
          annotation (Line(points={{-40,-12},{-30,-12}}, color={0,127,255}));
        connect(stateSensor1.port_b, intermediate_Rankine_Cycle_4_1.port_a)
          annotation (Line(points={{-40,12},{-30,12}}, color={0,127,255}));
        connect(source.ports[1], stateSensor1.port_a)
          annotation (Line(points={{-68,12},{-60,12}}, color={0,127,255}));
        connect(intermediate_Rankine_Cycle_4_1.portElec_b, sensorW.port_a)
          annotation (Line(points={{30,0},{46,0}}, color={255,0,0}));
        connect(sensorW.port_b, sinkElec.port)
          annotation (Line(points={{60,0},{70,0}}, color={255,0,0}));
        annotation (experiment(StopTime=500));
      end SteamTurbine_L4;

      model Intermediate_Rankine_Cycle_Test_e
        import NHES;

        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        extends Modelica.Icons.Example;
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.Obsolete.Intermediate_Rankine_Cycle
          BOP(port_a_nominal(
            m_flow=493.7058,
            p=14000000,
            h=BOP.Medium.specificEnthalpy_pT(BOP.port_a_nominal.p, 591)),
            port_b_nominal(p=14000000, h=BOP.Medium.specificEnthalpy_pT(BOP.port_b_nominal.p,
                318.95)))
          annotation (Placement(transformation(extent={{0,-30},{60,30}})));
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{90,-10},{70,10}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        NHES.Systems.PrimaryHeatSystem.SMR_Generic.Components.SMR_Tave_enthalpy
                                     nuScale_Tave_enthalpy(
          redeclare NHES.Systems.PrimaryHeatSystem.SMR_Generic.CS_SMR_Tave_Enthalpy
            CS(
            T_SG_exit=579.15,
            Q_nom(displayUnit="MW") = 160000000,
            demand=1.0),
          port_a_nominal(
            m_flow=70,
            p=3447380,
            T(displayUnit="degC") = 421.15),
          port_b_nominal(
            p=3447380,
            T(displayUnit="degC") = 579.25,
            h=2997670))
          annotation (Placement(transformation(extent={{-122,-40},{-54,48}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                         color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                                 color={0,0,0}));
        connect(stateSensor.port_a, BOP.port_b)
          annotation (Line(points={{-18,-12},{0,-12}},   color={0,127,255}));
        connect(stateSensor1.port_b, BOP.port_a)
          annotation (Line(points={{-18,12},{0,12}},   color={0,127,255}));
        connect(BOP.portElec_b, sinkElec.port)
          annotation (Line(points={{60,0},{70,0}}, color={255,0,0}));
        connect(stateSensor.port_b, nuScale_Tave_enthalpy.port_a) annotation (Line(
              points={{-38,-12},{-42,-12},{-42,-1.41538},{-52.7636,-1.41538}}, color=
                {0,127,255}));
        connect(nuScale_Tave_enthalpy.port_b, stateSensor1.port_a) annotation (Line(
              points={{-52.7636,20.9231},{-42,20.9231},{-42,12},{-38,12}}, color={0,
                127,255}));
        annotation (experiment(StopTime=50000, __Dymola_Algorithm="Dassl"));
      end Intermediate_Rankine_Cycle_Test_e;

      model Intermediate_Rankine_Cycle_Test_d
        import NHES;

        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        extends Modelica.Icons.Example;
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_L2_ClosedFeedHeat
          BOP(
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.ObsoleteCS.CS_IntermediateControl_PID_5
            CS,
          port_a_nominal(
            m_flow=67,
            p=3400000,
            h=3e6),
          port_b_nominal(p=3500000, h=1e6))
          annotation (Placement(transformation(extent={{0,-30},{60,30}})));
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{90,-10},{70,10}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        NHES.Fluid.Pipes.StraightPipe_withWall pipe(
          redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          p_a_start=5000000,
          p_b_start=5000000,
          use_Ts_start=false,
          h_a_start=3.6e6,
          h_b_start=1.2e6,
          m_flow_a_start=180,
          length=10,
          diameter=1,
          redeclare package Wall_Material = NHES.Media.Solids.SS316,
          th_wall=0.001) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-60,0})));
        TRANSFORM.HeatAndMassTransfer.BoundaryConditions.Heat.HeatFlow boundary(use_port=
              true, Q_flow=500e6)
          annotation (Placement(transformation(extent={{-96,-10},{-76,10}})));
        Modelica.Blocks.Sources.Pulse pulse(
          amplitude=10e6,
          period=5000,
          offset=160e6,
          startTime=3000)
          annotation (Placement(transformation(extent={{-118,-10},{-98,10}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                         color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                                 color={0,0,0}));
        connect(stateSensor.port_a, BOP.port_b)
          annotation (Line(points={{-18,-12},{0,-12}},   color={0,127,255}));
        connect(stateSensor1.port_b, BOP.port_a)
          annotation (Line(points={{-18,12},{0,12}},   color={0,127,255}));
        connect(BOP.portElec_b, sinkElec.port)
          annotation (Line(points={{60,0},{70,0}}, color={255,0,0}));
        connect(stateSensor.port_b, pipe.port_a) annotation (Line(points={{-38,-12},{-46,
                -12},{-46,-14},{-60,-14},{-60,-10}}, color={0,127,255}));
        connect(pipe.port_b, stateSensor1.port_a)
          annotation (Line(points={{-60,10},{-60,12},{-38,12}}, color={0,127,255}));
        connect(boundary.port, pipe.heatPorts[1])
          annotation (Line(points={{-76,0},{-64.4,0},{-64.4,0.1}}, color={191,0,0}));
        connect(pulse.y, boundary.Q_flow_ext)
          annotation (Line(points={{-97,0},{-90,0}}, color={0,0,127}));
        annotation (experiment(StopTime=50000, __Dymola_Algorithm="Dassl"));
      end Intermediate_Rankine_Cycle_Test_d;

      model Intermediate_Rankine_Cycle_Test_c
        import NHES;
        extends Modelica.Icons.Example;

        NHES.Systems.BalanceOfPlant.RankineCycle.Models.Obsolete.Intermediate_Rankine_Cycle_Control
          BOP(port_a_nominal(
            m_flow=493.7058,
            p=14000000,
            h=BOP.Medium.specificEnthalpy_pT(BOP.port_a_nominal.p, 591)),
            port_b_nominal(p=14000000, h=BOP.Medium.specificEnthalpy_pT(BOP.port_b_nominal.p,
                318.95)))
          annotation (Placement(transformation(extent={{-22,-30},{38,30}})));
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{90,-10},{70,10}})));
        Modelica.Fluid.Sources.Boundary_pT sink(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          nPorts=1,
          p(displayUnit="MPa") = BOP.port_b_nominal.p,
          T(displayUnit="K") = BOP.port_b_nominal.T)
          annotation (Placement(transformation(extent={{-88,-2},{-68,-22}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-40,-22},{-60,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-60,2},{-40,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-72,-60},{-28,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-72,20},{-26,50}})));
        Modelica.Fluid.Sources.Boundary_ph      source(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          nPorts=1,
          p=BOP.port_a_nominal.p,
          h=BOP.port_a_nominal.h,
          use_p_in=true)
          annotation (Placement(transformation(extent={{-88,2},{-68,22}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        Modelica.Blocks.Sources.Pulse pulse(
          period=100,
          startTime=10,
          offset=BOP.port_a_nominal.p,
          amplitude=0.05*BOP.port_a_nominal.p)
          annotation (Placement(transformation(extent={{-120,10},{-100,30}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-49,31.1},{-50,31.1},{-50,12.05},{-49.95,12.05}}, color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-50,-48.9},{-50,-11.95},{-50.05,-11.95}}, color={0,0,0}));
        connect(sink.ports[1], stateSensor.port_b) annotation (Line(points={{-68,-12},
                {-64,-12},{-60,-12}}, color={0,127,255}));
        connect(stateSensor.port_a, BOP.port_b)
          annotation (Line(points={{-40,-12},{-22,-12}}, color={0,127,255}));
        connect(stateSensor1.port_b, BOP.port_a)
          annotation (Line(points={{-40,12},{-22,12}}, color={0,127,255}));
        connect(source.ports[1], stateSensor1.port_a)
          annotation (Line(points={{-68,12},{-60,12}}, color={0,127,255}));
        connect(pulse.y, source.p_in)
          annotation (Line(points={{-99,20},{-90,20}}, color={0,0,127}));
        connect(BOP.portElec_b, sinkElec.port)
          annotation (Line(points={{38,0},{70,0}}, color={255,0,0}));
        annotation (experiment(
            StopTime=500,
            __Dymola_NumberOfIntervals=250,
            __Dymola_Algorithm="Dassl"));
      end Intermediate_Rankine_Cycle_Test_c;

      model Intermediate_Rankine_Cycle_Test_b
        import NHES;
        extends Modelica.Icons.Example;
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.Obsolete.Intermediate_Rankine_Cycle_TESUC
          BOP(port_a_nominal(
            m_flow=70,
            p=3500000,
            h=BOP.Medium.specificEnthalpy_pT(BOP.port_a_nominal.p, 591)),
            port_b_nominal(p=3400000, h=BOP.Medium.specificEnthalpy_pT(BOP.port_b_nominal.p,
                318.95)))
          annotation (Placement(transformation(extent={{-22,-32},{38,28}})));
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{90,-10},{70,10}})));
        Modelica.Fluid.Sources.Boundary_pT sink(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          nPorts=1,
          p(displayUnit="MPa") = BOP.port_b_nominal.p,
          T(displayUnit="K") = BOP.port_b_nominal.T)
          annotation (Placement(transformation(extent={{-88,-2},{-68,-22}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-40,-22},{-60,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-60,2},{-40,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-72,-60},{-28,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-72,20},{-28,50}})));
        Modelica.Fluid.Sources.Boundary_ph      source(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          nPorts=1,
          p=BOP.port_a_nominal.p,
          h=BOP.port_a_nominal.h,
          use_p_in=true)
          annotation (Placement(transformation(extent={{-88,2},{-68,22}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        Modelica.Blocks.Sources.Pulse pulse(
          period=100,
          startTime=10,
          offset=BOP.port_a_nominal.p,
          amplitude=0.05*BOP.port_a_nominal.p)
          annotation (Placement(transformation(extent={{-120,10},{-100,30}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-50,31.1},{-50,31.1},{-50,12.05},{-49.95,12.05}}, color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-50,-48.9},{-50,-11.95},{-50.05,-11.95}}, color={0,0,0}));
        connect(sink.ports[1], stateSensor.port_b) annotation (Line(points={{-68,-12},
                {-64,-12},{-60,-12}}, color={0,127,255}));
        connect(stateSensor.port_a, BOP.port_b)
          annotation (Line(points={{-40,-12},{-32,-12},{-32,-14},{-22,-14}},
                                                         color={0,127,255}));
        connect(stateSensor1.port_b, BOP.port_a)
          annotation (Line(points={{-40,12},{-32,12},{-32,10},{-22,10}},
                                                       color={0,127,255}));
        connect(source.ports[1], stateSensor1.port_a)
          annotation (Line(points={{-68,12},{-60,12}}, color={0,127,255}));
        connect(pulse.y, source.p_in)
          annotation (Line(points={{-99,20},{-90,20}}, color={0,0,127}));
        connect(BOP.portElec_b, sinkElec.port)
          annotation (Line(points={{38,-2},{54,-2},{54,0},{70,0}},
                                                   color={255,0,0}));
        annotation (experiment(StopTime=500, __Dymola_Algorithm="Esdirk45a"));
      end Intermediate_Rankine_Cycle_Test_b;

      model Intermediate_Rankine_Cycle_Test_a
        import NHES;

        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        extends Modelica.Icons.Example;
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.Obsolete.Intermediate_Rankine_Cycle
          BOP(port_a_nominal(
            m_flow=493.7058,
            p=14000000,
            h=BOP.Medium.specificEnthalpy_pT(BOP.port_a_nominal.p, 591)),
            port_b_nominal(p=14000000, h=BOP.Medium.specificEnthalpy_pT(BOP.port_b_nominal.p,
                318.95)))
          annotation (Placement(transformation(extent={{0,-30},{60,30}})));
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{90,-10},{70,10}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        NHES.Fluid.HeatExchangers.Generic_HXs.NTU_HX nTU_HX(
          NTU=30,
          K_tube=17000,
          K_shell=500,
          V_Tube=10,
          V_Shell=10,
          p_start_tube=5000000,
          h_start_tube_inlet=1e6,
          h_start_tube_outlet=3e6,
          p_start_shell=5000000,
          h_start_shell_inlet=3.1e6,
          h_start_shell_outlet=1e6,
          Q_init=10e7,
          tau=1,
          m_start_tube=200,
          m_start_shell=200) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={-58,0})));
        Modelica.Fluid.Sources.MassFlowSource_h source(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow=300,
          nPorts=1,
          h=5.3e6)
          annotation (Placement(transformation(extent={{-88,0},{-68,20}})));
        Modelica.Fluid.Sources.Boundary_ph sink(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          h=1e6,
          nPorts=1,
          p(displayUnit="bar") = 4500000)
          annotation (Placement(transformation(extent={{-88,-2},{-68,-22}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                         color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                                 color={0,0,0}));
        connect(stateSensor.port_a, BOP.port_b)
          annotation (Line(points={{-18,-12},{0,-12}},   color={0,127,255}));
        connect(stateSensor1.port_b, BOP.port_a)
          annotation (Line(points={{-18,12},{0,12}},   color={0,127,255}));
        connect(BOP.portElec_b, sinkElec.port)
          annotation (Line(points={{60,0},{70,0}}, color={255,0,0}));
        connect(nTU_HX.Tube_in, stateSensor.port_b) annotation (Line(points={{-54,-10},
                {-54,-12},{-38,-12}}, color={0,127,255}));
        connect(nTU_HX.Tube_out, stateSensor1.port_a)
          annotation (Line(points={{-54,10},{-54,12},{-38,12}}, color={0,127,255}));
        connect(source.ports[1], nTU_HX.Shell_in)
          annotation (Line(points={{-68,10},{-60,10}}, color={0,127,255}));
        connect(sink.ports[1], nTU_HX.Shell_out) annotation (Line(points={{-68,-12},{
                -60,-12},{-60,-10}}, color={0,127,255}));
        annotation (experiment(StopTime=500));
      end Intermediate_Rankine_Cycle_Test_a;

      model SteamTurbine_NoFeedHeat_Test_c
        import NHES;

        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        extends Modelica.Icons.Example;
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{116,-10},{96,10}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        Modelica.Blocks.Sources.Sine sine1(
          amplitude=10e6,
          f=1/20000,
          offset=38e6,
          startTime=2000)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{72,-6},{86,6}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_Basic_NoFeedHeat
          intermediate_Rankine_Cycle_TESUC(
          port_a_nominal(
            p=3400000,
            h=3e6,
            m_flow=67),
          port_b_nominal(p=3400000, h=1e6),
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_SmallCycle_NoFeedHeat_Argonne
            CS(electric_demand_TES=const.y))
          annotation (Placement(transformation(extent={{10,-18},{50,22}})));
        Modelica.Fluid.Sources.Boundary_pT source(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          nPorts=1,
          p(displayUnit="bar") = 1200000,
          T(displayUnit="degC") = 491.15)
          annotation (Placement(transformation(extent={{-84,22},{-64,2}})));
        Modelica.Fluid.Sources.MassFlowSource_h source1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          nPorts=1,
          use_m_flow_in=false,
          m_flow=-26,
          h=0.17e6)
          annotation (Placement(transformation(extent={{-84,-30},{-64,-10}})));
        Modelica.Blocks.Sources.Constant const(k=18e6)
          annotation (Placement(transformation(extent={{10,68},{30,88}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                         color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                                 color={0,0,0}));
        connect(sensorW.port_b, sinkElec.port)
          annotation (Line(points={{86,0},{96,0}}, color={255,0,0}));
        connect(stateSensor1.port_b, intermediate_Rankine_Cycle_TESUC.port_a)
          annotation (Line(points={{-18,12},{4,12},{4,10},{10,10}}, color={0,127,255}));
        connect(stateSensor.port_a, intermediate_Rankine_Cycle_TESUC.port_b)
          annotation (Line(points={{-18,-12},{4,-12},{4,-6},{10,-6}}, color={0,127,
                255}));
        connect(intermediate_Rankine_Cycle_TESUC.portElec_b, sensorW.port_a)
          annotation (Line(points={{50,2},{66,2},{66,0},{72,0}}, color={255,0,0}));
        connect(source.ports[1], stateSensor1.port_a)
          annotation (Line(points={{-64,12},{-38,12}}, color={0,127,255}));
        connect(source1.ports[1], stateSensor.port_b) annotation (Line(points={{-64,
                -20},{-44,-20},{-44,-12},{-38,-12}}, color={0,127,255}));
        annotation (experiment(StopTime=50000, __Dymola_Algorithm="Esdirk45a"));
      end SteamTurbine_NoFeedHeat_Test_c;

      model SteamTurbine_NoFeedHeat_Test_b
        import NHES;

        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        extends Modelica.Icons.Example;
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{116,-10},{96,10}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        Modelica.Blocks.Sources.Sine sine1(
          amplitude=10e6,
          f=1/20000,
          offset=38e6,
          startTime=2000)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{72,-6},{86,6}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_Basic_NoFeedHeat
          intermediate_Rankine_Cycle_TESUC(
          port_a_nominal(
            p=1200000,
            h=2e6,
            m_flow=26),
          port_b_nominal(p=1200000, h=1e6),
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_SmallCycle_NoFeedHeat_Argonne
            CS(electric_demand_TES=const.y))
          annotation (Placement(transformation(extent={{10,-18},{50,22}})));
        Modelica.Blocks.Sources.Constant const(k=18e6)
          annotation (Placement(transformation(extent={{-2,70},{18,90}})));
        Modelica.Fluid.Sources.Boundary_pT sink(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          nPorts=1,
          p(displayUnit="bar") = 1200000,
          T(displayUnit="degC") = 491.15)
          annotation (Placement(transformation(extent={{-88,22},{-68,2}})));
        Modelica.Fluid.Sources.Boundary_pT sink1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          nPorts=1,
          p(displayUnit="bar") = 1200000,
          T(displayUnit="degC") = 309.15)
          annotation (Placement(transformation(extent={{-88,-6},{-68,-26}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                         color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                                 color={0,0,0}));
        connect(sensorW.port_b, sinkElec.port)
          annotation (Line(points={{86,0},{96,0}}, color={255,0,0}));
        connect(stateSensor1.port_b, intermediate_Rankine_Cycle_TESUC.port_a)
          annotation (Line(points={{-18,12},{4,12},{4,10},{10,10}}, color={0,127,255}));
        connect(stateSensor.port_a, intermediate_Rankine_Cycle_TESUC.port_b)
          annotation (Line(points={{-18,-12},{4,-12},{4,-6},{10,-6}}, color={0,127,
                255}));
        connect(intermediate_Rankine_Cycle_TESUC.portElec_b, sensorW.port_a)
          annotation (Line(points={{50,2},{66,2},{66,0},{72,0}}, color={255,0,0}));
        connect(sink.ports[1], stateSensor1.port_a)
          annotation (Line(points={{-68,12},{-38,12}}, color={0,127,255}));
        connect(sink1.ports[1], stateSensor.port_b) annotation (Line(points={{-68,-16},
                {-52,-16},{-52,-12},{-38,-12}}, color={0,127,255}));
        annotation (experiment(StopTime=50000, __Dymola_Algorithm="Esdirk45a"));
      end SteamTurbine_NoFeedHeat_Test_b;

      model SteamTurbine_NoFeedHeat_Test_a
        import NHES;

        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        extends Modelica.Icons.Example;
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{116,-10},{96,10}})));
        Modelica.Blocks.Sources.Pulse pulse(
          amplitude=5e6,
          period=5000,
          offset=60e6,
          startTime=3000)
          annotation (Placement(transformation(extent={{-118,-10},{-98,10}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        NHES.Fluid.Pipes.StraightPipe_withWall pipe(
          redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          p_a_start=1100000,
          p_b_start=1200000,
          use_Ts_start=true,
          T_a_start=309.15,
          T_b_start=491.15,
          h_a_start=2e6,
          h_b_start=1e6,
          m_flow_a_start=26,
          length=10,
          diameter=1,
          redeclare package Wall_Material = NHES.Media.Solids.SS316,
          th_wall=0.001) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-60,0})));
        TRANSFORM.HeatAndMassTransfer.BoundaryConditions.Heat.HeatFlow boundary(use_port=
              true, Q_flow=500e6)
          annotation (Placement(transformation(extent={{-96,-10},{-76,10}})));
        Modelica.Blocks.Sources.Sine sine1(
          amplitude=10e6,
          f=1/20000,
          offset=38e6,
          startTime=2000)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{72,-6},{86,6}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_Basic_NoFeedHeat
          intermediate_Rankine_Cycle_TESUC(
          port_a_nominal(
            p=1200000,
            h=2e6,
            m_flow=26),
          port_b_nominal(p=1200000, h=0.17e6),
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_SmallCycle_NoFeedHeat
            CS(electric_demand=const.y, data(Q_Nom=0)))
          annotation (Placement(transformation(extent={{10,-18},{50,22}})));
        Modelica.Blocks.Sources.Constant const(k=18e6)
          annotation (Placement(transformation(extent={{-2,70},{18,90}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                         color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                                 color={0,0,0}));
        connect(stateSensor.port_b, pipe.port_a) annotation (Line(points={{-38,-12},{-46,
                -12},{-46,-14},{-60,-14},{-60,-10}}, color={0,127,255}));
        connect(pipe.port_b, stateSensor1.port_a)
          annotation (Line(points={{-60,10},{-60,12},{-38,12}}, color={0,127,255}));
        connect(boundary.port, pipe.heatPorts[1])
          annotation (Line(points={{-76,0},{-64.4,0},{-64.4,0.1}}, color={191,0,0}));
        connect(pulse.y, boundary.Q_flow_ext)
          annotation (Line(points={{-97,0},{-90,0}}, color={0,0,127}));
        connect(sensorW.port_b, sinkElec.port)
          annotation (Line(points={{86,0},{96,0}}, color={255,0,0}));
        connect(stateSensor1.port_b, intermediate_Rankine_Cycle_TESUC.port_a)
          annotation (Line(points={{-18,12},{4,12},{4,10},{10,10}}, color={0,127,255}));
        connect(stateSensor.port_a, intermediate_Rankine_Cycle_TESUC.port_b)
          annotation (Line(points={{-18,-12},{4,-12},{4,-6},{10,-6}}, color={0,127,
                255}));
        connect(intermediate_Rankine_Cycle_TESUC.portElec_b, sensorW.port_a)
          annotation (Line(points={{50,2},{66,2},{66,0},{72,0}}, color={255,0,0}));
        annotation (experiment(StopTime=50000, __Dymola_Algorithm="Esdirk45a"));
      end SteamTurbine_NoFeedHeat_Test_a;

      model SteamTurbine_PowerBoostLoop_Test_b
        import NHES;

        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        extends Modelica.Icons.Example;
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{116,-10},{96,10}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        Modelica.Blocks.Sources.Sine sine1(
          amplitude=10e6,
          f=1/20000,
          offset=38e6,
          startTime=2000)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{72,-6},{86,6}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_OpenFeedHeat_DivertPowerControl_PowerBoostLoop
          intermediate_Rankine_Cycle_TESUC(
          port_a_nominal(
            p=3400000,
            h=3e6,
            m_flow=67),
          port_b_nominal(p=3400000, h=1e6),
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_PowerBoostLoop_DivertPowerControl
            CS(electric_demand=sine1.y))
          annotation (Placement(transformation(extent={{10,-18},{50,22}})));
        Modelica.Fluid.Sources.Boundary_pT sink(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          nPorts=1,
          p(displayUnit="bar") = 3400000,
          T(displayUnit="degC") = 579.15)
          annotation (Placement(transformation(extent={{-84,22},{-64,2}})));
        Modelica.Fluid.Sources.Boundary_pT sink1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          nPorts=1,
          p(displayUnit="bar") = 3500000,
          T(displayUnit="degC") = 421.15)
          annotation (Placement(transformation(extent={{-84,-6},{-64,-26}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                         color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                                 color={0,0,0}));
        connect(sensorW.port_b, sinkElec.port)
          annotation (Line(points={{86,0},{96,0}}, color={255,0,0}));
        connect(stateSensor1.port_b, intermediate_Rankine_Cycle_TESUC.port_a)
          annotation (Line(points={{-18,12},{4,12},{4,10},{10,10}}, color={0,127,255}));
        connect(stateSensor.port_a, intermediate_Rankine_Cycle_TESUC.port_b)
          annotation (Line(points={{-18,-12},{4,-12},{4,-6},{10,-6}}, color={0,127,
                255}));
        connect(intermediate_Rankine_Cycle_TESUC.portElec_b, sensorW.port_a)
          annotation (Line(points={{50,2},{66,2},{66,0},{72,0}}, color={255,0,0}));
        connect(sink.ports[1], stateSensor1.port_a)
          annotation (Line(points={{-64,12},{-38,12}}, color={0,127,255}));
        connect(sink1.ports[1], stateSensor.port_b) annotation (Line(points={{-64,-16},
                {-48,-16},{-48,-12},{-38,-12}}, color={0,127,255}));
        connect(intermediate_Rankine_Cycle_TESUC.port_b1,
          intermediate_Rankine_Cycle_TESUC.port_a2) annotation (Line(points={{49.6,
                -8.4},{56,-8.4},{56,15.6},{49.6,15.6}}, color={0,127,255}));
        annotation (experiment(StopTime=50000, __Dymola_Algorithm="Esdirk45a"));
      end SteamTurbine_PowerBoostLoop_Test_b;

      model SteamTurbine_PowerBoostLoop_Test_a
        import NHES;

        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        extends Modelica.Icons.Example;
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{116,-10},{96,10}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        NHES.Fluid.Pipes.StraightPipe_withWall pipe(
          redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          p_a_start=3400000,
          p_b_start=3500000,
          use_Ts_start=false,
          T_a_start=421.15,
          T_b_start=579.15,
          h_a_start=3.6e6,
          h_b_start=1.2e6,
          m_flow_a_start=67,
          length=10,
          diameter=1,
          redeclare package Wall_Material = NHES.Media.Solids.SS316,
          th_wall=0.001) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-60,0})));
        TRANSFORM.HeatAndMassTransfer.BoundaryConditions.Heat.HeatFlow boundary(use_port=
              true, Q_flow=500e6)
          annotation (Placement(transformation(extent={{-96,-10},{-76,10}})));
        Modelica.Blocks.Sources.Pulse pulse(
          amplitude=10e6,
          period=5000,
          offset=160e6,
          startTime=3000)
          annotation (Placement(transformation(extent={{-118,-10},{-98,10}})));
        Modelica.Blocks.Sources.Sine sine1(
          amplitude=10e6,
          f=1/20000,
          offset=38e6,
          startTime=2000)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{72,-6},{86,6}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_OpenFeedHeat_DivertPowerControl_PowerBoostLoop
          intermediate_Rankine_Cycle_TESUC(
          port_a_nominal(
            p=3400000,
            h=3e6,
            m_flow=67),
          port_b_nominal(p=3400000, h=1e6),
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_PowerBoostLoop_DivertPowerControl
            CS(electric_demand=sine1.y))
          annotation (Placement(transformation(extent={{8,-18},{48,22}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                         color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                                 color={0,0,0}));
        connect(stateSensor.port_b, pipe.port_a) annotation (Line(points={{-38,-12},{-46,
                -12},{-46,-14},{-60,-14},{-60,-10}}, color={0,127,255}));
        connect(pipe.port_b, stateSensor1.port_a)
          annotation (Line(points={{-60,10},{-60,12},{-38,12}}, color={0,127,255}));
        connect(boundary.port, pipe.heatPorts[1])
          annotation (Line(points={{-76,0},{-64.4,0},{-64.4,0.1}}, color={191,0,0}));
        connect(pulse.y, boundary.Q_flow_ext)
          annotation (Line(points={{-97,0},{-90,0}}, color={0,0,127}));
        connect(sensorW.port_b, sinkElec.port)
          annotation (Line(points={{86,0},{96,0}}, color={255,0,0}));
        connect(stateSensor1.port_b, intermediate_Rankine_Cycle_TESUC.port_a)
          annotation (Line(points={{-18,12},{4,12},{4,10},{8,10}},  color={0,127,255}));
        connect(stateSensor.port_a, intermediate_Rankine_Cycle_TESUC.port_b)
          annotation (Line(points={{-18,-12},{4,-12},{4,-6},{8,-6}},  color={0,127,
                255}));
        connect(intermediate_Rankine_Cycle_TESUC.portElec_b, sensorW.port_a)
          annotation (Line(points={{48,2},{66,2},{66,0},{72,0}}, color={255,0,0}));
        connect(intermediate_Rankine_Cycle_TESUC.port_b1,
          intermediate_Rankine_Cycle_TESUC.port_a2) annotation (Line(points={{47.6,
                -8.4},{58,-8.4},{58,15.6},{47.6,15.6}}, color={0,127,255}));
        annotation (experiment(StopTime=50000, __Dymola_Algorithm="Esdirk45a"));
      end SteamTurbine_PowerBoostLoop_Test_a;

      model SteamTurbine_DivertPowerControl_Test_b
        import NHES;

        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        extends Modelica.Icons.Example;
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{116,-10},{96,10}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        Modelica.Blocks.Sources.Sine sine1(
          amplitude=10e6,
          f=1/20000,
          offset=38e6,
          startTime=2000)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{72,-6},{86,6}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_OpenFeedHeat_DivertPowerControl
          intermediate_Rankine_Cycle_TESUC(
          port_a_nominal(
            p=3400000,
            h=3e6,
            m_flow=67),
          port_b_nominal(p=3400000, h=1e6),
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_DivertPowerControl
            CS(electric_demand=sine1.y, Overall_Power=sensorW.W))
          annotation (Placement(transformation(extent={{10,-18},{50,22}})));
        Modelica.Fluid.Sources.Boundary_pT sink(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          nPorts=1,
          p(displayUnit="bar") = 3400000,
          T(displayUnit="degC") = 579.15)
          annotation (Placement(transformation(extent={{-84,22},{-64,2}})));
        Modelica.Fluid.Sources.Boundary_pT sink1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_p_in=false,
          nPorts=1,
          p(displayUnit="bar") = 3400000,
          T(displayUnit="degC") = 421.15)
          annotation (Placement(transformation(extent={{-84,-6},{-64,-26}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                         color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                                 color={0,0,0}));
        connect(sensorW.port_b, sinkElec.port)
          annotation (Line(points={{86,0},{96,0}}, color={255,0,0}));
        connect(stateSensor1.port_b, intermediate_Rankine_Cycle_TESUC.port_a)
          annotation (Line(points={{-18,12},{4,12},{4,10},{10,10}}, color={0,127,255}));
        connect(stateSensor.port_a, intermediate_Rankine_Cycle_TESUC.port_b)
          annotation (Line(points={{-18,-12},{4,-12},{4,-6},{10,-6}}, color={0,127,
                255}));
        connect(intermediate_Rankine_Cycle_TESUC.portElec_b, sensorW.port_a)
          annotation (Line(points={{50,2},{66,2},{66,0},{72,0}}, color={255,0,0}));
        connect(sink.ports[1], stateSensor1.port_a)
          annotation (Line(points={{-64,12},{-38,12}}, color={0,127,255}));
        connect(sink1.ports[1], stateSensor.port_b) annotation (Line(points={{-64,-16},
                {-48,-16},{-48,-12},{-38,-12}}, color={0,127,255}));
        annotation (experiment(StopTime=50000, __Dymola_Algorithm="Esdirk45a"));
      end SteamTurbine_DivertPowerControl_Test_b;

      model SteamTurbine_DivertPowerControl_Test_a
        import NHES;

        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        extends Modelica.Icons.Example;
        TRANSFORM.Electrical.Sources.FrequencySource
                                           sinkElec(f=60)
          annotation (Placement(transformation(extent={{116,-10},{96,10}})));
        Fluid.Sensors.stateSensor stateSensor(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-18,-22},{-38,-2}})));
        Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-38,2},{-18,22}})));
        Fluid.Sensors.stateDisplay stateDisplay
          annotation (Placement(transformation(extent={{-52,-60},{-8,-30}})));
        Fluid.Sensors.stateDisplay stateDisplay1
          annotation (Placement(transformation(extent={{-52,30},{-6,60}})));
        Modelica.Blocks.Sources.Sine sine(
          f=1/200,
          offset=4e8,
          startTime=350,
          amplitude=2e8)
          annotation (Placement(transformation(extent={{-70,70},{-50,90}})));
        NHES.Fluid.Pipes.StraightPipe_withWall pipe(
          redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          p_a_start=3400000,
          p_b_start=3500000,
          use_Ts_start=false,
          T_a_start=421.15,
          T_b_start=579.15,
          h_a_start=3.6e6,
          h_b_start=1.2e6,
          m_flow_a_start=67,
          length=10,
          diameter=1,
          redeclare package Wall_Material = NHES.Media.Solids.SS316,
          th_wall=0.001) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-60,0})));
        TRANSFORM.HeatAndMassTransfer.BoundaryConditions.Heat.HeatFlow boundary(use_port=
              true, Q_flow=500e6)
          annotation (Placement(transformation(extent={{-96,-10},{-76,10}})));
        Modelica.Blocks.Sources.Pulse pulse(
          amplitude=10e6,
          period=5000,
          offset=160e6,
          startTime=3000)
          annotation (Placement(transformation(extent={{-118,-10},{-98,10}})));
        Modelica.Blocks.Sources.Sine sine1(
          amplitude=10e6,
          f=1/20000,
          offset=38e6,
          startTime=2000)
          annotation (Placement(transformation(extent={{-38,72},{-18,92}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{72,-6},{86,6}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.SteamTurbine_OpenFeedHeat_DivertPowerControl
          intermediate_Rankine_Cycle_TESUC(
          port_a_nominal(
            p=3400000,
            h=3e6,
            m_flow=67),
          port_b_nominal(p=3400000, h=1e6),
          redeclare
            NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_DivertPowerControl
            CS(electric_demand=sine1.y, Overall_Power=sensorW.W))
          annotation (Placement(transformation(extent={{10,-18},{50,22}})));
      equation

        connect(stateDisplay1.statePort, stateSensor1.statePort) annotation (Line(
              points={{-29,41.1},{-29,30},{-28,30},{-28,14},{-27.95,14},{-27.95,12.05}},
                                                                         color={0,0,0}));
        connect(stateDisplay.statePort, stateSensor.statePort) annotation (Line(
              points={{-30,-48.9},{-30,-32},{-28,-32},{-28,-11.95},{-28.05,-11.95}},
                                                                 color={0,0,0}));
        connect(stateSensor.port_b, pipe.port_a) annotation (Line(points={{-38,-12},{-46,
                -12},{-46,-14},{-60,-14},{-60,-10}}, color={0,127,255}));
        connect(pipe.port_b, stateSensor1.port_a)
          annotation (Line(points={{-60,10},{-60,12},{-38,12}}, color={0,127,255}));
        connect(boundary.port, pipe.heatPorts[1])
          annotation (Line(points={{-76,0},{-64.4,0},{-64.4,0.1}}, color={191,0,0}));
        connect(pulse.y, boundary.Q_flow_ext)
          annotation (Line(points={{-97,0},{-90,0}}, color={0,0,127}));
        connect(sensorW.port_b, sinkElec.port)
          annotation (Line(points={{86,0},{96,0}}, color={255,0,0}));
        connect(stateSensor1.port_b, intermediate_Rankine_Cycle_TESUC.port_a)
          annotation (Line(points={{-18,12},{4,12},{4,10},{10,10}}, color={0,127,255}));
        connect(stateSensor.port_a, intermediate_Rankine_Cycle_TESUC.port_b)
          annotation (Line(points={{-18,-12},{4,-12},{4,-6},{10,-6}}, color={0,127,
                255}));
        connect(intermediate_Rankine_Cycle_TESUC.portElec_b, sensorW.port_a)
          annotation (Line(points={{50,2},{66,2},{66,0},{72,0}}, color={255,0,0}));
        annotation (experiment(StopTime=50000, __Dymola_Algorithm="Esdirk45a"));
      end SteamTurbine_DivertPowerControl_Test_a;
    end ObsoleteBOPExamples;
  end Examples;

  package Models
    model Dummy_BOP
      extends BaseClasses.Partial_SubSystem_A;

      extends NHES.Icons.DummyIcon;

      NHES.Electrical.Sources.PowerSource toBOP_elec(W=980)
        annotation (Placement(transformation(extent={{52,-10},{72,10}})));
      Modelica.Fluid.Sources.Boundary_pT To_BOP(
        p(displayUnit="MPa") = 5800000,
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        T(displayUnit="K") = 591,
        nPorts=1) annotation (Placement(transformation(extent={{-50,30},{-70,50}})));
      Modelica.Fluid.Sources.MassFlowSource_T From_BOP(
        m_flow=492.8,
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        T(displayUnit="K") = 497,
        nPorts=1)
        annotation (Placement(transformation(extent={{-52,-30},{-72,-50}})));
    equation
      connect(toBOP_elec.portElec_a, portElec_b)
        annotation (Line(points={{72,0},{100,0}}, color={17,163,27}));
      connect(From_BOP.ports[1], port_b) annotation (Line(points={{-72,-40},{-86,
              -40},{-100,-40}}, color={0,127,255}));
      connect(To_BOP.ports[1], port_a) annotation (Line(points={{-70,40},{-100,40},
              {-100,40}}, color={0,127,255}));
    annotation(defaultComponentName="BOP");
    end Dummy_BOP;

    model SteamTurbine_L1_boundaries

      extends BaseClasses.Partial_SubSystem_B(
        redeclare replaceable ControlSystems.CS_Dummy CS,
        redeclare replaceable ControlSystems.ED_Dummy ED,
        redeclare Data.IdealTurbine data);

      parameter SI.Pressure p_condenser=1e4 "Condenser operating pressure";
      parameter SI.Pressure p_reservoir=port_b_nominal.p "Reservoir operating pressure";

      TRANSFORM.Fluid.Machines.SteamTurbine steamTurbine(
        redeclare package Medium = Medium,
        use_T_start=false,
        h_a_start=port_a_start.h,
        m_flow_start=port_a_start.m_flow,
        m_flow_nominal=port_a_nominal.m_flow,
        use_T_nominal=false,
        nUnits=2,
        energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
        p_b_start=p_condenser,
        p_outlet_nominal=p_condenser,
        d_nominal=Medium.density_ph(steamTurbine.p_inlet_nominal, port_a_nominal.h),
        p_a_start=header.p_start -valve_TCV.dp_start,
        p_inlet_nominal=port_a_nominal.p -valve_TCV.dp_nominal)
        annotation (Placement(transformation(extent={{40,-10},{60,10}})));
      Electrical.Generator      generator1(J=1e4)
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      TRANSFORM.Electrical.Sensors.PowerSensor sensorW
        annotation (Placement(transformation(extent={{130,-10},{150,10}})));
      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance(
          redeclare package Medium = Medium, R=1)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=90,
            origin={80,-30})));
      TRANSFORM.Fluid.Volumes.IdealCondenser
                                        condenser(
        redeclare package Medium = Medium,
        set_m_flow=true,
        p=p_condenser)
        annotation (Placement(transformation(extent={{77,-94},{97,-74}})));
      TRANSFORM.Fluid.Volumes.SimpleVolume volume(
        redeclare package Medium = Medium,
        use_T_start=false,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=0.01),
        p_start=p_condenser,
        h_start=steamTurbine.h_b_start)
        annotation (Placement(transformation(extent={{58,-30},{78,-10}})));
      TRANSFORM.Fluid.Volumes.DumpTank reservoir(
        redeclare package Medium = Medium,
        A=10,
        p_start=p_reservoir,
        level_start=10)
        annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));
      Modelica.Fluid.Fittings.MultiPort multiPort(redeclare package Medium =
            Medium, nPorts_b=2)
                           annotation (Placement(transformation(
            extent={{-4,-10},{4,10}},
            rotation=90,
            origin={0,-80})));
      TRANSFORM.Fluid.Volumes.SimpleVolume feedWaterHeater(
        use_HeatPort=true,
        redeclare package Medium = Medium,
        p_start=port_b_start.p,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=5),
        use_T_start=false,
        h_start=port_b_start.h)
        annotation (Placement(transformation(extent={{-70,-90},{-90,-70}})));
      TRANSFORM.HeatAndMassTransfer.BoundaryConditions.Heat.HeatFlow    boundary(use_port=
            true)
        annotation (Placement(transformation(extent={{-102,-110},{-82,-90}})));
      TRANSFORM.Controls.LimPID PID(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        yb=1e8,
        k=1e8,
        k_s=1/port_b_nominal.T,
        k_m=1/port_b_nominal.T)
        annotation (Placement(transformation(extent={{-108,-96},{-100,-104}})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=port_b_nominal.T)
        annotation (Placement(transformation(extent={{-124,-106},{-114,-94}})));
      TRANSFORM.Fluid.Sensors.Temperature temperature(redeclare package Medium =
            Medium)
        annotation (Placement(transformation(extent={{-96,-82},{-104,-90}})));
      Modelica.Fluid.Fittings.MultiPort multiPort1(redeclare package Medium =
            Medium, nPorts_b=if nPorts_a3 > 0 then nPorts_a3+2 else 2)
                           annotation (Placement(transformation(
            extent={{-4,-10},{4,10}},
            rotation=90,
            origin={80,-66})));
      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance1(
          redeclare package Medium = Medium, R=1)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-130,-80})));
      TRANSFORM.Fluid.Sensors.Pressure pressure(redeclare package Medium = Medium)
        annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
      TRANSFORM.Fluid.Valves.ValveCompressible valve_BV(
        rho_nominal=Medium.density_ph(port_a_nominal.p, port_a_nominal.h),
        p_nominal=port_a_nominal.p,
        redeclare package Medium = Medium,
        m_flow_nominal=port_a_nominal.m_flow,
        dp_nominal=100000)
        annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
      TRANSFORM.Fluid.Volumes.SimpleVolume volume_bypass(
        use_T_start=false,
        h_start=port_a_start.h,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=0.01),
        redeclare package Medium = Medium,
        p_start=p_condenser)
                       "included for numeric purposes"
        annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));
      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance3(R=1,
          redeclare package Medium = Medium)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=90,
            origin={0,-10})));
      Modelica.Blocks.Sources.RealExpression W_balance1
        "Electricity loss/gain not accounted for in connections (e.g., heating/cooling, pumps, etc.) [W]"
        annotation (Placement(transformation(extent={{-96,118},{-84,130}})));
      TRANSFORM.Fluid.Valves.ValveCompressible valve_TCV(
        rho_nominal=Medium.density_ph(port_a_nominal.p, port_a_nominal.h),
        p_nominal=port_a_nominal.p,
        redeclare package Medium = Medium,
        m_flow_nominal=port_a_nominal.m_flow,
        dp_nominal=100000)
        annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
      TRANSFORM.Fluid.Volumes.MixingVolume header(
        use_T_start=false,
        h_start=port_a_start.h,
        p_start=port_a_start.p,
        nPorts_a=1,
        nPorts_b=3,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=1),
        redeclare package Medium = Medium)
        annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance4(R=1,
          redeclare package Medium = Medium)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-130,40})));
      TRANSFORM.Fluid.BoundaryConditions.Boundary_ph boundary_a3[nPorts_a3](
        redeclare package Medium = Medium,
        each nPorts=1,
        p=port_a3_nominal_p,
        h=port_a3_nominal_h) if nPorts_a3 > 0
        annotation (Placement(transformation(extent={{50,-150},{30,-130}})));
       TRANSFORM.Fluid.Valves.CheckValve checkValve[nPorts_a3](redeclare
          package Medium =
                    Medium, m_flow_start=port_a3_start_m_flow) if nPorts_a3 > 0
         annotation (Placement(transformation(extent={{0,-150},{20,-130}})));
       TRANSFORM.Fluid.BoundaryConditions.MassFlowSource_h boundary_m_flow_a3[
         nPorts_a3](
         redeclare package Medium = Medium,
         each nPorts=1,
        each use_m_flow_in=true,
        each use_h_in=true)  if nPorts_a3 > 0
         annotation (Placement(transformation(extent={{72,-150},{92,-130}})));
      TRANSFORM.Fluid.Sensors.MassFlowRate massFlowRate[nPorts_a3](redeclare
          package Medium = Medium) if nPorts_a3 > 0
        annotation (Placement(transformation(extent={{-30,-150},{-10,-130}})));
      TRANSFORM.Fluid.Sensors.SpecificEnthalpyTwoPort
                                               specificEnthalpy[nPorts_a3](
          redeclare package Medium = Medium) if nPorts_a3 > 0
        annotation (Placement(transformation(extent={{-60,-150},{-40,-130}})));
      Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
        annotation (Placement(transformation(extent={{70,10},{90,-10}})));
      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance2(R=1,
          redeclare package Medium = Medium)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-50,-80})));
      TRANSFORM.Controls.LimPID_Hysteresis PID1(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k_s=1/reservoir.level_start,
        k_m=1/reservoir.level_start,
        k=1e2,
        yMin=0,
        eOn=0.1*reservoir.level_start)
        annotation (Placement(transformation(extent={{-62,-50},{-42,-30}})));
      Modelica.Blocks.Sources.RealExpression level_setpoint(y=reservoir.level_start)
        annotation (Placement(transformation(extent={{-94,-42},{-74,-22}})));
      Modelica.Blocks.Sources.RealExpression level_measure(y=reservoir.level)
        "noEvent(if time < 10 then reservoir.level_start else reservoir.level)"
        annotation (Placement(transformation(extent={{-94,-62},{-74,-42}})));
      TRANSFORM.Fluid.BoundaryConditions.MassFlowSource_T boundary2(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        use_m_flow_in=true,
        T=298.15,
        nPorts=1)
        annotation (Placement(transformation(extent={{-28,-70},{-8,-50}})));
    equation

    for i in 1:nPorts_a3 loop
        connect(specificEnthalpy[i].port_a, port_a3[i]);
        connect(specificEnthalpy[i].port_b, massFlowRate[i].port_a);
         connect(checkValve[i].port_a, massFlowRate[i].port_b);
         connect(checkValve[i].port_b, boundary_a3[i].ports[1]);
    connect(boundary_m_flow_a3[i].ports[1], multiPort1.ports_b[i+2]);

    end for;

      connect(generator1.portElec, sensorW.port_a)
        annotation (Line(points={{120,0},{130,0}}, color={255,0,0}));
      connect(sensorW.port_b, portElec_b)
        annotation (Line(points={{150,0},{160,0}}, color={255,0,0}));
      connect(steamTurbine.portLP, volume.port_a)
        annotation (Line(points={{60,6},{60,-20},{62,-20}},   color={0,127,255}));
      connect(boundary.port,feedWaterHeater. heatPort)
        annotation (Line(points={{-82,-100},{-80,-100},{-80,-86}},
                                                                 color={191,0,0}));
      connect(temperature.T,PID. u_m) annotation (Line(points={{-102.4,-86},{-104,
              -86},{-104,-95.2}},
                            color={0,0,127}));
      connect(realExpression.y,PID. u_s)
        annotation (Line(points={{-113.5,-100},{-108.8,-100}},
                                                             color={0,0,127}));
      connect(PID.y,boundary. Q_flow_ext)
        annotation (Line(points={{-99.6,-100},{-96,-100}}, color={0,0,127}));
      connect(temperature.port,feedWaterHeater. port_b) annotation (Line(points={{-100,
              -82},{-100,-80},{-86,-80}},color={0,127,255}));
      connect(multiPort.port_a, reservoir.port_a)
        annotation (Line(points={{0,-84},{0,-91.6}}, color={0,127,255}));
      connect(volume.port_b, resistance.port_a)
        annotation (Line(points={{74,-20},{80,-20},{80,-23}}, color={0,127,255}));
      connect(multiPort1.port_a, condenser.port_a)
        annotation (Line(points={{80,-70},{80,-77}}, color={0,127,255}));
      connect(condenser.port_b, multiPort.ports_b[1]) annotation (Line(points={{87,-92},
              {87,-100},{20,-100},{20,-68},{-2,-68},{-2,-76}}, color={0,127,255}));
      connect(sensorBus.p_inlet_steamTurbine, pressure.p)
        annotation (Line(
          points={{-29.9,100.1},{-94,100.1},{-94,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(volume_bypass.port_a, valve_BV.port_b)
        annotation (Line(points={{-26,0},{-60,0}}, color={0,127,255}));
      connect(volume_bypass.port_b, resistance3.port_a)
        annotation (Line(points={{-14,0},{4.44089e-16,0},{4.44089e-16,-3}},
                                                           color={0,127,255}));
      connect(resistance3.port_b, multiPort1.ports_b[1]) annotation (Line(points={{
              -4.44089e-16,-17},{-4.44089e-16,-28},{0,-28},{0,-40},{80,-40},{80,-62}},
                                                          color={0,127,255}));
      connect(resistance.port_b, multiPort1.ports_b[2]) annotation (Line(points={{80,-37},
              {80,-62}},                        color={0,127,255}));
      connect(valve_BV.port_a, header.port_b[1]) annotation (Line(points={{-80,0},{
              -100,0},{-100,39.3333},{-104,39.3333}}, color={0,127,255}));
      connect(valve_TCV.port_a, header.port_b[2]) annotation (Line(points={{-80,40},
              {-92,40},{-92,40},{-104,40}},     color={0,127,255}));
      connect(port_a, resistance4.port_a)
        annotation (Line(points={{-160,40},{-137,40}}, color={0,127,255}));
      connect(resistance4.port_b, header.port_a[1])
        annotation (Line(points={{-123,40},{-116,40}}, color={0,127,255}));
      connect(resistance1.port_a, feedWaterHeater.port_b)
        annotation (Line(points={{-123,-80},{-86,-80}}, color={0,127,255}));
      connect(resistance1.port_b, port_b) annotation (Line(points={{-137,-80},{-140,
              -80},{-140,-40},{-160,-40}}, color={0,127,255}));
      connect(massFlowRate.m_flow, boundary_m_flow_a3.m_flow_in) annotation (Line(
            points={{-20,-136.4},{-20,-124},{62,-124},{62,-132},{72,-132}},
                                                                          color={0,0,
              127}));
      connect(specificEnthalpy.h_out, boundary_m_flow_a3.h_in) annotation (Line(
            points={{-50,-136.4},{-50,-126},{60,-126},{60,-136},{70,-136}},
                                                                          color={0,0,
              127}));
      connect(steamTurbine.shaft_b, powerSensor.flange_a)
        annotation (Line(points={{60,0},{70,0}}, color={0,0,0}));
      connect(powerSensor.flange_b, generator1.shaft_a)
        annotation (Line(points={{90,0},{100,0}}, color={0,0,0}));
      connect(valve_TCV.port_b, steamTurbine.portHP)
        annotation (Line(points={{-60,40},{40,40},{40,6}}, color={0,127,255}));
      connect(pressure.port, header.port_b[3]) annotation (Line(points={{-100,50},{
              -100,40},{-104,40},{-104,40.6667}},     color={0,127,255}));
      connect(actuatorBus.opening_TCV,valve_TCV. opening)
        annotation (Line(
          points={{30.1,100.1},{30.1,100.1},{-8,100.1},{-8,102},{-70,102},{-70,48}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(feedWaterHeater.port_a, resistance2.port_b)
        annotation (Line(points={{-74,-80},{-57,-80}}, color={0,127,255}));
      connect(resistance2.port_a, reservoir.port_b) annotation (Line(points={{-43,
              -80},{-40,-80},{-40,-114},{0,-114},{0,-108.4}}, color={0,127,255}));
      connect(actuatorBus.opening_BV, valve_BV.opening)
        annotation (Line(
          points={{30.1,100.1},{-8,100.1},{-8,102},{-50,102},{-50,20},{-70,20},{-70,
              8}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.W_total, sensorW.W) annotation (Line(
          points={{-29.9,100.1},{140,100.1},{140,11}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(level_measure.y, PID1.u_m)
        annotation (Line(points={{-73,-52},{-52,-52}}, color={0,0,127}));
      connect(level_setpoint.y, PID1.u_s)
        annotation (Line(points={{-73,-32},{-68,-32},{-68,-40},{-64,-40}},
                                                       color={0,0,127}));
      connect(PID1.y, boundary2.m_flow_in) annotation (Line(points={{-41,-40},{-38,
              -40},{-38,-52},{-28,-52}}, color={0,0,127}));
      connect(boundary2.ports[1], multiPort.ports_b[2])
        annotation (Line(points={{-8,-60},{2,-60},{2,-76}}, color={0,127,255}));
      annotation (defaultComponentName="BOP", Icon(coordinateSystem(extent={{-100,-100},
                {100,100}}),                       graphics={
            Rectangle(
              extent={{-2.09756,2},{83.9024,-2}},
              lineColor={0,0,0},
              origin={-39.9024,-64},
              rotation=360,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.578156,2.1722},{23.1262,-2.1722}},
              lineColor={0,0,0},
              origin={27.4218,-39.8278},
              rotation=180,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-1.81332,3},{66.1869,-3}},
              lineColor={0,0,0},
              origin={-14.1867,-1},
              rotation=0,
              fillColor={135,135,135},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.373344,2},{13.6267,-2}},
              lineColor={0,0,0},
              origin={24.3733,-56},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.4,3},{15.5,-3}},
              lineColor={0,0,0},
              origin={36.4272,-29},
              rotation=0,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-14,46},{12,34}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-64,46},{-16,34}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-24,49},{-6,31}},
              lineColor={95,95,95},
              fillColor={175,175,175},
              fillPattern=FillPattern.Sphere),
            Ellipse(
              extent={{-13,49},{-17,31}},
              lineColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder,
              fillColor={162,162,0}),
            Rectangle(
              extent={{-24,63},{-6,61}},
              lineColor={0,0,0},
              fillColor={181,0,0},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-14,49},{-16,61}},
              lineColor={0,0,0},
              fillColor={95,95,95},
              fillPattern=FillPattern.VerticalCylinder),
            Rectangle(
              extent={{-16,3},{16,-3}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={10,30},
              rotation=-90),
            Polygon(
              points={{6,16},{6,-14},{36,-32},{36,36},{6,16}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-1.81329,5},{66.1867,-5}},
              lineColor={0,0,0},
              origin={-62.1867,-41},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Line(points={{10,-42}}, color={0,0,0}),
            Rectangle(
              extent={{-0.43805,2.7864},{15.9886,-2.7864}},
              lineColor={0,0,0},
              origin={49.2136,-41.9886},
              rotation=90,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Text(
              extent={{15,-8},{25,6}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="T"),
            Polygon(
              points={{4,-44},{0,-48},{16,-48},{12,-44},{4,-44}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder),
            Ellipse(
              extent={{2,-34},{14,-46}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{9,-37},{9,-43},{5,-40},{9,-37}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Ellipse(
              extent={{50,12},{78,-14}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{59,-8},{69,6}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="G"),
            Rectangle(
              extent={{-0.487802,2},{19.5122,-2}},
              lineColor={0,0,0},
              origin={26,-38.4878},
              rotation=-90,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{36,-42},{64,-68}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{45,-62},{55,-48}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="C"),
            Text(
              extent={{-94,82},{94,74}},
              lineColor={0,0,0},
              lineThickness=1,
              fillColor={255,255,237},
              fillPattern=FillPattern.Solid,
              textString="Turbine"),
            Rectangle(
              extent={{-0.243902,2},{9.7562,-2}},
              lineColor={0,0,0},
              origin={-40,-62.2438},
              rotation=-90,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder)}),
        Diagram(coordinateSystem(extent={{-160,-160},{160,140}})),
        experiment(StopTime=1000));
    end SteamTurbine_L1_boundaries;

    model SteamTurbine_L2_ClosedFeedHeat "Two stage BOP model"
      extends BaseClasses.Partial_SubSystem_C(
        redeclare replaceable
          ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
        redeclare replaceable ControlSystems.ED_Dummy ED,
        redeclare replaceable Data.Turbine_2 data(InternalBypassValve_p_spring=
              6500000));

      TRANSFORM.Fluid.Machines.SteamTurbine HPT(
        nUnits=1,
        energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
        Q_units_start={1e7},
        eta_mech=data.HPT_efficiency,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
        p_a_start=init.HPT_p_a_start,
        p_b_start=init.HPT_p_b_start,
        T_a_start=init.HPT_T_a_start,
        T_b_start=init.HPT_T_b_start,
        m_flow_nominal=data.HPT_nominal_mflow,
        p_inlet_nominal= data.p_in_nominal,
        p_outlet_nominal=data.HPT_p_exit_nominal,
        T_nominal=data.HPT_T_in_nominal)
        annotation (Placement(transformation(extent={{32,22},{52,42}})));

      Fluid.Vessels.IdealCondenser Condenser(
        p= data.p_condensor,
        V_total=data.V_condensor,
        V_liquid_start=init.condensor_V_liquid_start)
        annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T1(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{6,6},{-6,-6}},
            rotation=180,
            origin={22,40})));

      TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
            Modelica.Media.Water.StandardWater, redeclare function iconUnit =
            TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                           annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={-18,60})));

      TRANSFORM.Fluid.Valves.ValveLinear TCV(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=data.valve_TCV_dp_nominal,
        m_flow_nominal=data.valve_TCV_mflow)
                           annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={-4,40})));

      TRANSFORM.Fluid.Machines.SteamTurbine LPT(
        nUnits=1,
        energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
        Q_units_start={3e7},
        eta_mech=data.LPT_efficiency,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
        p_a_start=init.LPT_p_a_start,
        p_b_start=init.LPT_p_b_start,
        T_a_start=init.LPT_T_a_start,
        T_b_start=init.LPT_T_b_start,
        m_flow_nominal=data.LPT_nominal_mflow,
        p_inlet_nominal= data.LPT_p_in_nominal,
        p_outlet_nominal=data.LPT_p_exit_nominal,
        T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=90,
            origin={44,-6})));

      TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
          package Medium = Modelica.Media.Water.StandardWater, V=data.V_tee,
        p_start=init.tee_p_start,
        T_start=init.moisturesep_T_start)
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=90,
            origin={82,24})));

      TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        dp_nominal=data.valve_LPT_Bypass_dp_nominal,
        m_flow_nominal=data.valve_LPT_Bypass_mflow)   annotation (Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=90,
            origin={84,-26})));

      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T2(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-58,-40})));

      TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                               firstfeedpump(redeclare package
          Medium =
            Modelica.Media.Water.StandardWater,
        use_input=false,
        p_nominal=data.firstfeedpump_p_nominal,
        allowFlowReversal=false)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=0,
            origin={108,-144})));

      StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
        Moisture_Separator(redeclare package Medium =
            Modelica.Media.Water.StandardWater,
        p_start=init.moisturesep_p_start,
        T_start=init.moisturesep_T_start,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=data.V_moistureseperator))
        annotation (Placement(transformation(extent={{58,30},{78,50}})));

      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
          redeclare package Medium = Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=90,
            origin={-24,-2})));

      Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase MainFeedwaterHeater(
        NTU=data.MainFeedHeater_NTU,
        K_tube=data.MainFeedHeater_K_tube,
        K_shell=data.MainFeedHeater_K_shell,
        redeclare package Tube_medium = Modelica.Media.Water.StandardWater,
        redeclare package Shell_medium = Modelica.Media.Water.StandardWater,
        V_Tube=data.MainFeedHeater_V_tube,
        V_Shell=data.MainFeedHeater_V_shell,
        p_start_tube=init.MainFeedHeater_p_start_tube,
        h_start_tube_inlet=init.MainFeedHeater_h_start_tube_inlet,
        h_start_tube_outlet=init.MainFeedHeater_h_start_tube_outlet,
        p_start_shell=init.MainFeedHeater_p_start_shell,
        h_start_shell_inlet=init.MainFeedHeater_h_start_shell_inlet,
        h_start_shell_outlet=init.MainFeedHeater_h_start_shell_outlet,
        dp_init_tube=init.MainFeedHeater_dp_init_tube,
        dp_init_shell=init.MainFeedHeater_dp_init_shell,
        Q_init=init.MainFeedHeater_Q_init,
        m_start_tube=init.MainFeedHeater_m_start_tube,
        m_start_shell=init.MainFeedHeater_m_start_shell)
        annotation (Placement(transformation(extent={{40,-118},{60,-138}})));
      Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase BypassFeedwaterHeater(
        NTU=data.BypassFeedHeater_NTU,
        K_tube=data.BypassFeedHeater_K_tube,
        K_shell=data.BypassFeedHeater_K_shell,
        redeclare package Tube_medium = Modelica.Media.Water.StandardWater,
        redeclare package Shell_medium = Modelica.Media.Water.StandardWater,
        V_Tube=data.BypassFeedHeater_V_tube,
        V_Shell=data.BypassFeedHeater_V_shell,
        p_start_tube=init.BypassFeedHeater_p_start_tube,
        h_start_tube_inlet=init.BypassFeedHeater_h_start_tube_inlet,
        h_start_tube_outlet=init.BypassFeedHeater_h_start_tube_outlet,
        p_start_shell=init.BypassFeedHeater_p_start_shell,
        h_start_shell_inlet=init.BypassFeedHeater_h_start_shell_inlet,
        h_start_shell_outlet=init.BypassFeedHeater_h_start_shell_outlet,
        dp_init_tube=init.BypassFeedHeater_dp_init_tube,
        dp_init_shell=init.BypassFeedHeater_dp_init_shell,
        Q_init=init.BypassFeedHeater_Q_init,
        m_start_tube=init.BypassFeedHeater_m_start_tube,
        m_start_shell=init.BypassFeedHeater_m_start_shell)
        annotation (Placement(transformation(extent={{-20,-26},{0,-46}})));

      TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
        redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
        p_start=init.FeedwaterMixVolume_p_start,
        use_T_start=false,
        h_start=init.FeedwaterMixVolume_h_start,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=data.V_FeedwaterMixVolume),
        nPorts_a=3,
        nPorts_b=1) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={34,-94})));

      Electrical.Generator      generator1(J=data.generator_MoI)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={44,-38})));

      TRANSFORM.Electrical.Sensors.PowerSensor sensorW
        annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_feedwater(R=data.R_feedwater,
          redeclare package Medium = Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=90,
            origin={90,-110})));

      TRANSFORM.Fluid.Machines.Pump_PressureBooster SecondFeedwaterPump(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        use_input=false,
        p_nominal=data.secondfeedpump_p_nominal,
        allowFlowReversal=false) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={6,-76})));

      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
          redeclare package Medium = Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-132,40})));

      TRANSFORM.Fluid.Volumes.MixingVolume header(
        use_T_start=false,
        h_start=init.header_h_start,
        p_start=init.header_p_start,
        nPorts_a=1,
        nPorts_b=2,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=1),
        redeclare package Medium = Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-122,30},{-102,50}})));

      TRANSFORM.Fluid.Machines.Pump_SimpleMassFlow pump_SimpleMassFlow1(
        m_flow_nominal=data.controlledfeedpump_mflow_nominal,
        use_input=true,
        redeclare package Medium =
            Modelica.Media.Water.StandardWater)              annotation (
          Placement(transformation(
            extent={{-11,-11},{11,11}},
            rotation=180,
            origin={-121,-41})));

      TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p=data.p_boundary,
        T=data.T_boundary,
        nPorts=1)
        annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

      TRANSFORM.Fluid.Valves.ValveLinear TBV(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        dp_nominal=data.valve_TBV_dp_nominal,
        m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=180,
            origin={-128,74})));

      StagebyStageTurbineSecondary.Control_and_Distribution.SpringBallValve InternalBypassValve(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        dp_start=init.InternalBypassValve_dp_start,
        m_flow_start=init.InternalBypassValve_mflow_start,
        m_flow_small=data.InternalBypassValve_mflow_small,
        p_spring=data.InternalBypassValve_p_spring,
        K=data.InternalBypassValve_K,
        opening_init=0,
        tau=data.InternalBypassValve_tau)
        annotation (Placement(transformation(extent={{-82,10},{-62,30}})));

      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T4(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={80,-144})));

      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T6(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={20,-132})));

      replaceable Data.Turbine_2_init init(FeedwaterMixVolume_h_start=2e6)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

    initial equation

    equation

      connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
          points={{32,38},{30,38},{30,40},{28,40}},
          color={0,127,255},
          thickness=0.5));
      connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
          points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
          points={{4,40},{16,40}},
          color={0,127,255},
          thickness=0.5));
      connect(LPT.portHP, tee.port_1) annotation (Line(
          points={{50,4},{50,8},{82,8},{82,14}},
          color={0,127,255},
          thickness=0.5));
      connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
          points={{92,24},{92,0},{84,0},{84,-16}},
          color={0,127,255},
          thickness=0.5));
      connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
          points={{-30,100},{-44,100},{-44,-56},{-58,-56},{-58,-43.6}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
          points={{52,32},{52,14},{44,14},{44,4}},
          color={0,0,0},
          pattern=LinePattern.Dash));
      connect(HPT.portLP, Moisture_Separator.port_a) annotation (Line(
          points={{52,38},{58,38},{58,40},{62,40}},
          color={0,127,255},
          thickness=0.5));
      connect(Moisture_Separator.port_b, tee.port_2) annotation (Line(
          points={{74,40},{82,40},{82,34}},
          color={0,127,255},
          thickness=0.5));

      connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
          points={{30.1,100.1},{-4,100.1},{-4,46.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensor_p.port, TCV.port_a)
        annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));
      connect(R_InternalBypass.port_b, BypassFeedwaterHeater.Shell_in) annotation (
          Line(points={{-24,-9},{-24,-34},{-20,-34}}, color={0,127,255}));
      connect(BypassFeedwaterHeater.Shell_out, FeedwaterMixVolume.port_a[1])
        annotation (Line(points={{0,-34},{30,-34},{30,-80},{33.3333,-80},{
              33.3333,-88}},           color={0,127,255}));
      connect(LPT_Bypass.port_b, FeedwaterMixVolume.port_a[2])
        annotation (Line(points={{84,-36},{84,-44},{72,-44},{72,-58},{34,-58},{34,
              -88}},                                          color={0,127,255}));
      connect(Moisture_Separator.port_Liquid, FeedwaterMixVolume.port_a[3])
        annotation (Line(points={{64,36},{64,-44},{72,-44},{72,-58},{34.6667,
              -58},{34.6667,-88}},
                     color={0,127,255}));

      connect(LPT.shaft_b, generator1.shaft_a)
        annotation (Line(points={{44,-16},{44,-28}}, color={0,0,0}));
      connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{44,-48},
              {110,-48}},                              color={255,0,0}));
      connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
              -48},{146,0},{160,0}},                     color={255,0,0}));
      connect(FeedwaterMixVolume.port_b[1], MainFeedwaterHeater.Shell_in)
        annotation (Line(points={{34,-100},{34,-126},{40,-126}},
            color={0,127,255}));
      connect(MainFeedwaterHeater.Shell_out,R_feedwater. port_b) annotation (Line(
            points={{60,-126},{90,-126},{90,-117}}, color={0,127,255}));
      connect(SecondFeedwaterPump.port_b, BypassFeedwaterHeater.Tube_in)
        annotation (Line(points={{6,-66},{6,-40},{0,-40}}, color={0,127,255}));
      connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
          Line(
          points={{30,100},{114,100},{114,-26},{92,-26}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{6,3},{6,3}},
          horizontalAlignment=TextAlignment.Left));
      connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
          points={{-30,100},{-30,60},{-24,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(sensorBus.Power, sensorW.W) annotation (Line(
          points={{-30,100},{120,100},{120,-37}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(port_a, R_entry.port_a)
        annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
      connect(R_entry.port_b, header.port_a[1])
        annotation (Line(points={{-125,40},{-118,40}}, color={0,127,255}));
      connect(header.port_b[1], TCV.port_a)
        annotation (Line(points={{-106,39.5},{-60,39.5},{-60,40},{-12,40}},
                                                      color={0,127,255}));
      connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.in_m_flow)
        annotation (Line(
          points={{30,100},{-90,100},{-90,-58},{-121,-58},{-121,-49.03}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
              {-104,40},{-12,40}}, color={0,127,255}));
      connect(boundary.ports[1], TBV.port_b)
        annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
      connect(actuatorBus.TBV, TBV.opening) annotation (Line(
          points={{30,100},{-128,100},{-128,80.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(InternalBypassValve.port_a, header.port_b[2]) annotation (Line(points={{-82,20},
              {-104,20},{-104,40},{-106,40},{-106,40.5}},          color={0,127,255}));
      connect(InternalBypassValve.port_b, R_InternalBypass.port_a)
        annotation (Line(points={{-62,20},{-24,20},{-24,5}}, color={0,127,255}));
      connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{98,-144},
              {90,-144}},                              color={0,127,255}));
      connect(sensor_T4.port_a, MainFeedwaterHeater.Tube_in) annotation (Line(
            points={{70,-144},{64,-144},{64,-132},{60,-132}}, color={0,127,255}));
      connect(MainFeedwaterHeater.Tube_out, sensor_T6.port_a)
        annotation (Line(points={{40,-132},{30,-132}}, color={0,127,255}));
      connect(sensor_T6.port_b, SecondFeedwaterPump.port_a)
        annotation (Line(points={{10,-132},{4,-132},{4,-90},{6,-90},{6,-86}},
                                                              color={0,127,255}));
      connect(sensor_T2.port_a, BypassFeedwaterHeater.Tube_out)
        annotation (Line(points={{-48,-40},{-20,-40}}, color={0,127,255}));
      connect(port_b, pump_SimpleMassFlow1.port_b) annotation (Line(points={{-160,-40},
              {-132,-40},{-132,-41}},                            color={0,127,255}));
      connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
            points={{-110,-41},{-94,-41},{-94,-42},{-68,-42},{-68,-40}}, color={0,
              127,255}));
      connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
              -112},{146,-144},{118,-144}},         color={0,127,255}));
      connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{50,-16},{60,
              -16},{60,-64},{154,-64},{154,-86},{153,-86},{153,-92}},
                                                             color={0,127,255}));
      connect(R_feedwater.port_a, Condenser.port_a) annotation (Line(points={{90,-103},
              {90,-78},{153,-78},{153,-92}},                 color={0,127,255}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-24,2},{24,-2}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={20,-42},
              rotation=180),
            Rectangle(
              extent={{-11.5,3},{11.5,-3}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-1,-28.5},
              rotation=90),
            Rectangle(
              extent={{-4.5,2.5},{4.5,-2.5}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-8.5,-31.5},
              rotation=360),
            Rectangle(
              extent={{-0.800004,5},{29.1996,-5}},
              lineColor={0,0,0},
              origin={-71.1996,-49},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-18,3},{18,-3}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-39,28},
              rotation=-90),
            Rectangle(
              extent={{-1.81332,3},{66.1869,-3}},
              lineColor={0,0,0},
              origin={-18.1867,-3},
              rotation=0,
              fillColor={135,135,135},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-70,46},{-36,34}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder),
            Polygon(
              points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-31,-10},{-21,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="HPT"),
            Ellipse(
              extent={{46,12},{74,-14}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.601938,3},{23.3253,-3}},
              lineColor={0,0,0},
              origin={22.6019,-29},
              rotation=0,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.43805,2.7864},{15.9886,-2.7864}},
              lineColor={0,0,0},
              origin={45.2136,-41.989},
              rotation=90,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{32,-42},{60,-68}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.373344,2},{13.6267,-2}},
              lineColor={0,0,0},
              origin={18.3733,-56},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.341463,2},{13.6587,-2}},
              lineColor={0,0,0},
              origin={20,-44.3415},
              rotation=-90,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-1.41463,2.0001},{56.5851,-2.0001}},
              lineColor={0,0,0},
              origin={18.5851,-46.0001},
              rotation=180,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-46,-40},{-34,-52}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder),
            Ellipse(
              extent={{-56,49},{-38,31}},
              lineColor={95,95,95},
              fillColor={175,175,175},
              fillPattern=FillPattern.Sphere),
            Rectangle(
              extent={{-46,49},{-48,61}},
              lineColor={0,0,0},
              fillColor={95,95,95},
              fillPattern=FillPattern.VerticalCylinder),
            Rectangle(
              extent={{-56,63},{-38,61}},
              lineColor={0,0,0},
              fillColor={181,0,0},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-45,49},{-49,31}},
              lineColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder,
              fillColor={162,162,0}),
            Text(
              extent={{55,-10},{65,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="G"),
            Text(
              extent={{41,-62},{51,-48}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="C"),
            Polygon(
              points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Polygon(
              points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{7,-10},{17,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="LPT"),
            Rectangle(
              extent={{-4,-40},{22,-48}},
              lineColor={238,46,47},
              pattern=LinePattern.None,
              lineThickness=1,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Line(
              points={{-4,-44},{22,-44}},
              color={255,0,0},
              thickness=1)}),                                        Diagram(
            coordinateSystem(preserveAspectRatio=false)),
        experiment(
          StopTime=1000,
          Interval=10,
          __Dymola_Algorithm="Esdirk45a"),
        Documentation(info="<html>
<p><b><span style=\"font-size: 18pt;\">Model Name</span></b></p>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
<p><br><b><span style=\"font-size: 18pt;\">Design Purpose</span></b> </p>
<p>The main purpose of this model is to provide a simple and flexible two stage BOP with realistic accounting of feedwater heating. It should be used in cases where a more rigorous accounting of efficiency is required compared to the SteamTurbines_L1_boundaries model and the StageByStage turbine model would add unnecessary complexity. </p>
<p><br><b><span style=\"font-size: 18pt;\">Location and Examples</span></b> </p>
<p>The location of this model is at NHES.Systems.BalanceOfPlant.Turbine.SteamTurbine_L2_ClosedFeedHeat the best use case example of this model is at NHES.Systems.Examples.SMR_highfidelity_L2_Turbine. </p>
<p>&nbsp; </p>
<p><b><span style=\"font-size: 18pt;\">Normal Operation</span></b> </p>
<p>The model uses two TRANSFORM SteamTurbine models with the intermediate pressure to be chosen by the user (nominally set at 7 Bar). Any liquid condensing in the turbines is removed via a moisture separator. The model has closed feedwater heating with steam bled from between the two turbines fed to the main NTU heat exchanger with contact to the main feedwater flow. Additional feedwater heating can be provided with an internal bypass loop from the main steam line to a supplementary NTU heat exchanger with this flow controlled by a set pressure spring valve. This steam is used again in the main NTU heat exchanger after mixing in the feedwater mixing volume. The model uses an ideal condenser with a fixed pressure that must be specified by the user (nominally set to 0.1 Bar). In the feedwater line &ndash; fixed &ldquo;pressure booster&rdquo; pumps are used to move the steam away from saturation conditions. Depending on the set pressure between turbines these pumps must be set sufficiently to prevent saturation in either of the heat exchangers tube sides. An additional final feedwater pump is used to control pressure exiting the primary heat system. Finally, the model also has a blow-off valve to an external boundary condition on the main steam line to prevent over-pressurization. </p>
<p><br><b><span style=\"font-size: 18pt;\">Control system</span></b> </p>
<table cellspacing=\"0\" cellpadding=\"0\" border=\"1\" width=\"662\"><tr>
<td valign=\"top\"><p align=\"center\"><span style=\"font-size: 11pt;\">Label</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Name</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Controlling</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Nominal Setpoint</span> </p></td>
</tr>
<tr>
<td valign=\"top\"><p align=\"center\"><span style=\"font-size: 11pt;\">1</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Turbine Control Valve</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Power (HPT and LPT)</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">40 MW</span> </p></td>
</tr>
<tr>
<td valign=\"top\"><p align=\"center\"><span style=\"font-size: 11pt;\">2</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Low Pressure Turbine Bypass</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Feedwater Temperature</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">148&deg;C</span> </p></td>
</tr>
<tr>
<td valign=\"top\"><p align=\"center\"><span style=\"font-size: 11pt;\">3</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Internal Bypass Valve</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Bypass Mass Flow</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">0 kg/s</span> </p></td>
</tr>
<tr>
<td valign=\"top\"><p align=\"center\"><span style=\"font-size: 11pt;\">4</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Feedwater Pump</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Steam Inlet Pressure (HPT)</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">34 bar</span> </p></td>
</tr>
<tr>
<td valign=\"top\"><p align=\"center\"><span style=\"font-size: 11pt;\">5</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Pressure Relief Valve</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">Pressure Overloads</span> </p></td>
<td valign=\"top\"><p><span style=\"font-size: 11pt;\">150 bar</span> </p></td>
</tr>
</table>
<p><br><br>The control system is designed to ensure nominal conditions in normal operation. In load follow or extreme transients additional control elements may be required in the model. The three key required setpoint conditions are power, feedwater temperature and steam inlet pressure to the BOP. These are specified in the data table in the control system model. The internal bypass valve spring pressure is not a controlled variable and is set in the BOP model data table. Depending on the K value of this valve (also specified in the BOP data table) one can control the leakage mass flow required for the supplementary heat exchanger to prevent no flow errors. </p>
<p><br><b><span style=\"font-size: 18pt;\">Changing Parameters</span></b> </p>
<p>All parameters in the model should be accessible and changed in the data table data. All initialization conditions should be changed using the init table. These have initial value in to guide your choices or aid simulation set up. </p>
<p><br><b><span style=\"font-size: 18pt;\">Considerations In Parameters</span></b> </p>
<p>The key considerations when changing the turbine parameters to match an arbitrary Rankine cycle are the pressures in the fixed pressure booster pumps. These should be adjusted so the outlets of the HX tube sides are pushed away from saturation conditions. The further these exit flows are away from the saturation condition the better reliability in transient operation the model will have but this will impact your efficiencies. These pump pressures are a function of setting the intermediate pressure and the first feed pump should always be sufficiently low pressure rise for heat to flow from the bypass stream to the feedwater heat not the other way round. </p>
<p>Other considerations when parameterizing the model are listed below </p>
<p>1.<span style=\"font-family: Times New Roman; font-size: 7pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Valve sizes </p>
<p>a.<span style=\"font-family: Times New Roman; font-size: 7pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Internal Bypass Valve K value should be low enough to allow a nominal flow through the supplementary HX. </p>
<p>b.<span style=\"font-family: Times New Roman; font-size: 7pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Nominal conditions on TCV and LPT_Bypass should be tuned to allow the full range of desired operating conditions </p>
<p>c.<span style=\"font-family: Times New Roman; font-size: 7pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>TBV should be set that it only opens in extreme circumstances </p>
<p>2.<span style=\"font-family: Times New Roman; font-size: 7pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Turbine nominal conditions </p>
<p>a.<span style=\"font-family: Times New Roman; font-size: 7pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>These must be fine tuned to desired power output for given steam conditions. There doesn&rsquo;t seem to be an exact way to do this but it would be good to know if found. </p>
<p>3.<span style=\"font-family: Times New Roman; font-size: 7pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Volumes in system </p>
<p>a.<span style=\"font-family: Times New Roman; font-size: 7pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Many of the volumes are set too large to aid initialization. These may be changed to reflect actual BOP designs, but initialization may be more difficult. </p>
<p><br><b><span style=\"font-size: 18pt;\">Contact Deatils</span></b> </p>
<p>This model was designed by Aidan Rigby (<a href=\"mailto:aidan.rigby@inl.gov\">aidan.rigby@inl.gov</a> , <a href=\"mailto:acrigby@wisc.edu\">acrigby@wisc.edu</a> ). All initial questions should be directed to Daniel Mikkelson (<a href=\"mailto:Daniel.Mikkelson@inl.gov\">Daniel.Mikkelson@inl.gov</a>). </p>
</html>"));
    end SteamTurbine_L2_ClosedFeedHeat;

    model SteamTurbine_L3_HTGR
      extends BaseClasses.Partial_SubSystem(
        redeclare replaceable
          ControlSystems.CS_threeStagedTurbine_HTGR
          CS,
        redeclare replaceable ControlSystems.ED_Dummy ED,
        redeclare Data.IdealTurbine data);
      Real time_altered;
      Real time_initialization = 7e4;
      Real electricity_generation_Norm;
      Real electricity_demand_Norm;
      Data.DataInitial_HTGR_Pebble dataInitial(P_LP_Comp_Ref=4000000)
        annotation (Placement(transformation(extent={{64,122},{84,142}})));

      TRANSFORM.Fluid.Machines.SteamTurbine HPT(
        nUnits=1,
        eta_mech=0.93,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
        p_a_start=dataInitial_HTGR_BoP_3stage.HPT_P_inlet,
        p_b_start=dataInitial_HTGR_BoP_3stage.HPT_P_outlet,
        T_a_start=dataInitial_HTGR_BoP_3stage.HPT_T_inlet,
        T_b_start=dataInitial_HTGR_BoP_3stage.HPT_T_outlet,
        m_flow_nominal=200,
        p_inlet_nominal=dataInitial_HTGR_BoP_3stage.HPT_P_inlet,
        p_outlet_nominal=dataInitial_HTGR_BoP_3stage.HPT_P_outlet,
        T_nominal=dataInitial_HTGR_BoP_3stage.HPT_T_inlet)
        annotation (Placement(transformation(extent={{34,24},{54,44}})));

      TRANSFORM.Electrical.PowerConverters.Generator_Basic generator
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=90,
            origin={238,66})));
      Fluid.Vessels.IdealCondenser Condenser(
        p=10000,
        V_total=2500,
        V_liquid_start=1.2)
        annotation (Placement(transformation(extent={{244,-62},{224,-42}})));
      TRANSFORM.Fluid.Machines.Pump_Controlled FWCP(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        N_nominal=1200,
        dp_nominal=15000000,
        m_flow_nominal=50,
        d_nominal=1000,
        controlType="RPM",
        use_port=true)
        annotation (Placement(transformation(extent={{-24,-48},{-44,-68}})));
      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T1(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{6,6},{-6,-6}},
            rotation=180,
            origin={18,40})));
      TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
            Modelica.Media.Water.StandardWater, redeclare function iconUnit =
            TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                           annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={-14,76})));
      TRANSFORM.Fluid.Volumes.SimpleVolume volume(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p_start=3900000,
        T_start=723.15,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=2),
        use_TraceMassPort=false)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-62,48})));

      TRANSFORM.Fluid.Valves.ValveLinear TCV(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        dp_nominal=100000,
        m_flow_nominal=50) annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={-4,40})));
      Modelica.Blocks.Sources.RealExpression Electrical_Power(y=generator.power)
        annotation (Placement(transformation(extent={{-106,108},{-86,116}})));
      TRANSFORM.Fluid.Machines.SteamTurbine LPT1(
        nUnits=1,
        eta_mech=0.93,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
        p_a_start=3000000,
        p_b_start=1500000,
        T_a_start=573.15,
        T_b_start=473.15,
        m_flow_nominal=200,
        p_inlet_nominal=2000000,
        p_outlet_nominal=dataInitial_HTGR_BoP_3stage.LPT1_P_outlet,
        T_nominal=423.15)                                  annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={128,34})));

      TRANSFORM.Fluid.Volumes.SimpleVolume volume1(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p_start=3900000,
        T_start=473.15,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=5.0),
        use_TraceMassPort=false)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-4,-58})));
      TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee1(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        V=5,
        p_start=2500000,
        T_start=573.15) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={94,50})));
      TRANSFORM.Fluid.Valves.ValveLinear LPT1_Bypass(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        dp_nominal=100000,
        m_flow_nominal=30)
                          annotation (Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=90,
            origin={94,-16})));
      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T2(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-108,-58})));
      TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                               pump1(redeclare package Medium =
            Modelica.Media.Water.StandardWater,
        use_input=false,
        p_nominal=5500000,
        allowFlowReversal=false)
        annotation (Placement(transformation(extent={{40,-92},{20,-72}})));
      TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
          Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{7,-8},{-7,8}},
            rotation=90,
            origin={242,-19})));
      TRANSFORM.Fluid.Valves.ValveLinear TBV(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        dp_nominal=100000,
        m_flow_nominal=50) annotation (Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=180,
            origin={-74,72})));
      TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary1(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p=12000000,
        T=573.15,
        nPorts=1)
        annotation (Placement(transformation(extent={{-116,62},{-96,82}})));
      TRANSFORM.Fluid.Interfaces.FluidPort_Flow port_a(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-150,38},{-130,58}})));
      TRANSFORM.Fluid.Interfaces.FluidPort_State port_b(redeclare package
          Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-150,-68},{-130,-48}})));
      TRANSFORM.Electrical.Interfaces.ElectricalPowerPort_Flow port_e
        annotation (Placement(transformation(extent={{130,-10},{150,10}}),
            iconTransformation(extent={{130,-10},{150,10}})));
      TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee2(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        V=5,
        p_start=1500000,
        T_start=423.15)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={178,50})));
      TRANSFORM.Fluid.Machines.SteamTurbine LPT2(
        nUnits=1,
        eta_mech=0.93,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
        p_a_start=1500000,
        p_b_start=8000,
        T_a_start=523.15,
        T_b_start=343.15,
        m_flow_nominal=200,
        p_inlet_nominal=1500000,
        p_outlet_nominal=dataInitial_HTGR_BoP_3stage.LPT2_P_outlet,
        T_nominal=423.15)                                  annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={208,34})));

      TRANSFORM.Fluid.Valves.ValveLinear LPT2_Bypass(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        dp_nominal=100000,
        m_flow_nominal=5) annotation (Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=90,
            origin={178,16})));
      Data.DataInitial_HTGR_BoP_3stage dataInitial_HTGR_BoP_3stage(LPT1_T_outlet=
            473.15, LPT2_T_inlet=473.15)
        annotation (Placement(transformation(extent={{90,122},{110,142}})));
      StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
        Moisture_Separator2(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p_start=2500000,
        T_start=573.15,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume)
        annotation (Placement(transformation(extent={{140,40},{160,60}})));
      TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary2(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p=5500000,
        T=573.15,
        nPorts=1)
        annotation (Placement(transformation(extent={{-104,-42},{-84,-22}})));
      TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow(redeclare package
          Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={28,-32})));
      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T3(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-6,6},{6,-6}},
            rotation=180,
            origin={66,-32})));
    initial equation

    equation
      port_e.W = generator.power;
      time_altered = time-time_initialization;
      electricity_generation_Norm = generator.power/44E+6;
      electricity_demand_Norm     = CS.trap_LTV1bypass_power.y/44E+6;

      connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
          points={{34,40},{24,40}},
          color={0,127,255},
          thickness=0.5));
      connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
          points={{-30,100},{4,100},{4,42.16},{18,42.16}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.Feed_Pump_Speed,FWCP. inputSignal) annotation (Line(
          points={{30,100},{258,100},{258,-98},{-34,-98},{-34,-65}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
          points={{-30,100},{-30,76},{-20,76}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
          points={{4,40},{12,40}},
          color={0,127,255},
          thickness=0.5));
      connect(sensorBus.Power, Electrical_Power.y) annotation (Line(
          points={{-30,100},{-30,76},{-80,76},{-80,112},{-85,112}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(volume1.port_b,FWCP. port_a) annotation (Line(points={{-10,-58},{
              -24,-58}},                color={0,127,255},
          thickness=0.5));
      connect(LPT1.portHP, tee1.port_1) annotation (Line(
          points={{118,40},{118,50},{104,50}},
          color={0,127,255},
          thickness=0.5));
      connect(tee1.port_3, LPT1_Bypass.port_a) annotation (Line(
          points={{94,40},{94,-6}},
          color={0,127,255},
          thickness=0.5));
      connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
          points={{-30,100},{-30,-44},{-56,-44},{-56,-74},{-108,-74},{-108,-61.6}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(Condenser.port_b, pump1.port_a) annotation (Line(points={{234,-62},
              {234,-82},{40,-82}},                                      color={0,127,
              255},
          thickness=0.5));
      connect(pump1.port_b, volume1.port_a) annotation (Line(points={{20,-82},{16,
              -82},{16,-58},{2,-58}},                    color={0,127,255},
          thickness=0.5));
      connect(HPT.shaft_b, LPT1.shaft_a) annotation (Line(
          points={{54,34},{118,34}},
          color={0,0,0},
          pattern=LinePattern.Dash));
      connect(sensor_m_flow1.port_b,Condenser. port_a)
        annotation (Line(points={{242,-26},{242,-42},{241,-42}},
                                                         color={0,127,255},
          thickness=0.5));

      connect(TBV.port_b, boundary1.ports[1])
        annotation (Line(points={{-82,72},{-96,72}}, color={0,127,255}));
      connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
          points={{30.1,100.1},{-4,100.1},{-4,46.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(volume.port_b, TBV.port_a) annotation (Line(points={{-56,48},{-46,
              48},{-46,72},{-66,72}},
                                  color={0,127,255}));
      connect(volume.port_b, TCV.port_a)
        annotation (Line(points={{-56,48},{-34,48},{-34,40},{-12,40}},
                                                     color={0,127,255}));
      connect(volume.port_b, sensor_p.port) annotation (Line(points={{-56,48},{
              -34,48},{-34,62},{-14,62},{-14,66}},
                                           color={0,127,255}));
      connect(sensor_T2.port_b, port_b)
        annotation (Line(points={{-118,-58},{-140,-58}},color={0,127,255}));
      connect(TBV.opening, actuatorBus.TBV) annotation (Line(points={{-74,78.4},{-74,
              100},{30,100}},       color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(LPT1.shaft_b, LPT2.shaft_a)
        annotation (Line(points={{138,34},{198,34}}, color={0,0,0}));
      connect(tee2.port_1, LPT2.portHP) annotation (Line(points={{188,50},{192,50},{
              192,40},{198,40}}, color={0,127,255}));
      connect(LPT2.portLP, sensor_m_flow1.port_a)
        annotation (Line(points={{218,40},{242,40},{242,-12}}, color={0,127,255}));
      connect(tee2.port_3, LPT2_Bypass.port_a)
        annotation (Line(points={{178,40},{178,26}},color={0,127,255}));
      connect(LPT2_Bypass.port_b, pump1.port_a) annotation (Line(points={{178,6},
              {178,-82},{40,-82}},color={0,127,255}));
      connect(actuatorBus.Divert_Valve_Position, LPT2_Bypass.opening) annotation (
          Line(
          points={{30,100},{248,100},{248,16},{186,16}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(LPT1.portLP, Moisture_Separator2.port_a) annotation (Line(points={{
              138,40},{138,50},{144,50}}, color={0,127,255}));
      connect(Moisture_Separator2.port_b, tee2.port_2)
        annotation (Line(points={{156,50},{168,50}}, color={0,127,255}));
      connect(Moisture_Separator2.port_Liquid, volume1.port_a) annotation (Line(
            points={{146,46},{146,-58},{2,-58}},                     color={0,127,
              255}));
      connect(HPT.portLP, tee1.port_2) annotation (Line(points={{54,40},{78,40},{
              78,50},{84,50}}, color={0,127,255}));
      connect(sensor_m_flow.port_b, boundary2.ports[1])
        annotation (Line(points={{18,-32},{-84,-32}},color={0,127,255}));
      connect(sensorBus.massflow_LPTv, sensor_m_flow.m_flow) annotation (Line(
          points={{-30,100},{-30,-42},{28,-42},{28,-35.6}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.openingLPTv, LPT1_Bypass.opening) annotation (Line(
          points={{30,100},{30,20},{116,20},{116,-16},{102,-16}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(generator.shaft, LPT2.shaft_b) annotation (Line(points={{238.1,55.9},
              {238.1,34},{218,34}}, color={0,0,0}));
      connect(sensor_T2.port_a,FWCP. port_b)
        annotation (Line(points={{-98,-58},{-44,-58}}, color={0,127,255}));
      connect(LPT1_Bypass.port_b, sensor_T3.port_a) annotation (Line(points={{94,
              -26},{94,-32},{72,-32}}, color={0,127,255}));
      connect(sensor_T3.port_b, sensor_m_flow.port_a)
        annotation (Line(points={{60,-32},{38,-32}}, color={0,127,255}));
      connect(port_a, volume.port_a)
        annotation (Line(points={{-140,48},{-68,48}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-140,
                -100},{140,100}}),                                  graphics={
            Rectangle(
              extent={{-2.09756,2},{83.9024,-2}},
              lineColor={0,0,0},
              origin={-45.9024,-64},
              rotation=360,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-1.81329,5},{66.1867,-5}},
              lineColor={0,0,0},
              origin={-68.1867,-41},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-16,3},{16,-3}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={4,30},
              rotation=-90),
            Rectangle(
              extent={{-1.81332,3},{66.1869,-3}},
              lineColor={0,0,0},
              origin={-18.1867,-3},
              rotation=0,
              fillColor={135,135,135},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-70,46},{-22,34}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder),
            Polygon(
              points={{0,16},{0,-14},{30,-32},{30,36},{0,16}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{11,-8},{21,6}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="T"),
            Ellipse(
              extent={{46,12},{74,-14}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.4,3},{15.5,-3}},
              lineColor={0,0,0},
              origin={30.4272,-29},
              rotation=0,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.43805,2.7864},{15.9886,-2.7864}},
              lineColor={0,0,0},
              origin={45.2136,-41.989},
              rotation=90,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{32,-42},{60,-68}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.373344,2},{13.6267,-2}},
              lineColor={0,0,0},
              origin={18.3733,-56},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.487802,2},{19.5122,-2}},
              lineColor={0,0,0},
              origin={20,-38.488},
              rotation=-90,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.243902,2},{9.7562,-2}},
              lineColor={0,0,0},
              origin={-46,-62.244},
              rotation=-90,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.578156,2.1722},{23.1262,-2.1722}},
              lineColor={0,0,0},
              origin={21.4218,-39.828},
              rotation=180,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-4,-34},{8,-46}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{-2,-44},{-6,-48},{10,-48},{6,-44},{-2,-44}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder),
            Rectangle(
              extent={{-20,46},{6,34}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-30,49},{-12,31}},
              lineColor={95,95,95},
              fillColor={175,175,175},
              fillPattern=FillPattern.Sphere),
            Rectangle(
              extent={{-20,49},{-22,61}},
              lineColor={0,0,0},
              fillColor={95,95,95},
              fillPattern=FillPattern.VerticalCylinder),
            Rectangle(
              extent={{-30,63},{-12,61}},
              lineColor={0,0,0},
              fillColor={181,0,0},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-19,49},{-23,31}},
              lineColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder,
              fillColor={162,162,0}),
            Text(
              extent={{55,-10},{65,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="G"),
            Text(
              extent={{41,-62},{51,-48}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="C"),
            Polygon(
              points={{3,-37},{3,-43},{-1,-40},{3,-37}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255})}),                            Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-140,-100},{140,
                100}})),
        experiment(
          StopTime=86400,
          Interval=30,
          __Dymola_Algorithm="Esdirk45a"),
        Documentation(info="<html>
<p>A three-stage turbine rankine cycle with feedwater heating internal to the system</p>
<p>Three bypass ways exist using TBV (Turbine bypass valve), LPTBV1 (Low-Pressure Turbine bypass valve-1), and LPTBV2 (Low-Pressure Turbine bypass valve-2).</p>
</html>"));
    end SteamTurbine_L3_HTGR;

    model SteamTurbine_Basic_NoFeedHeat "Two stage BOP model"
      extends BaseClasses.Partial_SubSystem_C(
        redeclare replaceable
          ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
        redeclare replaceable ControlSystems.ED_Dummy ED,
        redeclare replaceable Data.TESTurbine data(
          p_condensor=7000,
          V_FeedwaterMixVolume=10,
          V_Header=10,
          R_entry=8e4,
          valve_SHS_mflow=30,
          valve_SHS_dp_nominal=1200000,
          valve_TCV_LPT_mflow=30,
          valve_TCV_LPT_dp_nominal=10000,
          InternalBypassValve_mflow_small=0,
          InternalBypassValve_p_spring=15000000,
          InternalBypassValve_K=40,
          LPT_p_in_nominal=1200000,
          LPT_p_exit_nominal=7000,
          LPT_T_in_nominal=491.15,
          LPT_nominal_mflow=26.83,
          LPT_efficiency=1,
          firstfeedpump_p_nominal=2000000,
          secondfeedpump_p_nominal=2000000));

      replaceable Data.IntermediateTurbineInitialisation init(
        FeedwaterMixVolume_p_start=3000000,
          FeedwaterMixVolume_h_start=2e6,
        InternalBypassValve_dp_start=3500000,
        InternalBypassValve_mflow_start=0.1,
        HPT_p_a_start=3000000,
        HPT_p_b_start=10000,
        HPT_T_a_start=523.15,
        HPT_T_b_start=333.15)
      annotation (Placement(transformation(extent={{68,120},{88,140}})));

      Fluid.Vessels.IdealCondenser Condenser(
        p= data.p_condensor,
        V_total=data.V_condensor,
        V_liquid_start=init.condensor_V_liquid_start)
        annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

      Electrical.Generator      generator1(J=data.generator_MoI)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={84,-92})));

      TRANSFORM.Electrical.Sensors.PowerSensor sensorW
        annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

      Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
        annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

      TRANSFORM.Fluid.Machines.SteamTurbine LPT(
        nUnits=1,
        energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
        eta_mech=data.LPT_efficiency,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
            ( eta_nominal=0.9),
        p_a_start=init.LPT_p_a_start,
        p_b_start=init.LPT_p_b_start,
        T_a_start=init.LPT_T_a_start,
        T_b_start=init.LPT_T_b_start,
        m_flow_nominal=data.LPT_nominal_mflow,
        p_inlet_nominal=data.LPT_p_in_nominal,
        p_outlet_nominal=data.LPT_p_exit_nominal,
        T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=90,
            origin={46,-40})));
      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T3(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={134,72})));
      TRANSFORM.Fluid.Valves.ValveLinear TCV_LPT(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=data.valve_TCV_LPT_dp_nominal,
        m_flow_nominal=data.valve_TCV_LPT_mflow) annotation (Placement(
            transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={104,72})));
      TRANSFORM.Fluid.Valves.ValveLinear Discharge_OnOff(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=100000,
        m_flow_nominal=26) annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={126,-146})));
      TRANSFORM.Fluid.Machines.Pump_Controlled firstfeedpump1(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p_a_start=10000,
        p_b_start=1100000,
        N_nominal=1500,
        dp_nominal=1200000,
        m_flow_nominal=26,
        controlType="RPM",
        use_port=true)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=0,
            origin={94,-142})));
      TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
            Modelica.Media.Water.StandardWater, redeclare function iconUnit =
            TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                           annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={-124,60})));
    initial equation

    equation

      connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
              {84,-106},{104,-106},{104,-48},{110,-48}},
                                                       color={255,0,0}));
      connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
              -48},{146,0},{160,0}},                     color={255,0,0}));
      connect(sensorBus.Power, sensorW.W) annotation (Line(
          points={{-30,100},{120,100},{120,-37}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
              {84,-76},{84,-82}},                      color={0,0,0}));
      connect(LPT.shaft_b, powerSensor.flange_a)
        annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
      connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
              {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
              127,255}));
      connect(sensorBus.SHS_Return_T, sensor_T3.T) annotation (Line(
          points={{-30,100},{-30,74},{88,74},{88,58},{134,58},{134,68.4}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TCV_SHS, TCV_LPT.opening) annotation (Line(
          points={{30,100},{104,100},{104,78.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(TCV_LPT.port_b, sensor_T3.port_b)
        annotation (Line(points={{112,72},{124,72}}, color={0,127,255}));
      connect(actuatorBus.Discharge_OnOff_Throttle, Discharge_OnOff.opening)
        annotation (Line(
          points={{30,100},{186,100},{186,-132},{126,-132},{126,-139.6}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(firstfeedpump1.port_a, Condenser.port_b) annotation (Line(points={{84,-142},
              {78,-142},{78,-128},{146,-128},{146,-112}},       color={0,127,255}));
      connect(firstfeedpump1.port_b, Discharge_OnOff.port_a) annotation (Line(
            points={{104,-142},{112,-142},{112,-146},{118,-146}}, color={0,127,255}));
      connect(TCV_LPT.port_a, LPT.portHP)
        annotation (Line(points={{96,72},{52,72},{52,-30}}, color={0,127,255}));
      connect(Discharge_OnOff.port_b, port_b) annotation (Line(points={{134,-146},{
              144,-146},{144,-160},{-144,-160},{-144,-40},{-160,-40}}, color={0,127,
              255}));
      connect(actuatorBus.Feed_Pump_Speed, firstfeedpump1.inputSignal) annotation (
          Line(
          points={{30,100},{112,100},{112,102},{206,102},{206,-138},{114,-138},{114,
              -132},{94,-132},{94,-135}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(sensorBus.Steam_Pressure,sensor_p. p) annotation (Line(
          points={{-30,100},{-30,60},{-130,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(port_a, sensor_p.port) annotation (Line(points={{-160,40},{-124,40},{
              -124,50}}, color={0,127,255}));
      connect(sensor_p.port, sensor_T3.port_a) annotation (Line(points={{-124,50},{
              -124,40},{150,40},{150,72},{144,72}}, color={0,127,255}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-24,2},{24,-2}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={20,-42},
              rotation=180),
            Rectangle(
              extent={{-11.5,3},{11.5,-3}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-1,-28.5},
              rotation=90),
            Rectangle(
              extent={{-4.5,2.5},{4.5,-2.5}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-8.5,-31.5},
              rotation=360),
            Rectangle(
              extent={{-0.800004,5},{29.1996,-5}},
              lineColor={0,0,0},
              origin={-71.1996,-49},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-18,3},{18,-3}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-39,28},
              rotation=-90),
            Rectangle(
              extent={{-1.81332,3},{66.1869,-3}},
              lineColor={0,0,0},
              origin={-18.1867,-3},
              rotation=0,
              fillColor={135,135,135},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-70,46},{-36,34}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder),
            Polygon(
              points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-31,-10},{-21,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="HPT"),
            Ellipse(
              extent={{46,12},{74,-14}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.601938,3},{23.3253,-3}},
              lineColor={0,0,0},
              origin={22.6019,-29},
              rotation=0,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.43805,2.7864},{15.9886,-2.7864}},
              lineColor={0,0,0},
              origin={45.2136,-41.989},
              rotation=90,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{32,-42},{60,-68}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.373344,2},{13.6267,-2}},
              lineColor={0,0,0},
              origin={18.3733,-56},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.341463,2},{13.6587,-2}},
              lineColor={0,0,0},
              origin={20,-44.3415},
              rotation=-90,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-1.41463,2.0001},{56.5851,-2.0001}},
              lineColor={0,0,0},
              origin={18.5851,-46.0001},
              rotation=180,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-46,-40},{-34,-52}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder),
            Ellipse(
              extent={{-56,49},{-38,31}},
              lineColor={95,95,95},
              fillColor={175,175,175},
              fillPattern=FillPattern.Sphere),
            Rectangle(
              extent={{-46,49},{-48,61}},
              lineColor={0,0,0},
              fillColor={95,95,95},
              fillPattern=FillPattern.VerticalCylinder),
            Rectangle(
              extent={{-56,63},{-38,61}},
              lineColor={0,0,0},
              fillColor={181,0,0},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-45,49},{-49,31}},
              lineColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder,
              fillColor={162,162,0}),
            Text(
              extent={{55,-10},{65,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="G"),
            Text(
              extent={{41,-62},{51,-48}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="C"),
            Polygon(
              points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Polygon(
              points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{7,-10},{17,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="LPT"),
            Rectangle(
              extent={{-4,-40},{22,-48}},
              lineColor={238,46,47},
              pattern=LinePattern.None,
              lineThickness=1,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Line(
              points={{-4,-44},{22,-44}},
              color={255,0,0},
              thickness=1)}),                                        Diagram(
            coordinateSystem(preserveAspectRatio=false)),
        experiment(
          StopTime=1000,
          Interval=10,
          __Dymola_Algorithm="Esdirk45a"),
        Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
    end SteamTurbine_Basic_NoFeedHeat;

    model SteamTurbine_OpenFeedHeat_DivertPowerControl "Two stage BOP model"
      extends BaseClasses.Partial_SubSystem_C(
        redeclare replaceable
          ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
        redeclare replaceable ControlSystems.ED_Dummy ED,
        redeclare replaceable Data.TESTurbine data(
          p_condensor=8000,
          V_FeedwaterMixVolume=25,
          V_Header=10,
          valve_TCV_mflow=67,
          valve_TCV_dp_nominal=100000,
          valve_SHS_mflow=30,
          valve_SHS_dp_nominal=600000,
          valve_TCV_LPT_mflow=30,
          valve_TCV_LPT_dp_nominal=10000,
          InternalBypassValve_mflow_small=0,
          InternalBypassValve_p_spring=15000000,
          InternalBypassValve_K=40,
          HPT_p_exit_nominal=700000,
          HPT_T_in_nominal=579.15,
          HPT_nominal_mflow=67,
          HPT_efficiency=1,
          LPT_p_in_nominal=700000,
          LPT_p_exit_nominal=7000,
          LPT_T_in_nominal=523.15,
          LPT_nominal_mflow=20,
          LPT_efficiency=1,
          firstfeedpump_p_nominal=2500000,
          secondfeedpump_p_nominal=2000000));

      replaceable Data.IntermediateTurbineInitialisation init(
        FeedwaterMixVolume_p_start=3000000,
          FeedwaterMixVolume_h_start=2e6,
        InternalBypassValve_dp_start=3500000,
        InternalBypassValve_mflow_start=0.1,
        HPT_p_a_start=3000000,
        HPT_p_b_start=10000,
        HPT_T_a_start=523.15,
        HPT_T_b_start=333.15)
      annotation (Placement(transformation(extent={{68,120},{88,140}})));

      Fluid.Vessels.IdealCondenser Condenser(
        p= data.p_condensor,
        V_total=data.V_condensor,
        V_liquid_start=init.condensor_V_liquid_start)
        annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T1(redeclare package Medium =
            Modelica.Media.Water.StandardWater)                                    annotation (Placement(
            transformation(
            extent={{6,6},{-6,-6}},
            rotation=180,
            origin={22,40})));

      TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
            Modelica.Media.Water.StandardWater, redeclare function iconUnit =
            TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                           annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={-18,60})));

      TRANSFORM.Fluid.Valves.ValveLinear TCV(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=data.valve_TCV_dp_nominal,
        m_flow_nominal=data.valve_TCV_mflow)
                           annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={-4,40})));

      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T2(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-72,-42})));

      TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                               firstfeedpump(redeclare package
          Medium =
            Modelica.Media.Water.StandardWater,
        use_input=false,
        p_nominal=data.firstfeedpump_p_nominal,
        allowFlowReversal=false)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=0,
            origin={40,-128})));

      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
          redeclare package Medium = Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=90,
            origin={-24,-2})));

      TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p_start=init.FeedwaterMixVolume_p_start,
        use_T_start=true,
        T_start=421.15,
        h_start=init.FeedwaterMixVolume_h_start,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=data.V_FeedwaterMixVolume),
        nPorts_a=1,
        nPorts_b=3) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-30,-40})));

      Electrical.Generator      generator1(J=data.generator_MoI)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={84,-92})));

      TRANSFORM.Electrical.Sensors.PowerSensor sensorW
        annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
          redeclare package Medium = Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-132,40})));

      TRANSFORM.Fluid.Volumes.MixingVolume header(
        use_T_start=false,
        h_start=init.header_h_start,
        p_start=init.header_p_start,
        nPorts_a=1,
        nPorts_b=2,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=1),
        redeclare package Medium = Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

      TRANSFORM.Fluid.Machines.Pump                pump_SimpleMassFlow1(
        N_nominal=1500,
        dp_nominal=CS.data.p_steam,
        m_flow_nominal=data.controlledfeedpump_mflow_nominal,
        redeclare package Medium =
            Modelica.Media.Water.StandardWater,
        use_port=true)                                       annotation (
          Placement(transformation(
            extent={{-11,-11},{11,11}},
            rotation=180,
            origin={-109,-41})));

      TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p=data.p_boundary,
        T=data.T_boundary,
        nPorts=1)
        annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

      TRANSFORM.Fluid.Valves.ValveLinear PRV(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        dp_nominal=data.valve_TBV_dp_nominal,
        m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=180,
            origin={-128,74})));

      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T4(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={0,-128})));

      Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
        annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

      Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
            Modelica.Media.Water.StandardWater, m_flow)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
            iconTransformation(extent={{-74,-106},{-54,-86}})));

      TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=1000000,
        m_flow_nominal=15) annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={-74,22})));
      TRANSFORM.Fluid.Machines.SteamTurbine HPT(
        nUnits=1,
        energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
        eta_mech=data.HPT_efficiency,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
        p_a_start=init.HPT_p_a_start,
        p_b_start=init.HPT_p_b_start,
        T_a_start=init.HPT_T_a_start,
        T_b_start=init.HPT_T_b_start,
        m_flow_nominal=data.HPT_nominal_mflow,
        p_inlet_nominal=data.p_in_nominal,
        p_outlet_nominal=data.HPT_p_exit_nominal,
        T_nominal=data.HPT_T_in_nominal)
        annotation (Placement(transformation(extent={{32,24},{52,44}})));
      TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        V=data.V_tee,
        p_start=init.tee_p_start)
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=90,
            origin={90,4})));
      TRANSFORM.Fluid.Machines.SteamTurbine LPT(
        nUnits=1,
        energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
        eta_mech=data.LPT_efficiency,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
            ( eta_nominal=0.9),
        p_a_start=init.LPT_p_a_start,
        p_b_start=init.LPT_p_b_start,
        T_a_start=init.LPT_T_a_start,
        T_b_start=init.LPT_T_b_start,
        m_flow_nominal=data.LPT_nominal_mflow,
        p_inlet_nominal=data.LPT_p_in_nominal,
        p_outlet_nominal=data.LPT_p_exit_nominal,
        T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=90,
            origin={46,-40})));
      TRANSFORM.Fluid.Valves.ValveLinear SHS_charge_control(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=data.valve_SHS_dp_nominal,
        m_flow_nominal=data.valve_SHS_mflow) annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={-62,-102})));
      TRANSFORM.Fluid.Valves.ValveLinear Discharge_OnOff(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=100000000,
        m_flow_nominal=20) annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={126,-146})));
      TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow(redeclare package
          Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-136,-42})));
      Modelica.Blocks.Sources.Constant const(k=1)
        annotation (Placement(transformation(extent={{50,-156},{70,-136}})));
    initial equation

    equation

      connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
          points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
          points={{4,40},{16,40}},
          color={0,127,255},
          thickness=0.5));
      connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
          points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));

      connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
          points={{30.1,100.1},{-4,100.1},{-4,46.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensor_p.port, TCV.port_a)
        annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

      connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
              {84,-106},{104,-106},{104,-48},{110,-48}},
                                                       color={255,0,0}));
      connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
              -48},{146,0},{160,0}},                     color={255,0,0}));
      connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
          points={{-30,100},{-30,60},{-24,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(sensorBus.Power, sensorW.W) annotation (Line(
          points={{-30,100},{120,100},{120,-37}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(port_a, R_entry.port_a)
        annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
      connect(R_entry.port_b, header.port_a[1])
        annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                       color={0,127,255}));
      connect(header.port_b[1], TCV.port_a)
        annotation (Line(points={{-106,41.5},{-60,41.5},{-60,40},{-12,40}},
                                                      color={0,127,255}));
      connect(PRV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
              {-104,40},{-12,40}}, color={0,127,255}));
      connect(boundary.ports[1],PRV. port_b)
        annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
      connect(actuatorBus.TBV,PRV. opening) annotation (Line(
          points={{30,100},{-128,100},{-128,80.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{30,-128},
              {10,-128}},                              color={0,127,255}));
      connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
            points={{-98,-41},{-98,-42},{-82,-42}},                      color={0,
              127,255}));
      connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
              -112},{146,-128},{50,-128}},          color={0,127,255}));
      connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
              {84,-76},{84,-82}},                      color={0,0,0}));
      connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
            points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
      connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
        annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                        color={0,127,255}));
      connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
            points={{-24,-40},{-20,-40},{-20,-128},{-10,-128}},
            color={0,127,255}));
      connect(InternalBypass.port_a, header.port_b[2]) annotation (Line(points={{
              -82,22},{-94,22},{-94,24},{-106,24},{-106,42.5}}, color={0,127,255}));
      connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
            points={{-66,22},{-44,22},{-44,20},{-24,20},{-24,5}}, color={0,127,255}));
      connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
        annotation (Line(
          points={{30,100},{-74,100},{-74,28.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(HPT.shaft_b,LPT. shaft_a) annotation (Line(
          points={{52,34},{56,34},{56,-24},{46,-24},{46,-30}},
          color={0,0,0},
          pattern=LinePattern.Dash));
      connect(LPT.shaft_b, powerSensor.flange_a)
        annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
      connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
              {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
              127,255}));
      connect(sensor_T1.port_b, HPT.portHP) annotation (Line(points={{28,40},{32,40}},
                              color={0,127,255}));
      connect(HPT.portLP, tee.port_2) annotation (Line(points={{52,40},{72,40},{72,
              36},{90,36},{90,14}}, color={0,127,255}));
      connect(LPT.portHP, tee.port_1) annotation (Line(points={{52,-30},{66,-30},{
              66,-28},{90,-28},{90,-6}}, color={0,127,255}));
      connect(port_a1, SHS_charge_control.port_a) annotation (Line(points={{-92,
              -160},{-92,-102},{-70,-102}}, color={0,127,255}));
      connect(SHS_charge_control.port_b, FeedwaterMixVolume.port_b[3]) annotation (
          Line(points={{-54,-102},{-20,-102},{-20,-39.3333},{-24,-39.3333}}, color=
              {0,127,255}));
      connect(actuatorBus.SHS_throttle, SHS_charge_control.opening) annotation (
          Line(
          points={{30,100},{-90,100},{-90,-84},{-62,-84},{-62,-95.6}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.inputSignal)
        annotation (Line(
          points={{30,100},{-92,100},{-92,-56},{-109,-56},{-109,-48.7}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(port_b, sensor_m_flow.port_b) annotation (Line(points={{-160,-40},{
              -154,-40},{-154,-42},{-146,-42}}, color={0,127,255}));
      connect(pump_SimpleMassFlow1.port_b, sensor_m_flow.port_a) annotation (Line(
            points={{-120,-41},{-124,-41},{-124,-42},{-126,-42}}, color={0,127,255}));
      connect(sensorBus.Condensor_Output_mflow, sensor_m_flow.m_flow) annotation (
          Line(
          points={{-30,100},{-108,100},{-108,98},{-180,98},{-180,-68},{-136,-68},{
              -136,-45.6}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(const.y, Discharge_OnOff.opening) annotation (Line(points={{71,-146},
              {76,-146},{76,-132},{126,-132},{126,-139.6}}, color={0,0,127}));
      connect(Discharge_OnOff.port_a, firstfeedpump.port_a) annotation (Line(points=
             {{118,-146},{114,-146},{114,-128},{50,-128}}, color={0,127,255}));
      connect(Discharge_OnOff.port_b, tee.port_3)
        annotation (Line(points={{134,-146},{134,4},{100,4}}, color={0,127,255}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-24,2},{24,-2}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={20,-42},
              rotation=180),
            Rectangle(
              extent={{-11.5,3},{11.5,-3}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-1,-28.5},
              rotation=90),
            Rectangle(
              extent={{-4.5,2.5},{4.5,-2.5}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-8.5,-31.5},
              rotation=360),
            Rectangle(
              extent={{-0.800004,5},{29.1996,-5}},
              lineColor={0,0,0},
              origin={-71.1996,-49},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-18,3},{18,-3}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-39,28},
              rotation=-90),
            Rectangle(
              extent={{-1.81332,3},{66.1869,-3}},
              lineColor={0,0,0},
              origin={-18.1867,-3},
              rotation=0,
              fillColor={135,135,135},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-70,46},{-36,34}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder),
            Polygon(
              points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-31,-10},{-21,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="HPT"),
            Ellipse(
              extent={{46,12},{74,-14}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.601938,3},{23.3253,-3}},
              lineColor={0,0,0},
              origin={22.6019,-29},
              rotation=0,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.43805,2.7864},{15.9886,-2.7864}},
              lineColor={0,0,0},
              origin={45.2136,-41.989},
              rotation=90,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{32,-42},{60,-68}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.373344,2},{13.6267,-2}},
              lineColor={0,0,0},
              origin={18.3733,-56},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.341463,2},{13.6587,-2}},
              lineColor={0,0,0},
              origin={20,-44.3415},
              rotation=-90,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-1.41463,2.0001},{56.5851,-2.0001}},
              lineColor={0,0,0},
              origin={18.5851,-46.0001},
              rotation=180,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-46,-40},{-34,-52}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder),
            Ellipse(
              extent={{-56,49},{-38,31}},
              lineColor={95,95,95},
              fillColor={175,175,175},
              fillPattern=FillPattern.Sphere),
            Rectangle(
              extent={{-46,49},{-48,61}},
              lineColor={0,0,0},
              fillColor={95,95,95},
              fillPattern=FillPattern.VerticalCylinder),
            Rectangle(
              extent={{-56,63},{-38,61}},
              lineColor={0,0,0},
              fillColor={181,0,0},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-45,49},{-49,31}},
              lineColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder,
              fillColor={162,162,0}),
            Text(
              extent={{55,-10},{65,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="G"),
            Text(
              extent={{41,-62},{51,-48}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="C"),
            Polygon(
              points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Polygon(
              points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{7,-10},{17,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="LPT"),
            Rectangle(
              extent={{-4,-40},{22,-48}},
              lineColor={238,46,47},
              pattern=LinePattern.None,
              lineThickness=1,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Line(
              points={{-4,-44},{22,-44}},
              color={255,0,0},
              thickness=1)}),                                        Diagram(
            coordinateSystem(preserveAspectRatio=false)),
        experiment(
          StopTime=1000,
          Interval=10,
          __Dymola_Algorithm="Esdirk45a"),
        Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
    end SteamTurbine_OpenFeedHeat_DivertPowerControl;

    model SteamTurbine_OpenFeedHeat_DivertPowerControl_PowerBoostLoop
      "Two stage BOP model"
      extends BaseClasses.Partial_SubSystem_C(
        redeclare replaceable
          ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
        redeclare replaceable ControlSystems.ED_Dummy ED,
        redeclare replaceable Data.TESTurbine data(
          p_condensor=7000,
          V_FeedwaterMixVolume=25,
          V_Header=10,
          valve_TCV_mflow=67,
          valve_TCV_dp_nominal=100000,
          valve_SHS_mflow=30,
          valve_SHS_dp_nominal=1200000,
          valve_TCV_LPT_mflow=30,
          valve_TCV_LPT_dp_nominal=10000,
          InternalBypassValve_mflow_small=0,
          InternalBypassValve_p_spring=15000000,
          InternalBypassValve_K=40,
          HPT_efficiency=1,
          LPT_efficiency=1,
          firstfeedpump_p_nominal=2000000,
          secondfeedpump_p_nominal=2000000));

      replaceable Data.IntermediateTurbineInitialisation init(
        FeedwaterMixVolume_p_start=3000000,
          FeedwaterMixVolume_h_start=2e6,
        InternalBypassValve_dp_start=3500000,
        InternalBypassValve_mflow_start=0.1,
        HPT_p_a_start=3000000,
        HPT_p_b_start=10000,
        HPT_T_a_start=523.15,
        HPT_T_b_start=333.15)
      annotation (Placement(transformation(extent={{68,120},{88,140}})));

      Fluid.Vessels.IdealCondenser Condenser(
        p= data.p_condensor,
        V_total=data.V_condensor,
        V_liquid_start=init.condensor_V_liquid_start)
        annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T1(redeclare package Medium =
            Modelica.Media.Water.StandardWater)                                    annotation (Placement(
            transformation(
            extent={{6,6},{-6,-6}},
            rotation=180,
            origin={22,40})));

      TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
            Modelica.Media.Water.StandardWater, redeclare function iconUnit =
            TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                           annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={-18,60})));

      TRANSFORM.Fluid.Valves.ValveLinear TCV(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=data.valve_TCV_dp_nominal,
        m_flow_nominal=data.valve_TCV_mflow)
                           annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={-4,40})));

      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T2(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-72,-42})));

      TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                               firstfeedpump(redeclare package
          Medium =
            Modelica.Media.Water.StandardWater,
        use_input=false,
        p_nominal=data.firstfeedpump_p_nominal,
        allowFlowReversal=false)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=0,
            origin={40,-128})));

      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
          redeclare package Medium = Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=90,
            origin={-24,-2})));

      TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p_start=init.FeedwaterMixVolume_p_start,
        use_T_start=true,
        T_start=421.15,
        h_start=init.FeedwaterMixVolume_h_start,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=data.V_FeedwaterMixVolume),
        nPorts_a=1,
        nPorts_b=3) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-30,-40})));

      Electrical.Generator      generator1(J=data.generator_MoI)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={84,-92})));

      TRANSFORM.Electrical.Sensors.PowerSensor sensorW
        annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

      TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
          redeclare package Medium = Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-132,40})));

      TRANSFORM.Fluid.Volumes.MixingVolume header(
        use_T_start=false,
        h_start=init.header_h_start,
        p_start=init.header_p_start,
        nPorts_a=1,
        nPorts_b=2,
        redeclare model Geometry =
            TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
            (V=1),
        redeclare package Medium = Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

      TRANSFORM.Fluid.Machines.Pump                pump_SimpleMassFlow1(
        N_nominal=1500,
        dp_nominal=CS.data.p_steam,
        m_flow_nominal=data.controlledfeedpump_mflow_nominal,
        redeclare package Medium =
            Modelica.Media.Water.StandardWater,
        use_port=true)                                       annotation (
          Placement(transformation(
            extent={{-11,-11},{11,11}},
            rotation=180,
            origin={-109,-41})));

      TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p=data.p_boundary,
        T=data.T_boundary,
        nPorts=1)
        annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

      TRANSFORM.Fluid.Valves.ValveLinear PRV(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        dp_nominal=data.valve_TBV_dp_nominal,
        m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=180,
            origin={-128,74})));

      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T4(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={0,-128})));

      Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
        annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

      Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
            Modelica.Media.Water.StandardWater, m_flow)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
            iconTransformation(extent={{-74,-106},{-54,-86}})));

      TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=1500000,
        m_flow_nominal=15) annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={-74,22})));
      TRANSFORM.Fluid.Machines.SteamTurbine HPT(
        nUnits=1,
        energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
        eta_mech=data.HPT_efficiency,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
            ( eta_nominal=0.9),
        p_a_start=init.HPT_p_a_start,
        p_b_start=init.HPT_p_b_start,
        T_a_start=init.HPT_T_a_start,
        T_b_start=init.HPT_T_b_start,
        m_flow_nominal=data.HPT_nominal_mflow,
        p_inlet_nominal=data.p_in_nominal,
        p_outlet_nominal=data.HPT_p_exit_nominal,
        T_nominal=data.HPT_T_in_nominal)
        annotation (Placement(transformation(extent={{32,24},{52,44}})));
      TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        V=data.V_tee,
        p_start=init.tee_p_start)
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=90,
            origin={90,4})));
      TRANSFORM.Fluid.Machines.SteamTurbine LPT(
        nUnits=1,
        energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
        eta_mech=data.LPT_efficiency,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
            ( eta_nominal=0.9),
        p_a_start=init.LPT_p_a_start,
        p_b_start=init.LPT_p_b_start,
        T_a_start=init.LPT_T_a_start,
        T_b_start=init.LPT_T_b_start,
        m_flow_nominal=data.LPT_nominal_mflow,
        p_inlet_nominal=data.LPT_p_in_nominal,
        p_outlet_nominal=data.LPT_p_exit_nominal,
        T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=90,
            origin={46,-40})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a2(redeclare package Medium =
            Modelica.Media.Water.StandardWater, m_flow)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{150,62},{170,82}}),
            iconTransformation(extent={{88,58},{108,78}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b1(redeclare package Medium =
            Modelica.Media.Water.StandardWater, m_flow)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{150,-156},{170,-136}}),
            iconTransformation(extent={{88,-62},{108,-42}})));
      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T3(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={134,72})));
      TRANSFORM.Fluid.Valves.ValveLinear TCV_LPT(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=100,
        dp_nominal=data.valve_TCV_LPT_dp_nominal,
        m_flow_nominal=data.valve_TCV_LPT_mflow) annotation (Placement(
            transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={104,72})));
      TRANSFORM.Fluid.Valves.ValveLinear SHS_charge_control(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=data.valve_SHS_dp_nominal,
        m_flow_nominal=data.valve_SHS_mflow) annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={-62,-102})));
      TRANSFORM.Fluid.Valves.ValveLinear Discharge_OnOff(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=400000,
        m_flow_nominal=26) annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={126,-146})));
      TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                               firstfeedpump1(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        use_input=false,
        p_nominal=1400000,
        allowFlowReversal=false)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=0,
            origin={94,-148})));
      TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow(redeclare package
          Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-136,-42})));
    initial equation

    equation

      connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
          points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
          points={{4,40},{16,40}},
          color={0,127,255},
          thickness=0.5));
      connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
          points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));

      connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
          points={{30.1,100.1},{-4,100.1},{-4,46.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(sensor_p.port, TCV.port_a)
        annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

      connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
              {84,-106},{104,-106},{104,-48},{110,-48}},
                                                       color={255,0,0}));
      connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
              -48},{146,0},{160,0}},                     color={255,0,0}));
      connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
          points={{-30,100},{-30,60},{-24,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(sensorBus.Power, sensorW.W) annotation (Line(
          points={{-30,100},{120,100},{120,-37}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(port_a, R_entry.port_a)
        annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
      connect(R_entry.port_b, header.port_a[1])
        annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                       color={0,127,255}));
      connect(header.port_b[1], TCV.port_a)
        annotation (Line(points={{-106,41.5},{-60,41.5},{-60,40},{-12,40}},
                                                      color={0,127,255}));
      connect(PRV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
              {-104,40},{-12,40}}, color={0,127,255}));
      connect(boundary.ports[1],PRV. port_b)
        annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
      connect(actuatorBus.TBV,PRV. opening) annotation (Line(
          points={{30,100},{-128,100},{-128,80.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{30,-128},
              {10,-128}},                              color={0,127,255}));
      connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
            points={{-98,-41},{-98,-42},{-82,-42}},                      color={0,
              127,255}));
      connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
              -112},{146,-128},{50,-128}},          color={0,127,255}));
      connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
              {84,-76},{84,-82}},                      color={0,0,0}));
      connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
            points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
      connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
        annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                        color={0,127,255}));
      connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
            points={{-24,-40},{-20,-40},{-20,-128},{-10,-128}},
            color={0,127,255}));
      connect(InternalBypass.port_a, header.port_b[2]) annotation (Line(points={{
              -82,22},{-94,22},{-94,24},{-106,24},{-106,42.5}}, color={0,127,255}));
      connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
            points={{-66,22},{-44,22},{-44,20},{-24,20},{-24,5}}, color={0,127,255}));
      connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
        annotation (Line(
          points={{30,100},{-74,100},{-74,28.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(HPT.shaft_b,LPT. shaft_a) annotation (Line(
          points={{52,34},{56,34},{56,-24},{46,-24},{46,-30}},
          color={0,0,0},
          pattern=LinePattern.Dash));
      connect(LPT.shaft_b, powerSensor.flange_a)
        annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
      connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
              {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
              127,255}));
      connect(sensor_T1.port_b, HPT.portHP) annotation (Line(points={{28,40},{32,40}},
                              color={0,127,255}));
      connect(HPT.portLP, tee.port_2) annotation (Line(points={{52,40},{72,40},{72,
              36},{90,36},{90,14}}, color={0,127,255}));
      connect(LPT.portHP, tee.port_1) annotation (Line(points={{52,-30},{66,-30},{
              66,-28},{90,-28},{90,-6}}, color={0,127,255}));
      connect(sensorBus.SHS_Return_T, sensor_T3.T) annotation (Line(
          points={{-30,100},{-30,74},{88,74},{88,58},{134,58},{134,68.4}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TCV_SHS, TCV_LPT.opening) annotation (Line(
          points={{30,100},{104,100},{104,78.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(port_a1, SHS_charge_control.port_a) annotation (Line(points={{-92,
              -160},{-92,-102},{-70,-102}}, color={0,127,255}));
      connect(SHS_charge_control.port_b, FeedwaterMixVolume.port_b[3]) annotation (
          Line(points={{-54,-102},{-20,-102},{-20,-39.3333},{-24,-39.3333}}, color=
              {0,127,255}));
      connect(actuatorBus.SHS_throttle, SHS_charge_control.opening) annotation (
          Line(
          points={{30,100},{-90,100},{-90,-84},{-62,-84},{-62,-95.6}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(TCV_LPT.port_b, sensor_T3.port_b)
        annotation (Line(points={{112,72},{124,72}}, color={0,127,255}));
      connect(sensor_T3.port_a, port_a2)
        annotation (Line(points={{144,72},{160,72}}, color={0,127,255}));
      connect(TCV_LPT.port_a, tee.port_3) annotation (Line(points={{96,72},{90,72},
              {90,52},{104,52},{104,4},{100,4}}, color={0,127,255}));
      connect(Discharge_OnOff.port_b, port_b1)
        annotation (Line(points={{134,-146},{160,-146}}, color={0,127,255}));
      connect(actuatorBus.Discharge_OnOff_Throttle, Discharge_OnOff.opening)
        annotation (Line(
          points={{30,100},{186,100},{186,-132},{126,-132},{126,-139.6}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(firstfeedpump1.port_a, Condenser.port_b) annotation (Line(points={{84,
              -148},{78,-148},{78,-128},{146,-128},{146,-112}}, color={0,127,255}));
      connect(firstfeedpump1.port_b, Discharge_OnOff.port_a) annotation (Line(
            points={{104,-148},{112,-148},{112,-146},{118,-146}}, color={0,127,255}));
      connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.inputSignal)
        annotation (Line(
          points={{30,100},{-92,100},{-92,-56},{-109,-56},{-109,-48.7}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(port_b, sensor_m_flow.port_b) annotation (Line(points={{-160,-40},{
              -154,-40},{-154,-42},{-146,-42}}, color={0,127,255}));
      connect(pump_SimpleMassFlow1.port_b, sensor_m_flow.port_a) annotation (Line(
            points={{-120,-41},{-124,-41},{-124,-42},{-126,-42}}, color={0,127,255}));
      connect(sensorBus.Condensor_Output_mflow, sensor_m_flow.m_flow) annotation (
          Line(
          points={{-30,100},{-108,100},{-108,98},{-180,98},{-180,-68},{-136,-68},{
              -136,-45.6}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-24,2},{24,-2}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={20,-42},
              rotation=180),
            Rectangle(
              extent={{-11.5,3},{11.5,-3}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-1,-28.5},
              rotation=90),
            Rectangle(
              extent={{-4.5,2.5},{4.5,-2.5}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-8.5,-31.5},
              rotation=360),
            Rectangle(
              extent={{-0.800004,5},{29.1996,-5}},
              lineColor={0,0,0},
              origin={-71.1996,-49},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-18,3},{18,-3}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-39,28},
              rotation=-90),
            Rectangle(
              extent={{-1.81332,3},{66.1869,-3}},
              lineColor={0,0,0},
              origin={-18.1867,-3},
              rotation=0,
              fillColor={135,135,135},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-70,46},{-36,34}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder),
            Polygon(
              points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-31,-10},{-21,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="HPT"),
            Ellipse(
              extent={{46,12},{74,-14}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.601938,3},{23.3253,-3}},
              lineColor={0,0,0},
              origin={22.6019,-29},
              rotation=0,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.43805,2.7864},{15.9886,-2.7864}},
              lineColor={0,0,0},
              origin={45.2136,-41.989},
              rotation=90,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{32,-42},{60,-68}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.373344,2},{13.6267,-2}},
              lineColor={0,0,0},
              origin={18.3733,-56},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.341463,2},{13.6587,-2}},
              lineColor={0,0,0},
              origin={20,-44.3415},
              rotation=-90,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-1.41463,2.0001},{56.5851,-2.0001}},
              lineColor={0,0,0},
              origin={18.5851,-46.0001},
              rotation=180,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-46,-40},{-34,-52}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder),
            Ellipse(
              extent={{-56,49},{-38,31}},
              lineColor={95,95,95},
              fillColor={175,175,175},
              fillPattern=FillPattern.Sphere),
            Rectangle(
              extent={{-46,49},{-48,61}},
              lineColor={0,0,0},
              fillColor={95,95,95},
              fillPattern=FillPattern.VerticalCylinder),
            Rectangle(
              extent={{-56,63},{-38,61}},
              lineColor={0,0,0},
              fillColor={181,0,0},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-45,49},{-49,31}},
              lineColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder,
              fillColor={162,162,0}),
            Text(
              extent={{55,-10},{65,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="G"),
            Text(
              extent={{41,-62},{51,-48}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="C"),
            Polygon(
              points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Polygon(
              points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{7,-10},{17,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="LPT"),
            Rectangle(
              extent={{-4,-40},{22,-48}},
              lineColor={238,46,47},
              pattern=LinePattern.None,
              lineThickness=1,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Line(
              points={{-4,-44},{22,-44}},
              color={255,0,0},
              thickness=1)}),                                        Diagram(
            coordinateSystem(preserveAspectRatio=false)),
        experiment(
          StopTime=1000,
          Interval=10,
          __Dymola_Algorithm="Esdirk45a"),
        Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
    end SteamTurbine_OpenFeedHeat_DivertPowerControl_PowerBoostLoop;

    model SteamTurbine_Basic_DirectCoupling "Two stage BOP model"
      extends BaseClasses.Partial_SubSystem_C(
        redeclare replaceable
          ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
        redeclare replaceable ControlSystems.ED_Dummy ED,
        redeclare replaceable Data.TESTurbine data(
          p_condensor=7000,
          V_FeedwaterMixVolume=10,
          V_Header=10,
          R_entry=8e4,
          valve_SHS_mflow=30,
          valve_SHS_dp_nominal=1200000,
          valve_TCV_LPT_mflow=30,
          valve_TCV_LPT_dp_nominal=10000,
          InternalBypassValve_mflow_small=0,
          InternalBypassValve_p_spring=15000000,
          InternalBypassValve_K=40,
          LPT_p_in_nominal=1200000,
          LPT_p_exit_nominal=7000,
          LPT_T_in_nominal=491.15,
          LPT_nominal_mflow=26.83,
          LPT_efficiency=1,
          firstfeedpump_p_nominal=2000000,
          secondfeedpump_p_nominal=2000000));

      replaceable Data.IntermediateTurbineInitialisation init(
        FeedwaterMixVolume_p_start=3000000,
          FeedwaterMixVolume_h_start=2e6,
        InternalBypassValve_dp_start=3500000,
        InternalBypassValve_mflow_start=0.1,
        HPT_p_a_start=3000000,
        HPT_p_b_start=10000,
        HPT_T_a_start=523.15,
        HPT_T_b_start=333.15)
      annotation (Placement(transformation(extent={{68,120},{88,140}})));

      Fluid.Vessels.IdealCondenser Condenser(
        p= data.p_condensor,
        V_total=data.V_condensor,
        V_liquid_start=init.condensor_V_liquid_start)
        annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

      Electrical.Generator      generator1(J=data.generator_MoI)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={84,-92})));

      TRANSFORM.Electrical.Sensors.PowerSensor sensorW
        annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

      Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
        annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

      TRANSFORM.Fluid.Machines.SteamTurbine LPT(
        nUnits=1,
        energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
        eta_mech=data.LPT_efficiency,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
            ( eta_nominal=0.9),
        p_a_start=init.LPT_p_a_start,
        p_b_start=init.LPT_p_b_start,
        T_a_start=init.LPT_T_a_start,
        T_b_start=init.LPT_T_b_start,
        m_flow_nominal=data.LPT_nominal_mflow,
        p_inlet_nominal=data.LPT_p_in_nominal,
        p_outlet_nominal=data.LPT_p_exit_nominal,
        T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=90,
            origin={46,-40})));
      TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                           sensor_T3(redeclare package Medium =
            Modelica.Media.Water.StandardWater)            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={134,72})));
      TRANSFORM.Fluid.Valves.ValveLinear TCV_LPT(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=data.valve_TCV_LPT_dp_nominal,
        m_flow_nominal=data.valve_TCV_LPT_mflow) annotation (Placement(
            transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={104,72})));
      TRANSFORM.Fluid.Valves.ValveLinear Discharge_OnOff(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        m_flow_start=400,
        dp_nominal=100000,
        m_flow_nominal=30) annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={126,-146})));
      TRANSFORM.Fluid.Machines.Pump_Controlled firstfeedpump1(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p_a_start=10000,
        p_b_start=1100000,
        N_nominal=1500,
        dp_nominal=1200000,
        m_flow_nominal=26,
        controlType="RPM",
        use_port=true)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=0,
            origin={94,-142})));
      TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
            Modelica.Media.Water.StandardWater, redeclare function iconUnit =
            TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                           annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={-124,60})));
    initial equation

    equation

      connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
              {84,-106},{104,-106},{104,-48},{110,-48}},
                                                       color={255,0,0}));
      connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
              -48},{146,0},{160,0}},                     color={255,0,0}));
      connect(sensorBus.Power, sensorW.W) annotation (Line(
          points={{-30,100},{120,100},{120,-37}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
              {84,-76},{84,-82}},                      color={0,0,0}));
      connect(LPT.shaft_b, powerSensor.flange_a)
        annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
      connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
              {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
              127,255}));
      connect(sensorBus.SHS_Return_T, sensor_T3.T) annotation (Line(
          points={{-30,100},{-30,74},{88,74},{88,58},{134,58},{134,68.4}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,-6},{-3,-6}},
          horizontalAlignment=TextAlignment.Right));
      connect(actuatorBus.TCV_SHS, TCV_LPT.opening) annotation (Line(
          points={{30,100},{104,100},{104,78.4}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(TCV_LPT.port_b, sensor_T3.port_b)
        annotation (Line(points={{112,72},{124,72}}, color={0,127,255}));
      connect(actuatorBus.Discharge_OnOff_Throttle, Discharge_OnOff.opening)
        annotation (Line(
          points={{30,100},{186,100},{186,-132},{126,-132},{126,-139.6}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5));
      connect(firstfeedpump1.port_a, Condenser.port_b) annotation (Line(points={{84,-142},
              {78,-142},{78,-128},{146,-128},{146,-112}},       color={0,127,255}));
      connect(firstfeedpump1.port_b, Discharge_OnOff.port_a) annotation (Line(
            points={{104,-142},{112,-142},{112,-146},{118,-146}}, color={0,127,255}));
      connect(TCV_LPT.port_a, LPT.portHP)
        annotation (Line(points={{96,72},{52,72},{52,-30}}, color={0,127,255}));
      connect(Discharge_OnOff.port_b, port_b) annotation (Line(points={{134,-146},{
              144,-146},{144,-160},{-144,-160},{-144,-40},{-160,-40}}, color={0,127,
              255}));
      connect(actuatorBus.Feed_Pump_Speed, firstfeedpump1.inputSignal) annotation (
          Line(
          points={{30,100},{112,100},{112,102},{206,102},{206,-138},{114,-138},{114,
              -132},{94,-132},{94,-135}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(sensorBus.Steam_Pressure,sensor_p. p) annotation (Line(
          points={{-30,100},{-30,60},{-130,60}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(port_a, sensor_p.port) annotation (Line(points={{-160,40},{-124,40},{
              -124,50}}, color={0,127,255}));
      connect(sensor_p.port, sensor_T3.port_a) annotation (Line(points={{-124,50},{
              -124,40},{150,40},{150,72},{144,72}}, color={0,127,255}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-24,2},{24,-2}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={20,-42},
              rotation=180),
            Rectangle(
              extent={{-11.5,3},{11.5,-3}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-1,-28.5},
              rotation=90),
            Rectangle(
              extent={{-4.5,2.5},{4.5,-2.5}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-8.5,-31.5},
              rotation=360),
            Rectangle(
              extent={{-0.800004,5},{29.1996,-5}},
              lineColor={0,0,0},
              origin={-71.1996,-49},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-18,3},{18,-3}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-39,28},
              rotation=-90),
            Rectangle(
              extent={{-1.81332,3},{66.1869,-3}},
              lineColor={0,0,0},
              origin={-18.1867,-3},
              rotation=0,
              fillColor={135,135,135},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-70,46},{-36,34}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder),
            Polygon(
              points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-31,-10},{-21,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="HPT"),
            Ellipse(
              extent={{46,12},{74,-14}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.601938,3},{23.3253,-3}},
              lineColor={0,0,0},
              origin={22.6019,-29},
              rotation=0,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.43805,2.7864},{15.9886,-2.7864}},
              lineColor={0,0,0},
              origin={45.2136,-41.989},
              rotation=90,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{32,-42},{60,-68}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.373344,2},{13.6267,-2}},
              lineColor={0,0,0},
              origin={18.3733,-56},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.341463,2},{13.6587,-2}},
              lineColor={0,0,0},
              origin={20,-44.3415},
              rotation=-90,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-1.41463,2.0001},{56.5851,-2.0001}},
              lineColor={0,0,0},
              origin={18.5851,-46.0001},
              rotation=180,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-46,-40},{-34,-52}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder),
            Ellipse(
              extent={{-56,49},{-38,31}},
              lineColor={95,95,95},
              fillColor={175,175,175},
              fillPattern=FillPattern.Sphere),
            Rectangle(
              extent={{-46,49},{-48,61}},
              lineColor={0,0,0},
              fillColor={95,95,95},
              fillPattern=FillPattern.VerticalCylinder),
            Rectangle(
              extent={{-56,63},{-38,61}},
              lineColor={0,0,0},
              fillColor={181,0,0},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-45,49},{-49,31}},
              lineColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder,
              fillColor={162,162,0}),
            Text(
              extent={{55,-10},{65,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="G"),
            Text(
              extent={{41,-62},{51,-48}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="C"),
            Polygon(
              points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Polygon(
              points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{7,-10},{17,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="LPT"),
            Rectangle(
              extent={{-4,-40},{22,-48}},
              lineColor={238,46,47},
              pattern=LinePattern.None,
              lineThickness=1,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Line(
              points={{-4,-44},{22,-44}},
              color={255,0,0},
              thickness=1)}),                                        Diagram(
            coordinateSystem(preserveAspectRatio=false)),
        experiment(
          StopTime=1000,
          Interval=10,
          __Dymola_Algorithm="Esdirk45a"),
        Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
    end SteamTurbine_Basic_DirectCoupling;

    model SteamTurbine_Basic_NoFeedHeat_mFlow_Control "Two stage BOP model"

      // Modified from

      extends
        NHES.Systems.BalanceOfPlant.RankineCycle.BaseClasses.Partial_SubSystem_C(
        redeclare replaceable
          NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp
          CS,
        redeclare replaceable
          NHES.Systems.BalanceOfPlant.RankineCycle.ControlSystems.ED_Dummy ED,
        redeclare replaceable
          NHES.Systems.BalanceOfPlant.RankineCycle.Data.TESTurbine data(
          p_condensor=7000,
          V_FeedwaterMixVolume=10,
          V_Header=10,
          R_entry=8e4,
          valve_SHS_mflow=30,
          valve_SHS_dp_nominal=1200000,
          valve_TCV_LPT_mflow=30,
          valve_TCV_LPT_dp_nominal=10000,
          InternalBypassValve_mflow_small=0,
          InternalBypassValve_p_spring=15000000,
          InternalBypassValve_K=40,
          LPT_p_in_nominal=1200000,
          LPT_p_exit_nominal=7000,
          LPT_T_in_nominal=491.15,
          LPT_nominal_mflow=27.4,
          LPT_efficiency=1,
          firstfeedpump_p_nominal=2000000,
          secondfeedpump_p_nominal=2000000));

      replaceable
        NHES.Systems.BalanceOfPlant.RankineCycle.Data.IntermediateTurbineInitialisation
        init(
        FeedwaterMixVolume_p_start=3000000,
        FeedwaterMixVolume_h_start=2e6,
        InternalBypassValve_dp_start=3500000,
        InternalBypassValve_mflow_start=0.1,
        HPT_p_a_start=3000000,
        HPT_p_b_start=10000,
        HPT_T_a_start=523.15,
        HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

      NHES.Fluid.Vessels.IdealCondenser Condenser(
        p=data.p_condensor,
        V_total=data.V_condensor,
        V_liquid_start=init.condensor_V_liquid_start)
        annotation (Placement(transformation(extent={{20,-24},{-4,0}})));

      NHES.Electrical.Generator generator1(J=data.generator_MoI) annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={90,20})));

      TRANSFORM.Electrical.Sensors.PowerSensor sensorW
        annotation (Placement(transformation(extent={{110,10},{130,30}})));

      Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
        annotation (Placement(transformation(extent={{40,30},{60,10}})));

      TRANSFORM.Fluid.Machines.SteamTurbine LPT(
        nUnits=1,
        energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
        eta_mech=data.LPT_efficiency,
        redeclare model Eta_wetSteam =
            TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
            ( eta_nominal=0.9),
        p_a_start=init.LPT_p_a_start,
        p_b_start=init.LPT_p_b_start,
        T_a_start=init.LPT_T_a_start,
        T_b_start=init.LPT_T_b_start,
        m_flow_nominal=data.LPT_nominal_mflow,
        p_inlet_nominal=data.LPT_p_in_nominal,
        p_outlet_nominal=data.LPT_p_exit_nominal,
        T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={0,26})));
      TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
            Modelica.Media.Water.StandardWater, redeclare function iconUnit =
            TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                           annotation (Placement(
            transformation(
            extent={{-86,34},{-66,54}},
            rotation=0)));
      NHES.Fluid.Sensors.stateSensor stateSensor1(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-18,-84},{-44,-56}})));
      NHES.Fluid.Sensors.stateSensor stateSensor2(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-132,6},{-108,34}})));
      NHES.Fluid.Sensors.stateSensor stateSensor3(redeclare package Medium =
            Modelica.Media.Water.StandardWater)
        annotation (Placement(transformation(extent={{-34,6},{-10,34}})));
      TRANSFORM.Fluid.Machines.Pump_Controlled firstfeedpump1(
        redeclare package Medium = Modelica.Media.Water.StandardWater,
        p_a_start=10000,
        p_b_start=1100000,
        redeclare model FlowChar =
            TRANSFORM.Fluid.Machines.BaseClasses.PumpCharacteristics.Flow.PerformanceCurve,
        redeclare model EfficiencyChar =
            TRANSFORM.Fluid.Machines.BaseClasses.PumpCharacteristics.Efficiency.Constant,
        N_nominal=1500,
        dp_nominal=1200000,
        m_flow_nominal=26,
        controlType="m_flow",
        use_port=true)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=0,
            origin={54,-64})));

    initial equation

    equation

      connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{100,20},
              {110,20}},                               color={255,0,0}));
      connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,20},{
              144,20},{144,0},{160,0}},                  color={255,0,0}));
      connect(sensorBus.Power, sensorW.W) annotation (Line(
          points={{-30,100},{-30,74},{120,74},{120,31}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-3,6},{-3,6}},
          horizontalAlignment=TextAlignment.Right));
      connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{60,20},
              {80,20}},                                color={0,0,0}));
      connect(LPT.shaft_b, powerSensor.flange_a)
        annotation (Line(points={{10,26},{32,26},{32,20},{40,20}},
                                                              color={0,0,0}));
      connect(sensorBus.Steam_Pressure,sensor_p. p) annotation (Line(
          points={{-30,100},{-30,38},{-60,38},{-60,44},{-70,44}},
          color={239,82,82},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(Condenser.port_a, LPT.portLP) annotation (Line(points={{16.4,
              -8.88178e-16},{16.4,20},{10,20}},
                                     color={0,127,255}));
      connect(stateSensor1.port_b, port_b) annotation (Line(points={{-44,-70},{
              -144,-70},{-144,-40},{-160,-40}}, color={0,127,255}));
      connect(port_a, stateSensor2.port_a) annotation (Line(points={{-160,40},{
              -136,40},{-136,20},{-132,20}}, color={0,127,255}));
      connect(LPT.portHP, stateSensor3.port_b)
        annotation (Line(points={{-10,20},{-10,20}}, color={0,127,255}));
      connect(sensor_p.port, stateSensor3.port_a)
        annotation (Line(points={{-76,34},{-76,20},{-34,20}},
                                                     color={0,127,255}));
      connect(Condenser.port_b, firstfeedpump1.port_a) annotation (Line(points=
              {{8,-24},{8,-50},{68,-50},{68,-64},{64,-64}}, color={0,127,255}));
      connect(stateSensor1.port_a, firstfeedpump1.port_b) annotation (Line(
            points={{-18,-70},{38,-70},{38,-64},{44,-64}}, color={0,127,255}));
      connect(actuatorBus.Feed_Pump_mFlow, firstfeedpump1.inputSignal)
        annotation (Line(
          points={{30,100},{30,-48},{54,-48},{54,-57}},
          color={111,216,99},
          pattern=LinePattern.Dash,
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}},
          horizontalAlignment=TextAlignment.Right));
      connect(stateSensor2.port_b, stateSensor3.port_a)
        annotation (Line(points={{-108,20},{-34,20}}, color={0,127,255}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-160,
                -140},{160,140}}),                                graphics={
            Rectangle(
              extent={{-24,2},{24,-2}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={20,-42},
              rotation=180),
            Rectangle(
              extent={{-11.5,3},{11.5,-3}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-1,-28.5},
              rotation=90),
            Rectangle(
              extent={{-4.5,2.5},{4.5,-2.5}},
              lineColor={0,0,0},
              fillColor={64,164,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-8.5,-31.5},
              rotation=360),
            Rectangle(
              extent={{-0.800004,5},{29.1996,-5}},
              lineColor={0,0,0},
              origin={-71.1996,-49},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-18,3},{18,-3}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder,
              origin={-39,28},
              rotation=-90),
            Rectangle(
              extent={{-1.81332,3},{66.1869,-3}},
              lineColor={0,0,0},
              origin={-18.1867,-3},
              rotation=0,
              fillColor={135,135,135},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-70,46},{-36,34}},
              lineColor={0,0,0},
              fillColor={66,200,200},
              fillPattern=FillPattern.HorizontalCylinder),
            Polygon(
              points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-31,-10},{-21,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="HPT"),
            Ellipse(
              extent={{46,12},{74,-14}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.601938,3},{23.3253,-3}},
              lineColor={0,0,0},
              origin={22.6019,-29},
              rotation=0,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.43805,2.7864},{15.9886,-2.7864}},
              lineColor={0,0,0},
              origin={45.2136,-41.989},
              rotation=90,
              fillColor={0,128,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{32,-42},{60,-68}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-0.373344,2},{13.6267,-2}},
              lineColor={0,0,0},
              origin={18.3733,-56},
              rotation=0,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-0.341463,2},{13.6587,-2}},
              lineColor={0,0,0},
              origin={20,-44.3415},
              rotation=-90,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-1.41463,2.0001},{56.5851,-2.0001}},
              lineColor={0,0,0},
              origin={18.5851,-46.0001},
              rotation=180,
              fillColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-46,-40},{-34,-52}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder),
            Ellipse(
              extent={{-56,49},{-38,31}},
              lineColor={95,95,95},
              fillColor={175,175,175},
              fillPattern=FillPattern.Sphere),
            Rectangle(
              extent={{-46,49},{-48,61}},
              lineColor={0,0,0},
              fillColor={95,95,95},
              fillPattern=FillPattern.VerticalCylinder),
            Rectangle(
              extent={{-56,63},{-38,61}},
              lineColor={0,0,0},
              fillColor={181,0,0},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-45,49},{-49,31}},
              lineColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder,
              fillColor={162,162,0}),
            Text(
              extent={{55,-10},{65,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="G"),
            Text(
              extent={{41,-62},{51,-48}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="C"),
            Polygon(
              points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Polygon(
              points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
              lineColor={0,0,0},
              fillColor={0,114,208},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{7,-10},{17,4}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="LPT"),
            Rectangle(
              extent={{-4,-40},{22,-48}},
              lineColor={238,46,47},
              pattern=LinePattern.None,
              lineThickness=1,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Line(
              points={{-4,-44},{22,-44}},
              color={255,0,0},
              thickness=1)}),                                        Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-160,-140},{
                160,140}})),
        experiment(
          StopTime=1000,
          Interval=10,
          __Dymola_Algorithm="Esdirk45a"),
        Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
    end SteamTurbine_Basic_NoFeedHeat_mFlow_Control;

    package HTGR_RankineCycles
      model SteamTurbine_L2_ClosedFeedHeat_HTGR "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare replaceable Data.Turbine_2 data(InternalBypassValve_p_spring=
                6500000));

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          Q_units_start={1e7},
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal= data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,22},{52,42}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          Q_units_start={1e7},
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          partialArc_nominal=2,
          m_flow_nominal=data.LPT_nominal_mflow,
          use_Stodola=true,
          p_inlet_nominal= data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={42,-6})));

        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
            package Medium = Modelica.Media.Water.StandardWater, V=data.V_tee,
          p_start=init.tee_p_start,
          T_start=init.moisturesep_T_start)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={82,24})));

        TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_LPT_Bypass_dp_nominal,
          m_flow_nominal=data.valve_LPT_Bypass_mflow)   annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={82,-26})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-134,-40})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={108,-144})));

        StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
          Moisture_Separator(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          p_start=init.moisturesep_p_start,
          T_start=init.moisturesep_T_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_moistureseperator))
          annotation (Placement(transformation(extent={{58,30},{78,50}})));

        Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase MainFeedwaterHeater(
          NTU=data.MainFeedHeater_NTU,
          K_tube=data.MainFeedHeater_K_tube,
          K_shell=data.MainFeedHeater_K_shell,
          redeclare package Tube_medium = Modelica.Media.Water.StandardWater,
          redeclare package Shell_medium = Modelica.Media.Water.StandardWater,
          V_Tube=data.MainFeedHeater_V_tube,
          V_Shell=data.MainFeedHeater_V_shell,
          p_start_tube=init.MainFeedHeater_p_start_tube,
          h_start_tube_inlet=init.MainFeedHeater_h_start_tube_inlet,
          h_start_tube_outlet=init.MainFeedHeater_h_start_tube_outlet,
          p_start_shell=init.MainFeedHeater_p_start_shell,
          h_start_shell_inlet=init.MainFeedHeater_h_start_shell_inlet,
          h_start_shell_outlet=init.MainFeedHeater_h_start_shell_outlet,
          dp_init_tube=init.MainFeedHeater_dp_init_tube,
          dp_init_shell=init.MainFeedHeater_dp_init_shell,
          Q_init=init.MainFeedHeater_Q_init,
          m_start_tube=init.MainFeedHeater_m_start_tube,
          m_start_shell=init.MainFeedHeater_m_start_shell)
          annotation (Placement(transformation(extent={{40,-118},{60,-138}})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=false,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=2,
          nPorts_b=1) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={34,-94})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,-38})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_feedwater(R=data.R_feedwater,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=180,
              origin={114,-112})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=1,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,30},{-102,50}})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={80,-144})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T6(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={20,-132})));

        replaceable Data.Turbine_2_init init(FeedwaterMixVolume_h_start=2e6)
          annotation (Placement(transformation(extent={{68,120},{88,140}})));

        TRANSFORM.Fluid.Machines.Pump                pump_SimpleMassFlow2(
          p_a_start=5500000,
          use_T_start=true,
          h_start=1e6,
          N_nominal=1200,
          dp_nominal=10500000,
          m_flow_nominal=25,
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          d_nominal=1000,
          controlType="RPM",
          use_port=true)                                       annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-85,-41})));
        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume1(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=false,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=1) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={86,-112})));
      initial equation

      equation

        connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
            points={{32,38},{30,38},{30,40},{28,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portHP, tee.port_1) annotation (Line(
            points={{48,4},{48,8},{82,8},{82,14}},
            color={0,127,255},
            thickness=0.5));
        connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
            points={{92,24},{92,0},{82,0},{82,-16}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,-60},{-134,-60},{-134,-43.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
            points={{52,32},{52,14},{42,14},{42,4}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(HPT.portLP, Moisture_Separator.port_a) annotation (Line(
            points={{52,38},{58,38},{58,40},{62,40}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_b, tee.port_2) annotation (Line(
            points={{74,40},{82,40},{82,34}},
            color={0,127,255},
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));
        connect(LPT_Bypass.port_b, FeedwaterMixVolume.port_a[1])
          annotation (Line(points={{82,-36},{82,-44},{72,-44},{72,-58},{33.75,-58},
                {33.75,-88}},                                   color={0,127,255}));
        connect(Moisture_Separator.port_Liquid, FeedwaterMixVolume.port_a[2])
          annotation (Line(points={{64,36},{64,-44},{72,-44},{72,-58},{34.25,-58},{
                34.25,-88}},
                       color={0,127,255}));

        connect(LPT.shaft_b, generator1.shaft_a)
          annotation (Line(points={{42,-16},{42,-22},{10,-22},{10,-28}},
                                                       color={0,0,0}));
        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{10,-48},
                {10,-52},{104,-52},{104,-48},{110,-48}}, color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(FeedwaterMixVolume.port_b[1], MainFeedwaterHeater.Shell_in)
          annotation (Line(points={{34,-100},{34,-126},{40,-126}},
              color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
            Line(
            points={{30,100},{114,100},{114,-26},{90,-26}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-118,40}}, color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,40},{-60,40},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{98,-144},
                {90,-144}},                              color={0,127,255}));
        connect(sensor_T4.port_a, MainFeedwaterHeater.Tube_in) annotation (Line(
              points={{70,-144},{64,-144},{64,-132},{60,-132}}, color={0,127,255}));
        connect(MainFeedwaterHeater.Tube_out, sensor_T6.port_a)
          annotation (Line(points={{40,-132},{30,-132}}, color={0,127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-144},{118,-144}},         color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed,pump_SimpleMassFlow2. inputSignal)
          annotation (Line(
            points={{30,100},{-56,100},{-56,-26},{-100,-26},{-100,-56},{-85,-56},{
                -85,-48.7}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(MainFeedwaterHeater.Shell_out, FeedwaterMixVolume1.port_a[1])
          annotation (Line(points={{60,-126},{72,-126},{72,-112},{80,-112}}, color=
                {0,127,255}));
        connect(FeedwaterMixVolume1.port_b[1], R_feedwater.port_a)
          annotation (Line(points={{92,-112},{107,-112}}, color={0,127,255}));
        connect(R_feedwater.port_b, Condenser.port_a) annotation (Line(points={{121,
                -112},{130,-112},{130,-84},{152,-84},{152,-88},{153,-88},{153,-92}},
              color={0,127,255}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{48,-16},{52,
                -16},{52,-74},{153,-74},{153,-92}}, color={0,127,255}));
        connect(port_b, sensor_T2.port_b)
          annotation (Line(points={{-160,-40},{-144,-40}}, color={0,127,255}));
        connect(sensor_T2.port_a, pump_SimpleMassFlow2.port_b) annotation (Line(
              points={{-124,-40},{-110,-40},{-110,-41},{-96,-41}}, color={0,127,255}));
        connect(pump_SimpleMassFlow2.port_a, sensor_T6.port_b) annotation (Line(
              points={{-74,-41},{-6,-41},{-6,-132},{10,-132}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end SteamTurbine_L2_ClosedFeedHeat_HTGR;

      model HTGR_Rankine_Cycle_Transient
        extends BaseClasses.Partial_SubSystem(
          redeclare replaceable ControlSystems.CS_Rankine_Xe100_Based_Secondary CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.IdealTurbine data);

        Data.DataInitial_HTGR_Pebble dataInitial(P_LP_Comp_Ref=4000000)
          annotation (Placement(transformation(extent={{78,120},{98,140}})));

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=200,
          p_inlet_nominal=14000000,
          p_outlet_nominal=2500000,
          T_nominal=673.15)
          annotation (Placement(transformation(extent={{34,24},{54,44}})));
        TRANSFORM.Electrical.PowerConverters.Generator_Basic generator
          annotation (Placement(transformation(extent={{34,-34},{14,-14}})));
        Fluid.Vessels.IdealCondenser Condenser(
          p=10000,
          V_total=2500,
          V_liquid_start=1.2)
          annotation (Placement(transformation(extent={{56,-58},{36,-38}})));
        TRANSFORM.Fluid.Machines.Pump_Controlled pump(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          N_nominal=1200,
          dp_nominal=15000000,
          m_flow_nominal=50,
          d_nominal=1000,
          controlType="RPM",
          use_port=true)
          annotation (Placement(transformation(extent={{-24,-30},{-44,-50}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));
        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,76})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=3900000,
          T_start=723.15,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=2),
          use_TraceMassPort=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-62,40})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=50) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));
        Modelica.Blocks.Sources.RealExpression Electrical_Power(y=generator.power)
          annotation (Placement(transformation(extent={{-100,106},{-88,120}})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=200,
          p_inlet_nominal=2500000,
          p_outlet_nominal=8000,
          T_nominal=673.15) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-6})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=3900000,
          T_start=473.15,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=5.0),
          use_TraceMassPort=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-4,-40})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
            package Medium = Modelica.Media.Water.StandardWater, V=5,
          p_start=2500000,
          T_start=573.15)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={76,26})));
        TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=5)   annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={86,-34})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-70,-40})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump1(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=5500000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{40,-74},{20,-54}})));
        StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
          Moisture_Separator(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          p_start=2500000,
          T_start=573.15,                         redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume)
          annotation (Placement(transformation(extent={{56,30},{76,50}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=90,
              origin={53,-26})));
        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=50) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-74,72})));
        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=12000000,
          T=573.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-116,62},{-96,82}})));
        TRANSFORM.Fluid.Interfaces.FluidPort_Flow port_a(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
        TRANSFORM.Fluid.Interfaces.FluidPort_State port_b(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-110,-50},{-90,-30}})));
        TRANSFORM.Electrical.Interfaces.ElectricalPowerPort_Flow port_e
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
      initial equation

      equation
        port_e.W = generator.power;

        connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
            points={{34,40},{28,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.Feed_Pump_Speed, pump.inputSignal) annotation (Line(
            points={{30,100},{116,100},{116,-82},{-34,-82},{-34,-47}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,76},{-24,76}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Power, Electrical_Power.y) annotation (Line(
            points={{-30,100},{-80,100},{-80,112},{-84,112},{-84,113},{-87.4,113}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(volume1.port_b, pump.port_a) annotation (Line(points={{-10,-40},{-24,-40}},
                                          color={0,127,255},
            thickness=0.5));
        connect(LPT.portHP, tee.port_1) annotation (Line(
            points={{52,4},{52,8},{76,8},{76,16}},
            color={0,127,255},
            thickness=0.5));
        connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
            points={{86,26},{86,-24}},
            color={0,127,255},
            thickness=0.5));
        connect(sensor_T2.port_a, pump.port_b)
          annotation (Line(points={{-60,-40},{-44,-40}},color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-118,100},{-118,-62},{-70,-62},{-70,-43.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(Condenser.port_b, pump1.port_a) annotation (Line(points={{46,-58},{46,
                -64},{40,-64}},                                           color={0,127,
                255},
            thickness=0.5));
        connect(pump1.port_b, volume1.port_a) annotation (Line(points={{20,-64},{16,-64},
                {16,-40},{2,-40}},                         color={0,127,255},
            thickness=0.5));
        connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
            points={{54,34},{54,14},{46,14},{46,4}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
            Line(
            points={{30,100},{116,100},{116,-34},{94,-34}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.portLP, Moisture_Separator.port_a) annotation (Line(
            points={{54,40},{60,40}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_b, tee.port_2) annotation (Line(
            points={{72,40},{76,40},{76,36}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_Liquid, volume1.port_a) annotation (Line(
            points={{62,36},{62,18},{16,18},{16,-40},{2,-40}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portLP, sensor_m_flow1.port_a) annotation (Line(
            points={{52,-16},{52,-20},{53,-20}},
            color={0,127,255},
            thickness=0.5));
        connect(sensor_m_flow1.port_b,Condenser. port_a)
          annotation (Line(points={{53,-32},{53,-38}},     color={0,127,255},
            thickness=0.5));

        connect(TBV.port_b, boundary.ports[1]) annotation (Line(points={{-82,72},{-96,
                72}},                                      color={0,127,255}));
        connect(LPT.shaft_b, generator.shaft) annotation (Line(points={{46,-16},{46,-24.1},
                {34.1,-24.1}}, color={0,0,0}));
        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(volume.port_b, TBV.port_a) annotation (Line(points={{-56,40},{-46,40},
                {-46,72},{-66,72}}, color={0,127,255}));
        connect(volume.port_b, TCV.port_a)
          annotation (Line(points={{-56,40},{-12,40}}, color={0,127,255}));
        connect(volume.port_b, sensor_p.port) annotation (Line(points={{-56,40},{-34,40},
                {-34,62},{-18,62},{-18,66}}, color={0,127,255}));
        connect(port_a, volume.port_a)
          annotation (Line(points={{-100,40},{-68,40}}, color={0,127,255}));
        connect(sensor_T2.port_b, port_b)
          annotation (Line(points={{-80,-40},{-100,-40}}, color={0,127,255}));
        connect(TBV.opening, actuatorBus.TBV) annotation (Line(points={{-74,78.4},{-74,
                100},{30,100}},       color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(LPT_Bypass.port_b, pump1.port_a)
          annotation (Line(points={{86,-44},{86,-64},{40,-64}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-2.09756,2},{83.9024,-2}},
                lineColor={0,0,0},
                origin={-45.9024,-64},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-68.1867,-41},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={4,30},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-22,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{0,16},{0,-14},{30,-32},{30,36},{0,16}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{11,-8},{21,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={30.4272,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.487802,2},{19.5122,-2}},
                lineColor={0,0,0},
                origin={20,-38.488},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.243902,2},{9.7562,-2}},
                lineColor={0,0,0},
                origin={-46,-62.244},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={21.4218,-39.828},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-4,-34},{8,-46}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-2,-44},{-6,-48},{10,-48},{6,-44},{-2,-44}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-20,46},{6,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-30,49},{-12,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-20,49},{-22,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-30,63},{-12,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-19,49},{-23,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{3,-37},{3,-43},{-1,-40},{3,-37}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255})}),                            Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=86400,
            Interval=30,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>The goal of the HTGR models is to obtain a baseline functioning model that can be used to investigate HTGR applications within IES. That being the motivation, there are likely incorrect time constants throughout the system without relevant comparative data to use. Note also that the current core model structure, while this loop is described as a pebble bed (prismatic is pending), is still using the old nuclear core geometry file. This is due to some odd modeling failures during attempts to change. I will modify this description should I obtain the correct core functioning with a reasonable geometry. Using the old core geometry to obtain the correct flow values (flow area, hydraulic diameters, Reynolds numbers) should provide accurate-enough information. </p>
<p>The Dittus-Boelter simple correlation for single phase heat transfer in turbulent flow is used to calculate the heat transfer between the fuel and the coolant, and maximum fuel temperatures appear to agree with literature (~1200C). </p>
<p>Separate HTGR models will be developed for different uses. The primary differentiator is whether a combined cycle is going to be integrated or not. The combined cycle thoerized to be used here takes advantage of the relatively hot waste heat that is produced by an HTGR to boil water at low pressure and send that to a turbine. </p>
<p>No part of this HTGR model should be considered to be optimized. Additionally, thermal mass of the system needs references and then will need to be adjusted (likely through pipes replacing current zero-volume volume nodes) to more appropriately reflect system time constants. </p>
</html>"));
      end HTGR_Rankine_Cycle_Transient;

      model SteamTurbine_Basic_DirectCoupling_HTGR "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare replaceable Data.TESTurbine data(
            p_condensor=7000,
            V_FeedwaterMixVolume=10,
            V_Header=10,
            R_entry=8e4,
            valve_SHS_mflow=30,
            valve_SHS_dp_nominal=1200000,
            valve_TCV_LPT_mflow=30,
            valve_TCV_LPT_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            LPT_p_in_nominal=1200000,
            LPT_p_exit_nominal=7000,
            LPT_T_in_nominal=491.15,
            LPT_nominal_mflow=26.83,
            LPT_efficiency=1,
            firstfeedpump_p_nominal=2000000,
            secondfeedpump_p_nominal=2000000));

        replaceable Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={84,-92})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          Q_units_start={2e7},
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
              ( eta_nominal=0.9),
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal=data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-40})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T3(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={134,72})));
        TRANSFORM.Fluid.Valves.ValveLinear TCV_LPT(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_LPT_dp_nominal,
          m_flow_nominal=data.valve_TCV_LPT_mflow) annotation (Placement(
              transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={104,72})));
        TRANSFORM.Fluid.Valves.ValveLinear Discharge_OnOff(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=100000,
          m_flow_nominal=100)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={126,-146})));
        TRANSFORM.Fluid.Machines.Pump_Controlled firstfeedpump1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_a_start=10000,
          p_b_start=1100000,
          N_nominal=1500,
          dp_nominal=5000000,
          m_flow_nominal=30,
          controlType="RPM",
          use_port=true)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={94,-142})));
        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-124,60})));
      initial equation

      equation

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
                {84,-106},{104,-106},{104,-48},{110,-48}},
                                                         color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
                {84,-76},{84,-82}},                      color={0,0,0}));
        connect(LPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
                {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
                127,255}));
        connect(sensorBus.SHS_Return_T, sensor_T3.T) annotation (Line(
            points={{-30,100},{-30,74},{88,74},{88,58},{134,58},{134,68.4}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TCV_SHS, TCV_LPT.opening) annotation (Line(
            points={{30,100},{104,100},{104,78.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(TCV_LPT.port_b, sensor_T3.port_b)
          annotation (Line(points={{112,72},{124,72}}, color={0,127,255}));
        connect(actuatorBus.Discharge_OnOff_Throttle, Discharge_OnOff.opening)
          annotation (Line(
            points={{30,100},{186,100},{186,-132},{126,-132},{126,-139.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(firstfeedpump1.port_a, Condenser.port_b) annotation (Line(points={{84,-142},
                {78,-142},{78,-128},{146,-128},{146,-112}},       color={0,127,255}));
        connect(firstfeedpump1.port_b, Discharge_OnOff.port_a) annotation (Line(
              points={{104,-142},{112,-142},{112,-146},{118,-146}}, color={0,127,255}));
        connect(TCV_LPT.port_a, LPT.portHP)
          annotation (Line(points={{96,72},{52,72},{52,-30}}, color={0,127,255}));
        connect(Discharge_OnOff.port_b, port_b) annotation (Line(points={{134,-146},{
                144,-146},{144,-160},{-144,-160},{-144,-40},{-160,-40}}, color={0,127,
                255}));
        connect(actuatorBus.Feed_Pump_Speed, firstfeedpump1.inputSignal) annotation (
            Line(
            points={{30,100},{112,100},{112,102},{206,102},{206,-138},{114,-138},{114,
                -132},{94,-132},{94,-135}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Steam_Pressure,sensor_p. p) annotation (Line(
            points={{-30,100},{-30,60},{-130,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, sensor_p.port) annotation (Line(points={{-160,40},{-124,40},{
                -124,50}}, color={0,127,255}));
        connect(sensor_p.port, sensor_T3.port_a) annotation (Line(points={{-124,50},{
                -124,40},{150,40},{150,72},{144,72}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end SteamTurbine_Basic_DirectCoupling_HTGR;

      model SteamTurbine_OpenFeedHeat_DivertPowerControl_PowerBoostLoop_HTGR
        "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare replaceable Data.TESTurbine data(
            p_condensor=7000,
            V_FeedwaterMixVolume=25,
            V_Header=10,
            valve_TCV_mflow=67,
            valve_TCV_dp_nominal=100000,
            valve_SHS_mflow=30,
            valve_SHS_dp_nominal=1200000,
            valve_TCV_LPT_mflow=30,
            valve_TCV_LPT_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            HPT_efficiency=1,
            LPT_efficiency=1,
            firstfeedpump_p_nominal=2000000,
            secondfeedpump_p_nominal=2000000));

        replaceable Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={40,-128})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=421.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=3) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={84,-92})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump                pump_SimpleMassFlow1(
          p_a_start=5500000,
          p_b_start=25000000,
          use_T_start=false,
          T_start=481.15,
          h_start=1e6,
          m_flow_start=50,
          N_nominal=1500,
          dp_nominal=8500000,
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          use_port=true)                                       annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-109,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear PRV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={0,-128})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));

        TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=1500000,
          m_flow_nominal=15) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-74,22})));
        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          Q_units_start={2e7},
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
              ( eta_nominal=0.9),
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal=data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          V=data.V_tee,
          p_start=init.tee_p_start,
          T_start=523.15)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={90,4})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          Q_units_start={2e7},
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
              ( eta_nominal=0.9),
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal=data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-40})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a2(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{150,62},{170,82}}),
              iconTransformation(extent={{88,58},{108,78}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{150,-156},{170,-136}}),
              iconTransformation(extent={{88,-62},{108,-42}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T3(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={134,72})));
        TRANSFORM.Fluid.Valves.ValveLinear TCV_LPT(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=100,
          dp_nominal=data.valve_TCV_LPT_dp_nominal,
          m_flow_nominal=data.valve_TCV_LPT_mflow) annotation (Placement(
              transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={104,72})));
        TRANSFORM.Fluid.Valves.ValveLinear SHS_charge_control(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_SHS_dp_nominal,
          m_flow_nominal=data.valve_SHS_mflow) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-62,-102})));
        TRANSFORM.Fluid.Valves.ValveLinear Discharge_OnOff(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=400000,
          m_flow_nominal=26) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={126,-146})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=1400000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={94,-148})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-136,-42})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
                {84,-106},{104,-106},{104,-48},{110,-48}},
                                                         color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,41.5},{-60,41.5},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(PRV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1],PRV. port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV,PRV. opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{30,-128},
                {10,-128}},                              color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-98,-41},{-98,-42},{-82,-42}},                      color={0,
                127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-128},{50,-128}},          color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
                {84,-76},{84,-82}},                      color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
          annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                          color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
              points={{-24,-40},{-20,-40},{-20,-128},{-10,-128}},
              color={0,127,255}));
        connect(InternalBypass.port_a, header.port_b[2]) annotation (Line(points={{
                -82,22},{-94,22},{-94,24},{-106,24},{-106,42.5}}, color={0,127,255}));
        connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
              points={{-66,22},{-44,22},{-44,20},{-24,20},{-24,5}}, color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
          annotation (Line(
            points={{30,100},{-74,100},{-74,28.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(HPT.shaft_b,LPT. shaft_a) annotation (Line(
            points={{52,34},{56,34},{56,-24},{46,-24},{46,-30}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(LPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
                {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
                127,255}));
        connect(sensor_T1.port_b, HPT.portHP) annotation (Line(points={{28,40},{32,40}},
                                color={0,127,255}));
        connect(HPT.portLP, tee.port_2) annotation (Line(points={{52,40},{72,40},{72,
                36},{90,36},{90,14}}, color={0,127,255}));
        connect(LPT.portHP, tee.port_1) annotation (Line(points={{52,-30},{66,-30},{
                66,-28},{90,-28},{90,-6}}, color={0,127,255}));
        connect(sensorBus.SHS_Return_T, sensor_T3.T) annotation (Line(
            points={{-30,100},{-30,74},{88,74},{88,58},{134,58},{134,68.4}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TCV_SHS, TCV_LPT.opening) annotation (Line(
            points={{30,100},{104,100},{104,78.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a1, SHS_charge_control.port_a) annotation (Line(points={{-92,
                -160},{-92,-102},{-70,-102}}, color={0,127,255}));
        connect(SHS_charge_control.port_b, FeedwaterMixVolume.port_b[3]) annotation (
            Line(points={{-54,-102},{-20,-102},{-20,-39.3333},{-24,-39.3333}}, color=
                {0,127,255}));
        connect(actuatorBus.SHS_throttle, SHS_charge_control.opening) annotation (
            Line(
            points={{30,100},{-90,100},{-90,-84},{-62,-84},{-62,-95.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV_LPT.port_b, sensor_T3.port_b)
          annotation (Line(points={{112,72},{124,72}}, color={0,127,255}));
        connect(sensor_T3.port_a, port_a2)
          annotation (Line(points={{144,72},{160,72}}, color={0,127,255}));
        connect(TCV_LPT.port_a, tee.port_3) annotation (Line(points={{96,72},{90,72},
                {90,52},{104,52},{104,4},{100,4}}, color={0,127,255}));
        connect(Discharge_OnOff.port_b, port_b1)
          annotation (Line(points={{134,-146},{160,-146}}, color={0,127,255}));
        connect(actuatorBus.Discharge_OnOff_Throttle, Discharge_OnOff.opening)
          annotation (Line(
            points={{30,100},{186,100},{186,-132},{126,-132},{126,-139.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(firstfeedpump1.port_a, Condenser.port_b) annotation (Line(points={{84,
                -148},{78,-148},{78,-128},{146,-128},{146,-112}}, color={0,127,255}));
        connect(firstfeedpump1.port_b, Discharge_OnOff.port_a) annotation (Line(
              points={{104,-148},{112,-148},{112,-146},{118,-146}}, color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.inputSignal)
          annotation (Line(
            points={{30,100},{-92,100},{-92,-56},{-109,-56},{-109,-48.7}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(port_b, sensor_m_flow.port_b) annotation (Line(points={{-160,-40},{
                -154,-40},{-154,-42},{-146,-42}}, color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_b, sensor_m_flow.port_a) annotation (Line(
              points={{-120,-41},{-124,-41},{-124,-42},{-126,-42}}, color={0,127,255}));
        connect(sensorBus.Condensor_Output_mflow, sensor_m_flow.m_flow) annotation (
            Line(
            points={{-30,100},{-108,100},{-108,98},{-180,98},{-180,-68},{-136,-68},{
                -136,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end SteamTurbine_OpenFeedHeat_DivertPowerControl_PowerBoostLoop_HTGR;

      model SteamTurbine_OpenFeedHeat_DivertPowerControl_HTGR "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare replaceable Data.TESTurbine data(
            p_condensor=8000,
            V_FeedwaterMixVolume=25,
            V_Header=10,
            valve_TCV_mflow=67,
            valve_TCV_dp_nominal=100000,
            valve_SHS_mflow=30,
            valve_SHS_dp_nominal=600000,
            valve_TCV_LPT_mflow=30,
            valve_TCV_LPT_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            HPT_p_exit_nominal=700000,
            HPT_T_in_nominal=579.15,
            HPT_nominal_mflow=67,
            HPT_efficiency=1,
            LPT_p_in_nominal=700000,
            LPT_p_exit_nominal=7000,
            LPT_T_in_nominal=523.15,
            LPT_nominal_mflow=20,
            LPT_efficiency=1,
            firstfeedpump_p_nominal=2500000,
            secondfeedpump_p_nominal=2000000));

        replaceable Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={40,-128})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=421.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=3) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={84,-92})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump                pump_SimpleMassFlow1(
          N_nominal=1500,
          dp_nominal=CS.data.p_steam,
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          use_port=true)                                       annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-109,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear PRV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={0,-128})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));

        TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=1000000,
          m_flow_nominal=15) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-74,22})));
        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal=data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          V=data.V_tee,
          p_start=init.tee_p_start)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={90,4})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
              ( eta_nominal=0.9),
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal=data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-40})));
        TRANSFORM.Fluid.Valves.ValveLinear SHS_charge_control(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_SHS_dp_nominal,
          m_flow_nominal=data.valve_SHS_mflow) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-62,-102})));
        TRANSFORM.Fluid.Valves.ValveLinear Discharge_OnOff(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=100000000,
          m_flow_nominal=20) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={126,-146})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-136,-42})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{50,-156},{70,-136}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry1(R=10,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-92,-128})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
                {84,-106},{104,-106},{104,-48},{110,-48}},
                                                         color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,41.5},{-60,41.5},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(PRV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1],PRV. port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV,PRV. opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{30,-128},
                {10,-128}},                              color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-98,-41},{-98,-42},{-82,-42}},                      color={0,
                127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-128},{50,-128}},          color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
                {84,-76},{84,-82}},                      color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
          annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                          color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
              points={{-24,-40},{-20,-40},{-20,-128},{-10,-128}},
              color={0,127,255}));
        connect(InternalBypass.port_a, header.port_b[2]) annotation (Line(points={{
                -82,22},{-94,22},{-94,24},{-106,24},{-106,42.5}}, color={0,127,255}));
        connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
              points={{-66,22},{-44,22},{-44,20},{-24,20},{-24,5}}, color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
          annotation (Line(
            points={{30,100},{-74,100},{-74,28.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(HPT.shaft_b,LPT. shaft_a) annotation (Line(
            points={{52,34},{56,34},{56,-24},{46,-24},{46,-30}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(LPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
                {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
                127,255}));
        connect(sensor_T1.port_b, HPT.portHP) annotation (Line(points={{28,40},{32,40}},
                                color={0,127,255}));
        connect(HPT.portLP, tee.port_2) annotation (Line(points={{52,40},{72,40},{72,
                36},{90,36},{90,14}}, color={0,127,255}));
        connect(LPT.portHP, tee.port_1) annotation (Line(points={{52,-30},{66,-30},{
                66,-28},{90,-28},{90,-6}}, color={0,127,255}));
        connect(SHS_charge_control.port_b, FeedwaterMixVolume.port_b[3]) annotation (
            Line(points={{-54,-102},{-20,-102},{-20,-39.3333},{-24,-39.3333}}, color=
                {0,127,255}));
        connect(actuatorBus.SHS_throttle, SHS_charge_control.opening) annotation (
            Line(
            points={{30,100},{-90,100},{-90,-84},{-62,-84},{-62,-95.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.inputSignal)
          annotation (Line(
            points={{30,100},{-92,100},{-92,-56},{-109,-56},{-109,-48.7}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(port_b, sensor_m_flow.port_b) annotation (Line(points={{-160,-40},{
                -154,-40},{-154,-42},{-146,-42}}, color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_b, sensor_m_flow.port_a) annotation (Line(
              points={{-120,-41},{-124,-41},{-124,-42},{-126,-42}}, color={0,127,255}));
        connect(sensorBus.Condensor_Output_mflow, sensor_m_flow.m_flow) annotation (
            Line(
            points={{-30,100},{-108,100},{-108,98},{-180,98},{-180,-68},{-136,-68},{
                -136,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const.y, Discharge_OnOff.opening) annotation (Line(points={{71,-146},
                {76,-146},{76,-132},{126,-132},{126,-139.6}}, color={0,0,127}));
        connect(Discharge_OnOff.port_a, firstfeedpump.port_a) annotation (Line(points=
               {{118,-146},{114,-146},{114,-128},{50,-128}}, color={0,127,255}));
        connect(Discharge_OnOff.port_b, tee.port_3)
          annotation (Line(points={{134,-146},{134,4},{100,4}}, color={0,127,255}));
        connect(port_a1, R_entry1.port_a)
          annotation (Line(points={{-92,-160},{-92,-135}}, color={0,127,255}));
        connect(R_entry1.port_b, SHS_charge_control.port_a) annotation (Line(points={
                {-92,-121},{-92,-102},{-70,-102}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end SteamTurbine_OpenFeedHeat_DivertPowerControl_HTGR;

      model HTGR_Rankine_Cycle
        extends BaseClasses.Partial_SubSystem(
          redeclare replaceable ControlSystems.CS_Rankine_Xe100_Based_Secondary CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.IdealTurbine data);

        Data.DataInitial_HTGR_Pebble dataInitial(P_LP_Comp_Ref=4000000)
          annotation (Placement(transformation(extent={{78,120},{98,140}})));

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=200,
          p_inlet_nominal=14000000,
          p_outlet_nominal=2500000,
          T_nominal=673.15)
          annotation (Placement(transformation(extent={{34,24},{54,44}})));
        TRANSFORM.Electrical.PowerConverters.Generator_Basic generator
          annotation (Placement(transformation(extent={{34,-34},{14,-14}})));
        Fluid.Vessels.IdealCondenser Condenser(
          p=10000,
          V_total=75,
          V_liquid_start=1.2)
          annotation (Placement(transformation(extent={{56,-58},{36,-38}})));
        TRANSFORM.Fluid.Machines.Pump_Controlled pump(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          N_nominal=1200,
          dp_nominal=15000000,
          m_flow_nominal=50,
          d_nominal=1000,
          controlType="RPM",
          use_port=true)
          annotation (Placement(transformation(extent={{-24,-30},{-44,-50}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));
        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,76})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=3900000,
          T_start=723.15,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=2),
          use_TraceMassPort=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-62,40})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=50) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));
        Modelica.Blocks.Sources.RealExpression Electrical_Power(y=generator.power)
          annotation (Placement(transformation(extent={{-100,106},{-88,120}})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=200,
          p_inlet_nominal=2500000,
          p_outlet_nominal=8000,
          T_nominal=673.15) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-6})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=3900000,
          T_start=473.15,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=5.0),
          use_TraceMassPort=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-4,-40})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
            package Medium = Modelica.Media.Water.StandardWater, V=5)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={76,26})));
        TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=2.5) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={86,-34})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-70,-40})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump1(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=2000000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{40,-74},{20,-54}})));
        StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
          Moisture_Separator(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume)
          annotation (Placement(transformation(extent={{56,30},{76,50}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=90,
              origin={53,-26})));
        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=50) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-74,72})));
        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=12000000,
          T=573.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-116,62},{-96,82}})));
        TRANSFORM.Fluid.Interfaces.FluidPort_Flow port_a(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
        TRANSFORM.Fluid.Interfaces.FluidPort_State port_b(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-110,-50},{-90,-30}})));
        TRANSFORM.Electrical.Interfaces.ElectricalPowerPort_Flow port_e
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
      initial equation

      equation
        port_e.W = generator.power;

        connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
            points={{34,40},{28,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.Feed_Pump_Speed, pump.inputSignal) annotation (Line(
            points={{30,100},{116,100},{116,-82},{-34,-82},{-34,-47}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,76},{-24,76}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Power, Electrical_Power.y) annotation (Line(
            points={{-30,100},{-80,100},{-80,112},{-84,112},{-84,113},{-87.4,113}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(volume1.port_b, pump.port_a) annotation (Line(points={{-10,-40},{-24,-40}},
                                          color={0,127,255},
            thickness=0.5));
        connect(LPT.portHP, tee.port_1) annotation (Line(
            points={{52,4},{52,8},{76,8},{76,16}},
            color={0,127,255},
            thickness=0.5));
        connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
            points={{86,26},{86,-24}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT_Bypass.port_b, volume1.port_a) annotation (Line(
            points={{86,-44},{86,-72},{16,-72},{16,-40},{2,-40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensor_T2.port_a, pump.port_b)
          annotation (Line(points={{-60,-40},{-44,-40}},color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-118,100},{-118,-62},{-70,-62},{-70,-43.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(Condenser.port_b, pump1.port_a) annotation (Line(points={{46,-58},{46,
                -64},{40,-64}},                                           color={0,127,
                255},
            thickness=0.5));
        connect(pump1.port_b, volume1.port_a) annotation (Line(points={{20,-64},{16,-64},
                {16,-40},{2,-40}},                         color={0,127,255},
            thickness=0.5));
        connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
            points={{54,34},{54,14},{46,14},{46,4}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
            Line(
            points={{30,100},{116,100},{116,-34},{94,-34}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.portLP, Moisture_Separator.port_a) annotation (Line(
            points={{54,40},{60,40}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_b, tee.port_2) annotation (Line(
            points={{72,40},{76,40},{76,36}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_Liquid, volume1.port_a) annotation (Line(
            points={{62,36},{62,18},{16,18},{16,-40},{2,-40}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portLP, sensor_m_flow1.port_a) annotation (Line(
            points={{52,-16},{52,-20},{53,-20}},
            color={0,127,255},
            thickness=0.5));
        connect(sensor_m_flow1.port_b,Condenser. port_a)
          annotation (Line(points={{53,-32},{53,-38}},     color={0,127,255},
            thickness=0.5));

        connect(TBV.port_b, boundary.ports[1]) annotation (Line(points={{-82,72},{-96,
                72}},                                      color={0,127,255}));
        connect(LPT.shaft_b, generator.shaft) annotation (Line(points={{46,-16},{46,-24.1},
                {34.1,-24.1}}, color={0,0,0}));
        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(volume.port_b, TBV.port_a) annotation (Line(points={{-56,40},{-46,40},
                {-46,72},{-66,72}}, color={0,127,255}));
        connect(volume.port_b, TCV.port_a)
          annotation (Line(points={{-56,40},{-12,40}}, color={0,127,255}));
        connect(volume.port_b, sensor_p.port) annotation (Line(points={{-56,40},{-34,40},
                {-34,62},{-18,62},{-18,66}}, color={0,127,255}));
        connect(port_a, volume.port_a)
          annotation (Line(points={{-100,40},{-68,40}}, color={0,127,255}));
        connect(sensor_T2.port_b, port_b)
          annotation (Line(points={{-80,-40},{-100,-40}}, color={0,127,255}));
        connect(TBV.opening, actuatorBus.TBV) annotation (Line(points={{-74,78.4},{-74,
                100},{30,100}},       color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-2.09756,2},{83.9024,-2}},
                lineColor={0,0,0},
                origin={-45.9024,-64},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-68.1867,-41},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={4,30},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-22,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{0,16},{0,-14},{30,-32},{30,36},{0,16}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{11,-8},{21,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={30.4272,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.487802,2},{19.5122,-2}},
                lineColor={0,0,0},
                origin={20,-38.488},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.243902,2},{9.7562,-2}},
                lineColor={0,0,0},
                origin={-46,-62.244},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={21.4218,-39.828},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-4,-34},{8,-46}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-2,-44},{-6,-48},{10,-48},{6,-44},{-2,-44}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-20,46},{6,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-30,49},{-12,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-20,49},{-22,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-30,63},{-12,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-19,49},{-23,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{3,-37},{3,-43},{-1,-40},{3,-37}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255})}),                            Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=86400,
            Interval=30,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>The goal of the HTGR models is to obtain a baseline functioning model that can be used to investigate HTGR applications within IES. That being the motivation, there are likely incorrect time constants throughout the system without relevant comparative data to use. Note also that the current core model structure, while this loop is described as a pebble bed (prismatic is pending), is still using the old nuclear core geometry file. This is due to some odd modeling failures during attempts to change. I will modify this description should I obtain the correct core functioning with a reasonable geometry. Using the old core geometry to obtain the correct flow values (flow area, hydraulic diameters, Reynolds numbers) should provide accurate-enough information. </p>
<p>The Dittus-Boelter simple correlation for single phase heat transfer in turbulent flow is used to calculate the heat transfer between the fuel and the coolant, and maximum fuel temperatures appear to agree with literature (~1200C). </p>
<p>Separate HTGR models will be developed for different uses. The primary differentiator is whether a combined cycle is going to be integrated or not. The combined cycle thoerized to be used here takes advantage of the relatively hot waste heat that is produced by an HTGR to boil water at low pressure and send that to a turbine. </p>
<p>No part of this HTGR model should be considered to be optimized. Additionally, thermal mass of the system needs references and then will need to be adjusted (likely through pipes replacing current zero-volume volume nodes) to more appropriately reflect system time constants. </p>
</html>"));
      end HTGR_Rankine_Cycle;
    end HTGR_RankineCycles;

    package StagebyStageTurbineSecondary

      package Examples
        extends Modelica.Icons.ExamplesPackage;

        model Eight_Stage_Turbine
          "This model is based on NuScale design documentation, intending to match as closely as possible the 100% power rating found there."
          extends Modelica.Icons.Example;
          constant Real pi = Modelica.Constants.pi;
          parameter Modelica.Units.SI.Velocity vthes1=0;
          parameter Modelica.Units.SI.Velocity vther1=0;
          parameter Modelica.Units.SI.Velocity vthes2=0;
          parameter Modelica.Units.SI.Velocity vther2=0;
          parameter Modelica.Units.SI.Velocity vthes3=0;
          parameter Modelica.Units.SI.Velocity vther3=0;
          parameter Modelica.Units.SI.Velocity vthes4=0;
          parameter Modelica.Units.SI.Velocity vther4=0;
          parameter Modelica.Units.SI.Velocity vthes5=0;
          parameter Modelica.Units.SI.Velocity vther5=0;
          parameter Modelica.Units.SI.Velocity vthes6=0;
          parameter Modelica.Units.SI.Velocity vther6=0;
          parameter Modelica.Units.SI.Velocity vthes7=0;
          parameter Modelica.Units.SI.Velocity vther7=0;
          parameter Modelica.Units.SI.Velocity vthes8=0;
          parameter Modelica.Units.SI.Velocity vther8=0;
          parameter Modelica.Units.SI.Pressure ps1in=3170000;
          parameter Modelica.Units.SI.Pressure ps1out=2620000;
          parameter Modelica.Units.SI.Pressure pr1out=2610000;

          parameter Modelica.Units.SI.Pressure ps2out=1400000;
          parameter Modelica.Units.SI.Pressure pr2out=522600;
          parameter Modelica.Units.SI.Pressure ps3out=350000;
          parameter Modelica.Units.SI.Pressure pr3out=253000;
          parameter Modelica.Units.SI.Pressure ps4out=180000;
          parameter Modelica.Units.SI.Pressure pr4out=137800;
          parameter Modelica.Units.SI.Pressure ps5out=72000;
          parameter Modelica.Units.SI.Pressure pr5out=64200;
          parameter Modelica.Units.SI.Pressure ps6out=58000;
          parameter Modelica.Units.SI.Pressure pr6out=52800;
          parameter Modelica.Units.SI.Pressure ps7out=40000;
          parameter Modelica.Units.SI.Pressure pr7out=26400;
          parameter Modelica.Units.SI.Pressure ps8out=17500;
          parameter Modelica.Units.SI.Pressure pr8out=9000;

          parameter Modelica.Units.SI.Area Ar8[3]={2.9,6.3,6.3};
          parameter Modelica.Units.SI.Area As8[3]={2,2.9,2.9};
          parameter Modelica.Units.SI.Area Ar7[3]={1.4,2,2};
          parameter Modelica.Units.SI.Area As7[3]={1.11,1.4,1.4};
          parameter Modelica.Units.SI.Area Ar6[3]={1.11,1.11,1.11};
          parameter Modelica.Units.SI.Area As6[3]={1.11,1.11,1.11};
          parameter Modelica.Units.SI.Area Ar5[3]={0.72,1.10,1.11};
          parameter Modelica.Units.SI.Area As5[3]={0.62,0.72,0.72};
          parameter Modelica.Units.SI.Area Ar4[3]={0.42,0.62,0.62};
          parameter Modelica.Units.SI.Area As4[3]={0.355,0.41,0.42};
          parameter Modelica.Units.SI.Area Ar3[3]={0.25,0.355,0.355};
          parameter Modelica.Units.SI.Area As3[3]={0.22,0.25,0.25};
          parameter Modelica.Units.SI.Area Ar2[3]={0.09,0.22,0.22};
          parameter Modelica.Units.SI.Area As2[3]={0.0657,0.09,0.09};
          parameter Modelica.Units.SI.Area Ar1[3]={0.0657,0.0657,0.0657};
          parameter Modelica.Units.SI.Area As1[3]={0.0657,0.0657,0.0657};
          parameter Modelica.Units.SI.Length ri[3]={0.1,0.1,0.1};
          parameter Modelica.Units.SI.Length ros1[3]={0.195,0.2,0.22};
          parameter Modelica.Units.SI.Length ror1[3]={0.22,0.24,0.245};
          parameter Modelica.Units.SI.Length ros2[3]={0.245,0.26,0.265};
          parameter Modelica.Units.SI.Length ror2[3]={0.265,0.29,0.295};
          parameter Modelica.Units.SI.Length ros3[3]={0.295,0.31,0.315};
          parameter Modelica.Units.SI.Length ror3[3]={0.315,0.33,0.335};
          parameter Modelica.Units.SI.Length ros4[3]={0.335,0.37,0.38};
          parameter Modelica.Units.SI.Length ror4[3]={0.38,0.41,0.42};
          parameter Modelica.Units.SI.Length ros5[3]={0.42,0.46,0.47};
          parameter Modelica.Units.SI.Length ror5[3]={0.47,0.51,0.53};
          parameter Modelica.Units.SI.Length ros6[3]={0.53,0.58,0.59};
          parameter Modelica.Units.SI.Length ror6[3]={0.59,0.63,0.64};
          parameter Modelica.Units.SI.Length ros7[3]={0.64,0.68,0.69};
          parameter Modelica.Units.SI.Length ror7[3]={0.69,0.74,0.75};
          parameter Modelica.Units.SI.Length ros8[3]={0.75,0.81,0.82};
          parameter Modelica.Units.SI.Length ror8[3]={0.82,0.87,0.89};
          parameter Modelica.Units.SI.MassFlowRate mflow=54.671;
          parameter Real[2] alphas1 = {pi/3.5,0};
          parameter Real[2] alphar1 = {-pi/3.44,0};
          parameter Real[2] alphas2 = {pi/2.2,0};
          parameter Real[2] alphar2 = {-pi/2.222,0};
          parameter Real[2] alphas3 = {pi/2.45,0};
          parameter Real[2] alphar3 = {-pi/2.7,0};
          parameter Real[2] alphas4 = {pi/2.5,0};
          parameter Real[2] alphar4 = {-pi/2.68,0};
          parameter Real[2] alphas5 = {pi/2.5,0};
          parameter Real[2] alphar5 = {-pi/2.674,0};
          parameter Real[2] alphas6 = {pi/3.4,0};
          parameter Real[2] alphar6 = {-pi/5.75,0};
          parameter Real[2] alphas7 = {pi/2.55,0};
          parameter Real[2] alphar7 = {-pi/3.55,0};
          parameter Real[2] alphas8 = {pi/2.48,0};
          parameter Real[2] alphar8 = {-pi/2.505,0};

          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Boundary_Conditions.Boundary_ph
            boundary(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            use_p_in=false,
            p(displayUnit="Pa") = 8000,
            h=2383e3,
            nPorts=1) annotation (Placement(transformation(extent={{158,-40},{
                    138,-20}})));

          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.MS
            MoistSep3(eta=0.2)
            annotation (Placement(transformation(extent={{116,2},{128,14}})));
          TRANSFORM.Fluid.BoundaryConditions.Boundary_ph boundary2(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            p=pr7out,
            nPorts=1)
            annotation (Placement(transformation(extent={{-3,-4},{3,4}},
                rotation=90,
                origin={122,-1})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Turbine_Physical
            turbine_Editable(nSt=8)
            annotation (Placement(transformation(extent={{-22,52},{-2,72}})));
          StagebyStageTurbine.Generator_Basic                  generator(omega_nominal=50
                *3.14)
            annotation (Placement(transformation(extent={{26,58},{46,78}})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Rotor_Stage
            Rotor8(
            alpha=alphar8,
            A_flow=Ar8,
            ro=ror8,
            h_init=2260e3,
            m_init=52,
            p_in_init=ps8out,
            v_the_init=vther8,
            v_r_init=0.1)
            annotation (Placement(transformation(extent={{142,-2},{150,18}})));

          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Stator_Stage
            Stator8(
            isenthalpic=true,
            alpha=alphas8,
            A_flow=As8,
            ro=ros8,
            h_init=2350e3,
            m_init=52,
            p_in_init=pr7out,
            p_out_init=ps8out,
            v_the_init=vthes8)
            annotation (Placement(transformation(extent={{132,-2},{138,18}})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Rotor_Stage
            Rotor7(
            alpha=alphar7,
            A_flow=Ar7,
            ro=ror7,
            h_init=2330e3,
            m_init=53,
            p_in_init=ps7out,
            v_the_init=vther7,
            v_r_init=0.1)
            annotation (Placement(transformation(extent={{100,-2},{108,18}})));

          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Stator_Stage
            Stator7(
            isenthalpic=true,
            alpha=alphas7,
            A_flow=As7,
            ro=ros7,
            h_init=2383e3,
            m_init=53,
            p_in_init=pr6out,
            p_out_init=ps7out,
            v_the_init=vthes7)
            annotation (Placement(transformation(extent={{90,-2},{96,18}})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.MS
            MoistSep2(eta=0.165)
            annotation (Placement(transformation(extent={{72,2},{84,14}})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Rotor_Stage
            Rotor6(
            alpha=alphar6,
            A_flow=Ar6,
            ro=ror6,
            h_init=2336e3,
            m_init=56,
            p_in_init=ps6out,
            v_the_init=vther6,
            v_r_init=0.1)
            annotation (Placement(transformation(extent={{62,-2},{70,18}})));

          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Stator_Stage
            Stator6(
            v_the_init=vthes6,
            isenthalpic=true,
            alpha=alphas6,
            A_flow=As6,
            ro=ros6,
            h_init=2417e3,
            m_init=56,
            p_in_init=pr5out,
            p_out_init=ps6out)
            annotation (Placement(transformation(extent={{48,-2},{54,18}})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Boundary_Conditions.MassFlowSource_h
            boundary1(
            v_rotational=0,
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            use_m_flow_in=true,
            m_flow=68.404,
            h=2999e3,
            nPorts=1) annotation (Placement(transformation(extent={{-136,-4},{-116,
                    16}})));
          TRANSFORM.Fluid.BoundaryConditions.Boundary_ph boundary3(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            p=pr6out,
            nPorts=1)
            annotation (Placement(transformation(extent={{-3,-4},{3,4}},
                rotation=90,
                origin={78,-1})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Turbine_Tap
            turbine_Tap2
            annotation (Placement(transformation(extent={{38,0},{44,16}})));
          Control_and_Distribution.ValveLineartanh                             valveLineartanh2(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            dp_nominal=10,
            m_flow_nominal=40)
            annotation (Placement(transformation(extent={{58,-2},{64,-8}})));
          TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow2(redeclare package
              Medium =
                Modelica.Media.Examples.TwoPhaseWater)
            annotation (Placement(transformation(extent={{42,0},{50,-12}})));
          TRANSFORM.Fluid.BoundaryConditions.Boundary_ph boundary7(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            p=58000,
            nPorts=1)
            annotation (Placement(transformation(extent={{-3,-3},{3,3}},
                rotation=180,
                origin={71,-5})));
          TRANSFORM.Controls.PI_Control PI
            annotation (Placement(transformation(extent={{54,-20},{60,-14}})));
          Modelica.Blocks.Sources.Constant const(k=4.01)
            annotation (Placement(transformation(extent={{48,-20},{52,-16}})));

            NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Stator_Stage
            Stator5(
            v_the_init=vthes5,
            isenthalpic=true,
            alpha=alphas5,
            A_flow=As5,
            ro=ros5,
            h_init=2402e3,
            m_init=59,
            p_in_init=pr4out,
            p_out_init=ps5out)
            annotation (Placement(transformation(extent={{16,-2},{22,18}})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Rotor_Stage
            Rotor5(
            alpha=alphar5,
            A_flow=Ar5,
            ro=ror5,
            h_init=2379e3,
            m_init=59,
            p_in_init=ps5out,
            v_the_init=vther5,
            v_r_init=0.1)
            annotation (Placement(transformation(extent={{26,-2},{34,18}})));

          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.MS
            MoistSep1(eta=0.155)
            annotation (Placement(transformation(extent={{0,2},{12,14}})));
          TRANSFORM.Fluid.BoundaryConditions.Boundary_ph boundary4(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            p=pr4out,
            nPorts=1)
            annotation (Placement(transformation(extent={{-3,-4},{3,4}},
                rotation=90,
                origin={6,1})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Rotor_Stage
            Rotor4(
            alpha=alphar4,
            A_flow=Ar4,
            ro=ror4,
            h_init=2402e3,
            m_init=60,
            p_in_init=ps4out,
            v_the_init=vther4,
            v_r_init=0.1)
            annotation (Placement(transformation(extent={{-12,-2},{-4,18}})));

            NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Stator_Stage
            Stator4(
            v_the_init=vthes4,
            isenthalpic=true,
            alpha=alphas4,
            A_flow=As4,
            ro=ros4,
            h_init=2504e3,
            m_init=60,
            p_in_init=pr3out,
            p_out_init=ps4out)
            annotation (Placement(transformation(extent={{-22,-2},{-16,18}})));
          StagebyStageTurbine.Turbine_Tap                                                                                                          turbine_Tap1
            annotation (Placement(transformation(extent={{-32,0},{-26,14}})));
          Control_and_Distribution.ValveLineartanh                                                 valveLineartanh1(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            dp_nominal=10,
            m_flow_nominal=50)
            annotation (Placement(transformation(extent={{-10,0},{-4,-6}})));
          TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
              Medium =
                Modelica.Media.Examples.TwoPhaseWater)
            annotation (Placement(transformation(extent={{-30,4},{-18,-10}})));
          TRANSFORM.Fluid.BoundaryConditions.Boundary_ph boundary6(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            p=pr3out,
            nPorts=1) annotation (Placement(transformation(
                extent={{3,-4},{-3,4}},
                rotation=180,
                origin={-15,-34})));
          TRANSFORM.Controls.PI_Control PI2 annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=270,
                origin={-17,-13})));
          Modelica.Blocks.Sources.Constant const2(k=5.18) annotation (Placement(
                transformation(
                extent={{-3,-3},{3,3}},
                rotation=90,
                origin={-17,-25})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Rotor_Stage
            Rotor3(
            alpha=alphar3,
            A_flow=Ar3,
            ro=ror3,
            h_init=2477e3,
            m_init=64,
            p_in_init=ps3out,
            v_the_init=vther3,
            v_r_init=0.1)
            annotation (Placement(transformation(extent={{-46,-4},{-38,16}})));

            NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Stator_Stage
            Stator3(
            v_the_init=vthes3,
            isenthalpic=true,
            alpha=alphas3,
            A_flow=As3,
            ro=ros3,
            h_init=2563e3,
            m_init=64,
            p_in_init=pr2out,
            p_out_init=ps3out)
            annotation (Placement(transformation(extent={{-56,-4},{-50,16}})));
          StagebyStageTurbine.Turbine_Tap                                                                                                          turbine_Tap
            annotation (Placement(transformation(extent={{-66,-2},{-60,12}})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Rotor_Stage
            Rotor2(
            alpha=alphar2,
            A_flow=Ar2,
            ro=ror2,
            h_init=2674e3,
            m_init=68,
            p_in_init=ps2out,
            v_the_init=vther2,
            v_r_init=0.1)
            annotation (Placement(transformation(extent={{-80,-4},{-72,16}})));

            NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Stator_Stage
            Stator2(
            v_the_init=vthes2,
            isenthalpic=true,
            alpha=alphas2,
            A_flow=As2,
            ro=ros2,
            h_init=2965e3,
            m_init=68,
            p_in_init=pr1out,
            p_out_init=ps2out)
            annotation (Placement(transformation(extent={{-88,-4},{-82,16}})));
          NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Rotor_Stage
            Rotor1(
            alpha=alphar1,
            A_flow=Ar1,
            ro=ror1,
            h_init=2999e3,
            m_init=68,
            p_in_init=ps1out,
            v_the_init=vther1,
            v_r_init=0.1)
            annotation (Placement(transformation(extent={{-100,-4},{-92,16}})));

            NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Stator_Stage
            Stator1(
            v_the_init=vthes1,
            isenthalpic=true,
            alpha=alphas1,
            A_flow=As1,
            ro=ros1,
            h_init=2999e3,
            m_init=68,
            p_in_init=ps1in,
            p_out_init=ps1out) annotation (Placement(transformation(extent={{-110,
                    -4},{-104,16}})));
          TRANSFORM.Controls.PI_Control PI1
            annotation (Placement(transformation(extent={{-3,-3},{3,3}},
                rotation=270,
                origin={-51,-5})));
          Modelica.Blocks.Sources.Constant const1(k=3.403)
            annotation (Placement(transformation(extent={{-3,-3},{3,3}},
                rotation=270,
                origin={-49,3})));
          Control_and_Distribution.ValveLineartanh                             valveLineartanh(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            dp_nominal=10,
            m_flow_nominal=40) annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=270,
                origin={-63,-23})));
          TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow(redeclare package
              Medium =
                Modelica.Media.Examples.TwoPhaseWater)
            annotation (Placement(transformation(extent={{-6,-6},{6,6}},
                rotation=270,
                origin={-64,-6})));
          TRANSFORM.Fluid.BoundaryConditions.Boundary_ph boundary5(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
            p=498000,
            nPorts=1)
            annotation (Placement(transformation(extent={{-5,-6},{5,6}},
                rotation=90,
                origin={-62,-39})));
          Modelica.Blocks.Sources.Ramp ramp(
            height=0,
            duration=200,
            offset=68.4,
            startTime=100)
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                rotation=90,
                origin={-130,50})));
        equation
          connect(generator.shaft, turbine_Editable.Generator_torque) annotation (Line(
                points={{25.9,67.9},{9.95,67.9},{9.95,67.8},{-2,67.8}},       color={0,0,
                  0}));
          connect(Rotor8.Inlet, Stator8.Outlet) annotation (Line(points={{142.08,
                  7.8},{142.08,7.6},{138,7.6}},
                                    color={28,108,200}));
          connect(Rotor8.Outlet, boundary.ports[1]) annotation (Line(points={{149.92,8},
                  {156,8},{156,-14},{128,-14},{128,-30},{138,-30}},
                                        color={28,108,200}));
          connect(Rotor8.torque, turbine_Editable.Fluidtorques[1]) annotation (Line(
                points={{144.64,12.6},{144.64,26},{144,26},{144,38},{-12.4,38},{
                  -12.4,57.925}},                                        color={28,108,200}));
          connect(MoistSep3.Turb_Out, Stator8.Inlet) annotation (Line(points={{128,8},
                  {128,7.8},{132.06,7.8}},   color={28,108,200}));
          connect(MoistSep3.Liquid, boundary2.ports[1]) annotation (Line(points={{122,
                  6.08},{122,2}},     color={0,127,255}));
          connect(Rotor7.Inlet, Stator7.Outlet) annotation (Line(points={{100.08,
                  7.8},{100.08,8},{96,8},{96,7.6}},           color={28,108,200}));
          connect(Rotor7.Outlet, MoistSep3.Turb_In) annotation (Line(points={{107.92,
                  8},{116,8}},                color={28,108,200}));
          connect(Rotor7.torque, turbine_Editable.Fluidtorques[2]) annotation (Line(
                points={{102.64,12.6},{102.64,26},{102,26},{102,38},{-12.4,38},{
                  -12.4,58.175}},                                                color={
                  28,108,200}));
          connect(MoistSep2.Turb_Out, Stator7.Inlet) annotation (Line(points={{84,8},{
                  84,7.8},{90.06,7.8}},                  color={28,108,200}));
          connect(Rotor6.torque, turbine_Editable.Fluidtorques[3]) annotation (Line(
                points={{64.64,12.6},{64.64,24},{64,24},{64,38},{-12.4,38},{-12.4,
                  58.425}},
                color={28,108,200}));
          connect(Rotor6.Outlet, MoistSep2.Turb_In) annotation (Line(points={{69.92,8},
                  {72,8}},                           color={28,108,200}));
          connect(Stator6.Outlet, Rotor6.Inlet) annotation (Line(points={{54,7.6},{
                  54,7.8},{62.08,7.8}},                 color={28,108,200}));
          connect(boundary3.ports[1], MoistSep2.Liquid) annotation (Line(points={{78,2},{
                  78,6.08}},                                                    color={0,
                  127,255}));
          connect(turbine_Tap2.Tap_flow,sensor_m_flow2. port_a) annotation (Line(points={{41,5.44},
                  {41,-6},{42,-6}},               color={0,127,255}));
          connect(sensor_m_flow2.port_b,valveLineartanh2. port_a) annotation (Line(
                points={{50,-6},{56,-6},{56,-5},{58,-5}},                         color=
                 {0,127,255}));
          connect(valveLineartanh2.port_b,boundary7. ports[1]) annotation (Line(points={{64,-5},
                  {68,-5}},   color={0,127,255}));
          connect(sensor_m_flow2.m_flow,PI. u_m)
            annotation (Line(points={{46,-8.16},{46,-20.6},{57,-20.6}},
                                                           color={0,0,127}));
          connect(const.y,PI. u_s)
            annotation (Line(points={{52.2,-18},{56,-18},{56,-17},{53.4,-17}},
                                                         color={0,0,127}));
          connect(turbine_Tap2.Turb_flow2, Stator6.Inlet) annotation (Line(points={{44.06,8},
                  {46,8},{46,7.8},{48.06,7.8}},           color={28,108,200}));
          connect(Rotor5.Outlet, turbine_Tap2.Turb_flow) annotation (Line(points={{33.92,8},
                  {38.03,8},{38.03,8.08}},                  color={28,108,200}));
          connect(Rotor5.Inlet, Stator5.Outlet) annotation (Line(points={{26.08,7.8},
                  {26.08,8},{24,8},{24,7.6},{22,7.6}},        color={28,108,200}));
          connect(Rotor5.torque, turbine_Editable.Fluidtorques[4]) annotation (Line(
                points={{28.64,12.6},{28,12.6},{28,38},{-12,38},{-12,60},{-12.4,60},
                  {-12.4,58.675}},color={28,108,200}));
          connect(Stator5.Inlet, MoistSep1.Turb_Out) annotation (Line(points={{16.06,
                  7.8},{12,7.8},{12,8}},            color={28,108,200}));
          connect(boundary4.ports[1], MoistSep1.Liquid)
            annotation (Line(points={{6,4},{6,6.08}},         color={0,127,255}));
          connect(Rotor4.Inlet,Stator4. Outlet) annotation (Line(points={{-11.92,
                  7.8},{-16,7.8},{-16,7.6}},
                                   color={28,108,200}));
          connect(Stator4.Inlet,turbine_Tap1. Turb_flow2)
            annotation (Line(points={{-21.94,7.8},{-21.94,8},{-25.94,8},{-25.94,7}},
                                                               color={28,108,200}));
          connect(sensor_m_flow1.port_b,valveLineartanh1. port_a)
            annotation (Line(points={{-18,-3},{-10,-3}}, color={0,127,255}));
          connect(sensor_m_flow1.m_flow,PI2. u_m) annotation (Line(points={{-24,
                  -5.52},{-24,-13},{-20.6,-13}},
                                         color={0,0,127}));
          connect(PI2.y,valveLineartanh1. opening) annotation (Line(points={{-17,
                  -9.7},{-17,-5.4},{-7,-5.4}},     color={0,0,127}));
          connect(const2.y,PI2. u_s) annotation (Line(points={{-17,-21.7},{-18,
                  -21.7},{-18,-16.6},{-17,-16.6}},
                                       color={0,0,127}));
          connect(turbine_Tap1.Tap_flow, sensor_m_flow1.port_a) annotation (Line(points={{-29,
                  4.76},{-29,2},{-30,2},{-30,-3}},                       color={0,127,255}));
          connect(Rotor4.Outlet, MoistSep1.Turb_In) annotation (Line(points={{-4.08,8},
                  {0,8}},                       color={28,108,200}));
          connect(Rotor4.torque, turbine_Editable.Fluidtorques[5]) annotation (Line(
                points={{-9.36,12.6},{-9.36,22},{-10,22},{-10,38},{-12,38},{-12,48},
                  {-12.4,48},{-12.4,58.925}},
                            color={28,108,200}));
          connect(boundary6.ports[1], valveLineartanh1.port_b) annotation (Line(points={{-12,-34},
                  {-12,-18},{-4,-18},{-4,-3}},                color={0,127,255}));
          connect(Rotor2.Outlet, turbine_Tap.Turb_flow) annotation (Line(points={{-72.08,
                  6},{-65.97,6},{-65.97,5.07}},         color={28,108,200}));
          connect(turbine_Tap.Turb_flow2, Stator3.Inlet) annotation (Line(points={{-59.94,
                  5},{-59.94,6},{-55.94,6},{-55.94,5.8}},                color={28,108,200}));
          connect(Rotor3.Inlet, Stator3.Outlet) annotation (Line(points={{-45.92,
                  5.8},{-50,5.8},{-50,5.6}},                     color={28,108,200}));
          connect(Rotor2.Inlet, Stator2.Outlet) annotation (Line(points={{-79.92,
                  5.8},{-80,5.8},{-80,6},{-82,6},{-82,5.6}},     color={28,108,200}));
          connect(Stator2.Inlet, Rotor1.Outlet) annotation (Line(points={{-87.94,
                  5.8},{-88,5.8},{-88,6},{-92.08,6}},           color={28,108,200}));
          connect(Rotor1.Inlet, Stator1.Outlet) annotation (Line(points={{-99.92,
                  5.8},{-102,5.8},{-102,6},{-104,6},{-104,5.6}}, color={28,108,200}));
          connect(Rotor3.Outlet, turbine_Tap1.Turb_flow) annotation (Line(points={{-38.08,
                  6},{-36,6},{-36,7.07},{-31.97,7.07}},            color={28,108,200}));
          connect(turbine_Tap.Tap_flow, sensor_m_flow.port_a) annotation (Line(points={{-63,
                  2.76},{-64,2.76},{-64,0}},              color={0,127,255}));
          connect(sensor_m_flow.port_b, valveLineartanh.port_a) annotation (Line(points={{-64,-12},
                  {-64,-18},{-63,-18}},              color={0,127,255}));
          connect(valveLineartanh.port_b, boundary5.ports[1]) annotation (Line(points={{-63,-28},
                  {-63,-34},{-62,-34}},             color={0,127,255}));
          connect(const1.y, PI1.u_s) annotation (Line(points={{-49,-0.3},{-50,-0.3},
                  {-50,-1.4},{-51,-1.4}},     color={0,0,127}));
          connect(sensor_m_flow.m_flow, PI1.u_m) annotation (Line(points={{-61.84,
                  -6},{-58,-6},{-58,-5},{-54.6,-5}},   color={0,0,127}));
          connect(PI1.y, valveLineartanh.opening) annotation (Line(points={{-51,
                  -8.3},{-51,-17.15},{-59,-17.15},{-59,-23}},
                                                           color={0,0,127}));
          connect(boundary1.ports[1], Stator1.Inlet) annotation (Line(points={{-116,6},
                  {-109.94,5.8}},
                color={28,108,200}));
          connect(Rotor3.torque, turbine_Editable.Fluidtorques[6]) annotation (Line(
                points={{-43.36,10.6},{-44,10.6},{-44,38},{-12.4,38},{-12.4,59.175}},
                                       color={28,108,200}));
          connect(Rotor2.torque, turbine_Editable.Fluidtorques[7]) annotation (Line(
                points={{-77.36,10.6},{-77.36,24},{-78,24},{-78,38},{-12,38},{-12,
                  59.425},{-12.4,59.425}},
                color={28,108,200}));
          connect(Rotor1.torque, turbine_Editable.Fluidtorques[8]) annotation (Line(
                points={{-97.36,10.6},{-97.36,38},{-12.4,38},{-12.4,59.675}},
                            color={28,108,200}));
          connect(boundary1.m_flow_in, ramp.y) annotation (Line(points={{-136,14},{-136,
                  34},{-130,34},{-130,39}}, color={0,0,127}));
          connect(PI.y, valveLineartanh2.opening)
            annotation (Line(points={{60.3,-17},{61,-17},{61,-7.4}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-140,
                    -100},{160,100}})),                                  Diagram(
                coordinateSystem(preserveAspectRatio=false, extent={{-140,-100},{160,
                    100}})),
            experiment(StopTime=40, __Dymola_Algorithm="Esdirk45a"),
            Documentation(info="<html>
<p>This example is a primary reference for anyone looking to use the individual stage turbine models. It shows taps, moisture separators, and many stages all linked to a physical turbine model and to the generator model. Special attention should be paid to the amount of initialization data required in the models. It is highly advised that someone trying to use a many-stage turbine should build their turbine stage-by-stage to establish appropriate design angles and initialization values. Further, it is recommended that a user builds from one end to the other. </p>
<p>Changing initialization values has a significant impact on the ability of these multi-stage turbine models to get to a regular shifting point. Once the ability to achieve a steady state has been possible, the models are generally capable of a great deal of dynamic behavior. However, they are fluid models and so the initialization process is complicated. </p>
</html>"));
        end Eight_Stage_Turbine;

        model SMR_Nominal
          extends Modelica.Icons.Example;
          parameter Real LP_NTU = 1.5;
          parameter Real IP_NTU = 20.0;
          parameter Real HP_NTU = 4.0;
          parameter Modelica.Units.SI.Power Q_nom=53510600;
          Modelica.Units.SI.Energy dEdCycle;
          Modelica.Units.SI.Power Elec_Power;
          Modelica.Units.SI.Temperature Feed_Temp;

          PrimaryHeatSystem.SMR_Generic.Components.SMR_Taveprogram_No_Pump             Reactor(
            redeclare
              NHES.Systems.PrimaryHeatSystem.SMR_Generic.CS_SMR_Tave_Enthalpy_RXPower
              CS,
            port_a_nominal(
              m_flow=70,
              p=3447380,
              T(displayUnit="degC") = 421.15),
            port_b_nominal(
              p=3447380,
              T(displayUnit="degC") = 579.25,
              h=2997670))
            annotation (Placement(transformation(extent={{-104,-42},{-10,68}})));
          NuScale_Secondary SecSide(
            LP_NTU=LP_NTU,
            IP_NTU=IP_NTU,
            HP_NTU=HP_NTU,
            Q_nom=Q_nom,
            redeclare CS_Mass CS)
            annotation (Placement(transformation(extent={{14,-32},{98,52}})));
        equation
          SecSide.dEdCycle = dEdCycle;
          Elec_Power =SecSide.generator.power;
          Feed_Temp =SecSide.HP.Tex_t;
          SecSide.Q_RX_Internal = Reactor.Q_total.y;
          SecSide.Demand_Internal = Q_nom;

          connect(SecSide.port_b, Reactor.port_a) annotation (Line(points={{13.16,
                  -12.68},{0,-12.68},{0,6.23077},{-8.29091,6.23077}},
                                                              color={0,127,255}));
          connect(SecSide.port_a, Reactor.port_b) annotation (Line(points={{13.16,30.16},
                  {0,30.16},{0,34.1538},{-8.29091,34.1538}},
                                                           color={0,127,255}));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-80},
                    {100,100}})),
            experiment(
              StopTime=4000,
              __Dymola_NumberOfIntervals=783,
              __Dymola_Algorithm="Esdirk45a"),
            __Dymola_experimentSetupOutput,
            Icon(coordinateSystem(extent={{-100,-80},{100,100}})),
            __Dymola_Commands(file="run.mos" "run", file="runnow.mos" "runnow"),
            Documentation(info="<html>
<p>This example shows the steady state for the SMR_Generic system 160MWt, ~52MWe system. The system is &quot;mass&quot; controlled. Instead of trying to meet any power demands of the system, the system operates based on opening &amp; closing control valves. </p>
<p>The control system for this example is &quot;CS_Mass&quot; and it currently does not cycle the system whatsoever. This example should be a good starting point for any attempts to add any integration technologies into the NuScale secondary side model. </p>
<p>Changes to the secondary side parameters (turbine design, most pressure values, volumes, etc.) should be done within the lower model rather than the upper. Not all parameters are currently passed to the upper level. </p>
<p>To make any restart files using the full secondary models, note that there is a variable &quot;t_track&quot; that uses reinit() periodically. Therefore, if you want to reset a restart file to t=0, make sure not only to set the t_start = 0 at the beginning of the file, but ctrl + f &quot;t_track&quot; and set ALL instances of it to 0 as well. Models with periodically resetting values use this. Economic components may also have a similar value. Another potentially existing variable is &quot;t_sim_init&quot; which is actually a very useful variable. Its use is designed such that t_sim_init = 0 when your actual simulation period begins (so if you have 1800 seconds of initialization to reach steady state, then you should find the reinit() condition for t_sim_init and set it such that it occurs at t=1800 only). Then, later, you can change the x-variable on your plots to this t_sim_init variable and set the x-range to [0,:] and you&apos;ll have time-plots set properly without having to use the import() functionality. </p>
<p>In later versions, some additional parameterization at this level may come available from the lower models. </p>
<p>- Models by Daniel Mikkelson, daniel.mikkelson@inl.gov </p>
</html>"));
        end SMR_Nominal;

        model Energy_Arbitrage_Modal
          extends Modelica.Icons.Example;
           parameter Integer TES_nPipes=950;
          parameter Modelica.Units.SI.Length TES_Length=175 "HTF pipe length";
           parameter Real PipConcLRat = 3;
          parameter Modelica.Units.SI.Length TES_Thick=0.6;
          parameter Modelica.Units.SI.Length TES_Width=0.8;
           parameter Real  LP_NTU=1.5 "Low pressure NTUHX NTU value";
           parameter Real IP_NTU=20 "Intermediate pressure NTUHX NTU value";
           parameter Real HP_NTU=4 "High pressure NTUHX NTU value";
          parameter Modelica.Units.SI.Pressure P_Rise_DFV=860000;

          parameter Modelica.Units.SI.Power Q_nom=52000000 "Nominal electrical power";
          Modelica.Units.SI.Energy dEdCycle;
          Modelica.Units.SI.Energy TES_E_Dep;
          Modelica.Units.SI.Power Elec_Power;
          Modelica.Units.SI.Temperature Feed_Temp;
          Modelica.Units.SI.Temperature Conc_Hot_Temp;
          Modelica.Units.SI.Temperature Conc_Mid_Temp;
          Modelica.Units.SI.Temperature Conc_Cold_Temp;
          Modelica.Units.SI.Temperature T_Ave_Conc;
          Modelica.Units.SI.MassFlowRate m_dis;
          Modelica.Units.SI.Pressure p_dis;
           parameter Integer nPrices = 24*8 "Number of price intervals";
           parameter Real Interval=3600 "Length in seconds of a price interval";
           parameter Real[nPrices] PriceList = {17.02,16.04,15.3,14.7,13.68,14.41,15.69,15.27,14.48,17.75,19.04,23.11,
        27.52,42.28,48.49,70.03,80.62,53.17,40.12,36.83,27.73,22.93,21.63,20.74,2.05E+01,2.01E+01,1.98E+01,1.96E+01,2.05E+01,2.15E+01,2.69E+01,
        2.86E+01,2.59E+01,2.77E+01,3.12E+01,3.50E+01,4.98E+01,6.31E+01,7.17E+01,9.55E+01,9.11E+01,4.51E+01,4.39E+01,3.39E+01,2.63E+01,2.38E+01,2.18E+01,2.08E+01,
        1.84E+01,1.73E+01,1.64E+01,1.62E+01,1.66E+01,1.82E+01,2.41E+01,2.46E+01,2.39E+01,2.41E+01,2.05E+01,2.39E+01,2.25E+01,2.48E+01,2.66E+01,3.78E+01,3.94E+01,3.64E+01,3.16E+01,3.06E+01,2.37E+01,
        2.32E+01,2.20E+01,1.89E+01,1.94E+01,1.85E+01,1.81E+01,1.76E+01,1.81E+01,2.10E+01,2.43E+01,2.46E+01,2.37E+01,2.46E+01,2.53E+01,2.66E+01,2.72E+01,3.47E+01,3.37E+01,4.61E+01,4.80E+01,3.82E+01,
        3.21E+01,3.09E+01,2.61E+01,2.37E+01,2.22E+01,2.00E+01,1.96E+01,1.83E+01,1.71E+01,1.70E+01,1.75E+01,1.94E+01,2.29E+01,2.41E+01,2.59E+01,2.63E+01,2.77E+01,2.97E+01,3.52E+01,
        4.56E+01,5.15E+01,5.69E+01,6.13E+01,5.54E+01,5.09E+01,4.13E+01,3.03E+01,2.70E+01,2.42E+01,2.31E+01,2.14E+01,2.04E+01,1.88E+01,1.87E+01,1.99E+01,2.18E+01,3.24E+01,
        2.44E+01,2.19E+01,2.38E+01,2.33E+01,2.61E+01,2.74E+01,2.86E+01,2.87E+01,3.03E+01,3.41E+01,3.40E+01,3.80E+01,4.61E+01,3.19E+01,2.83E+01,2.61E+01,2.43E+01,2.87E+01,
        2.41E+01,2.14E+01,2.07E+01,2.08E+01,2.39E+01,2.95E+01,2.85E+01,3.15E+01,3.10E+01,3.12E+01,2.93E+01,2.90E+01,2.46E+01,2.37E+01,2.35E+01,2.52E+01,2.53E+01,
        2.60E+01,2.56E+01,2.42E+01,2.45E+01,2.37E+01,2.23E+01,2.03E+01,1.71E+01,1.60E+01,1.59E+01,1.59E+01,1.63E+01,1.67E+01,1.57E+01,1.76E+01,
        1.83E+01,1.94E+01,2.05E+01,2.17E+01,2.58E+01,2.85E+01,3.37E+01,3.24E+01,2.71E+01,2.71E+01,2.76E+01,2.29E+01,2.17E+01,1.98E+01,1.86E+01} "cents/kWh for pricing profile, likely will be replaced later with a data block";
          Modelica.Units.SI.Time Int_Track(start=0);
           Integer value(start = 1);
         //  Real Price(start = 17.02);
           Real MoneyMade(unit = "1");
           Real MoneyNominal;
           Real Price;
          Modelica.Units.SI.Temperature T_Feed_Ref=273.15 + 140;

          PrimaryHeatSystem.SMR_Generic.Components.SMR_Taveprogram_No_Pump             Reactor(
            redeclare PrimaryHeatSystem.SMR_Generic.CS_SMR_Tave_Enthalpy_RXPower CS,
            port_a_nominal(
              m_flow=70,
              p=3447380,
              T(displayUnit="degC") = 421.15),
            port_b_nominal(
              p=3447380,
              T(displayUnit="degC") = 579.25,
              h=2997670))
            annotation (Placement(transformation(extent={{-114,-40},{-14,64}})));
          NuScale_SBST_Secondary_With_CTES SecSide(
            redeclare NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.CS_Modal
              CS,
            TES_nPipes=TES_nPipes,
            TES_Length=TES_Length,
            TES_Thick=TES_Thick,
            TES_Width=TES_Width,
            LP_NTU=LP_NTU,
            IP_NTU=IP_NTU,
            HP_NTU=HP_NTU,
            P_Rise_DFV=P_Rise_DFV,
            Q_nom=Q_nom)
            annotation (Placement(transformation(extent={{20,-36},{100,54}})));
          Components.Economic_Sim_Profile Econ_Sim
            annotation (Placement(transformation(extent={{-16,64},{20,100}})));
        initial equation
          MoneyMade = 0;
          MoneyNominal = 0;
        equation
          SecSide.dEdCycle = dEdCycle;
          TES_E_Dep =SecSide.TES.E_store_daily;
          Elec_Power =SecSide.generator.power;
          Feed_Temp =SecSide.HP.Tex_t;
          T_Ave_Conc = SecSide.TES.T_Ave_Conc;
          Conc_Hot_Temp=SecSide.TES.Con_State[1, 1].T;
          Conc_Mid_Temp=SecSide.TES.Con_State[5, 1].T;
          Conc_Cold_Temp=SecSide.TES.Con_State[9, 1].T;
          m_dis =SecSide.DFV.m_flow;
          p_dis =SecSide.DFV.port_b.p;
          SecSide.Q_RX_Internal = Reactor.Q_total.y;
          der(Int_Track) = 1/Interval;
          when
              (Int_Track>=1.0) then
            value = pre(value) + 1;
            reinit(Int_Track,0);
         //   reinit(Price,PriceList[value]);
          end when;
          //Prices are in cents/kWh, so: we divide Price/100 = Dollars/kWh, and we divide power by 1000 to make it kW, and divide by 3600 to cancel
          //out and make it per hour.
          der(MoneyMade) = (1/100)*(1/3600)*PriceList[value]*Elec_Power/1000;
          Price = PriceList[value];
          der(MoneyNominal) = (1/100)*(1/3600)*PriceList[value]*Q_nom/1000;
          Econ_Sim.Net_Demand.y = SecSide.Demand_Internal;

          Econ_Sim.Anticipatory_Signals.y = SecSide.DFV_Anticipatory_Internal;

          connect(SecSide.port_b, Reactor.port_a) annotation (Line(points={{20.8,-13.5},
                  {20.8,2},{-4,2},{-4,5.6},{-12.1818,5.6}},          color={0,127,255}));
          connect(SecSide.port_a, Reactor.port_b) annotation (Line(points={{20,31.5},{
                  -4,31.5},{-4,32},{-12.1818,32}},       color={0,127,255}));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-80},{100,
                    100}})),
            experiment(
              StopTime=30,
              __Dymola_NumberOfIntervals=193,
              Tolerance=0.01,
              __Dymola_Algorithm="Esdirk45a"),
            __Dymola_experimentSetupOutput,
            Icon(coordinateSystem(extent={{-100,-80},{100,100}})),
            __Dymola_Commands(file="run.mos" "run", file="runnow.mos" "runnow"),
            Documentation(info="<html>
<p>The goal of this example is to show how a power-controlled system might do some energy arbitrage based on some economic modeling. The economics portion of this model are not included here, but do know that the demand profile set in the Economic_Sim model and linked up with the secondary side model is based on an economic optimization. The pricing data included in this model shows the pricing source data. </p>
<p>Note that for default settings, 30 second simulation and 193 intervals, this model requires about 25 minutes. The simulation speed should increase after the system gets to an initial operating state. </p>
</html>"));
        end Energy_Arbitrage_Modal;

        model Energy_Abritrage_High_Fidelity_SMR
          extends Modelica.Icons.Example;
           parameter Integer TES_nPipes=800;
          parameter Modelica.Units.SI.Length TES_Length=150;
          parameter Modelica.Units.SI.Length TES_Thick=0.6;
          parameter Modelica.Units.SI.Length TES_Width=0.8;
           parameter Real  LP_NTU=1.5;
           parameter Real IP_NTU=20;
           parameter Real HP_NTU=4;
          parameter Modelica.Units.SI.Pressure P_Rise_DFV=860000;
          parameter Modelica.Units.SI.Time Ramp_Stor=600;
          parameter Modelica.Units.SI.Time Ramp_Dis=600;
          parameter Modelica.Units.SI.Power Q_nom=52000000;
          Modelica.Units.SI.Energy dEdCycle;
          Modelica.Units.SI.Energy TES_E_Dep;
          Modelica.Units.SI.Power Elec_Power;
          Modelica.Units.SI.Temperature Feed_Temp;
          Modelica.Units.SI.Temperature Conc_Hot_Temp;
          Modelica.Units.SI.Temperature Conc_Mid_Temp;
          Modelica.Units.SI.Temperature Conc_Cold_Temp;
          Modelica.Units.SI.Temperature T_Ave_Conc;
          Modelica.Units.SI.MassFlowRate m_dis;
          Modelica.Units.SI.Pressure p_dis;
           parameter Integer nPrices = 24*8;
           parameter Real Interval=3600;

          Modelica.Units.SI.Temperature T_Feed_Ref=273.15 + 140;
          Modelica.Units.SI.Time t_sim_post_init(start = -7200);

          PrimaryHeatSystem.SMR_Generic.Components.SMR_High_fidelity_no_pump            Reactor(
            redeclare NHES.Systems.PrimaryHeatSystem.SMR_Generic.CS_SMR_highfidelity CS(
              SG_exit_enthalpy=3000e3,
              m_setpoint=675,
              Q_nom=1,
              demand=1),
            port_a_nominal(
              m_flow=70,
              p=3447380,
              T(displayUnit="degC") = 421.15),
            port_b_nominal(
              p=3447380,
              T(displayUnit="degC") = 579.25,
              h=2997670))
            annotation (Placement(transformation(extent={{-210,-104},{-40,72}})));
          NuScale_SBST_Secondary_With_CTES SecSide(
            redeclare NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.CS_Modal
              CS,
            TES_nPipes=TES_nPipes,
            TES_Length=TES_Length,
            TES_Thick=TES_Thick,
            TES_Width=TES_Width,
            LP_NTU=LP_NTU,
            IP_NTU=IP_NTU,
            HP_NTU=HP_NTU,
            P_Rise_DFV=P_Rise_DFV,
            Ramp_Stor=Ramp_Stor,
            Ramp_Dis=Ramp_Dis,
            Q_nom=Q_nom)
            annotation (Placement(transformation(extent={{6,-76},{124,42}})));

          Components.Economic_Sim_IPCO_July
                                    ES(
            Interval_length=1200,
            demand_intervals=24*5,
            Demand_Input=1e6*{52.0,52.0,52.0,52.0,52.0,56.6,57.5,52.8,47.8,43.1,44.4,
                43.1,42.4,41.7,41.5,43.2,43.6,45.5,48.2,50.4,54.5,58.3,59.9,60.9,61.3,
                62.3,61.5,60.4,58.6,56.6,53.5,50.6,46.6,43.0,41.4,39.9,38.2,37.3,38.8,
                40.5,41.1,42.7,43.2,49.9,47.4,50.0,52.7,54.8,56.0,54.8,54.7,56.1,56.0,
                52.9,49.2,44.8,41.6,41.2,40.2,38.6,38.3,37.7,39.0,41.3,41.7,41.7,42.9,
                44.5,46.9,47.8,48.6,49.9,51.3,51.6,51.4,52.2,52.5,49.9,47.6,43.9,40.9,
                38.4,36.7,36.3,37.1,37.4,37.5,38.2,38.3,39.9,42.6,45.1,47.9,50.4,52.6,
                53.9,55.7,56.8,57.0,56.7,53.4,51.3,48.7,45.3,43.2,41.4,39.8,38.9,38.4,
                37.8,38.2,38.2,38.1,39.3,41.0,43.5,46.7,49.8,52.7,55.4,58.0,60.2,61.1})
            annotation (Placement(transformation(extent={{-38,74},{-18,94}})));
        initial equation
          t_sim_post_init = -7200;
        equation
          der(t_sim_post_init) = 1;
          SecSide.dEdCycle = dEdCycle;
          TES_E_Dep =SecSide.TES.E_store_daily;
          Elec_Power =SecSide.generator.power;
          Feed_Temp =SecSide.HP.Tex_t;
          T_Ave_Conc = SecSide.TES.T_Ave_Conc;
          Conc_Hot_Temp=SecSide.TES.Con_State[1, 1].T;
          Conc_Mid_Temp=SecSide.TES.Con_State[5, 1].T;
          Conc_Cold_Temp=SecSide.TES.Con_State[9, 1].T;
          m_dis =SecSide.DCV.m_flow;
          p_dis =SecSide.DCV.port_b.p;

          //Prices are in cents/kWh, so: we divide Price/100 = Dollars/kWh, and we divide power by 1000 to make it kW, and divide by 3600 to cancel
          //out and make it per hour.
          //SecSide.Q_Rx_Total = Reactor.Q_total.y;
          Reactor.Q_total.y = SecSide.Q_RX_Internal;
          SecSide.DFV_Anticipatory_Internal = ES.Anticipatory_Signals.y;
          SecSide.Demand_Internal = ES.Net_Demand.y;

          connect(SecSide.port_b, Reactor.port_a) annotation (Line(points={{7.18,-46.5},
                  {-26,-46.5},{-26,-32.3429},{-37.3846,-32.3429}},   color={0,127,255}));
          connect(SecSide.port_a, Reactor.port_b) annotation (Line(points={{6,12.5},{-8,
                  12.5},{-8,10},{-22,10},{-22,9.14286},{-37.3846,9.14286}},
                                                         color={0,127,255}));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-80},
                    {100,100}})),
            experiment(
              StopTime=30,
              __Dymola_NumberOfIntervals=1080,
              Tolerance=0.0005,
              __Dymola_Algorithm="Esdirk45a"),
            __Dymola_experimentSetupOutput,
            Icon(coordinateSystem(extent={{-100,-80},{100,100}})),
            __Dymola_Commands(file="run.mos" "run", file="runnow.mos" "runnow"));
        end Energy_Abritrage_High_Fidelity_SMR;

        model Energy_Abritrage_High_Fidelity_SMR_workshop
          extends Modelica.Icons.Example;
           parameter Integer TES_nPipes=800;
          parameter Modelica.Units.SI.Length TES_Length=150;
          parameter Modelica.Units.SI.Length TES_Thick=0.6;
          parameter Modelica.Units.SI.Length TES_Width=0.8;
           parameter Real  LP_NTU=1.5;
           parameter Real IP_NTU=20;
           parameter Real HP_NTU=4;
          parameter Modelica.Units.SI.Pressure P_Rise_DFV=860000;
          parameter Modelica.Units.SI.Time Ramp_Stor=600;
          parameter Modelica.Units.SI.Time Ramp_Dis=600;
          parameter Modelica.Units.SI.Power Q_nom=52000000;
          Modelica.Units.SI.Energy dEdCycle;
          Modelica.Units.SI.Energy TES_E_Dep;
          Modelica.Units.SI.Power Elec_Power;
          Modelica.Units.SI.Temperature Feed_Temp;
          Modelica.Units.SI.Temperature Conc_Hot_Temp;
          Modelica.Units.SI.Temperature Conc_Mid_Temp;
          Modelica.Units.SI.Temperature Conc_Cold_Temp;
          Modelica.Units.SI.Temperature T_Ave_Conc;
          Modelica.Units.SI.MassFlowRate m_dis;
          Modelica.Units.SI.Pressure p_dis;
           parameter Integer nPrices = 24*8;
           parameter Real Interval=3600;

          Modelica.Units.SI.Temperature T_Feed_Ref=273.15 + 140;
          Modelica.Units.SI.Time t_sim_post_init(start = -7200);

          PrimaryHeatSystem.SMR_Generic.Components.SMR_High_fidelity_no_pump            Reactor(
            redeclare NHES.Systems.PrimaryHeatSystem.SMR_Generic.CS_SMR_highfidelity CS(
              SG_exit_enthalpy=3000e3,
              m_setpoint=675,
              Q_nom=1,
              demand=1),
            port_a_nominal(
              m_flow=70,
              p=3447380,
              T(displayUnit="degC") = 421.15),
            port_b_nominal(
              p=3447380,
              T(displayUnit="degC") = 579.25,
              h=2997670))
            annotation (Placement(transformation(extent={{-204,-86},{-34,90}})));
          NuScale_SBST_Secondary_With_CTES SecSide(
            redeclare NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.CS_Modal
              CS,
            TES_nPipes=TES_nPipes,
            TES_Length=TES_Length,
            TES_Thick=TES_Thick,
            TES_Width=TES_Width,
            LP_NTU=LP_NTU,
            IP_NTU=IP_NTU,
            HP_NTU=HP_NTU,
            P_Rise_DFV=P_Rise_DFV,
            Ramp_Stor=Ramp_Stor,
            Ramp_Dis=Ramp_Dis,
            Q_nom=Q_nom)
            annotation (Placement(transformation(extent={{6,-66},{124,52}})));

          Components.Economic_Sim_IPCO_July
                                    ES(
            Interval_length=1200,
            intervals_to_steady_state=2,
            demand_intervals=24*5,
            Demand_Input=1e6*{52.0,52.0,52.0,52.0,52.0,52.0,56.6,57.5,52.8,47.8,43.1,
                44.4,43.1,42.4,41.7,41.5,43.2,43.6,45.5,48.2,50.4,54.5,58.3,59.9,60.9,
                61.3,62.3,61.5,60.4,58.6,56.6,53.5,50.6,46.6,43.0,41.4,39.9,38.2,37.3,
                38.8,40.5,41.1,42.7,43.2,49.9,47.4,50.0,52.7,54.8,56.0,54.8,54.7,56.1,
                56.0,52.9,49.2,44.8,41.6,41.2,40.2,38.6,38.3,37.7,39.0,41.3,41.7,41.7,
                42.9,44.5,46.9,47.8,48.6,49.9,51.3,51.6,51.4,52.2,52.5,49.9,47.6,43.9,
                40.9,38.4,36.7,36.3,37.1,37.4,37.5,38.2,38.3,39.9,42.6,45.1,47.9,50.4,
                52.6,53.9,55.7,56.8,57.0,56.7,53.4,51.3,48.7,45.3,43.2,41.4,39.8,38.9,
                38.4,37.8,38.2,38.2,38.1,39.3,41.0,43.5,46.7,49.8,52.7,55.4,58.0,60.2})
            annotation (Placement(transformation(extent={{-38,74},{-18,94}})));
        initial equation
          t_sim_post_init = -7200;
        equation
          der(t_sim_post_init) = 1;
          SecSide.dEdCycle = dEdCycle;
          TES_E_Dep =SecSide.TES.E_store_daily;
          Elec_Power =SecSide.generator.power;
          Feed_Temp =SecSide.HP.Tex_t;
          T_Ave_Conc = SecSide.TES.T_Ave_Conc;
          Conc_Hot_Temp=SecSide.TES.Con_State[1, 1].T;
          Conc_Mid_Temp=SecSide.TES.Con_State[5, 1].T;
          Conc_Cold_Temp=SecSide.TES.Con_State[9, 1].T;
          m_dis =SecSide.DCV.m_flow;
          p_dis =SecSide.DCV.port_b.p;

          //Prices are in cents/kWh, so: we divide Price/100 = Dollars/kWh, and we divide power by 1000 to make it kW, and divide by 3600 to cancel
          //out and make it per hour.
          //SecSide.Q_Rx_Total = Reactor.Q_total.y;
          Reactor.Q_total.y = SecSide.Q_RX_Internal;
          SecSide.DFV_Anticipatory_Internal = ES.Anticipatory_Signals.y;
          SecSide.Demand_Internal = ES.Net_Demand.y;

          connect(SecSide.port_b, Reactor.port_a) annotation (Line(points={{7.18,-36.5},
                  {-20,-36.5},{-20,-14.3429},{-31.3846,-14.3429}},   color={0,127,255}));
          connect(SecSide.port_a, Reactor.port_b) annotation (Line(points={{6,22.5},{-8,
                  22.5},{-8,10},{-22,10},{-22,27.1429},{-31.3846,27.1429}},
                                                         color={0,127,255}));
          annotation (
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-80},
                    {100,100}})),
            experiment(
              StopTime=3600,
              __Dymola_NumberOfIntervals=199,
              Tolerance=0.0005,
              __Dymola_Algorithm="Esdirk45a"),
            __Dymola_experimentSetupOutput,
            Icon(coordinateSystem(extent={{-100,-80},{100,100}})),
            __Dymola_Commands(file="run.mos" "run", file="runnow.mos" "runnow"));
        end Energy_Abritrage_High_Fidelity_SMR_workshop;
      end Examples;

      model NuScale_Secondary
        import NHES;
          extends BaseClasses.Partial_SubSystem_A(
          redeclare replaceable CS_Dummy CS,
          redeclare replaceable ED_Dummy ED,
          redeclare Data.Data_Dummy data);
          input Modelica.Units.SI.Power Q_RX_Internal;
          input Modelica.Units.SI.Power Demand_Internal;

        parameter Real LP_NTU = 1.5 "Low pressure NTUHX NTU";
        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Real HP_NTU = 4.0 "High pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure P_Rise_DFV=6.6e5 "Discharge source pump replacement dp";
        constant Real pi = Modelica.Constants.pi;
        parameter Modelica.Units.SI.Power Q_nom;
        Modelica.Units.SI.Energy dEdCycle;
        Modelica.Units.SI.Time t_track;
       // Modelica.SIunits.Temperature T_ideal;
        parameter Modelica.Units.SI.Temperature T_feed_ref=273 + 138;

          parameter Modelica.Units.SI.Velocity vthes1=0 "Initial rotational velocity. 's/r' indicates stator/rotor, # is stage #" annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther1=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes2=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther2=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes3=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther3=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes4=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther4=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes5=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther5=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes6=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther6=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes7=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther7=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes8=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther8=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Pressure ps1in=3170000 "Same indication system as rotational velocity" annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps1out=2620000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr1out=2610000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps2out=1400000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr2out=522600 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps3out=350000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps4out=180000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr4out=137800 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps5out=72000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr5out=64200 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps6out=58000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr6out=52800 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps7out=40000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr7out=26400 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps8out=17500 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr8out=8100 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_1=3000e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_2=2980e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_3=2800e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_4=2780e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_5=2740e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_6=2700e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_7=2650e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_8=2630e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.Area Ar8[3]={3.45,8.1,8.1} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As8[3]={2.64,3.45,3.45} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar7[3]={1.95,2.64,2.64} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As7[3]={1.545,1.95,1.95} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar6[3]={1.515,1.545,1.545} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As6[3]={1.515,1.515,1.515} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar5[3]={1.035,1.515,1.515} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As5[3]={0.84,1.035,1.035} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar4[3]={0.51,0.72,0.72} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As4[3]={0.43,0.51,0.51} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar3[3]={0.25,0.43,0.43} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As3[3]={0.23,0.25,0.25} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar2[3]={0.1,0.23,0.23} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As2[3]={0.0645,0.1,0.1} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar1[3]={0.0645,0.0645,0.0645} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As1[3]={0.0645,0.0645,0.0645} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Length ri[3]={0.1,0.1,0.1} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros1[3]={0.195,0.2,0.22} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror1[3]={0.22,0.24,0.245} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros2[3]={0.245,0.26,0.265} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror2[3]={0.265,0.29,0.295} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros3[3]={0.295,0.31,0.315} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror3[3]={0.315,0.33,0.335} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros4[3]={0.335,0.37,0.38} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror4[3]={0.38,0.41,0.42} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros5[3]={0.42,0.46,0.47} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror5[3]={0.47,0.51,0.53} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros6[3]={0.53,0.58,0.59} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror6[3]={0.59,0.63,0.64} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros7[3]={0.64,0.68,0.69} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror7[3]={0.69,0.74,0.75} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros8[3]={0.75,0.81,0.82} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror8[3]={0.82,0.87,0.89} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Real[2] alphas1 = {pi/3.4,0} "Ideal deflection angle in each stage. 0 indicates no change, not a 0 angle" annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar1 = {-pi/3.48,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas2 = {pi/2.185,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar2 = {-pi/2.2,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas3 = {pi/2.43,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar3 = {-pi/2.4,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas4 = {pi/2.6,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar4 = {-pi/2.56,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas5 = {pi/2.52,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar5 = {-pi/2.42,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas6 = {pi/3.33,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar6 = {-pi/3.62,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas7 = {pi/2.53,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar7 = {-pi/2.55,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas8 = {pi/2.41,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar8 = {-pi/2.21,0} annotation(dialog(tab = "Deflection", group = "Angles"));
      public
        StagebyStageTurbine.MS MoistSep3(V_MS=0.6, eta=0.227)
          annotation (Placement(transformation(extent={{90,18},{102,30}})));
        StagebyStageTurbine.Turbine_Physical turbine_Editable(nSt=8)
          annotation (Placement(transformation(extent={{-94,44},{-74,64}})));
        StagebyStageTurbine.Generator_Basic                  generator(omega_nominal=50
              *3.14)
          annotation (Placement(transformation(extent={{-66,50},{-46,70}})));
        StagebyStageTurbine.Rotor_Stage Rotor8(
          m_flow_nom=54.86,
          alpha=alphar8,
          A_flow=Ar8,
          dz={0.4,1},
          ro=ror8,
          h_init=2260e3,
          m_init=52,
          p_in_init=ps8out,
          v_the_init=vther8,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{114,14},{122,34}})));

        StagebyStageTurbine.Stator_Stage Stator8(
          isenthalpic=true,
          alpha=alphas8,
          A_flow=As8,
          ro=ros8,
          h_init=2350e3,
          m_init=52,
          p_in_init=pr7out,
          p_out_init=ps8out,
          v_the_init=vthes8)
          annotation (Placement(transformation(extent={{106,14},{112,34}})));
        StagebyStageTurbine.Rotor_Stage Rotor7(
          m_flow_nom=55.13,
          alpha=alphar7,
          A_flow=Ar7,
          ro=ror7,
          h_init=2330e3,
          m_init=53,
          p_in_init=ps7out,
          v_the_init=vther7,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{72,14},{80,34}})));

        StagebyStageTurbine.Stator_Stage Stator7(
          isenthalpic=true,
          alpha=alphas7,
          A_flow=As7,
          ro=ros7,
          h_init=2383e3,
          m_init=53,
          p_in_init=pr6out,
          p_out_init=ps7out,
          v_the_init=vthes7)
          annotation (Placement(transformation(extent={{64,14},{70,34}})));

        StagebyStageTurbine.MS MoistSep2(V_MS=0.25, eta=0.19)
          annotation (Placement(transformation(extent={{46,18},{58,30}})));
        StagebyStageTurbine.Rotor_Stage Rotor6(
          m_flow_nom=56.18,
          alpha=alphar6,
          A_flow=Ar6,
          ro=ror6,
          h_init=2336e3,
          m_init=56,
          p_in_init=ps6out,
          v_the_init=vther6,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{34,14},{42,34}})));

        StagebyStageTurbine.Stator_Stage Stator6(
          v_the_init=vthes6,
          isenthalpic=true,
          alpha=alphas6,
          A_flow=As6,
          ro=ros6,
          h_init=2417e3,
          m_init=56,
          p_in_init=pr5out,
          p_out_init=ps6out)
          annotation (Placement(transformation(extent={{22,14},{28,34}})));

        StagebyStageTurbine.Turbine_Tap turbine_Tap2
          annotation (Placement(transformation(extent={{12,16},{18,32}})));
        StagebyStageTurbine.Stator_Stage Stator5(
          dz={1.0,0.3},
          v_the_init=vthes5,
          alpha=alphas5,
          A_flow=As5,
          ro=ros5,
          h_init=2402e3,
          m_init=59,
          p_in_init=pr4out,
          p_out_init=ps5out)
          annotation (Placement(transformation(extent={{-8,14},{-2,34}})));

        StagebyStageTurbine.Rotor_Stage Rotor5(
          m_flow_nom=59.78,
          alpha=alphar5,
          A_flow=Ar5,
          ro=ror5,
          h_init=2379e3,
          m_init=59,
          p_in_init=ps5out,
          v_the_init=vther5,
          v_r_init=0.1) annotation (Placement(transformation(extent={{0,14},{8,34}})));

        StagebyStageTurbine.MS MoistSep1(V_MS=25, eta=0.17)
          annotation (Placement(transformation(extent={{-24,18},{-12,30}})));
        StagebyStageTurbine.Rotor_Stage Rotor4(
          m_flow_nom=60.76,
          alpha=alphar4,
          A_flow=Ar4,
          ro=ror4,
          h_init=2402e3,
          m_init=60,
          p_in_init=ps4out,
          v_the_init=vther4,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-38,14},{-30,34}})));

        StagebyStageTurbine.Stator_Stage Stator4(
          v_the_init=vthes4,
          isenthalpic=true,
          alpha=alphas4,
          A_flow=As4,
          ro=ros4,
          h_init=2504e3,
          m_init=60,
          p_in_init=pr3out,
          p_out_init=ps4out)
          annotation (Placement(transformation(extent={{-48,14},{-42,34}})));

        StagebyStageTurbine.Turbine_Tap turbine_Tap1
          annotation (Placement(transformation(extent={{-58,16},{-52,30}})));
        StagebyStageTurbine.Rotor_Stage Rotor3(
          m_flow_nom=64.31,
          alpha=alphar3,
          A_flow=Ar3,
          ro=ror3,
          h_init=2477e3,
          m_init=64,
          p_in_init=ps3out,
          v_the_init=vther3,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-74,12},{-66,32}})));

        StagebyStageTurbine.Stator_Stage Stator3(
          v_the_init=vthes3,
          isenthalpic=true,
          alpha=alphas3,
          A_flow=As3,
          ro=ros3,
          h_init=2563e3,
          m_init=64,
          p_in_init=pr2out,
          p_out_init=ps3out)
          annotation (Placement(transformation(extent={{-82,12},{-76,32}})));
        StagebyStageTurbine.Turbine_Tap turbine_Tap(Tap_flow(m_flow(start=-5.237983241487215)))
          annotation (Placement(transformation(extent={{-92,16},{-86,30}})));
        StagebyStageTurbine.Rotor_Stage Rotor2(
          m_flow_nom=68.22,
          alpha=alphar2,
          A_flow=Ar2,
          ro=ror2,
          h_init=2674e3,
          m_init=68,
          p_in_init=ps2out,
          v_the_init=vther2,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-104,12},{-96,32}})));

        StagebyStageTurbine.Stator_Stage Stator2(
          v_the_init=vthes2,
          isenthalpic=true,
          alpha=alphas2,
          A_flow=As2,
          ro=ros2,
          h_init=2965e3,
          m_init=68,
          p_in_init=pr1out,
          p_out_init=ps2out)
          annotation (Placement(transformation(extent={{-114,12},{-108,32}})));
        StagebyStageTurbine.Rotor_Stage Rotor1(
          m_flow_nom=68.22,
          alpha=alphar1,
          A_flow=Ar1,
          ro=ror1,
          h_init=2999e3,
          m_init=68,
          p_in_init=ps1out,
          v_the_init=vther1,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-128,12},{-120,32}})));

        StagebyStageTurbine.Stator_Stage Stator1(
          v_the_init=vthes1,
          isenthalpic=true,
          alpha=alphas1,
          A_flow=As1,
          ro=ros1,
          h_init=2999e3,
          m_init=68,
          p_in_init=ps1in,
          p_out_init=ps1out)
          annotation (Placement(transformation(extent={{-136,12},{-130,32}})));
        NHES.Fluid.HeatExchangers.Generic_HXs.NTU_HX LP(
          NTU=LP_NTU,
          K_tube=17000,
          K_shell=5,
          V_Tube=4.,
          V_Shell=4,
          p_start_tube=2340000,
          h_start_tube_inlet=184e3,
          h_start_tube_outlet=184e3,
          p_start_shell=58000,
          h_start_shell_inlet=405.5e3,
          h_start_shell_outlet=405.5e3,
          Q_init=1e6,
          Cr_init=0.8,
          deltaX_t_init=0.0,
          deltaX_s_init=0.0,
          Shell(medium(h(start=100000))))
          annotation (Placement(transformation(extent={{4,-20},{16,-42}})));
        NHES.Fluid.HeatExchangers.Generic_HXs.NTU_HX IP(
          NTU=IP_NTU,
          K_tube=17000,
          K_shell=500,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=3740000,
          h_start_tube_inlet=346.6e3,
          h_start_tube_outlet=346.6e3,
          p_start_shell=497000,
          h_start_shell_inlet=368.2e3,
          h_start_shell_outlet=368.2e3,
          Q_init=1e6)
          annotation (Placement(transformation(extent={{-36,-20},{-16,-40}})));
        NHES.Fluid.HeatExchangers.Generic_HXs.NTU_HX HP(
          NTU=HP_NTU,
          K_tube=16500,
          K_shell=50,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=3740000,
          h_start_tube_inlet=523.1e3,
          h_start_tube_outlet=523.1e3,
          p_start_shell=497000,
          h_start_shell_inlet=544.5e3,
          h_start_shell_outlet=544.5e3,
          Q_init=1e6,
          Shell(medium(h(start=500e3))))
          annotation (Placement(transformation(extent={{-96,-18},{-76,-40}})));
        StagebyStageTurbine.BaseClasses.Turbine_Outlet turbine_Outlet
          annotation (Placement(transformation(extent={{130,14},{134,34}})));
        StagebyStageTurbine.BaseClasses.Turbine_Inlet turbine_Inlet annotation (
            Placement(transformation(
              extent={{-4,-8},{4,8}},
              rotation=90,
              origin={-142,16})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr3out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.2),
          nPorts_a=2,
          nPorts_b=1)
          annotation (Placement(transformation(extent={{-54,-22},{-34,-2}})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume1(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr5out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.2),
          nPorts_a=3,
          nPorts_b=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={6,-14})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false)
          annotation (Placement(transformation(extent={{-4,-5},{4,5}},
              rotation=90,
              origin={69,14})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume3(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr8out,
          use_T_start=false,
          h_start=150e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=5),
          nPorts_b=4,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={92,-36})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance(R=90000)
          annotation (Placement(transformation(extent={{-70,-20},{-62,-8}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance1(R=8500)
          annotation (Placement(transformation(extent={{-6,-7},{6,7}},
              rotation=90,
              origin={-12,-21})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance2(R=3500)
          annotation (Placement(transformation(extent={{22,-26},{30,-14}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow3(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{34,-12},{46,-26}})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false)
          annotation (Placement(transformation(extent={{-2,-4},{2,4}},
              rotation=90,
              origin={54,-8})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser3(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false)
          annotation (Placement(transformation(extent={{114,-2},{124,8}})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser4(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false,V_total=100)
          annotation (Placement(transformation(extent={{138,-4},{148,6}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow4(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{54,16},{60,6}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow5(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=180,
              origin={110,9})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow6(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=90,
              origin={144,15})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow7(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{78,18},{86,10}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow8(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=90,
              origin={120,-11})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow9(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-6,-7},{6,7}},
              rotation=270,
              origin={146,-19})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow10(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-6,7},{6,-7}},
              rotation=0,
              origin={72,-7})));
        TRANSFORM.Controls.PI_Control PI4
          annotation (Placement(transformation(extent={{-3,-3},{3,3}},
              rotation=270,
              origin={151,-9})));
        TRANSFORM.Controls.PI_Control PI5
          annotation (Placement(transformation(extent={{-3,-3},{3,3}},
              rotation=270,
              origin={129,-11})));
        TRANSFORM.Controls.PI_Control PI6
          annotation (Placement(transformation(extent={{-3,3},{3,-3}},
              rotation=270,
              origin={67,5})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          valveLineartanh3(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40)
          annotation (Placement(transformation(extent={{88,10},{94,4}})));
        TRANSFORM.Controls.PI_Control PI7 annotation (Placement(transformation(
              extent={{3,-3},{-3,3}},
              rotation=180,
              origin={61,-19})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          valveLineartanh4(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40)
          annotation (Placement(transformation(extent={{80,-6},{86,-12}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          valveLineartanh5(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40) annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={121,-25})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          valveLineartanh6(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40) annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={143,-31})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume2(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr5out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=2.5),
          nPorts_b=1,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-4,-5},{4,5}},
              rotation=0,
              origin={102,15})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume4(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr5out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.8),
          nPorts_b=1,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-6,-6},{6,6}},
              rotation=270,
              origin={52,6})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.SpringBallValve
          LPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr8out,
          K=500,
          opening_init=0.01,
          tau=0.1) annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={21,3})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.SpringBallValve
          IPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr6out,
          K=4250,
          tau=0.1) annotation (Placement(transformation(
              extent={{-5,-5},{5,5}},
              rotation=270,
              origin={-53,5})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.SpringBallValve
          HPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr5out,
          K=2300,
          tau=0.1) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-88,-2})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance6(R=15000)
          annotation (Placement(transformation(extent={{92,10},{100,22}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance4(R=65000)
          annotation (Placement(transformation(extent={{-10,0},{-2,12}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance5(R=50000)
          annotation (Placement(transformation(extent={{-4,-6},{4,6}},
              rotation=270,
              origin={52,16})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          TCV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=450000,
          m_flow_nominal=68.404,
          opening_actual(start=1)) annotation (Placement(transformation(
              extent={{5,5},{-5,-5}},
              rotation=270,
              origin={-143,3})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance7(dp0=-2000)
                      annotation (Placement(transformation(
              extent={{3,-2},{-3,2}},
              rotation=180,
              origin={63,-12})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance8(dp0=2000)
                      annotation (Placement(transformation(
              extent={{-3,-2},{3,2}},
              rotation=180,
              origin={77,12})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance9(dp0=-2000)
                      annotation (Placement(transformation(
              extent={{3,-2},{-3,2}},
              rotation=180,
              origin={107,-16})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance10(dp0=-2000)
                      annotation (Placement(transformation(
              extent={{-3,-2},{3,2}},
              rotation=180,
              origin={141,-8})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLinearTotal
          TBV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=400000,
          m_flow_nominal=68.404,
          opening_actual(start=0)) annotation (Placement(transformation(
              extent={{5,5},{-5,-5}},
              rotation=270,
              origin={-189,1})));
        Modelica.Fluid.Machines.PrescribedPump FWCP(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          allowFlowReversal=false,
          p_a_start=2200000,
          p_b_start=3700000,
          m_flow_start=66.3,
          nParallel=3,
          redeclare function flowCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow
              (V_flow_nominal={0,0.07,0.105}, head_nominal={400,200,0}),
          N_nominal=1500,
          rho_nominal=945,
          use_powerCharacteristic=false,
          redeclare function efficiencyCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.constantEfficiency
              (eta_nominal=0.8),
          V=1.5,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          use_T_start=false,
          h_start=500e3,
          use_N_in=true,
          N_const=890.3)
          annotation (Placement(transformation(extent={{-54,-28},{-66,-40}})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p1(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-178,14})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          FCV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=200000,
          m_flow_nominal=63.5,
          opening_actual(start=1)) annotation (Placement(transformation(
              extent={{5,5},{-5,-5}},
              rotation=270,
              origin={-115,-9})));
        Modelica.Fluid.Machines.PrescribedPump CDP(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          allowFlowReversal=false,
          p_a_start=8000,
          p_b_start=2220000,
          m_flow_start=68.4,
          nParallel=3,
          redeclare function flowCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow
              (V_flow_nominal={0,0.07,0.105}, head_nominal={400,200,0}),
          N_nominal=1500,
          rho_nominal=945,
          use_powerCharacteristic=false,
          redeclare function efficiencyCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.constantEfficiency
              (eta_nominal=0.8),
          V=1.5,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          use_T_start=false,
          h_start=300e3,
          N_const=1278.78)
          annotation (Placement(transformation(extent={{50,-42},{36,-28}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=90,
              origin={-130,3})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p2(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,4},{-4,-4}},
              rotation=90,
              origin={-104,-26})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p3(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,4},{-4,-4}},
              rotation=90,
              origin={-110,6})));
        Modelica.Blocks.Math.Add add(k2=-1) annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=270,
              origin={-107,-45})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume5(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=ps1in,
          use_T_start=false,
          h_start=3000e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          nPorts_b=2,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-188,-18})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow12(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-154,56},{-146,64}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{-112,-64},{-92,-44}}), iconTransformation(
                extent={{-112,-64},{-92,-44}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{-112,38},{-92,58}}), iconTransformation(extent={{-112,38},
                  {-92,58}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-6,7},{6,-7}},
              rotation=90,
              origin={-118,-25})));
        Modelica.Blocks.Sources.RealExpression Q_RX_Internal_Block(y=Q_RX_Internal)
          annotation (Placement(transformation(extent={{-164,130},{-144,150}})));
        Modelica.Blocks.Sources.RealExpression Demand_Internal_Block(y=Demand_Internal)
          annotation (Placement(transformation(extent={{-164,114},{-144,134}})));
        Modelica.Blocks.Sources.RealExpression DFV_Anticipatory_Dummy(y=0)
          annotation (Placement(transformation(extent={{-100,138},{-80,158}})));
        Modelica.Blocks.Sources.RealExpression Superheat_Sensor_Dummy(y=0)
          annotation (Placement(transformation(extent={{-100,124},{-80,144}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.Delay
          delay2(Ti=0.001)
          annotation (Placement(transformation(extent={{-48,72},{-42,80}})));
      initial equation
        dEdCycle=0;
        t_track = 0;

      //  T_ideal = T_feed_ref;
      equation
        der(t_track)=1;
        der(dEdCycle) = generator.power-Q_nom;
        when t_track>=86400 then
          reinit(dEdCycle,0);
          reinit(t_track,0);
        end when;

        connect(generator.shaft, turbine_Editable.Generator_torque) annotation (Line(
              points={{-66.1,59.9},{-70,59.9},{-70,60},{-72,60},{-72,59.8},{-74,
                59.8}},                                                     color={0,0,
                0}));
        connect(Rotor8.Inlet, Stator8.Outlet) annotation (Line(points={{114.08,23.8},{
                114.08,23.6},{112,23.6}},
                                  color={28,108,200}));
        connect(Rotor8.torque, turbine_Editable.Fluidtorques[1]) annotation (Line(
              points={{116.64,28.6},{116.64,42},{-84.4,42},{-84.4,49.925}},
                                                                       color={28,108,200}));
        connect(MoistSep3.Turb_Out, Stator8.Inlet) annotation (Line(points={{102,24},
                {102,23.8},{106.06,23.8}}, color={28,108,200}));
        connect(Rotor7.Inlet, Stator7.Outlet) annotation (Line(points={{72.08,23.8},{72.08,
                24},{70,24},{70,23.6}},                     color={28,108,200}));
        connect(Rotor7.Outlet, MoistSep3.Turb_In) annotation (Line(points={{79.92,24},
                {90,24}},                   color={28,108,200}));
        connect(Rotor7.torque, turbine_Editable.Fluidtorques[2]) annotation (Line(
              points={{74.64,28.6},{74.64,36},{76,36},{76,42},{-84.4,42},{-84.4,50.175}},
                                                                               color={
                28,108,200}));
        connect(MoistSep2.Turb_Out, Stator7.Inlet) annotation (Line(points={{58,24},
                {58,23.8},{64.06,23.8}},               color={28,108,200}));
        connect(Rotor6.torque, turbine_Editable.Fluidtorques[3]) annotation (Line(
              points={{36.64,28.6},{36.64,42},{-84.4,42},{-84.4,50.425}},
              color={28,108,200}));
        connect(Rotor6.Outlet, MoistSep2.Turb_In) annotation (Line(points={{41.92,24},
                {46,24}},                          color={28,108,200}));
        connect(Stator6.Outlet, Rotor6.Inlet) annotation (Line(points={{28,23.6},{28,23.8},
                {34.08,23.8}},                        color={28,108,200}));
        connect(turbine_Tap2.Turb_flow2, Stator6.Inlet) annotation (Line(points={{18.06,
                24},{20,24},{20,23.8},{22.06,23.8}},    color={28,108,200}));
        connect(Rotor5.Outlet, turbine_Tap2.Turb_flow) annotation (Line(points={{7.92,24},
                {12.03,24},{12.03,24.08}},                color={28,108,200}));
        connect(Rotor5.Inlet, Stator5.Outlet) annotation (Line(points={{0.08,23.8},{0.08,
                24},{-2,24},{-2,23.6}},                     color={28,108,200}));
        connect(Rotor5.torque, turbine_Editable.Fluidtorques[4]) annotation (Line(
              points={{2.64,28.6},{0,28.6},{0,42},{-84.4,42},{-84.4,50.675}},
                                color={28,108,200}));
        connect(Rotor4.Inlet,Stator4. Outlet) annotation (Line(points={{-37.92,
                23.8},{-42,23.8},{-42,23.6}},
                                 color={28,108,200}));
        connect(Stator4.Inlet,turbine_Tap1. Turb_flow2)
          annotation (Line(points={{-47.94,23.8},{-47.94,24},{-51.94,24},{
                -51.94,23}},                                 color={28,108,200}));
        connect(Rotor4.torque, turbine_Editable.Fluidtorques[5]) annotation (Line(
              points={{-35.36,28.6},{-35.36,42},{-84.4,42},{-84.4,50.925}},
                          color={28,108,200}));
        connect(Rotor2.Outlet, turbine_Tap.Turb_flow) annotation (Line(points={{-96.08,
                22},{-91.97,22},{-91.97,23.07}},      color={28,108,200}));
        connect(turbine_Tap.Turb_flow2, Stator3.Inlet) annotation (Line(points={{-85.94,
                23},{-85.94,22},{-81.94,22},{-81.94,21.8}},            color={28,108,200}));
        connect(Rotor3.Inlet, Stator3.Outlet) annotation (Line(points={{-73.92,21.8},{
                -76,21.8},{-76,21.6}},                         color={28,108,200}));
        connect(Rotor2.Inlet, Stator2.Outlet) annotation (Line(points={{-103.92,21.8},
                {-106,21.8},{-106,22},{-108,22},{-108,21.6}},  color={28,108,200}));
        connect(Stator2.Inlet, Rotor1.Outlet) annotation (Line(points={{-113.94,21.8},
                {-114,21.8},{-114,22},{-120.08,22}},          color={28,108,200}));
        connect(Rotor1.Inlet, Stator1.Outlet) annotation (Line(points={{-127.92,21.8},
                {-128,21.8},{-128,22},{-130,22},{-130,21.6}},  color={28,108,200}));
        connect(Rotor3.Outlet, turbine_Tap1.Turb_flow) annotation (Line(points={{-66.08,
                22},{-62,22},{-62,23.07},{-57.97,23.07}},        color={28,108,200}));
        connect(Rotor3.torque, turbine_Editable.Fluidtorques[6]) annotation (Line(
              points={{-71.36,26.6},{-70,26.6},{-70,42},{-84.4,42},{-84.4,51.175}},
                                     color={28,108,200}));
        connect(Rotor2.torque, turbine_Editable.Fluidtorques[7]) annotation (Line(
              points={{-101.36,26.6},{-101.36,40},{-106,40},{-106,42},{-84.4,42},{-84.4,
                51.425}},
              color={28,108,200}));
        connect(Rotor1.torque, turbine_Editable.Fluidtorques[8]) annotation (Line(
              points={{-125.36,26.6},{-125.36,34},{-124,34},{-124,42},{-84.4,42},{-84.4,
                51.675}}, color={28,108,200}));
        connect(LP.Tube_out, IP.Tube_in) annotation (Line(points={{4,-35.4},{4,
                -34},{-16,-34}},  color={0,127,255}));
        connect(Rotor8.Outlet, turbine_Outlet.Turb_flow) annotation (Line(
              points={{121.92,24},{130,24},{130,24.1},{130.02,24.1}},
                                                                  color={28,108,
                200}));
        connect(Stator1.Inlet, turbine_Inlet.Turb_flow) annotation (Line(points={{-135.94,
                21.8},{-142,21.8},{-142,19.96},{-141.92,19.96}},   color={28,
                108,200}));
        connect(volume.port_b[1], IP.Shell_in) annotation (Line(points={{-38,-12},{-38,
                -28},{-36,-28}},           color={0,127,255}));
        connect(volume1.port_b[1], LP.Shell_in) annotation (Line(points={{6,-20},
                {6,-22},{-4,-22},{-4,-28.8},{4,-28.8}},                 color={
                0,127,255}));
        connect(IP.Shell_out, resistance1.port_a) annotation (Line(points={{-16,-28},
                {-12,-28},{-12,-25.2}},   color={0,127,255}));
        connect(resistance1.port_b, volume1.port_a[1]) annotation (Line(points={{-12,
                -16.8},{-12,-2},{5.33333,-2},{5.33333,-8}},          color={0,127,255}));
        connect(volume.port_a[1], resistance.port_b) annotation (Line(points={{-50,-12.5},
                {-56,-12.5},{-56,-14},{-63.2,-14}}, color={0,127,255}));
        connect(HP.Shell_out, resistance.port_a) annotation (Line(points={{-76,
                -26.8},{-74,-26.8},{-74,-14},{-68.8,-14}},
                                                    color={0,127,255}));
        connect(resistance2.port_b, sensor_m_flow3.port_a) annotation (Line(
              points={{28.8,-20},{34,-20},{34,-19}}, color={0,127,255}));
        connect(sensor_m_flow3.port_b, condenser1.port_a) annotation (Line(
              points={{46,-19},{46,-10},{51.2,-10},{51.2,-9.4}},
                                                               color={0,127,255}));
        connect(sensor_m_flow4.port_b, condenser2.port_a) annotation (Line(
              points={{60,11},{62,11},{62,12},{64,12},{64,11.2},{65.5,11.2}},
              color={0,127,255}));
        connect(sensor_m_flow6.port_b, condenser4.port_a) annotation (Line(
              points={{144,9},{144,4.5},{139.5,4.5}},  color={0,127,255}));
        connect(sensor_m_flow7.m_flow, PI6.u_m) annotation (Line(points={{82,
                12.56},{82,5},{70.6,5}}, color={0,0,127}));
        connect(PI6.u_s, sensor_m_flow4.m_flow) annotation (Line(points={{67,8.6},
                {57,8.6},{57,9.2}},         color={0,0,127}));
        connect(PI6.y, valveLineartanh3.opening) annotation (Line(points={{67,1.7},
                {66,1.7},{66,0},{92,0},{92,4.6},{91,4.6}},      color={0,0,127}));
        connect(valveLineartanh3.port_a, sensor_m_flow7.port_b) annotation (
            Line(points={{88,7},{88,6},{86,6},{86,14}}, color={0,127,255}));
        connect(valveLineartanh3.port_b, volume3.port_b[1]) annotation (Line(
              points={{94,7},{94,6},{98,6},{98,-36.75}},
                          color={0,127,255}));
        connect(PI7.u_s, sensor_m_flow3.m_flow) annotation (Line(points={{57.4,
                -19},{57.4,-20},{52,-20},{52,-26},{40,-26},{40,-21.52}}, color=
                {0,0,127}));
        connect(PI7.u_m, sensor_m_flow10.m_flow) annotation (Line(points={{61,
                -15.4},{60,-15.4},{60,-14},{72,-14},{72,-9.52}}, color={0,0,127}));
        connect(valveLineartanh4.port_a, sensor_m_flow10.port_b) annotation (
            Line(points={{80,-9},{80,-8},{78,-8},{78,-7}}, color={0,127,255}));
        connect(valveLineartanh4.port_b, volume3.port_b[2]) annotation (Line(
              points={{86,-9},{90,-9},{90,-10},{98,-10},{98,-36.25}},
              color={0,127,255}));
        connect(PI5.u_s, sensor_m_flow5.m_flow) annotation (Line(points={{129,
                -7.4},{129,11.52},{110,11.52}}, color={0,0,127}));
        connect(PI5.u_m, sensor_m_flow8.m_flow)
          annotation (Line(points={{125.4,-11},{122.52,-11}},
                                                            color={0,0,127}));
        connect(PI4.u_m, sensor_m_flow9.m_flow) annotation (Line(points={{147.4,
                -9},{147.4,-10},{148.52,-10},{148.52,-19}},
                                                          color={0,0,127}));
        connect(valveLineartanh6.port_b, volume3.port_b[3]) annotation (Line(
              points={{143,-34},{142,-34},{142,-36},{98,-36},{98,-35.75}},
              color={0,127,255}));
        connect(valveLineartanh5.port_b, volume3.port_b[4]) annotation (Line(
              points={{121,-28},{122,-28},{122,-36},{98,-36},{98,-35.25}},
              color={0,127,255}));
        connect(valveLineartanh5.port_a, sensor_m_flow8.port_b) annotation (
            Line(points={{121,-22},{120,-22},{120,-17}}, color={0,127,255}));
        connect(PI5.y, valveLineartanh5.opening) annotation (Line(points={{129,
                -14.3},{130,-14.3},{130,-26},{123.4,-26},{123.4,-25}}, color={0,
                0,127}));
        connect(sensor_m_flow9.port_b, valveLineartanh6.port_a) annotation (
            Line(points={{146,-25},{146,-28},{143,-28}}, color={0,127,255}));
        connect(valveLineartanh6.opening, PI4.y) annotation (Line(points={{145.4,
                -31},{145.4,-30},{152,-30},{152,-12.3},{151,-12.3}},
              color={0,0,127}));
        connect(volume2.port_b[1], sensor_m_flow5.port_a) annotation (Line(
              points={{104.4,15},{104.4,12},{104,12},{104,9}},
                                                            color={0,127,255}));
        connect(sensor_m_flow5.port_b, condenser3.port_a) annotation (Line(
              points={{116,9},{116,8},{115.5,8},{115.5,6.5}},    color={0,127,
                255}));
        connect(volume4.port_b[1], sensor_m_flow4.port_a) annotation (Line(
              points={{52,2.4},{56,2.4},{56,11},{54,11}},
                                                  color={0,127,255}));
        connect(resistance2.port_a, LP.Shell_out) annotation (Line(points={{23.2,
                -20},{20,-20},{20,-28.8},{16,-28.8}},     color={0,127,255}));
        connect(PI7.y, valveLineartanh4.opening) annotation (Line(points={{64.3,
                -19},{70,-19},{70,-18},{84,-18},{84,-14},{83,-14},{83,-11.4}},
              color={0,0,127}));
        connect(LPTapValve.port_b, volume1.port_a[2]) annotation (Line(points={{21,0},{
                14,0},{14,-8},{6,-8}},       color={0,127,255}));
        connect(LPTapValve.port_a, turbine_Tap2.Tap_flow) annotation (Line(points={{21,6},{
                22,6},{22,10},{16,10},{16,21.44},{15,21.44}},
                                               color={0,127,255}));
        connect(HPTapValve.port_b, HP.Shell_in) annotation (Line(points={{-88,-6},
                {-88,-16},{-100,-16},{-100,-26.8},{-96,-26.8}},
                                                            color={0,127,255}));
        connect(HPTapValve.port_a, turbine_Tap.Tap_flow) annotation (Line(points={{-88,2},
                {-88,20.76},{-89,20.76}},             color={0,127,255}));
        connect(IPTapValve.port_a, turbine_Tap1.Tap_flow) annotation (Line(points={{-53,10},
                {-54,10},{-54,20.76},{-55,20.76}},     color={0,127,255}));
        connect(IPTapValve.port_b, volume.port_a[2]) annotation (Line(points={{-53,0},
                {-54,0},{-54,-11.5},{-50,-11.5}}, color={0,127,255}));
        connect(MoistSep3.Liquid, resistance6.port_a) annotation (Line(points={{96,
                22.08},{94,22.08},{94,16},{93.2,16}},
                                               color={0,127,255}));
        connect(volume2.port_a[1], resistance6.port_b) annotation (Line(points={{99.6,15},
                {99.6,15.5},{98.8,15.5},{98.8,16}},     color={0,127,255}));
        connect(resistance4.port_b, volume1.port_a[3]) annotation (Line(points={{-3.2,6},
                {2,6},{2,-8},{6.66667,-8}},       color={0,127,255}));
        connect(resistance4.port_a, MoistSep1.Liquid) annotation (Line(points={{-8.8,6},
                {-18,6},{-18,22.08}},                color={0,127,255}));
        connect(MoistSep2.Liquid, resistance5.port_a)
          annotation (Line(points={{52,22.08},{52,18.8}}, color={0,127,255}));
        connect(volume4.port_a[1], resistance5.port_b)
          annotation (Line(points={{52,9.6},{52,13.2}},  color={0,127,255}));
        connect(TCV.port_b, turbine_Inlet.Pipe_flow) annotation (Line(points={{-143,8},
                {-142,8},{-142,12}},         color={0,127,255}));
        connect(condenser1.port_b, resistance7.port_a) annotation (Line(points=
                {{57.2,-8},{60,-8},{60,-12},{60.9,-12}}, color={0,127,255}));
        connect(sensor_m_flow10.port_a, resistance7.port_b) annotation (Line(
              points={{66,-7},{63.5,-7},{63.5,-12},{65.1,-12}}, color={0,127,
                255}));
        connect(sensor_m_flow7.port_a, resistance8.port_a) annotation (Line(
              points={{78,14},{78,12},{79.1,12}}, color={0,127,255}));
        connect(condenser2.port_b, resistance8.port_b) annotation (Line(points=
                {{73,14},{74,14},{74,12},{74.9,12}}, color={0,127,255}));
        connect(resistance10.port_a, condenser4.port_b) annotation (Line(points=
               {{143.1,-8},{143,-8},{143,-3}}, color={0,127,255}));
        connect(resistance10.port_b, sensor_m_flow9.port_a) annotation (Line(
              points={{138.9,-8},{142,-8},{142,-13},{146,-13}}, color={0,127,
                255}));
        connect(resistance9.port_a, condenser3.port_b) annotation (Line(points=
                {{104.9,-16},{104,-16},{104,-1},{119,-1}}, color={0,127,255}));
        connect(sensor_m_flow8.port_a, resistance9.port_b) annotation (Line(
              points={{120,-5},{116,-5},{116,-4},{109.1,-4},{109.1,-16}}, color=
               {0,127,255}));
        connect(IP.Tube_out, FWCP.port_a)
          annotation (Line(points={{-36,-34},{-54,-34}}, color={0,127,255}));
        connect(HP.Tube_in, FWCP.port_b) annotation (Line(points={{-76,-33.4},{
                -72,-33.4},{-72,-34},{-66,-34}}, color={0,127,255}));
        connect(LP.Tube_in, CDP.port_b) annotation (Line(points={{16,-35.4},{26,
                -35.4},{26,-35},{36,-35}}, color={0,127,255}));
        connect(FCV.port_b, sensor_m_flow1.port_a) annotation (Line(points={{
                -115,-4},{-116,-4},{-116,14},{-130,14},{-130,9}}, color={0,127,
                255}));
        connect(sensor_p1.port, TCV.port_a) annotation (Line(points={{-174,14},
                {-168,14},{-168,-4},{-143,-4},{-143,-2}}, color={0,127,255}));
        connect(sensor_p2.p, add.u1)
          annotation (Line(points={{-104,-28.4},{-104,-39}}, color={0,0,127}));
        connect(sensor_p3.p, add.u2)
          annotation (Line(points={{-110,3.6},{-110,-39}}, color={0,0,127}));
        connect(sensor_p3.port, sensor_m_flow1.port_a) annotation (Line(points={{-114,6},
                {-122,6},{-122,9},{-130,9}},           color={0,127,255}));
        connect(sensor_p2.port, HP.Tube_out) annotation (Line(points={{-108,-26},
                {-102,-26},{-102,-33.4},{-96,-33.4}}, color={0,127,255}));
        connect(volume5.port_b[1], TBV.port_a) annotation (Line(points={{-182,-18.5},
                {-186,-18.5},{-186,-4},{-189,-4}}, color={0,127,255}));
        connect(volume5.port_b[2], TCV.port_a) annotation (Line(points={{-182,
                -17.5},{-162,-17.5},{-162,-2},{-143,-2}}, color={0,127,255}));
        connect(sensor_m_flow12.port_a, TBV.port_b) annotation (Line(points={{-154,60},
                {-188,60},{-188,6},{-189,6}}, color={0,127,255}));
        connect(volume3.port_a[1], CDP.port_a) annotation (Line(points={{86,-36},{68,-36},
                {68,-35},{50,-35}},          color={0,127,255}));
        connect(PI4.u_s, sensor_m_flow6.m_flow) annotation (Line(points={{151,-5.4},{151,
                5.3},{146.52,5.3},{146.52,15}},            color={0,0,127}));
        connect(sensor_m_flow6.port_a, turbine_Outlet.Pipe_flow) annotation (Line(
              points={{144,21},{136,21},{136,24},{134,24}}, color={0,127,255}));
        connect(MoistSep1.Turb_Out, Stator5.Inlet) annotation (Line(points={{
                -12,24},{-10,24},{-10,23.8},{-7.94,23.8}}, color={28,108,200}));
        connect(sensor_m_flow1.port_b, port_b) annotation (Line(points={{-130,-3},{
                -138,-3},{-138,-54},{-102,-54}},
                                            color={0,127,255}));
        connect(port_a, volume5.port_a[1]) annotation (Line(points={{-102,48},{-102,
                48},{-194,48},{-194,-18}},
                                        color={0,127,255}));
        connect(HP.Tube_out, sensor_T1.port_a) annotation (Line(points={{-96,-33.4},{-106,
                -33.4},{-106,-34},{-118,-34},{-118,-31}}, color={0,127,255}));
        connect(sensor_T1.port_b, FCV.port_a) annotation (Line(points={{-118,-19},{-118,
                -18},{-115,-18},{-115,-14}}, color={0,127,255}));
        connect(actuatorBus.FWCP_Speed, FWCP.N_in) annotation (Line(
            points={{30,100},{144,100},{144,98},{256,98},{256,-58},{-60,-58},{-60,-40}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(sensorBus.dP_FCV, add.y) annotation (Line(
            points={{-30,100},{-236,100},{-236,-58},{-107,-58},{-107,-50.5}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Q_RX, Q_RX_Internal_Block.y) annotation (Line(
            points={{-30,100},{-30,118},{-120,118},{-120,140},{-143,140}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Demand, Demand_Internal_Block.y) annotation (Line(
            points={{-30,100},{-30,46},{-70,46},{-70,118},{-120,118},{-120,124},{-143,
                124}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Feed_Flow_Rate, sensor_m_flow1.m_flow) annotation (Line(
            points={{-30,100},{-236,100},{-236,-26},{-130,-26},{-130,-8},{-122,-8},{
                -122,3},{-127.48,3}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.FCV_Opening, FCV.opening) annotation (Line(
            points={{30,100},{30,88},{-214,88},{-214,-40},{-136,-40},{-136,-9},{-119,
                -9}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TBV_Opening, TBV.opening) annotation (Line(
            points={{30,100},{30,88},{-214,88},{-214,1},{-193,1}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.P_Turbine_Inlet, sensor_p1.p) annotation (Line(
            points={{-30,100},{-236,100},{-236,-26},{-178,-26},{-178,11.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TCV_Opening, TCV.opening) annotation (Line(
            points={{30,100},{30,88},{-214,88},{-214,-38},{-154,-38},{-154,3},{-147,3}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(Rotor4.Outlet, MoistSep1.Turb_In)
          annotation (Line(points={{-30.08,24},{-24,24}}, color={28,108,200}));
        connect(sensor_m_flow12.port_b, sensor_m_flow6.port_a) annotation (Line(
              points={{-146,60},{10,60},{10,52},{162,52},{162,21},{144,21}}, color={0,
                127,255}));
        connect(sensorBus.TBV_Mass_Flow, sensor_m_flow12.m_flow) annotation (Line(
            points={{-30,100},{-76,100},{-76,102},{-152,102},{-152,61.44},{-150,61.44}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(sensorBus.Superheat_Sensor_Opening, Superheat_Sensor_Dummy.y)
          annotation (Line(
            points={{-30,100},{-30,134},{-79,134}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.DFV_Anticipatory, DFV_Anticipatory_Dummy.y) annotation (
            Line(
            points={{-30,100},{-30,148},{-79,148}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Generator_Power, delay2.y) annotation (Line(
            points={{-30,100},{-30,76},{-41.58,76}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(delay2.u, generator.Power) annotation (Line(points={{-48.6,76},{-52,76},
                {-52,78},{-56,78},{-56,70.8}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Polygon(
                points={{24,22},{24,-8},{32,-22},{32,36},{24,22}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{40,22},{40,-8},{48,-24},{48,38},{40,22}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-12,22},{-12,-8},{-2,-22},{-2,38},{-12,22}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{8,22},{8,-8},{16,-24},{16,36},{8,22}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-2.55993,3},{93.4405,-3}},
                lineColor={0,0,0},
                origin={-31.44,-1},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{60,14},{88,-12}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{69,-6},{79,8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Rectangle(
                extent={{-1.06666,3.0002},{38.9329,-3.0002}},
                lineColor={0,0,0},
                origin={61,-50.933},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={48.427,-15},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341457,2},{13.6584,-2}},
                lineColor={0,0,0},
                origin={8,-48.342},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.12002,2},{40.8804,-2}},
                lineColor={0,0,0},
                origin={11.12,-60},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={5.422,-49.828},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-26,-46},{-14,-58}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-19,-49},{-19,-55},{-24,-52},{-19,-49}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-92.1867,-53},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-12,38},
                rotation=-90),
              Rectangle(
                extent={{-38,54},{-12,42}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-94,54},{-46,42}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-48,57},{-30,39}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Ellipse(
                extent={{-37,57},{-41,39}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Rectangle(
                extent={{-38,55},{-40,67}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-48,69},{-30,67}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-24,-56},{-28,-60},{-12,-60},{-16,-56},{-24,-56}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-0.244084,1},{9.76422,-1}},
                lineColor={0,0,0},
                origin={-1.764,19},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.195303,1},{7.8128,-1}},
                lineColor={0,0,0},
                origin={16.187,19},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.195308,1},{7.813,-1}},
                lineColor={0,0,0},
                origin={32.187,19},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{46,-50},{74,-76}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{55,-70},{65,-56}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Rectangle(
                extent={{-1.06666,3.0002},{38.9329,-3.0002}},
                lineColor={0,0,0},
                origin={-53,-70.933},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-2.61619,3},{101.384,-3}},
                lineColor={0,0,0},
                origin={-53.384,-31},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={29,-29.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={13,-29.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={-5,-29.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={45,-29.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-2.61619,3},{101.384,-3}},
                lineColor={0,0,0},
                origin={-53.384,-69},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.634164,0.999955},{25.3659,-1.0001}},
                lineColor={0,0,0},
                origin={22.634,41.0001},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.586685,0.999995},{21.4135,-1}},
                lineColor={0,0,0},
                origin={21,20.5865},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder)}),         Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=30,
            __Dymola_NumberOfIntervals=531,
            Tolerance=0.0005,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>Estimated NuScale secondary conditions (based on the 160MWt/52MWe design certification documents) and system setup put together in this model. The goal of the production of this model was to be able to, in detail, observe system-wide feedback during transients. This base model includes no connection capability to other processes and does not include an internal heat application model. </p>
<p>Controllers for this model are NOT optimized. Examples will show some power overshoot when operational mode changes occur. </p>
<p>Reference power levels for the 8 turbine stages are: 2.339, 19.952, 7.913, 5.103, 6.029, 1.233, 4.302, and 6.417 MW respectively. Estimated FWH powers are 10.9, 10.2, and 7.1 MW. </p>
</html>"));
      end NuScale_Secondary;

      model NuScale_Modal_Secondary_Arbitrage_Ports
        import NHES;
          extends BaseClasses.Partial_SubSystem_A(
          redeclare replaceable CS_Dummy CS,
          redeclare replaceable ED_Dummy ED,
          redeclare Data.Data_Dummy data);
          input Modelica.Units.SI.Power Q_RX_Internal;
          input Modelica.Units.SI.Power Demand_Internal;
          input Real DFV_Ancticipatory_Internal;
        parameter Integer TES_nPipes= 950;
        parameter Modelica.Units.SI.Length TES_Length=275
          "TES pipe length within concrete";
          parameter Real PipConcLRat = 3 "Pipe:Conc. ratio";
        parameter Modelica.Units.SI.Length TES_Thick=0.2
          "TES thickness to adiabatic boundary condition";
        parameter Modelica.Units.SI.Length TES_Width=0.8
          "Cross sectional area perpendicular to pipe length";
        parameter Real LP_NTU = 1.5 "Low pressure NTUHX NTU";
        parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
        parameter Real HP_NTU = 4.0 "High pressure NTUHX NTU";
        parameter Modelica.Units.SI.Pressure P_Rise_DFV=6.6e5 "Discharge source pump replacement dp";
        constant Real pi = Modelica.Constants.pi;
        parameter Modelica.Units.SI.Power Q_nom;
        Modelica.Units.SI.Energy dEdCycle;
        Modelica.Units.SI.Time t_track;
       // Modelica.SIunits.Temperature T_ideal;
        parameter Modelica.Units.SI.Temperature T_feed_ref=273 + 138;

          parameter Modelica.Units.SI.Velocity vthes1=0 "Initial rotational velocity. 's/r' indicates stator/rotor, # is stage #" annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther1=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes2=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther2=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes3=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther3=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes4=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther4=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes5=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther5=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes6=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther6=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes7=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther7=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes8=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther8=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Pressure ps1in=3170000 "Same indication system as rotational velocity" annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps1out=2620000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr1out=2610000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps2out=1400000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr2out=522600 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps3out=350000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps4out=180000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr4out=137800 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps5out=72000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr5out=64200 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps6out=58000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr6out=52800 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps7out=40000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr7out=26400 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps8out=17500 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr8out=8100 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_1=3000e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_2=2980e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_3=2800e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_4=2780e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_5=2740e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_6=2700e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_7=2650e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_8=2630e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.Area Ar8[3]={3.45,8.1,8.1} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As8[3]={2.64,3.45,3.45} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar7[3]={1.95,2.64,2.64} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As7[3]={1.545,1.95,1.95} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar6[3]={1.515,1.545,1.545} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As6[3]={1.515,1.515,1.515} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar5[3]={1.035,1.515,1.515} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As5[3]={0.84,1.035,1.035} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar4[3]={0.51,0.72,0.72} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As4[3]={0.43,0.51,0.51} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar3[3]={0.25,0.43,0.43} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As3[3]={0.23,0.25,0.25} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar2[3]={0.1,0.23,0.23} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As2[3]={0.0645,0.1,0.1} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar1[3]={0.0645,0.0645,0.0645} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As1[3]={0.0645,0.0645,0.0645} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Length ri[3]={0.1,0.1,0.1} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros1[3]={0.195,0.2,0.22} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror1[3]={0.22,0.24,0.245} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros2[3]={0.245,0.26,0.265} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror2[3]={0.265,0.29,0.295} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros3[3]={0.295,0.31,0.315} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror3[3]={0.315,0.33,0.335} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros4[3]={0.335,0.37,0.38} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror4[3]={0.38,0.41,0.42} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros5[3]={0.42,0.46,0.47} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror5[3]={0.47,0.51,0.53} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros6[3]={0.53,0.58,0.59} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror6[3]={0.59,0.63,0.64} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros7[3]={0.64,0.68,0.69} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror7[3]={0.69,0.74,0.75} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros8[3]={0.75,0.81,0.82} annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror8[3]={0.82,0.87,0.89} annotation(dialog(tab = "Geometry", group = "Radii"));
       parameter Real[2] alphas1 = {pi/3.4,0} "Ideal deflection angle in each stage. 0 indicates no change, not a 0 angle" annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar1 = {-pi/3.48,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas2 = {pi/2.185,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar2 = {-pi/2.2,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas3 = {pi/2.43,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar3 = {-pi/2.4,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas4 = {pi/2.6,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar4 = {-pi/2.56,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas5 = {pi/2.52,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar5 = {-pi/2.42,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas6 = {pi/3.33,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar6 = {-pi/3.62,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas7 = {pi/2.53,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar7 = {-pi/2.55,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas8 = {pi/2.41,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar8 = {-pi/2.21,0} annotation(dialog(tab = "Deflection", group = "Angles"));

      public
        StagebyStageTurbine.MS MoistSep3(V_MS=0.6, eta=0.227)
          annotation (Placement(transformation(extent={{90,18},{102,30}})));
        StagebyStageTurbine.Turbine_Physical turbine_Editable(nSt=8)
          annotation (Placement(transformation(extent={{-94,44},{-74,64}})));
        StagebyStageTurbine.Generator_Basic                  generator(omega_nominal=50
              *3.14)
          annotation (Placement(transformation(extent={{-66,50},{-46,70}})));
        StagebyStageTurbine.Rotor_Stage Rotor8(
          m_flow_nom=54.86,
          alpha=alphar8,
          A_flow=Ar8,
          dz={0.4,1},
          ro=ror8,
          h_init=2260e3,
          m_init=52,
          p_in_init=ps8out,
          v_the_init=vther8,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{114,14},{122,34}})));

        StagebyStageTurbine.Stator_Stage Stator8(
          isenthalpic=true,
          alpha=alphas8,
          A_flow=As8,
          ro=ros8,
          h_init=2350e3,
          m_init=52,
          p_in_init=pr7out,
          p_out_init=ps8out,
          v_the_init=vthes8)
          annotation (Placement(transformation(extent={{106,14},{112,34}})));
        StagebyStageTurbine.Rotor_Stage Rotor7(
          m_flow_nom=55.13,
          alpha=alphar7,
          A_flow=Ar7,
          ro=ror7,
          h_init=2330e3,
          m_init=53,
          p_in_init=ps7out,
          v_the_init=vther7,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{72,14},{80,34}})));

        StagebyStageTurbine.Stator_Stage Stator7(
          isenthalpic=true,
          alpha=alphas7,
          A_flow=As7,
          ro=ros7,
          h_init=2383e3,
          m_init=53,
          p_in_init=pr6out,
          p_out_init=ps7out,
          v_the_init=vthes7)
          annotation (Placement(transformation(extent={{64,14},{70,34}})));

        StagebyStageTurbine.MS MoistSep2(V_MS=0.25, eta=0.19)
          annotation (Placement(transformation(extent={{46,18},{58,30}})));
        StagebyStageTurbine.Rotor_Stage Rotor6(
          m_flow_nom=56.18,
          alpha=alphar6,
          A_flow=Ar6,
          ro=ror6,
          h_init=2336e3,
          m_init=56,
          p_in_init=ps6out,
          v_the_init=vther6,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{34,14},{42,34}})));

        StagebyStageTurbine.Stator_Stage Stator6(
          v_the_init=vthes6,
          isenthalpic=true,
          alpha=alphas6,
          A_flow=As6,
          ro=ros6,
          h_init=2417e3,
          m_init=56,
          p_in_init=pr5out,
          p_out_init=ps6out)
          annotation (Placement(transformation(extent={{22,14},{28,34}})));

        StagebyStageTurbine.Turbine_Tap turbine_Tap2
          annotation (Placement(transformation(extent={{12,16},{18,32}})));
        StagebyStageTurbine.Stator_Stage Stator5(
          dz={1.0,0.3},
          v_the_init=vthes5,
          alpha=alphas5,
          A_flow=As5,
          ro=ros5,
          h_init=2402e3,
          m_init=59,
          p_in_init=pr4out,
          p_out_init=ps5out)
          annotation (Placement(transformation(extent={{-8,14},{-2,34}})));

        StagebyStageTurbine.Rotor_Stage Rotor5(
          m_flow_nom=59.78,
          alpha=alphar5,
          A_flow=Ar5,
          ro=ror5,
          h_init=2379e3,
          m_init=59,
          p_in_init=ps5out,
          v_the_init=vther5,
          v_r_init=0.1) annotation (Placement(transformation(extent={{0,14},{8,34}})));

        StagebyStageTurbine.MS MoistSep1(V_MS=25, eta=0.17)
          annotation (Placement(transformation(extent={{-24,18},{-12,30}})));
        StagebyStageTurbine.Rotor_Stage Rotor4(
          m_flow_nom=60.76,
          alpha=alphar4,
          A_flow=Ar4,
          ro=ror4,
          h_init=2402e3,
          m_init=60,
          p_in_init=ps4out,
          v_the_init=vther4,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-38,14},{-30,34}})));

        StagebyStageTurbine.Stator_Stage Stator4(
          v_the_init=vthes4,
          isenthalpic=true,
          alpha=alphas4,
          A_flow=As4,
          ro=ros4,
          h_init=2504e3,
          m_init=60,
          p_in_init=pr3out,
          p_out_init=ps4out)
          annotation (Placement(transformation(extent={{-48,14},{-42,34}})));

        StagebyStageTurbine.Turbine_Tap turbine_Tap1
          annotation (Placement(transformation(extent={{-58,16},{-52,30}})));
        StagebyStageTurbine.Rotor_Stage Rotor3(
          m_flow_nom=64.31,
          alpha=alphar3,
          A_flow=Ar3,
          ro=ror3,
          h_init=2477e3,
          m_init=64,
          p_in_init=ps3out,
          v_the_init=vther3,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-74,12},{-66,32}})));

        StagebyStageTurbine.Stator_Stage Stator3(
          v_the_init=vthes3,
          isenthalpic=true,
          alpha=alphas3,
          A_flow=As3,
          ro=ros3,
          h_init=2563e3,
          m_init=64,
          p_in_init=pr2out,
          p_out_init=ps3out)
          annotation (Placement(transformation(extent={{-82,12},{-76,32}})));
        StagebyStageTurbine.Turbine_Tap turbine_Tap(Tap_flow(m_flow(start=-5.237983241487215)))
          annotation (Placement(transformation(extent={{-92,16},{-86,30}})));
        StagebyStageTurbine.Rotor_Stage Rotor2(
          m_flow_nom=68.22,
          alpha=alphar2,
          A_flow=Ar2,
          ro=ror2,
          h_init=2674e3,
          m_init=68,
          p_in_init=ps2out,
          v_the_init=vther2,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-104,12},{-96,32}})));

        StagebyStageTurbine.Stator_Stage Stator2(
          v_the_init=vthes2,
          isenthalpic=true,
          alpha=alphas2,
          A_flow=As2,
          ro=ros2,
          h_init=2965e3,
          m_init=68,
          p_in_init=pr1out,
          p_out_init=ps2out)
          annotation (Placement(transformation(extent={{-114,12},{-108,32}})));
        StagebyStageTurbine.Rotor_Stage Rotor1(
          m_flow_nom=68.22,
          alpha=alphar1,
          A_flow=Ar1,
          ro=ror1,
          h_init=2999e3,
          m_init=68,
          p_in_init=ps1out,
          v_the_init=vther1,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-128,12},{-120,32}})));

        StagebyStageTurbine.Stator_Stage Stator1(
          v_the_init=vthes1,
          isenthalpic=true,
          alpha=alphas1,
          A_flow=As1,
          ro=ros1,
          h_init=2999e3,
          m_init=68,
          p_in_init=ps1in,
          p_out_init=ps1out)
          annotation (Placement(transformation(extent={{-136,12},{-130,32}})));
        NHES.Fluid.HeatExchangers.Generic_HXs.NTU_HX LP(
          NTU=LP_NTU,
          K_tube=17000,
          K_shell=5,
          V_Tube=4.,
          V_Shell=4,
          p_start_tube=2340000,
          h_start_tube_inlet=184e3,
          h_start_tube_outlet=184e3,
          p_start_shell=58000,
          h_start_shell_inlet=405.5e3,
          h_start_shell_outlet=405.5e3,
          Cr_init=0.8,
          deltaX_t_init=0.0,
          deltaX_s_init=0.0,
          Shell(medium(h(start=100000))))
          annotation (Placement(transformation(extent={{4,-20},{16,-42}})));
        NHES.Fluid.HeatExchangers.Generic_HXs.NTU_HX IP(
          NTU=IP_NTU,
          K_tube=17000,
          K_shell=500,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=3740000,
          h_start_tube_inlet=346.6e3,
          h_start_tube_outlet=346.6e3,
          p_start_shell=497000,
          h_start_shell_inlet=368.2e3,
          h_start_shell_outlet=368.2e3)
          annotation (Placement(transformation(extent={{-36,-20},{-16,-40}})));
        NHES.Fluid.HeatExchangers.Generic_HXs.NTU_HX HP(
          NTU=HP_NTU,
          K_tube=16500,
          K_shell=50,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=3740000,
          h_start_tube_inlet=523.1e3,
          h_start_tube_outlet=523.1e3,
          p_start_shell=497000,
          h_start_shell_inlet=544.5e3,
          h_start_shell_outlet=544.5e3,
          Shell(medium(h(start=500e3))))
          annotation (Placement(transformation(extent={{-96,-18},{-76,-40}})));
        StagebyStageTurbine.BaseClasses.Turbine_Outlet turbine_Outlet
          annotation (Placement(transformation(extent={{130,14},{134,34}})));
        StagebyStageTurbine.BaseClasses.Turbine_Inlet turbine_Inlet annotation (
            Placement(transformation(
              extent={{-4,-8},{4,8}},
              rotation=90,
              origin={-142,16})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr3out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.2),
          nPorts_a=2,
          nPorts_b=1)
          annotation (Placement(transformation(extent={{-54,-22},{-34,-2}})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume1(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr5out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.2),
          nPorts_a=3,
          nPorts_b=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={6,-14})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false)
          annotation (Placement(transformation(extent={{-4,-5},{4,5}},
              rotation=90,
              origin={69,14})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume3(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr8out,
          use_T_start=false,
          h_start=150e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=5),
          nPorts_b=4,
          nPorts_a=2)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={92,-36})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance(R=90000)
          annotation (Placement(transformation(extent={{-70,-20},{-62,-8}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance1(R=8500)
          annotation (Placement(transformation(extent={{-6,-7},{6,7}},
              rotation=90,
              origin={-12,-21})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance2(R=3500)
          annotation (Placement(transformation(extent={{22,-26},{30,-14}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow3(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{34,-12},{46,-26}})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false)
          annotation (Placement(transformation(extent={{-2,-4},{2,4}},
              rotation=90,
              origin={54,-8})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser3(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false)
          annotation (Placement(transformation(extent={{114,-2},{124,8}})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser4(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false,V_total=100)
          annotation (Placement(transformation(extent={{138,-4},{148,6}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow4(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{54,16},{60,6}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow5(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=180,
              origin={110,9})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow6(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=90,
              origin={144,15})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow7(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{78,18},{86,10}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow8(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=90,
              origin={120,-11})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow9(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-6,-7},{6,7}},
              rotation=270,
              origin={146,-19})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow10(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-6,7},{6,-7}},
              rotation=0,
              origin={72,-7})));
        TRANSFORM.Controls.PI_Control PI4
          annotation (Placement(transformation(extent={{-3,-3},{3,3}},
              rotation=270,
              origin={151,-9})));
        TRANSFORM.Controls.PI_Control PI5
          annotation (Placement(transformation(extent={{-3,-3},{3,3}},
              rotation=270,
              origin={129,-11})));
        TRANSFORM.Controls.PI_Control PI6
          annotation (Placement(transformation(extent={{-3,3},{3,-3}},
              rotation=270,
              origin={67,5})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          valveLineartanh3(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40)
          annotation (Placement(transformation(extent={{88,10},{94,4}})));
        TRANSFORM.Controls.PI_Control PI7 annotation (Placement(transformation(
              extent={{3,-3},{-3,3}},
              rotation=180,
              origin={61,-19})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          valveLineartanh4(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40)
          annotation (Placement(transformation(extent={{80,-6},{86,-12}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          valveLineartanh5(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40) annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={121,-25})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          valveLineartanh6(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40) annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={143,-31})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume2(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr5out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=2.5),
          nPorts_b=1,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-4,-5},{4,5}},
              rotation=0,
              origin={102,15})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume4(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr5out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.8),
          nPorts_b=1,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-6,-6},{6,6}},
              rotation=270,
              origin={52,6})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.SpringBallValve
          LPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr8out,
          K=500,
          opening_init=0.01,
          tau=0.1) annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={21,3})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.SpringBallValve
          IPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr6out,
          K=4250,
          tau=0.1) annotation (Placement(transformation(
              extent={{-5,-5},{5,5}},
              rotation=270,
              origin={-53,5})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.SpringBallValve
          HPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr5out,
          K=2300,
          tau=0.1) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-88,-2})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance6(R=15000)
          annotation (Placement(transformation(extent={{92,10},{100,22}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance4(R=65000)
          annotation (Placement(transformation(extent={{-10,0},{-2,12}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance5(R=50000)
          annotation (Placement(transformation(extent={{-4,-6},{4,6}},
              rotation=270,
              origin={52,16})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          TCV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=450000,
          m_flow_nominal=68.404,
          opening_actual(start=1)) annotation (Placement(transformation(
              extent={{5,5},{-5,-5}},
              rotation=270,
              origin={-143,3})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance7(dp0=-2000)
                      annotation (Placement(transformation(
              extent={{3,-2},{-3,2}},
              rotation=180,
              origin={63,-12})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance8(dp0=2000)
                      annotation (Placement(transformation(
              extent={{-3,-2},{3,2}},
              rotation=180,
              origin={77,12})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance9(dp0=-2000)
                      annotation (Placement(transformation(
              extent={{3,-2},{-3,2}},
              rotation=180,
              origin={107,-16})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance10(dp0=-2000)
                      annotation (Placement(transformation(
              extent={{-3,-2},{3,2}},
              rotation=180,
              origin={141,-8})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLinearTotal
          TBV2(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=400000,
          m_flow_nominal=68.404,
          opening_actual(start=0)) annotation (Placement(transformation(
              extent={{5,5},{-5,-5}},
              rotation=270,
              origin={-189,1})));
        Modelica.Fluid.Machines.PrescribedPump FWCP(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          allowFlowReversal=false,
          p_a_start=2200000,
          p_b_start=3700000,
          m_flow_start=66.3,
          nParallel=3,
          redeclare function flowCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow
              (V_flow_nominal={0,0.07,0.105}, head_nominal={400,200,0}),
          N_nominal=1500,
          rho_nominal=945,
          use_powerCharacteristic=false,
          redeclare function efficiencyCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.constantEfficiency
              (eta_nominal=0.8),
          V=1.5,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          use_T_start=false,
          h_start=500e3,
          use_N_in=true,
          N_const=890.3)
          annotation (Placement(transformation(extent={{-54,-28},{-66,-40}})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p1(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-178,14})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLineartanh
          FCV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=200000,
          m_flow_nominal=63.5,
          opening_actual(start=1)) annotation (Placement(transformation(
              extent={{5,5},{-5,-5}},
              rotation=270,
              origin={-115,-9})));
        Modelica.Fluid.Machines.PrescribedPump CDP(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          allowFlowReversal=false,
          p_a_start=8000,
          p_b_start=2220000,
          m_flow_start=68.4,
          nParallel=3,
          redeclare function flowCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow
              (V_flow_nominal={0,0.07,0.105}, head_nominal={400,200,0}),
          N_nominal=1500,
          rho_nominal=945,
          use_powerCharacteristic=false,
          redeclare function efficiencyCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.constantEfficiency
              (eta_nominal=0.8),
          V=1.5,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          use_T_start=false,
          h_start=300e3,
          N_const=1278.78)
          annotation (Placement(transformation(extent={{50,-42},{36,-28}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=90,
              origin={-130,3})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p2(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,4},{-4,-4}},
              rotation=90,
              origin={-104,-26})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p3(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,4},{-4,-4}},
              rotation=90,
              origin={-110,6})));
        Modelica.Blocks.Math.Add add(k2=-1) annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=270,
              origin={-107,-45})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume5(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=ps1in,
          use_T_start=false,
          h_start=3000e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          nPorts_b=2,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-188,-18})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow12(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-152,58},{-144,66}})));

        StagebyStageTurbine.BaseClasses.Turbine_Inlet turbine_Inlet1
          annotation (Placement(transformation(extent={{32,48},{12,68}})));
        StagebyStageTurbine.TeeJunctionIdeal_Cyl teeJunctionIdeal_Cyl(redeclare
            package Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-18,68},{2,48}})));
        StagebyStageTurbine.BaseClasses.Turbine_Inlet turbine_Inlet2
          annotation (Placement(transformation(extent={{24,36},{4,56}})));
        StagebyStageTurbine.BaseClasses.Turbine_Inlet turbine_Inlet3
          annotation (Placement(transformation(extent={{-4,24},{-24,44}})));
        TRANSFORM.Fluid.Pipes.TransportDelayPipe transportDelayPipe(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          crossArea=As5[1],
          length=1.5,
          K_ab=1,
          K_ba=1)
          annotation (Placement(transformation(extent={{24,24},{4,44}})));

        Modelica.Fluid.Interfaces.FluidPort_b Feedwater(redeclare package
            Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{-112,-64},{-92,-44}}), iconTransformation(
                extent={{-112,-64},{-92,-44}})));
        Modelica.Fluid.Interfaces.FluidPort_a SG_Return(redeclare package
            Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{-112,38},{-92,58}}), iconTransformation(extent={
                  {-112,38},{-92,58}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.ValveLinearTotal
          DFV1(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=250000,
          m_flow_nominal=20,
          opening_actual(start=0)) annotation (Placement(transformation(
              extent={{-5,5},{5,-5}},
              rotation=180,
              origin={85,61})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.TemperatureTwoPort_Superheat
          sensor_T(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{126,50},{106,70}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-6,7},{6,-7}},
              rotation=90,
              origin={-118,-25})));
        Modelica.Blocks.Sources.RealExpression Q_RX_Internal_Block(y=Q_RX_Internal)
          annotation (Placement(transformation(extent={{-288,106},{-268,126}})));
        Modelica.Blocks.Sources.RealExpression Demand_Internal_Block(y=Demand_Internal)
          annotation (Placement(transformation(extent={{-288,90},{-268,110}})));
        Modelica.Blocks.Sources.RealExpression DFV_Ancticipatory_Internal_Block(y=
              DFV_Ancticipatory_Internal)
          annotation (Placement(transformation(extent={{-288,74},{-268,94}})));
        Modelica.Fluid.Interfaces.FluidPort_b TBV_Send(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{100,74},{120,94}}), iconTransformation(extent={{94,48},
                  {114,68}})));
        Modelica.Fluid.Interfaces.FluidPort_a TBV_Return(redeclare package
            Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{100,-66},{120,-46}}),iconTransformation(extent={{94,-66},
                  {114,-46}})));
        Modelica.Fluid.Interfaces.FluidPort_a Arbitrage_Return(redeclare
            package Medium =
                     Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{48,-100},{68,-80}}), iconTransformation(extent={{40,-110},
                  {60,-90}})));
        Modelica.Fluid.Interfaces.FluidPort_b Arbitrage_Send(redeclare package
            Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{-54,-100},{-34,-80}}), iconTransformation(
                extent={{-28,-112},{-8,-92}})));
      initial equation
        dEdCycle=0;
        t_track = 0;

      //  T_ideal = T_feed_ref;
      equation
        der(t_track)=1;
        der(dEdCycle) = generator.power-Q_nom;
        when t_track>=86400 then
          reinit(dEdCycle,0);
          reinit(t_track,0);
        end when;

        connect(generator.shaft, turbine_Editable.Generator_torque) annotation (Line(
              points={{-66.1,59.9},{-70,59.9},{-70,60},{-72,60},{-72,59.8},{-74,
                59.8}},                                                     color={0,0,
                0}));
        connect(Rotor8.Inlet, Stator8.Outlet) annotation (Line(points={{114.08,23.8},{
                114.08,23.6},{112,23.6}},
                                  color={28,108,200}));
        connect(Rotor8.torque, turbine_Editable.Fluidtorques[1]) annotation (Line(
              points={{116.64,28.6},{116.64,42},{-84.4,42},{-84.4,49.925}},
                                                                       color={28,108,200}));
        connect(MoistSep3.Turb_Out, Stator8.Inlet) annotation (Line(points={{102,24},
                {102,23.8},{106.06,23.8}}, color={28,108,200}));
        connect(Rotor7.Inlet, Stator7.Outlet) annotation (Line(points={{72.08,23.8},{72.08,
                24},{70,24},{70,23.6}},                     color={28,108,200}));
        connect(Rotor7.Outlet, MoistSep3.Turb_In) annotation (Line(points={{79.92,24},
                {90,24}},                   color={28,108,200}));
        connect(Rotor7.torque, turbine_Editable.Fluidtorques[2]) annotation (Line(
              points={{74.64,28.6},{74.64,36},{76,36},{76,42},{-84.4,42},{-84.4,50.175}},
                                                                               color={
                28,108,200}));
        connect(MoistSep2.Turb_Out, Stator7.Inlet) annotation (Line(points={{58,24},
                {58,23.8},{64.06,23.8}},               color={28,108,200}));
        connect(Rotor6.torque, turbine_Editable.Fluidtorques[3]) annotation (Line(
              points={{36.64,28.6},{36.64,42},{-84.4,42},{-84.4,50.425}},
              color={28,108,200}));
        connect(Rotor6.Outlet, MoistSep2.Turb_In) annotation (Line(points={{41.92,24},
                {46,24}},                          color={28,108,200}));
        connect(Stator6.Outlet, Rotor6.Inlet) annotation (Line(points={{28,23.6},{28,23.8},
                {34.08,23.8}},                        color={28,108,200}));
        connect(turbine_Tap2.Turb_flow2, Stator6.Inlet) annotation (Line(points={{18.06,
                24},{20,24},{20,23.8},{22.06,23.8}},    color={28,108,200}));
        connect(Rotor5.Outlet, turbine_Tap2.Turb_flow) annotation (Line(points={{7.92,24},
                {12.03,24},{12.03,24.08}},                color={28,108,200}));
        connect(Rotor5.Inlet, Stator5.Outlet) annotation (Line(points={{0.08,23.8},{0.08,
                24},{-2,24},{-2,23.6}},                     color={28,108,200}));
        connect(Rotor5.torque, turbine_Editable.Fluidtorques[4]) annotation (Line(
              points={{2.64,28.6},{0,28.6},{0,42},{-84.4,42},{-84.4,50.675}},
                                color={28,108,200}));
        connect(Rotor4.Inlet,Stator4. Outlet) annotation (Line(points={{-37.92,
                23.8},{-42,23.8},{-42,23.6}},
                                 color={28,108,200}));
        connect(Stator4.Inlet,turbine_Tap1. Turb_flow2)
          annotation (Line(points={{-47.94,23.8},{-47.94,24},{-51.94,24},{
                -51.94,23}},                                 color={28,108,200}));
        connect(Rotor4.torque, turbine_Editable.Fluidtorques[5]) annotation (Line(
              points={{-35.36,28.6},{-35.36,42},{-84.4,42},{-84.4,50.925}},
                          color={28,108,200}));
        connect(Rotor2.Outlet, turbine_Tap.Turb_flow) annotation (Line(points={{-96.08,
                22},{-91.97,22},{-91.97,23.07}},      color={28,108,200}));
        connect(turbine_Tap.Turb_flow2, Stator3.Inlet) annotation (Line(points={{-85.94,
                23},{-85.94,22},{-81.94,22},{-81.94,21.8}},            color={28,108,200}));
        connect(Rotor3.Inlet, Stator3.Outlet) annotation (Line(points={{-73.92,21.8},{
                -76,21.8},{-76,21.6}},                         color={28,108,200}));
        connect(Rotor2.Inlet, Stator2.Outlet) annotation (Line(points={{-103.92,21.8},
                {-106,21.8},{-106,22},{-108,22},{-108,21.6}},  color={28,108,200}));
        connect(Stator2.Inlet, Rotor1.Outlet) annotation (Line(points={{-113.94,21.8},
                {-114,21.8},{-114,22},{-120.08,22}},          color={28,108,200}));
        connect(Rotor1.Inlet, Stator1.Outlet) annotation (Line(points={{-127.92,21.8},
                {-128,21.8},{-128,22},{-130,22},{-130,21.6}},  color={28,108,200}));
        connect(Rotor3.Outlet, turbine_Tap1.Turb_flow) annotation (Line(points={{-66.08,
                22},{-62,22},{-62,23.07},{-57.97,23.07}},        color={28,108,200}));
        connect(Rotor3.torque, turbine_Editable.Fluidtorques[6]) annotation (Line(
              points={{-71.36,26.6},{-70,26.6},{-70,42},{-84.4,42},{-84.4,51.175}},
                                     color={28,108,200}));
        connect(Rotor2.torque, turbine_Editable.Fluidtorques[7]) annotation (Line(
              points={{-101.36,26.6},{-101.36,40},{-106,40},{-106,42},{-84.4,42},{-84.4,
                51.425}},
              color={28,108,200}));
        connect(Rotor1.torque, turbine_Editable.Fluidtorques[8]) annotation (Line(
              points={{-125.36,26.6},{-125.36,34},{-124,34},{-124,42},{-84.4,42},{-84.4,
                51.675}}, color={28,108,200}));
        connect(LP.Tube_out, IP.Tube_in) annotation (Line(points={{4,-35.4},{4,
                -34},{-16,-34}},  color={0,127,255}));
        connect(Rotor8.Outlet, turbine_Outlet.Turb_flow) annotation (Line(
              points={{121.92,24},{130,24},{130,24.1},{130.02,24.1}},
                                                                  color={28,108,
                200}));
        connect(Stator1.Inlet, turbine_Inlet.Turb_flow) annotation (Line(points={{-135.94,
                21.8},{-142,21.8},{-142,19.96},{-141.92,19.96}},   color={28,
                108,200}));
        connect(volume.port_b[1], IP.Shell_in) annotation (Line(points={{-38,-12},{-38,
                -28},{-36,-28}},           color={0,127,255}));
        connect(volume1.port_b[1], LP.Shell_in) annotation (Line(points={{6,-20},
                {6,-22},{-4,-22},{-4,-28.8},{4,-28.8}},                 color={
                0,127,255}));
        connect(IP.Shell_out, resistance1.port_a) annotation (Line(points={{-16,-28},
                {-12,-28},{-12,-25.2}},   color={0,127,255}));
        connect(resistance1.port_b, volume1.port_a[1]) annotation (Line(points={{-12,
                -16.8},{-12,-2},{5.33333,-2},{5.33333,-8}},          color={0,127,255}));
        connect(volume.port_a[1], resistance.port_b) annotation (Line(points={{-50,-12.5},
                {-56,-12.5},{-56,-14},{-63.2,-14}}, color={0,127,255}));
        connect(HP.Shell_out, resistance.port_a) annotation (Line(points={{-76,
                -26.8},{-74,-26.8},{-74,-14},{-68.8,-14}},
                                                    color={0,127,255}));
        connect(resistance2.port_b, sensor_m_flow3.port_a) annotation (Line(
              points={{28.8,-20},{34,-20},{34,-19}}, color={0,127,255}));
        connect(sensor_m_flow3.port_b, condenser1.port_a) annotation (Line(
              points={{46,-19},{46,-10},{51.2,-10},{51.2,-9.4}},
                                                               color={0,127,255}));
        connect(sensor_m_flow4.port_b, condenser2.port_a) annotation (Line(
              points={{60,11},{62,11},{62,12},{64,12},{64,11.2},{65.5,11.2}},
              color={0,127,255}));
        connect(sensor_m_flow6.port_b, condenser4.port_a) annotation (Line(
              points={{144,9},{144,4.5},{139.5,4.5}},  color={0,127,255}));
        connect(sensor_m_flow7.m_flow, PI6.u_m) annotation (Line(points={{82,
                12.56},{82,5},{70.6,5}}, color={0,0,127}));
        connect(PI6.u_s, sensor_m_flow4.m_flow) annotation (Line(points={{67,8.6},
                {57,8.6},{57,9.2}},         color={0,0,127}));
        connect(PI6.y, valveLineartanh3.opening) annotation (Line(points={{67,1.7},
                {66,1.7},{66,0},{92,0},{92,4.6},{91,4.6}},      color={0,0,127}));
        connect(valveLineartanh3.port_a, sensor_m_flow7.port_b) annotation (
            Line(points={{88,7},{88,6},{86,6},{86,14}}, color={0,127,255}));
        connect(valveLineartanh3.port_b, volume3.port_b[1]) annotation (Line(
              points={{94,7},{94,6},{98,6},{98,-36.75}},
                          color={0,127,255}));
        connect(PI7.u_s, sensor_m_flow3.m_flow) annotation (Line(points={{57.4,
                -19},{57.4,-20},{52,-20},{52,-26},{40,-26},{40,-21.52}}, color=
                {0,0,127}));
        connect(PI7.u_m, sensor_m_flow10.m_flow) annotation (Line(points={{61,
                -15.4},{60,-15.4},{60,-14},{72,-14},{72,-9.52}}, color={0,0,127}));
        connect(valveLineartanh4.port_a, sensor_m_flow10.port_b) annotation (
            Line(points={{80,-9},{80,-8},{78,-8},{78,-7}}, color={0,127,255}));
        connect(valveLineartanh4.port_b, volume3.port_b[2]) annotation (Line(
              points={{86,-9},{90,-9},{90,-10},{98,-10},{98,-36.25}},
              color={0,127,255}));
        connect(PI5.u_s, sensor_m_flow5.m_flow) annotation (Line(points={{129,
                -7.4},{129,11.52},{110,11.52}}, color={0,0,127}));
        connect(PI5.u_m, sensor_m_flow8.m_flow)
          annotation (Line(points={{125.4,-11},{122.52,-11}},
                                                            color={0,0,127}));
        connect(PI4.u_m, sensor_m_flow9.m_flow) annotation (Line(points={{147.4,
                -9},{147.4,-10},{148.52,-10},{148.52,-19}},
                                                          color={0,0,127}));
        connect(valveLineartanh6.port_b, volume3.port_b[3]) annotation (Line(
              points={{143,-34},{142,-34},{142,-36},{98,-36},{98,-35.75}},
              color={0,127,255}));
        connect(valveLineartanh5.port_b, volume3.port_b[4]) annotation (Line(
              points={{121,-28},{122,-28},{122,-36},{98,-36},{98,-35.25}},
              color={0,127,255}));
        connect(valveLineartanh5.port_a, sensor_m_flow8.port_b) annotation (
            Line(points={{121,-22},{120,-22},{120,-17}}, color={0,127,255}));
        connect(PI5.y, valveLineartanh5.opening) annotation (Line(points={{129,
                -14.3},{130,-14.3},{130,-26},{123.4,-26},{123.4,-25}}, color={0,
                0,127}));
        connect(sensor_m_flow9.port_b, valveLineartanh6.port_a) annotation (
            Line(points={{146,-25},{146,-28},{143,-28}}, color={0,127,255}));
        connect(valveLineartanh6.opening, PI4.y) annotation (Line(points={{145.4,
                -31},{145.4,-30},{152,-30},{152,-12.3},{151,-12.3}},
              color={0,0,127}));
        connect(volume2.port_b[1], sensor_m_flow5.port_a) annotation (Line(
              points={{104.4,15},{104.4,12},{104,12},{104,9}},
                                                            color={0,127,255}));
        connect(sensor_m_flow5.port_b, condenser3.port_a) annotation (Line(
              points={{116,9},{116,8},{115.5,8},{115.5,6.5}},    color={0,127,
                255}));
        connect(volume4.port_b[1], sensor_m_flow4.port_a) annotation (Line(
              points={{52,2.4},{56,2.4},{56,11},{54,11}},
                                                  color={0,127,255}));
        connect(resistance2.port_a, LP.Shell_out) annotation (Line(points={{23.2,
                -20},{20,-20},{20,-28.8},{16,-28.8}},     color={0,127,255}));
        connect(PI7.y, valveLineartanh4.opening) annotation (Line(points={{64.3,
                -19},{70,-19},{70,-18},{84,-18},{84,-14},{83,-14},{83,-11.4}},
              color={0,0,127}));
        connect(LPTapValve.port_b, volume1.port_a[2]) annotation (Line(points={{21,0},{
                14,0},{14,-8},{6,-8}},       color={0,127,255}));
        connect(LPTapValve.port_a, turbine_Tap2.Tap_flow) annotation (Line(points={{21,6},{
                22,6},{22,10},{16,10},{16,21.44},{15,21.44}},
                                               color={0,127,255}));
        connect(HPTapValve.port_b, HP.Shell_in) annotation (Line(points={{-88,-6},
                {-88,-16},{-100,-16},{-100,-26.8},{-96,-26.8}},
                                                            color={0,127,255}));
        connect(HPTapValve.port_a, turbine_Tap.Tap_flow) annotation (Line(points={{-88,2},
                {-88,20.76},{-89,20.76}},             color={0,127,255}));
        connect(IPTapValve.port_a, turbine_Tap1.Tap_flow) annotation (Line(points={{-53,10},
                {-54,10},{-54,20.76},{-55,20.76}},     color={0,127,255}));
        connect(IPTapValve.port_b, volume.port_a[2]) annotation (Line(points={{-53,0},
                {-54,0},{-54,-11.5},{-50,-11.5}}, color={0,127,255}));
        connect(MoistSep3.Liquid, resistance6.port_a) annotation (Line(points={{96,
                22.08},{94,22.08},{94,16},{93.2,16}},
                                               color={0,127,255}));
        connect(volume2.port_a[1], resistance6.port_b) annotation (Line(points={{99.6,15},
                {99.6,15.5},{98.8,15.5},{98.8,16}},     color={0,127,255}));
        connect(resistance4.port_b, volume1.port_a[3]) annotation (Line(points={{-3.2,6},
                {2,6},{2,-8},{6.66667,-8}},       color={0,127,255}));
        connect(resistance4.port_a, MoistSep1.Liquid) annotation (Line(points={{-8.8,6},
                {-18,6},{-18,22.08}},                color={0,127,255}));
        connect(MoistSep2.Liquid, resistance5.port_a)
          annotation (Line(points={{52,22.08},{52,18.8}}, color={0,127,255}));
        connect(volume4.port_a[1], resistance5.port_b)
          annotation (Line(points={{52,9.6},{52,13.2}},  color={0,127,255}));
        connect(TCV.port_b, turbine_Inlet.Pipe_flow) annotation (Line(points={{-143,8},
                {-142,8},{-142,12}},         color={0,127,255}));
        connect(condenser1.port_b, resistance7.port_a) annotation (Line(points=
                {{57.2,-8},{60,-8},{60,-12},{60.9,-12}}, color={0,127,255}));
        connect(sensor_m_flow10.port_a, resistance7.port_b) annotation (Line(
              points={{66,-7},{63.5,-7},{63.5,-12},{65.1,-12}}, color={0,127,
                255}));
        connect(sensor_m_flow7.port_a, resistance8.port_a) annotation (Line(
              points={{78,14},{78,12},{79.1,12}}, color={0,127,255}));
        connect(condenser2.port_b, resistance8.port_b) annotation (Line(points=
                {{73,14},{74,14},{74,12},{74.9,12}}, color={0,127,255}));
        connect(resistance10.port_a, condenser4.port_b) annotation (Line(points=
               {{143.1,-8},{143,-8},{143,-3}}, color={0,127,255}));
        connect(resistance10.port_b, sensor_m_flow9.port_a) annotation (Line(
              points={{138.9,-8},{142,-8},{142,-13},{146,-13}}, color={0,127,
                255}));
        connect(resistance9.port_a, condenser3.port_b) annotation (Line(points=
                {{104.9,-16},{104,-16},{104,-1},{119,-1}}, color={0,127,255}));
        connect(sensor_m_flow8.port_a, resistance9.port_b) annotation (Line(
              points={{120,-5},{116,-5},{116,-4},{109.1,-4},{109.1,-16}}, color=
               {0,127,255}));
        connect(IP.Tube_out, FWCP.port_a)
          annotation (Line(points={{-36,-34},{-54,-34}}, color={0,127,255}));
        connect(HP.Tube_in, FWCP.port_b) annotation (Line(points={{-76,-33.4},{
                -72,-33.4},{-72,-34},{-66,-34}}, color={0,127,255}));
        connect(LP.Tube_in, CDP.port_b) annotation (Line(points={{16,-35.4},{26,
                -35.4},{26,-35},{36,-35}}, color={0,127,255}));
        connect(FCV.port_b, sensor_m_flow1.port_a) annotation (Line(points={{
                -115,-4},{-116,-4},{-116,14},{-130,14},{-130,9}}, color={0,127,
                255}));
        connect(sensor_p1.port, TCV.port_a) annotation (Line(points={{-174,14},
                {-168,14},{-168,-4},{-143,-4},{-143,-2}}, color={0,127,255}));
        connect(sensor_p2.p, add.u1)
          annotation (Line(points={{-104,-28.4},{-104,-39}}, color={0,0,127}));
        connect(sensor_p3.p, add.u2)
          annotation (Line(points={{-110,3.6},{-110,-39}}, color={0,0,127}));
        connect(sensor_p3.port, sensor_m_flow1.port_a) annotation (Line(points={{-114,6},
                {-122,6},{-122,9},{-130,9}},           color={0,127,255}));
        connect(sensor_p2.port, HP.Tube_out) annotation (Line(points={{-108,-26},
                {-102,-26},{-102,-33.4},{-96,-33.4}}, color={0,127,255}));
        connect(volume5.port_b[1], TBV2.port_a) annotation (Line(points={{-182,-18.5},
                {-186,-18.5},{-186,-4},{-189,-4}}, color={0,127,255}));
        connect(volume5.port_b[2], TCV.port_a) annotation (Line(points={{-182,
                -17.5},{-162,-17.5},{-162,-2},{-143,-2}}, color={0,127,255}));
        connect(sensor_m_flow12.port_a, TBV2.port_b) annotation (Line(points={{-152,62},
                {-170,62},{-170,60},{-188,60},{-188,6},{-189,6}},
                                     color={0,127,255}));
        connect(volume3.port_a[1], CDP.port_a) annotation (Line(points={{86,-36.5},{
                68,-36.5},{68,-35},{50,-35}},color={0,127,255}));
        connect(PI4.u_s, sensor_m_flow6.m_flow) annotation (Line(points={{151,-5.4},{151,
                5.3},{146.52,5.3},{146.52,15}},            color={0,0,127}));
        connect(sensor_m_flow6.port_a, turbine_Outlet.Pipe_flow) annotation (Line(
              points={{144,21},{136,21},{136,24},{134,24}}, color={0,127,255}));
        connect(teeJunctionIdeal_Cyl.port_2, turbine_Inlet1.Turb_flow)
          annotation (Line(points={{2,58},{2,57.9},{12.1,57.9}},color={28,108,200}));
        connect(MoistSep1.Turb_Out, Stator5.Inlet) annotation (Line(points={{
                -12,24},{-10,24},{-10,23.8},{-7.94,23.8}}, color={28,108,200}));
        connect(teeJunctionIdeal_Cyl.port_1, Rotor4.Outlet) annotation (Line(
              points={{-18,58},{-28,58},{-28,24},{-30.08,24}}, color={28,108,
                200}));
        connect(turbine_Inlet3.Turb_flow, MoistSep1.Turb_In) annotation (Line(
              points={{-23.9,33.9},{-26,33.9},{-26,24},{-24,24}}, color={28,108,
                200}));
        connect(turbine_Inlet2.Turb_flow, teeJunctionIdeal_Cyl.port_3)
          annotation (Line(points={{4.1,45.9},{4.1,46},{-8,46},{-8,48}},
              color={28,108,200}));
        connect(transportDelayPipe.port_a, turbine_Inlet2.Pipe_flow)
          annotation (Line(points={{24,34},{30,34},{30,46},{24,46}}, color={0,
                127,255}));
        connect(transportDelayPipe.port_b, turbine_Inlet3.Pipe_flow)
          annotation (Line(points={{4,34},{-4,34}},                  color={0,
                127,255}));
        connect(sensor_m_flow1.port_b, Feedwater) annotation (Line(points={{-130,-3},{
                -138,-3},{-138,-54},{-102,-54}}, color={0,127,255}));
        connect(SG_Return, volume5.port_a[1]) annotation (Line(points={{-102,48},{-102,
                48},{-194,48},{-194,-18}}, color={0,127,255}));
        connect(DFV1.port_b, turbine_Inlet1.Pipe_flow) annotation (Line(points={{80,61},
                {72,61},{72,58},{32,58}},                 color={0,127,255}));
        connect(sensor_T.port_b, DFV1.port_a) annotation (Line(points={{106,60},{106,61},
                {90,61}},          color={0,127,255}));
        connect(HP.Tube_out, sensor_T1.port_a) annotation (Line(points={{-96,-33.4},{-106,
                -33.4},{-106,-34},{-118,-34},{-118,-31}}, color={0,127,255}));
        connect(sensor_T1.port_b, FCV.port_a) annotation (Line(points={{-118,-19},{-118,
                -18},{-115,-18},{-115,-14}}, color={0,127,255}));
        connect(actuatorBus.FWCP_Speed, FWCP.N_in) annotation (Line(
            points={{30,100},{144,100},{144,98},{256,98},{256,-58},{-60,-58},{-60,-40}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(sensorBus.dP_FCV, add.y) annotation (Line(
            points={{-30,100},{-236,100},{-236,-58},{-107,-58},{-107,-50.5}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Q_RX, Q_RX_Internal_Block.y) annotation (Line(
            points={{-30,100},{-236,100},{-236,116},{-267,116}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Demand, Demand_Internal_Block.y) annotation (Line(
            points={{-30,100},{-267,100}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.DFV_Anticipatory, DFV_Ancticipatory_Internal_Block.y)
          annotation (Line(
            points={{-30,100},{-236,100},{-236,84},{-267,84}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.DFV_Opening, DFV1.opening) annotation (Line(
            points={{30,100},{85,100},{85,65}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Superheat_Sensor_Opening, sensor_T.dT) annotation (Line(
            points={{-30,100},{-32,100},{-32,86},{116,86},{116,63.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Generator_Power, generator.Power) annotation (Line(
            points={{-30,100},{-46,100},{-46,98},{-56,98},{-56,70.8},{-56,70.8}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Feed_Flow_Rate, sensor_m_flow1.m_flow) annotation (Line(
            points={{-30,100},{-236,100},{-236,-26},{-130,-26},{-130,-8},{-122,-8},{
                -122,3},{-127.48,3}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.FCV_Opening, FCV.opening) annotation (Line(
            points={{30,100},{30,88},{-214,88},{-214,-40},{-136,-40},{-136,-9},{-119,
                -9}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TBV_Opening, TBV2.opening) annotation (Line(
            points={{30,100},{30,88},{-214,88},{-214,1},{-193,1}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.P_Turbine_Inlet, sensor_p1.p) annotation (Line(
            points={{-30,100},{-236,100},{-236,-26},{-178,-26},{-178,11.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TCV_Opening, TCV.opening) annotation (Line(
            points={{30,100},{30,88},{-214,88},{-214,-38},{-154,-38},{-154,3},{-147,3}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(TBV_Send, sensor_m_flow12.port_b) annotation (Line(points={{110,84},{
                108,84},{108,72},{104,72},{104,62},{-144,62}}, color={0,127,255}));
        connect(TBV_Return, sensor_m_flow6.port_a) annotation (Line(points={{110,-56},
                {154,-56},{154,-52},{196,-52},{196,42},{146,42},{146,21},{144,21}},
              color={0,127,255}));
        connect(Arbitrage_Return, sensor_T.port_a) annotation (Line(points={{58,-90},
                {118,-90},{118,-86},{228,-86},{228,76},{126,76},{126,60}}, color={0,
                127,255}));
        connect(Arbitrage_Send, volume3.port_a[2]) annotation (Line(points={{-44,-90},
                {18,-90},{18,-70},{86,-70},{86,-35.5}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Polygon(
                points={{24,22},{24,-8},{32,-22},{32,36},{24,22}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{40,22},{40,-8},{48,-24},{48,38},{40,22}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-12,22},{-12,-8},{-2,-22},{-2,38},{-12,22}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{8,22},{8,-8},{16,-24},{16,36},{8,22}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-2.55993,3},{93.4405,-3}},
                lineColor={0,0,0},
                origin={-31.44,-1},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{60,14},{88,-12}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{69,-6},{79,8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Rectangle(
                extent={{-1.06666,3.0002},{38.9329,-3.0002}},
                lineColor={0,0,0},
                origin={61,-50.933},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={48.427,-15},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341457,2},{13.6584,-2}},
                lineColor={0,0,0},
                origin={8,-48.342},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.12002,2},{40.8804,-2}},
                lineColor={0,0,0},
                origin={11.12,-60},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={5.422,-49.828},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-26,-46},{-14,-58}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-19,-49},{-19,-55},{-24,-52},{-19,-49}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-92.1867,-53},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,3},{13.6586,-3}},
                lineColor={0,0,0},
                origin={72.3414,-67},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-12,38},
                rotation=-90),
              Rectangle(
                extent={{-38,54},{-12,42}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-94,54},{-46,42}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-48,57},{-30,39}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Ellipse(
                extent={{-37,57},{-41,39}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Rectangle(
                extent={{-38,55},{-40,67}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-48,69},{-30,67}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-24,-56},{-28,-60},{-12,-60},{-16,-56},{-24,-56}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-0.244084,1},{9.76422,-1}},
                lineColor={0,0,0},
                origin={-1.764,19},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.195303,1},{7.8128,-1}},
                lineColor={0,0,0},
                origin={16.187,19},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.195308,1},{7.813,-1}},
                lineColor={0,0,0},
                origin={32.187,19},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{46,-50},{74,-76}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{55,-70},{65,-56}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Rectangle(
                extent={{-1.06666,3.0002},{38.9329,-3.0002}},
                lineColor={0,0,0},
                origin={-53,-70.933},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-2.61619,3},{101.384,-3}},
                lineColor={0,0,0},
                origin={-53.384,-31},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={29,-29.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={13,-29.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={-5,-29.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={45,-29.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-2.61619,3},{101.384,-3}},
                lineColor={0,0,0},
                origin={-53.384,-69},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-10,54},{48,48}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.634164,0.999955},{25.3659,-1.0001}},
                lineColor={0,0,0},
                origin={22.634,41.0001},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.586685,0.999995},{21.4135,-1}},
                lineColor={0,0,0},
                origin={21,20.5865},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Text(
                extent={{45,52},{54,64}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="1"),
              Text(
                extent={{109,62},{119,76}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="1"),
              Text(
                extent={{113,-54},{123,-40}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="2"),
              Text(
                extent={{63,-22},{72,-12}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="2"),
              Text(
                extent={{77,-66},{86,-56}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="3"),
              Text(
                extent={{-37,-112},{-27,-98}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="3"),
              Text(
                extent={{59,-114},{69,-100}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="4"),
              Text(
                extent={{47,36},{56,48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="4")}),                                     Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=30,
            __Dymola_NumberOfIntervals=531,
            Tolerance=0.0005,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>This is an integrable NuScale secondary model with 6 fluid ports. The left-side icon ports are intended to be connected to the steam generator of the SMR. Ports labelled 1 and 2 on the right hand side of the icon are designed as the <b>charging</b> ports, connected to the TBV for sourcing and returning just upstream of the condensers. Ports labelled 3 and 4 on the bottom side of the icon are designed as the <b>discharging</b> ports, which sources from the condensers and returns steam to peak the turbine. </p>
<p>For other notes, see the NuScale_Secondary model. </p>
</html>"));
      end NuScale_Modal_Secondary_Arbitrage_Ports;

      model NuScale_SBST_Secondary_With_CTES
        extends BaseClasses.Partial_SubSystem_A(
          redeclare replaceable CS_Dummy CS,
          redeclare replaceable ED_Dummy ED,
          redeclare Data.Data_Dummy data);
        parameter Integer TES_nPipes= 950;
        parameter Modelica.Units.SI.Length TES_Length=275
          "TES pipe length within concrete";
        parameter Modelica.Units.SI.Length TES_Thick=0.2
          "TES thickness to adiabatic boundary condition";
        parameter Modelica.Units.SI.Length TES_Width=0.8
          "Cross sectional area perpendicular to pipe length";
        parameter Real LP_NTU = 1.5;
        parameter Real IP_NTU = 20.0;
        parameter Real HP_NTU = 4.0;
        parameter Modelica.Units.SI.Pressure P_Rise_DFV=6.6e5;
        parameter Modelica.Units.SI.Time Ramp_Stor=500;
        parameter Modelica.Units.SI.Time Ramp_Dis=1500;
        parameter Real derspeed = 0.2;
        parameter Real frac = 2.0;
        constant Real pi = Modelica.Constants.pi;
        parameter Modelica.Units.SI.Power Q_nom;
        Modelica.Units.SI.Energy dEdCycle;
        Modelica.Units.SI.Time t_track;
       // Modelica.SIunits.Temperature T_ideal;
        parameter Modelica.Units.SI.Temperature T_feed_ref=273 + 138;
        Modelica.Units.SI.Power Q_Cond_Feed;
        Modelica.Units.SI.MassFlowRate mflowcalc;
        Modelica.Units.SI.SpecificEnthalpy dhfd;
        Modelica.Units.SI.SpecificEnthalpy dhcn;
        Modelica.Units.SI.Power Q_RX_Internal;
        Real Demand_Internal;
        Real DFV_Anticipatory_Internal;

        parameter Modelica.Units.SI.Velocity vthes1=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther1=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes2=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther2=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes3=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther3=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes4=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther4=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes5=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther5=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes6=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther6=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes7=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther7=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vthes8=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Velocity vther8=0 annotation(dialog(tab = "Initialization", group = "Rotational Velocity"));
        parameter Modelica.Units.SI.Pressure ps1in=3170000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps1out=2620000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr1out=2610000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps2out=1400000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr2out=522600 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps3out=350000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr3out=253000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps4out=180000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr4out=137800 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps5out=72000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr5out=64200 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps6out=58000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr6out=52800 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps7out=40000 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr7out=26400 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure ps8out=17500 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.Pressure pr8out=8100 annotation(dialog(tab = "Initialization", group = "Pressure"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_1=3000e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_2=2980e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_3=2800e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_4=2780e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_5=2740e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_6=2700e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_7=2650e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_8=2630e3 annotation(dialog(tab = "Initialization", group = "Enthalpy"));
        parameter Modelica.Units.SI.Area Ar8[3]={3.45,8.1,8.1} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As8[3]={2.64,3.45,3.45} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar7[3]={1.95,2.64,2.64} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As7[3]={1.545,1.95,1.95} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar6[3]={1.515,1.545,1.545} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As6[3]={1.515,1.515,1.515} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar5[3]={1.035,1.515,1.515} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As5[3]={0.84,1.035,1.035} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar4[3]={0.51,0.72,0.72} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As4[3]={0.43,0.51,0.51} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar3[3]={0.25,0.43,0.43} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As3[3]={0.23,0.25,0.25} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar2[3]={0.15,0.23,0.23} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As2[3]={0.06,0.15,0.15} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area Ar1[3]={0.06,0.06,0.06} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Area As1[3]={0.06,0.06,0.06} annotation(dialog(tab = "Geometry", group = "Areas"));
        parameter Modelica.Units.SI.Length ri[3]={0.1,0.1,0.1}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros1[3]={0.195,0.2,0.22}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror1[3]={0.22,0.24,0.245}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros2[3]={0.245,0.26,0.265}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror2[3]={0.265,0.29,0.295}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros3[3]={0.295,0.31,0.315}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror3[3]={0.315,0.33,0.335}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros4[3]={0.335,0.37,0.38}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror4[3]={0.38,0.41,0.42}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros5[3]={0.42,0.46,0.47}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror5[3]={0.47,0.51,0.53}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros6[3]={0.53,0.58,0.59}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror6[3]={0.59,0.63,0.64}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros7[3]={0.64,0.68,0.69}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror7[3]={0.69,0.74,0.75}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ros8[3]={0.75,0.81,0.82}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Modelica.Units.SI.Length ror8[3]={0.82,0.87,0.89}  annotation(dialog(tab = "Geometry", group = "Radii"));
        parameter Real[2] alphas1 = {pi/3.4,0} "Ideal deflection angle in each stage. 0 indicates no change, not a 0 angle" annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar1 = {-pi/3.48,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas2 = {pi/2.185,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar2 = {-pi/2.2,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas3 = {pi/2.43,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar3 = {-pi/2.4,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas4 = {pi/2.6,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar4 = {-pi/2.56,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas5 = {pi/2.52,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar5 = {-pi/2.42,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas6 = {pi/3.33,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar6 = {-pi/3.62,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas7 = {pi/2.53,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar7 = {-pi/2.55,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphas8 = {pi/2.41,0} annotation(dialog(tab = "Deflection", group = "Angles"));
        parameter Real[2] alphar8 = {-pi/2.21,0} annotation(dialog(tab = "Deflection", group = "Angles"));

      public
        StagebyStageTurbine.MS         MoistSep3(V_MS=0.6, eta=0.227)
          annotation (Placement(transformation(extent={{90,18},{102,30}})));
        StagebyStageTurbine.Turbine_Physical       turbine_Physical(nSt=8)
          annotation (Placement(transformation(extent={{-94,44},{-74,64}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Generator_Basic
          generator(omega_nominal=50*3.14)
          annotation (Placement(transformation(extent={{-66,50},{-46,70}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor8(
          m_flow_nom=54.86,
          alpha=alphar8,
          A_flow=Ar8,
          dz={0.4,1},
          ro=ror8,
          h_init=2260e3,
          m_init=52,
          p_in_init=ps8out,
          v_the_init=vther8,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{114,14},{122,34}})));

        StagebyStageTurbine.Stator_Stage       Stator8(
          isenthalpic=true,
          alpha=alphas8,
          A_flow=As8,
          ro=ros8,
          h_init=2350e3,
          m_init=52,
          p_in_init=pr7out,
          p_out_init=ps8out,
          v_the_init=vthes8)
          annotation (Placement(transformation(extent={{106,14},{112,34}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor7(
          m_flow_nom=55.13,
          alpha=alphar7,
          A_flow=Ar7,
          ro=ror7,
          h_init=2330e3,
          m_init=53,
          p_in_init=ps7out,
          v_the_init=vther7,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{72,14},{80,34}})));

        StagebyStageTurbine.Stator_Stage       Stator7(
          isenthalpic=true,
          alpha=alphas7,
          A_flow=As7,
          ro=ros7,
          h_init=2383e3,
          m_init=53,
          p_in_init=pr6out,
          p_out_init=ps7out,
          v_the_init=vthes7)
          annotation (Placement(transformation(extent={{64,14},{70,34}})));

        StagebyStageTurbine.MS         MoistSep2(V_MS=0.25, eta=0.19)
          annotation (Placement(transformation(extent={{46,18},{58,30}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor6(
          m_flow_nom=56.18,
          alpha=alphar6,
          A_flow=Ar6,
          ro=ror6,
          h_init=2336e3,
          m_init=56,
          p_in_init=ps6out,
          v_the_init=vther6,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{34,14},{42,34}})));

        StagebyStageTurbine.Stator_Stage       Stator6(
          v_the_init=vthes6,
          isenthalpic=true,
          alpha=alphas6,
          A_flow=As6,
          ro=ros6,
          h_init=2417e3,
          m_init=56,
          p_in_init=pr5out,
          p_out_init=ps6out)
          annotation (Placement(transformation(extent={{22,14},{28,34}})));

        StagebyStageTurbine.Turbine_Tap       turbine_Tap2
          annotation (Placement(transformation(extent={{12,16},{18,32}})));
           StagebyStageTurbine.Stator_Stage             Stator5(
          dz={1.0,0.3},
          v_the_init=vthes5,
          alpha=alphas5,
          A_flow=As5,
          ro=ros5,
          h_init=2402e3,
          m_init=59,
          p_in_init=pr4out,
          p_out_init=ps5out)
          annotation (Placement(transformation(extent={{-8,14},{-2,34}})));

        StagebyStageTurbine.Rotor_Stage                   Rotor5(
          m_flow_nom=59.78,
          alpha=alphar5,
          A_flow=Ar5,
          ro=ror5,
          h_init=2379e3,
          m_init=59,
          p_in_init=ps5out,
          v_the_init=vther5,
          v_r_init=0.1) annotation (Placement(transformation(extent={{0,14},{8,34}})));

        StagebyStageTurbine.MS         MoistSep1(V_MS=25, eta=0.17)
          annotation (Placement(transformation(extent={{-24,18},{-12,30}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor4(
          m_flow_nom=60.76,
          alpha=alphar4,
          A_flow=Ar4,
          ro=ror4,
          h_init=2402e3,
          m_init=60,
          p_in_init=ps4out,
          v_the_init=vther4,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-38,14},{-30,34}})));

           StagebyStageTurbine.Stator_Stage       Stator4(
          v_the_init=vthes4,
          isenthalpic=true,
          alpha=alphas4,
          A_flow=As4,
          ro=ros4,
          h_init=2504e3,
          m_init=60,
          p_in_init=pr3out,
          p_out_init=ps4out)
          annotation (Placement(transformation(extent={{-48,14},{-42,34}})));

        StagebyStageTurbine.Turbine_Tap       turbine_Tap1
          annotation (Placement(transformation(extent={{-58,16},{-52,30}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor3(
          m_flow_nom=64.31,
          alpha=alphar3,
          A_flow=Ar3,
          ro=ror3,
          h_init=2477e3,
          m_init=64,
          p_in_init=ps3out,
          v_the_init=vther3,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-74,12},{-66,32}})));

           StagebyStageTurbine.Stator_Stage       Stator3(
          v_the_init=vthes3,
          isenthalpic=true,
          alpha=alphas3,
          A_flow=As3,
          ro=ros3,
          h_init=2563e3,
          m_init=64,
          p_in_init=pr2out,
          p_out_init=ps3out)
          annotation (Placement(transformation(extent={{-82,12},{-76,32}})));
        StagebyStageTurbine.Turbine_Tap       turbine_Tap(Tap_flow(m_flow(start=-5.237983241487215)))
          annotation (Placement(transformation(extent={{-92,14},{-86,28}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor2(
          m_flow_nom=68.22,
          alpha=alphar2,
          A_flow=Ar2,
          ro=ror2,
          h_init=2674e3,
          m_init=68,
          p_in_init=ps2out,
          v_the_init=vther2,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-104,12},{-96,32}})));

           StagebyStageTurbine.Stator_Stage       Stator2(
          v_the_init=vthes2,
          isenthalpic=true,
          alpha=alphas2,
          A_flow=As2,
          ro=ros2,
          h_init=2965e3,
          m_init=68,
          p_in_init=pr1out,
          p_out_init=ps2out)
          annotation (Placement(transformation(extent={{-114,12},{-108,32}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor1(
          m_flow_nom=68.22,
          alpha=alphar1,
          A_flow=Ar1,
          ro=ror1,
          h_init=2999e3,
          m_init=68,
          p_in_init=ps1out,
          v_the_init=vther1,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-128,12},{-120,32}})));

           StagebyStageTurbine.Stator_Stage       Stator1(
          v_the_init=vthes1,
          isenthalpic=true,
          alpha=alphas1,
          A_flow=As1,
          ro=ros1,
          h_init=2999e3,
          m_init=68,
          p_in_init=ps1in,
          p_out_init=ps1out)
          annotation (Placement(transformation(extent={{-136,12},{-130,32}})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX LP(
          NTU=LP_NTU,
          K_tube=17000,
          K_shell=5,
          V_Tube=4.,
          V_Shell=4,
          p_start_tube=2340000,
          h_start_tube_inlet=184e3,
          h_start_tube_outlet=184e3,
          p_start_shell=58000,
          h_start_shell_inlet=405.5e3,
          h_start_shell_outlet=405.5e3,
          Cr_init=0.8,
          deltaX_t_init=0.0,
          deltaX_s_init=0.0,
          Shell(medium(h(start=100000))))
          annotation (Placement(transformation(extent={{4,-18},{16,-40}})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX IP(
          NTU=IP_NTU,
          K_tube=17000,
          K_shell=500,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=3740000,
          h_start_tube_inlet=346.6e3,
          h_start_tube_outlet=346.6e3,
          p_start_shell=497000,
          h_start_shell_inlet=368.2e3,
          h_start_shell_outlet=368.2e3)
          annotation (Placement(transformation(extent={{-36,-18},{-16,-38}})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX HP(
          NTU=HP_NTU,
          K_tube=16500,
          K_shell=50,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=3740000,
          h_start_tube_inlet=523.1e3,
          h_start_tube_outlet=523.1e3,
          p_start_shell=497000,
          h_start_shell_inlet=544.5e3,
          h_start_shell_outlet=544.5e3,
          Shell(medium(h(start=500e3))))
          annotation (Placement(transformation(extent={{-96,-18},{-76,-40}})));
        StagebyStageTurbine.BaseClasses.Turbine_Outlet                                                 turbine_Outlet
          annotation (Placement(transformation(extent={{130,14},{134,34}})));
        StagebyStageTurbine.BaseClasses.Turbine_Inlet                                                 turbine_Inlet annotation (
            Placement(transformation(
              extent={{-4,-8},{4,8}},
              rotation=90,
              origin={-142,16})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr3out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.2),
          nPorts_a=2,
          nPorts_b=1)
          annotation (Placement(transformation(extent={{-54,-22},{-34,-2}})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume1(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr5out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.2),
          nPorts_a=3,
          nPorts_b=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={6,-14})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false)
          annotation (Placement(transformation(extent={{-4,-5},{4,5}},
              rotation=90,
              origin={69,14})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume3(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr8out,
          use_T_start=false,
          h_start=150e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=5),
          nPorts_b=4,
          nPorts_a=2)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={92,-36})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance(R=90000)
          annotation (Placement(transformation(extent={{-70,-20},{-62,-8}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance1(R=8500)
          annotation (Placement(transformation(extent={{-6,-7},{6,7}},
              rotation=90,
              origin={-12,-21})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance2(R=3500)
          annotation (Placement(transformation(extent={{22,-26},{30,-14}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow3(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{34,-12},{46,-26}})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false)
          annotation (Placement(transformation(extent={{-2,-4},{2,4}},
              rotation=90,
              origin={54,-8})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser3(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false)
          annotation (Placement(transformation(extent={{114,-2},{124,8}})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                               condenser4(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false,V_total=100)
          annotation (Placement(transformation(extent={{138,-4},{148,6}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow4(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{54,16},{60,6}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow5(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=180,
              origin={110,9})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow6(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=90,
              origin={138,15})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow7(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{78,18},{86,10}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow8(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=90,
              origin={120,-11})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow9(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-6,-7},{6,7}},
              rotation=270,
              origin={146,-19})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow10(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-6,7},{6,-7}},
              rotation=0,
              origin={72,-7})));
        TRANSFORM.Controls.PI_Control PI4
          annotation (Placement(transformation(extent={{-3,-3},{3,3}},
              rotation=270,
              origin={151,-9})));
        TRANSFORM.Controls.PI_Control PI5
          annotation (Placement(transformation(extent={{-3,-3},{3,3}},
              rotation=270,
              origin={129,-11})));
        TRANSFORM.Controls.PI_Control PI6
          annotation (Placement(transformation(extent={{-3,3},{3,-3}},
              rotation=270,
              origin={67,5})));
        Control_and_Distribution.ValveLineartanh                   valveLineartanh3(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40)
          annotation (Placement(transformation(extent={{88,10},{94,4}})));
        TRANSFORM.Controls.PI_Control PI7 annotation (Placement(transformation(
              extent={{3,-3},{-3,3}},
              rotation=180,
              origin={61,-19})));
        Control_and_Distribution.ValveLineartanh                   valveLineartanh4(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40)
          annotation (Placement(transformation(extent={{80,-6},{86,-12}})));
        Control_and_Distribution.ValveLineartanh                   valveLineartanh5(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40) annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={121,-25})));
        Control_and_Distribution.ValveLineartanh                   valveLineartanh6(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=10,
          m_flow_nominal=40) annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={143,-31})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume2(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr5out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=2.5),
          nPorts_b=1,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-4,-5},{4,5}},
              rotation=0,
              origin={102,15})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume4(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=pr5out,
          use_T_start=false,
          h_start=1200e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.8),
          nPorts_b=1,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-6,-6},{6,6}},
              rotation=270,
              origin={52,6})));
        Control_and_Distribution.SpringBallValve                   LPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr8out,
          K=500,
          opening_init=0.01,
          tau=0.1) annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=270,
              origin={21,3})));
        Control_and_Distribution.SpringBallValve                   IPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr6out,
          K=4250,
          tau=0.1) annotation (Placement(transformation(
              extent={{-5,-5},{5,5}},
              rotation=270,
              origin={-53,5})));
        Control_and_Distribution.SpringBallValve                   HPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr5out,
          K=2300,
          tau=0.1) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-88,-2})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance6(R=15000)
          annotation (Placement(transformation(extent={{92,10},{100,22}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance4(R=65000)
          annotation (Placement(transformation(extent={{-10,0},{-2,12}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance5(R=50000)
          annotation (Placement(transformation(extent={{-4,-6},{4,6}},
              rotation=270,
              origin={52,16})));
        Control_and_Distribution.ValveLineartanh                   TCV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=200000,
          m_flow_nominal=68.404,
          opening_actual(start=1)) annotation (Placement(transformation(
              extent={{5,5},{-5,-5}},
              rotation=270,
              origin={-143,3})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance7(dp0=-2000)
                      annotation (Placement(transformation(
              extent={{3,-2},{-3,2}},
              rotation=180,
              origin={63,-12})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance8(dp0=2000)
                      annotation (Placement(transformation(
              extent={{-3,-2},{3,2}},
              rotation=180,
              origin={77,12})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance9(dp0=-2000)
                      annotation (Placement(transformation(
              extent={{3,-2},{-3,2}},
              rotation=180,
              origin={107,-16})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance10(dp0=-2000)
                      annotation (Placement(transformation(
              extent={{-3,-2},{3,2}},
              rotation=180,
              origin={141,-8})));
        Control_and_Distribution.ValveLinearTotal TBV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=100000,
          m_flow_nominal=68.404,
          opening_actual(start=0)) annotation (Placement(transformation(
              extent={{5,5},{-5,-5}},
              rotation=270,
              origin={-189,1})));
        Modelica.Fluid.Machines.PrescribedPump FWCP(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          allowFlowReversal=false,
          p_a_start=2200000,
          p_b_start=3700000,
          m_flow_start=66.3,
          nParallel=3,
          redeclare function flowCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow
              (V_flow_nominal={0,0.07,0.105}, head_nominal={400,200,0}),
          N_nominal=1500,
          rho_nominal=945,
          use_powerCharacteristic=false,
          redeclare function efficiencyCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.constantEfficiency
              (eta_nominal=0.8),
          V=1.5,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          use_T_start=false,
          h_start=500e3,
          use_N_in=true,
          N_const=890.3)
          annotation (Placement(transformation(extent={{-54,-28},{-66,-40}})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p1(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-178,14})));
        Control_and_Distribution.ValveLinearTotal                  FCV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=200000,
          m_flow_nominal=68.4,
          opening_actual(start=1)) annotation (Placement(transformation(
              extent={{5,5},{-5,-5}},
              rotation=270,
              origin={-115,-9})));
        Modelica.Fluid.Machines.PrescribedPump CDP(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          allowFlowReversal=false,
          p_a_start=8000,
          p_b_start=2220000,
          m_flow_start=68.4,
          nParallel=3,
          redeclare function flowCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow
              (V_flow_nominal={0,0.07,0.105}, head_nominal={400,200,0}),
          N_nominal=1500,
          rho_nominal=945,
          use_powerCharacteristic=false,
          redeclare function efficiencyCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.constantEfficiency
              (eta_nominal=0.8),
          V=1.5,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          use_T_start=false,
          h_start=300e3,
          N_const=1278.78)
          annotation (Placement(transformation(extent={{50,-42},{36,-28}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{6,7},{-6,-7}},
              rotation=90,
              origin={-130,3})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p2(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,4},{-4,-4}},
              rotation=90,
              origin={-104,-26})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p3(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,4},{-4,-4}},
              rotation=90,
              origin={-110,6})));
        Modelica.Blocks.Math.Add add(k2=-1) annotation (Placement(
              transformation(
              extent={{-5,-5},{5,5}},
              rotation=270,
              origin={-107,-45})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume5(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=ps1in,
          use_T_start=false,
          h_start=3000e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=10),
          nPorts_b=2,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-188,-18})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow12(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-154,44},{-146,52}})));
        EnergyStorage.Concrete_Solid_Media.Components.Dual_Pipe_Model TES(
          nPipes=TES_nPipes,
          dX=TES_Length,
          Pipe_to_Concrete_Length_Ratio=1,
          dY=TES_Width,
          Hot_Con_Start=483.15,
          Cold_Con_Start=473.15)
          annotation (Placement(transformation(extent={{148,62},{168,82}})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss Condensate_Res(dp0=
              2200000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={162,32})));
        StagebyStageTurbine.BaseClasses.Turbine_Inlet                                                 turbine_Inlet1
          annotation (Placement(transformation(extent={{32,48},{12,68}})));
        StagebyStageTurbine.TeeJunctionIdeal_Cyl                                                             teeJunctionIdeal_Cyl(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-18,68},{2,48}})));
        StagebyStageTurbine.BaseClasses.Turbine_Inlet                                                 turbine_Inlet2
          annotation (Placement(transformation(extent={{24,36},{4,56}})));
        StagebyStageTurbine.BaseClasses.Turbine_Inlet                                                 turbine_Inlet3
          annotation (Placement(transformation(extent={{-4,24},{-24,44}})));
        TRANSFORM.Fluid.Pipes.TransportDelayPipe transportDelayPipe(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          crossArea=As5[1],
          length=1.5,
          K_ab=1,
          K_ba=1)
          annotation (Placement(transformation(extent={{24,24},{4,44}})));
        TRANSFORM.Fluid.FittingsAndResistances.PressureLoss resistance12(dp0=-
              P_Rise_DFV)
          annotation (Placement(transformation(extent={{124,-54},{144,-34}})));
        Control_and_Distribution.ValveLinearTotal                   DCV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=250000,
          m_flow_nominal=20,
          opening_actual(start=0)) annotation (Placement(transformation(
              extent={{5,5},{-5,-5}},
              rotation=180,
              origin={163,-43})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow2(redeclare package
            Medium =
              Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-4,4},{4,-4}},
              rotation=90,
              origin={190,-36})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{-108,-60},{-88,-40}}), iconTransformation(
                extent={{-108,-60},{-88,-40}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{-110,40},{-90,60}}), iconTransformation(extent={
                  {-110,40},{-90,60}})));
        Control_and_Distribution.ValveLinearTotal DFV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=250000,
          m_flow_nominal=20,
          opening_actual(start=0)) annotation (Placement(transformation(
              extent={{-5,5},{5,-5}},
              rotation=180,
              origin={85,61})));
        Control_and_Distribution.TemperatureTwoPort_Superheat                   sensor_T(
            redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{126,50},{106,70}})));
        Control_and_Distribution.Delay                   delay2(Ti=0.001)
          annotation (Placement(transformation(extent={{-52,78},{-46,86}})));
        Modelica.Blocks.Sources.RealExpression DFV_Ancticipatory_Internal_Block(y=
              DFV_Anticipatory_Internal)
          annotation (Placement(transformation(extent={{-192,70},{-172,90}})));
        Modelica.Blocks.Sources.RealExpression Demand_Internal_Block(y=
              Demand_Internal)
          annotation (Placement(transformation(extent={{-192,86},{-172,106}})));
        Modelica.Blocks.Sources.RealExpression Q_RX_Internal_Block(y=Q_RX_Internal)
          annotation (Placement(transformation(extent={{-192,102},{-172,122}})));
      initial equation
        dEdCycle=0;
        t_track = 0;
        Q_Cond_Feed = 0;
        mflowcalc = HP.Tube_in.m_flow;
      //  T_ideal = T_feed_ref;
      equation
        der(t_track)=1;
        der(dEdCycle) = generator.power-Q_nom;
        when t_track>=86400 then
          reinit(dEdCycle,0);
          reinit(t_track,0);
        end when;
        der(mflowcalc) = HP.Tube_in.m_flow - mflowcalc;
        dhfd = (Modelica.Media.Water.StandardWater.specificEnthalpy_pT(HP.Tube_out.p,T_feed_ref)-HP.hex_t);
        dhcn = Condensate_Res.port_a.h_outflow-Modelica.Media.Water.StandardWater.specificEnthalpy_pT(Condensate_Res.port_a.p,HP.Tin_t);
        if  Condensate_Res.m_flow>0 and HP.Tex_t<=T_feed_ref then
          10*der(Q_Cond_Feed) = min(0.5*(HP.Tube_in.m_flow + HP.Tube_out.m_flow) *dhfd,
          Condensate_Res.m_flow*(dhcn)) -Q_Cond_Feed;
        else
          10*der(Q_Cond_Feed) = 0-Q_Cond_Feed;
        end if;

        connect(generator.shaft,turbine_Physical. Generator_torque) annotation (Line(
              points={{-66.1,59.9},{-70,59.9},{-70,60},{-72,60},{-72,59.8},{-74,
                59.8}},                                                     color={0,0,
                0}));
        connect(Rotor8.Inlet, Stator8.Outlet) annotation (Line(points={{114.08,23.8},{
                114.08,23.6},{112,23.6}},
                                  color={28,108,200}));
        connect(Rotor8.torque,turbine_Physical. Fluidtorques[1]) annotation (Line(
              points={{116.64,28.6},{116.64,42},{-84.4,42},{-84.4,49.925}},
                                                                       color={28,108,200}));
        connect(MoistSep3.Turb_Out, Stator8.Inlet) annotation (Line(points={{102,24},
                {102,23.8},{106.06,23.8}}, color={28,108,200}));
        connect(Rotor7.Inlet, Stator7.Outlet) annotation (Line(points={{72.08,23.8},{72.08,
                24},{70,24},{70,23.6}},                     color={28,108,200}));
        connect(Rotor7.Outlet, MoistSep3.Turb_In) annotation (Line(points={{79.92,24},
                {90,24}},                   color={28,108,200}));
        connect(Rotor7.torque,turbine_Physical. Fluidtorques[2]) annotation (Line(
              points={{74.64,28.6},{74.64,36},{76,36},{76,42},{-84.4,42},{-84.4,50.175}},
                                                                               color={
                28,108,200}));
        connect(MoistSep2.Turb_Out, Stator7.Inlet) annotation (Line(points={{58,24},
                {58,23.8},{64.06,23.8}},               color={28,108,200}));
        connect(Rotor6.torque,turbine_Physical. Fluidtorques[3]) annotation (Line(
              points={{36.64,28.6},{36.64,42},{-84.4,42},{-84.4,50.425}},
              color={28,108,200}));
        connect(Rotor6.Outlet, MoistSep2.Turb_In) annotation (Line(points={{41.92,24},
                {46,24}},                          color={28,108,200}));
        connect(Stator6.Outlet, Rotor6.Inlet) annotation (Line(points={{28,23.6},{28,23.8},
                {34.08,23.8}},                        color={28,108,200}));
        connect(turbine_Tap2.Turb_flow2, Stator6.Inlet) annotation (Line(points={{18.06,
                24},{20,24},{20,23.8},{22.06,23.8}},    color={28,108,200}));
        connect(Rotor5.Outlet, turbine_Tap2.Turb_flow) annotation (Line(points={{7.92,24},
                {12.03,24},{12.03,24.08}},                color={28,108,200}));
        connect(Rotor5.Inlet, Stator5.Outlet) annotation (Line(points={{0.08,23.8},{0.08,
                24},{-2,24},{-2,23.6}},                     color={28,108,200}));
        connect(Rotor5.torque,turbine_Physical. Fluidtorques[4]) annotation (Line(
              points={{2.64,28.6},{0,28.6},{0,42},{-84.4,42},{-84.4,50.675}},
                                color={28,108,200}));
        connect(Rotor4.Inlet,Stator4. Outlet) annotation (Line(points={{-37.92,
                23.8},{-42,23.8},{-42,23.6}},
                                 color={28,108,200}));
        connect(Stator4.Inlet,turbine_Tap1. Turb_flow2)
          annotation (Line(points={{-47.94,23.8},{-47.94,24},{-51.94,24},{
                -51.94,23}},                                 color={28,108,200}));
        connect(Rotor4.torque,turbine_Physical. Fluidtorques[5]) annotation (Line(
              points={{-35.36,28.6},{-35.36,42},{-84.4,42},{-84.4,50.925}},
                          color={28,108,200}));
        connect(Rotor2.Outlet, turbine_Tap.Turb_flow) annotation (Line(points={{-96.08,
                22},{-91.97,22},{-91.97,21.07}},      color={28,108,200}));
        connect(turbine_Tap.Turb_flow2, Stator3.Inlet) annotation (Line(points={{-85.94,
                21},{-85.94,22},{-81.94,22},{-81.94,21.8}},            color={28,108,200}));
        connect(Rotor3.Inlet, Stator3.Outlet) annotation (Line(points={{-73.92,21.8},{
                -76,21.8},{-76,21.6}},                         color={28,108,200}));
        connect(Rotor2.Inlet, Stator2.Outlet) annotation (Line(points={{-103.92,21.8},
                {-106,21.8},{-106,22},{-108,22},{-108,21.6}},  color={28,108,200}));
        connect(Stator2.Inlet, Rotor1.Outlet) annotation (Line(points={{-113.94,21.8},
                {-114,21.8},{-114,22},{-120.08,22}},          color={28,108,200}));
        connect(Rotor1.Inlet, Stator1.Outlet) annotation (Line(points={{-127.92,21.8},
                {-128,21.8},{-128,22},{-130,22},{-130,21.6}},  color={28,108,200}));
        connect(Rotor3.Outlet, turbine_Tap1.Turb_flow) annotation (Line(points={{-66.08,
                22},{-62,22},{-62,23.07},{-57.97,23.07}},        color={28,108,200}));
        connect(Rotor3.torque,turbine_Physical. Fluidtorques[6]) annotation (Line(
              points={{-71.36,26.6},{-70,26.6},{-70,42},{-84.4,42},{-84.4,51.175}},
                                     color={28,108,200}));
        connect(Rotor2.torque,turbine_Physical. Fluidtorques[7]) annotation (Line(
              points={{-101.36,26.6},{-101.36,40},{-106,40},{-106,42},{-84.4,42},{-84.4,
                51.425}},
              color={28,108,200}));
        connect(Rotor1.torque,turbine_Physical. Fluidtorques[8]) annotation (Line(
              points={{-125.36,26.6},{-125.36,34},{-124,34},{-124,42},{-84.4,42},{-84.4,
                51.675}}, color={28,108,200}));
        connect(LP.Tube_out, IP.Tube_in) annotation (Line(points={{4,-33.4},{4,-32},{-16,
                -32}},            color={0,127,255}));
        connect(Rotor8.Outlet, turbine_Outlet.Turb_flow) annotation (Line(
              points={{121.92,24},{130,24},{130,24.1},{130.02,24.1}},
                                                                  color={28,108,
                200}));
        connect(Stator1.Inlet, turbine_Inlet.Turb_flow) annotation (Line(points={{-135.94,
                21.8},{-142,21.8},{-142,19.96},{-141.92,19.96}},   color={28,
                108,200}));
        connect(volume.port_b[1], IP.Shell_in) annotation (Line(points={{-38,-12},{-38,
                -26},{-36,-26}},           color={0,127,255}));
        connect(volume1.port_b[1], LP.Shell_in) annotation (Line(points={{6,-20},{6,-22},
                {-4,-22},{-4,-26.8},{4,-26.8}},                         color={
                0,127,255}));
        connect(IP.Shell_out, resistance1.port_a) annotation (Line(points={{-16,-26},{
                -12,-26},{-12,-25.2}},    color={0,127,255}));
        connect(resistance1.port_b, volume1.port_a[1]) annotation (Line(points={{-12,
                -16.8},{-12,-2},{5.33333,-2},{5.33333,-8}},          color={0,127,255}));
        connect(volume.port_a[1], resistance.port_b) annotation (Line(points={{-50,-12.5},
                {-56,-12.5},{-56,-14},{-63.2,-14}}, color={0,127,255}));
        connect(HP.Shell_out, resistance.port_a) annotation (Line(points={{-76,
                -26.8},{-74,-26.8},{-74,-14},{-68.8,-14}},
                                                    color={0,127,255}));
        connect(resistance2.port_b, sensor_m_flow3.port_a) annotation (Line(
              points={{28.8,-20},{34,-20},{34,-19}}, color={0,127,255}));
        connect(sensor_m_flow3.port_b, condenser1.port_a) annotation (Line(
              points={{46,-19},{46,-10},{51.2,-10},{51.2,-9.4}},
                                                               color={0,127,255}));
        connect(sensor_m_flow4.port_b, condenser2.port_a) annotation (Line(
              points={{60,11},{62,11},{62,12},{64,12},{64,11.2},{65.5,11.2}},
              color={0,127,255}));
        connect(sensor_m_flow6.port_b, condenser4.port_a) annotation (Line(
              points={{138,9},{138,4.5},{139.5,4.5}},  color={0,127,255}));
        connect(sensor_m_flow7.m_flow, PI6.u_m) annotation (Line(points={{82,
                12.56},{82,5},{70.6,5}}, color={0,0,127}));
        connect(PI6.u_s, sensor_m_flow4.m_flow) annotation (Line(points={{67,8.6},
                {57,8.6},{57,9.2}},         color={0,0,127}));
        connect(PI6.y, valveLineartanh3.opening) annotation (Line(points={{67,1.7},
                {66,1.7},{66,0},{92,0},{92,4.6},{91,4.6}},      color={0,0,127}));
        connect(valveLineartanh3.port_a, sensor_m_flow7.port_b) annotation (
            Line(points={{88,7},{88,6},{86,6},{86,14}}, color={0,127,255}));
        connect(valveLineartanh3.port_b, volume3.port_b[1]) annotation (Line(
              points={{94,7},{94,6},{98,6},{98,-36.75}},
                          color={0,127,255}));
        connect(PI7.u_s, sensor_m_flow3.m_flow) annotation (Line(points={{57.4,
                -19},{57.4,-20},{52,-20},{52,-26},{40,-26},{40,-21.52}}, color=
                {0,0,127}));
        connect(PI7.u_m, sensor_m_flow10.m_flow) annotation (Line(points={{61,
                -15.4},{60,-15.4},{60,-14},{72,-14},{72,-9.52}}, color={0,0,127}));
        connect(valveLineartanh4.port_a, sensor_m_flow10.port_b) annotation (
            Line(points={{80,-9},{80,-8},{78,-8},{78,-7}}, color={0,127,255}));
        connect(valveLineartanh4.port_b, volume3.port_b[2]) annotation (Line(
              points={{86,-9},{90,-9},{90,-10},{98,-10},{98,-36.25}},
              color={0,127,255}));
        connect(PI5.u_s, sensor_m_flow5.m_flow) annotation (Line(points={{129,
                -7.4},{129,11.52},{110,11.52}}, color={0,0,127}));
        connect(PI5.u_m, sensor_m_flow8.m_flow)
          annotation (Line(points={{125.4,-11},{122.52,-11}},
                                                            color={0,0,127}));
        connect(PI4.u_m, sensor_m_flow9.m_flow) annotation (Line(points={{147.4,
                -9},{147.4,-10},{148.52,-10},{148.52,-19}},
                                                          color={0,0,127}));
        connect(valveLineartanh6.port_b, volume3.port_b[3]) annotation (Line(
              points={{143,-34},{142,-34},{142,-36},{98,-36},{98,-35.75}},
              color={0,127,255}));
        connect(valveLineartanh5.port_b, volume3.port_b[4]) annotation (Line(
              points={{121,-28},{122,-28},{122,-36},{98,-36},{98,-35.25}},
              color={0,127,255}));
        connect(valveLineartanh5.port_a, sensor_m_flow8.port_b) annotation (
            Line(points={{121,-22},{120,-22},{120,-17}}, color={0,127,255}));
        connect(PI5.y, valveLineartanh5.opening) annotation (Line(points={{129,
                -14.3},{130,-14.3},{130,-26},{123.4,-26},{123.4,-25}}, color={0,
                0,127}));
        connect(sensor_m_flow9.port_b, valveLineartanh6.port_a) annotation (
            Line(points={{146,-25},{146,-28},{143,-28}}, color={0,127,255}));
        connect(valveLineartanh6.opening, PI4.y) annotation (Line(points={{145.4,
                -31},{145.4,-30},{152,-30},{152,-12.3},{151,-12.3}},
              color={0,0,127}));
        connect(volume2.port_b[1], sensor_m_flow5.port_a) annotation (Line(
              points={{104.4,15},{104.4,12},{104,12},{104,9}},
                                                            color={0,127,255}));
        connect(sensor_m_flow5.port_b, condenser3.port_a) annotation (Line(
              points={{116,9},{116,8},{115.5,8},{115.5,6.5}},    color={0,127,
                255}));
        connect(volume4.port_b[1], sensor_m_flow4.port_a) annotation (Line(
              points={{52,2.4},{56,2.4},{56,11},{54,11}},
                                                  color={0,127,255}));
        connect(resistance2.port_a, LP.Shell_out) annotation (Line(points={{23.2,-20},
                {20,-20},{20,-26.8},{16,-26.8}},          color={0,127,255}));
        connect(PI7.y, valveLineartanh4.opening) annotation (Line(points={{64.3,
                -19},{70,-19},{70,-18},{84,-18},{84,-14},{83,-14},{83,-11.4}},
              color={0,0,127}));
        connect(LPTapValve.port_b, volume1.port_a[2]) annotation (Line(points={{21,0},{
                14,0},{14,-8},{6,-8}},       color={0,127,255}));
        connect(LPTapValve.port_a, turbine_Tap2.Tap_flow) annotation (Line(points={{21,6},{
                22,6},{22,10},{16,10},{16,21.44},{15,21.44}},
                                               color={0,127,255}));
        connect(HPTapValve.port_b, HP.Shell_in) annotation (Line(points={{-88,-6},
                {-88,-16},{-100,-16},{-100,-26.8},{-96,-26.8}},
                                                            color={0,127,255}));
        connect(HPTapValve.port_a, turbine_Tap.Tap_flow) annotation (Line(points={{-88,2},
                {-88,18.76},{-89,18.76}},             color={0,127,255}));
        connect(IPTapValve.port_a, turbine_Tap1.Tap_flow) annotation (Line(points={{-53,10},
                {-54,10},{-54,20.76},{-55,20.76}},     color={0,127,255}));
        connect(IPTapValve.port_b, volume.port_a[2]) annotation (Line(points={{-53,0},
                {-54,0},{-54,-11.5},{-50,-11.5}}, color={0,127,255}));
        connect(MoistSep3.Liquid, resistance6.port_a) annotation (Line(points={{96,
                22.08},{94,22.08},{94,16},{93.2,16}},
                                               color={0,127,255}));
        connect(volume2.port_a[1], resistance6.port_b) annotation (Line(points={{99.6,15},
                {99.6,15.5},{98.8,15.5},{98.8,16}},     color={0,127,255}));
        connect(resistance4.port_b, volume1.port_a[3]) annotation (Line(points={{-3.2,6},
                {2,6},{2,-8},{6.66667,-8}},       color={0,127,255}));
        connect(resistance4.port_a, MoistSep1.Liquid) annotation (Line(points={{-8.8,6},
                {-18,6},{-18,22.08}},                color={0,127,255}));
        connect(MoistSep2.Liquid, resistance5.port_a)
          annotation (Line(points={{52,22.08},{52,18.8}}, color={0,127,255}));
        connect(volume4.port_a[1], resistance5.port_b)
          annotation (Line(points={{52,9.6},{52,13.2}},  color={0,127,255}));
        connect(TCV.port_b, turbine_Inlet.Pipe_flow) annotation (Line(points={{-143,8},
                {-142,8},{-142,12}},         color={0,127,255}));
        connect(condenser1.port_b, resistance7.port_a) annotation (Line(points=
                {{57.2,-8},{60,-8},{60,-12},{60.9,-12}}, color={0,127,255}));
        connect(sensor_m_flow10.port_a, resistance7.port_b) annotation (Line(
              points={{66,-7},{63.5,-7},{63.5,-12},{65.1,-12}}, color={0,127,
                255}));
        connect(sensor_m_flow7.port_a, resistance8.port_a) annotation (Line(
              points={{78,14},{78,12},{79.1,12}}, color={0,127,255}));
        connect(condenser2.port_b, resistance8.port_b) annotation (Line(points=
                {{73,14},{74,14},{74,12},{74.9,12}}, color={0,127,255}));
        connect(resistance10.port_a, condenser4.port_b) annotation (Line(points=
               {{143.1,-8},{143,-8},{143,-3}}, color={0,127,255}));
        connect(resistance10.port_b, sensor_m_flow9.port_a) annotation (Line(
              points={{138.9,-8},{142,-8},{142,-13},{146,-13}}, color={0,127,
                255}));
        connect(resistance9.port_a, condenser3.port_b) annotation (Line(points=
                {{104.9,-16},{104,-16},{104,-1},{119,-1}}, color={0,127,255}));
        connect(sensor_m_flow8.port_a, resistance9.port_b) annotation (Line(
              points={{120,-5},{116,-5},{116,-4},{109.1,-4},{109.1,-16}}, color=
               {0,127,255}));
        connect(IP.Tube_out, FWCP.port_a)
          annotation (Line(points={{-36,-32},{-46,-32},{-46,-34},{-54,-34}},
                                                         color={0,127,255}));
        connect(HP.Tube_in, FWCP.port_b) annotation (Line(points={{-76,-33.4},{
                -72,-33.4},{-72,-34},{-66,-34}}, color={0,127,255}));
        connect(FCV.port_a, HP.Tube_out) annotation (Line(points={{-115,-14},{
                -114,-14},{-114,-33.4},{-96,-33.4}}, color={0,127,255}));
        connect(LP.Tube_in, CDP.port_b) annotation (Line(points={{16,-33.4},{26,-33.4},
                {26,-35},{36,-35}},        color={0,127,255}));
        connect(FCV.port_b, sensor_m_flow1.port_a) annotation (Line(points={{
                -115,-4},{-116,-4},{-116,14},{-130,14},{-130,9}}, color={0,127,
                255}));
        connect(sensor_p1.port, TCV.port_a) annotation (Line(points={{-174,14},
                {-168,14},{-168,-4},{-143,-4},{-143,-2}}, color={0,127,255}));
        connect(sensor_p2.p, add.u1)
          annotation (Line(points={{-104,-28.4},{-104,-39}}, color={0,0,127}));
        connect(sensor_p3.p, add.u2)
          annotation (Line(points={{-110,3.6},{-110,-39}}, color={0,0,127}));
        connect(sensor_p3.port, sensor_m_flow1.port_a) annotation (Line(points={{-114,6},
                {-122,6},{-122,9},{-130,9}},           color={0,127,255}));
        connect(sensor_p2.port, HP.Tube_out) annotation (Line(points={{-108,-26},
                {-102,-26},{-102,-33.4},{-96,-33.4}}, color={0,127,255}));
        connect(volume5.port_b[1], TBV.port_a) annotation (Line(points={{-182,-18.5},
                {-182,-12},{-180,-12},{-180,-6},{-188,-6},{-188,-4},{-189,-4}},
                                                   color={0,127,255}));
        connect(volume5.port_b[2], TCV.port_a) annotation (Line(points={{-182,
                -17.5},{-162,-17.5},{-162,-2},{-143,-2}}, color={0,127,255}));
        connect(sensor_m_flow12.port_a, TBV.port_b) annotation (Line(points={{-154,48},
                {-189,48},{-189,6}}, color={0,127,255}));
        connect(volume3.port_a[1], CDP.port_a) annotation (Line(points={{86,-36.5},{68,
                -36.5},{68,-35},{50,-35}},   color={0,127,255}));
        connect(PI4.u_s, sensor_m_flow6.m_flow) annotation (Line(points={{151,
                -5.4},{151,5.3},{140.52,5.3},{140.52,15}}, color={0,0,127}));
        connect(sensor_m_flow12.port_b, TES.Charge_Inlet) annotation (Line(
              points={{-146,48},{-136,48},{-136,74.2},{150.2,74.2}}, color={0,
                127,255}));
        connect(Condensate_Res.port_a, TES.Charge_Outlet) annotation (Line(points={{
                162,39},{162,40},{84,40},{84,68},{161,68},{161,78.2}}, color={0,127,
                255}));
        connect(sensor_m_flow6.port_a, turbine_Outlet.Pipe_flow) annotation (Line(
              points={{138,21},{136,21},{136,24},{134,24}}, color={0,127,255}));
        connect(Condensate_Res.port_b, sensor_m_flow6.port_a) annotation (Line(points=
               {{162,25},{162,24},{150,24},{150,21},{138,21}}, color={0,127,255}));
        connect(teeJunctionIdeal_Cyl.port_2, turbine_Inlet1.Turb_flow)
          annotation (Line(points={{2,58},{2,57.9},{12.1,57.9}},color={28,108,200}));
        connect(MoistSep1.Turb_Out, Stator5.Inlet) annotation (Line(points={{
                -12,24},{-10,24},{-10,23.8},{-7.94,23.8}}, color={28,108,200}));
        connect(teeJunctionIdeal_Cyl.port_1, Rotor4.Outlet) annotation (Line(
              points={{-18,58},{-28,58},{-28,24},{-30.08,24}}, color={28,108,
                200}));
        connect(turbine_Inlet3.Turb_flow, MoistSep1.Turb_In) annotation (Line(
              points={{-23.9,33.9},{-26,33.9},{-26,24},{-24,24}}, color={28,108,
                200}));
        connect(turbine_Inlet2.Turb_flow, teeJunctionIdeal_Cyl.port_3)
          annotation (Line(points={{4.1,45.9},{4.1,46},{-8,46},{-8,48}},
              color={28,108,200}));
        connect(transportDelayPipe.port_a, turbine_Inlet2.Pipe_flow)
          annotation (Line(points={{24,34},{30,34},{30,46},{24,46}}, color={0,
                127,255}));
        connect(transportDelayPipe.port_b, turbine_Inlet3.Pipe_flow)
          annotation (Line(points={{4,34},{-4,34}},                  color={0,
                127,255}));
        connect(volume3.port_a[2], resistance12.port_a) annotation (Line(points={{86,-35.5},
                {86,-36},{78,-36},{78,-44},{127,-44}}, color={0,127,255}));
        connect(resistance12.port_b,DCV. port_a) annotation (Line(points={{141,-44},{158,
                -44},{158,-43}}, color={0,127,255}));
        connect(sensor_m_flow1.port_b, port_b) annotation (Line(points={{-130,-3},{-138,
                -3},{-138,-50},{-98,-50}},  color={0,127,255}));
        connect(port_a, volume5.port_a[1]) annotation (Line(points={{-100,50},{-202,50},
                {-202,-18},{-194,-18}}, color={0,127,255}));
        connect(DFV.port_b, turbine_Inlet1.Pipe_flow) annotation (Line(points={{80,61},
                {72,61},{72,58},{32,58}}, color={0,127,255}));
        connect(sensor_T.port_b, DFV.port_a)
          annotation (Line(points={{106,60},{106,61},{90,61}}, color={0,127,255}));
        connect(sensor_T.port_a, TES.Discharge_Outlet) annotation (Line(points={{126,60},
                {156.4,60},{156.4,66.4}},           color={0,127,255}));
        connect(DCV.port_b, sensor_m_flow2.port_a) annotation (Line(points={{168,-43},
                {180,-43},{180,-46},{190,-46},{190,-40}}, color={0,127,255}));
        connect(sensor_m_flow2.port_b, TES.Discharge_Inlet) annotation (Line(points={{
                190,-32},{190,68},{165.8,68},{165.8,71.8}}, color={0,127,255}));
        connect(generator.Power, delay2.u) annotation (Line(points={{-56,70.8},{-56,82},
                {-52.6,82}},                       color={0,0,127}));
        connect(sensorBus.Q_RX, Q_RX_Internal_Block.y) annotation (Line(
            points={{-30,100},{-30,98},{-146,98},{-146,112},{-171,112}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Demand, Demand_Internal_Block.y) annotation (Line(
            points={{-30,100},{-30,98},{-146,98},{-146,96},{-171,96}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.DFV_Anticipatory, DFV_Ancticipatory_Internal_Block.y)
          annotation (Line(
            points={{-30,100},{-30,98},{-146,98},{-146,80},{-171,80}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.P_Turbine_Inlet, sensor_p1.p) annotation (Line(
            points={{-30,100},{-36,100},{-36,98},{-146,98},{-146,16},{-178,16},{-178,
                11.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(sensorBus.dP_FCV, add.y) annotation (Line(
            points={{-30,100},{-30,98},{-146,98},{-146,-56},{-107,-56},{-107,-50.5}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Superheat_Sensor_Opening, sensor_T.dT) annotation (Line(
            points={{-30,100},{38,100},{38,102},{118,102},{118,63.6},{116,63.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Feed_Flow_Rate, sensor_m_flow1.m_flow) annotation (Line(
            points={{-30,100},{-30,98},{-146,98},{-146,3},{-127.48,3}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.TBV_Mass_Flow, sensor_m_flow12.m_flow) annotation (Line(
            points={{-30,100},{-30,98},{-146,98},{-146,49.44},{-150,49.44}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.FWCP_Speed, FWCP.N_in) annotation (Line(
            points={{30,100},{200,100},{200,-68},{-60,-68},{-60,-40}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Generator_Power, delay2.y) annotation (Line(
            points={{-30,100},{-30,82},{-45.58,82}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.DFV_Opening, DFV.opening) annotation (Line(
            points={{30,100},{30,65},{85,65}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TCV_Opening, TCV.opening) annotation (Line(
            points={{30,100},{30,66},{-166,66},{-166,3},{-147,3}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TBV_Opening, TBV.opening) annotation (Line(
            points={{30,100},{30,66},{-166,66},{-166,20},{-198,20},{-198,1},{-193,1}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.DCV_Opening,DCV. opening) annotation (Line(
            points={{30,100},{200,100},{200,-24},{163,-24},{163,-39}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.FCV_Opening, FCV.opening) annotation (Line(
            points={{30,100},{200,100},{200,-68},{-119,-68},{-119,-9}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-30.5,2.5},{30.5,-2.5}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={72.5,16.5},
                rotation=90),
              Polygon(
                points={{24,26},{24,-4},{32,-18},{32,40},{24,26}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{40,26},{40,-4},{48,-20},{48,42},{40,26}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-12,26},{-12,-4},{-2,-18},{-2,42},{-12,26}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{8,26},{8,-4},{16,-20},{16,40},{8,26}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-2.55993,3},{93.4405,-3}},
                lineColor={0,0,0},
                origin={-31.44,3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{60,18},{88,-8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{69,-2},{79,12}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Rectangle(
                extent={{-1.06666,3.0002},{38.9329,-3.0002}},
                lineColor={0,0,0},
                origin={61,-46.933},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={48.427,-11},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341457,2},{13.6584,-2}},
                lineColor={0,0,0},
                origin={8,-44.342},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.12002,2},{40.8804,-2}},
                lineColor={0,0,0},
                origin={11.12,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={5.422,-45.828},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-26,-42},{-14,-54}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-19,-45},{-19,-51},{-24,-48},{-19,-45}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-92.187,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.439035,1},{17.5614,-1}},
                lineColor={0,0,0},
                origin={72.439,-65},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-2.73168,1},{109.268,-1}},
                lineColor={0,0,0},
                origin={91,41.268},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-12,42},
                rotation=-90),
              Rectangle(
                extent={{-38,58},{-12,46}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-94,58},{-46,46}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-48,61},{-30,43}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Ellipse(
                extent={{-37,61},{-41,43}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Rectangle(
                extent={{-38,59},{-40,71}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-48,73},{-30,71}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-24,-52},{-28,-56},{-12,-56},{-16,-52},{-24,-52}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-0.244084,1},{9.76422,-1}},
                lineColor={0,0,0},
                origin={-1.764,23},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.195303,1},{7.8128,-1}},
                lineColor={0,0,0},
                origin={16.187,23},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.195308,1},{7.813,-1}},
                lineColor={0,0,0},
                origin={32.187,23},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{46,-46},{74,-72}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{55,-66},{65,-52}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Rectangle(
                extent={{-1.06666,3.0002},{38.9329,-3.0002}},
                lineColor={0,0,0},
                origin={-53,-66.933},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-2.61619,3},{101.384,-3}},
                lineColor={0,0,0},
                origin={-53.384,-27},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={29,-25.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={13,-25.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={-5,-25.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.37333,1.00001},{13.6262,-1}},
                lineColor={0,0,0},
                origin={45,-25.626},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-2.61619,3},{101.384,-3}},
                lineColor={0,0,0},
                origin={-53.384,-65},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
                                   Bitmap(extent={{46,22},{92,96}},     fileName="modelica://NHES/Icons/EnergyStoragePackage/Concreteimg.jpg"),
              Rectangle(
                extent={{-10,58},{48,52}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-5,3},{5,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={69,-11},
                rotation=180),
              Rectangle(
                extent={{-0.634164,0.999955},{25.3659,-1.0001}},
                lineColor={0,0,0},
                origin={22.634,45},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.586685,0.999995},{21.4135,-1}},
                lineColor={0,0,0},
                origin={21,24.587},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder)}),
          experiment(
            StopTime=30,
            __Dymola_NumberOfIntervals=531,
            Tolerance=0.0005,
            __Dymola_Algorithm="Esdirk45a"));
      end NuScale_SBST_Secondary_With_CTES;

      model Diagram_ONLY_NuScale_Secondary_With_TES
        //
        //
        //
        // DO NOT USE THIS MODEL, IT IS CONSTRUCTED TO MAKE A BETTER IMAGE ONLY
        // THIS MODEL IS IDENTICAL TO NUSCALE_SBST_SECONDARY_WITH_CTES, USE THAT
        //
        //
        //
        extends TRANSFORM.Icons.ObsoleteModel;
        extends BaseClasses.Partial_SubSystem_A(
          redeclare replaceable CS_Dummy CS,
          redeclare replaceable ED_Dummy ED,
          redeclare Data.Data_Dummy data);
        parameter Integer TES_nPipes= 950;
        parameter Modelica.Units.SI.Length TES_Length=275
          "TES pipe length within concrete";
        parameter Modelica.Units.SI.Length TES_Thick=0.2
          "TES thickness to adiabatic boundary condition";
        parameter Modelica.Units.SI.Length TES_Width=0.8
          "Cross sectional area perpendicular to pipe length";
        parameter Real LP_NTU = 1.5;
        parameter Real IP_NTU = 20.0;
        parameter Real HP_NTU = 4.0;
        parameter Modelica.Units.SI.Pressure P_Rise_DFV=6.6e5;
        parameter Modelica.Units.SI.Time Ramp_Stor=500;
        parameter Modelica.Units.SI.Time Ramp_Dis=1500;
        parameter Real derspeed = 0.2;
        parameter Real frac = 2.0;
        constant Real pi = Modelica.Constants.pi;
        parameter Modelica.Units.SI.Power Q_nom;
        Modelica.Units.SI.Energy dEdCycle;
        Modelica.Units.SI.Time t_track;
       // Modelica.SIunits.Temperature T_ideal;
        parameter Modelica.Units.SI.Temperature T_feed_ref=273 + 138;
        Modelica.Units.SI.Power Q_Cond_Feed;
        Modelica.Units.SI.MassFlowRate mflowcalc;
        Modelica.Units.SI.SpecificEnthalpy dhfd;
        Modelica.Units.SI.SpecificEnthalpy dhcn;
        Modelica.Units.SI.Power Q_RX_Internal;
        Real Demand_Internal;
        Real DFV_Anticipatory_Internal;

        parameter Modelica.Units.SI.Velocity vthes1=0;
        parameter Modelica.Units.SI.Velocity vther1=0;
        parameter Modelica.Units.SI.Velocity vthes2=0;
        parameter Modelica.Units.SI.Velocity vther2=0;
        parameter Modelica.Units.SI.Velocity vthes3=0;
        parameter Modelica.Units.SI.Velocity vther3=0;
        parameter Modelica.Units.SI.Velocity vthes4=0;
        parameter Modelica.Units.SI.Velocity vther4=0;
        parameter Modelica.Units.SI.Velocity vthes5=0;
        parameter Modelica.Units.SI.Velocity vther5=0;
        parameter Modelica.Units.SI.Velocity vthes6=0;
        parameter Modelica.Units.SI.Velocity vther6=0;
        parameter Modelica.Units.SI.Velocity vthes7=0;
        parameter Modelica.Units.SI.Velocity vther7=0;
        parameter Modelica.Units.SI.Velocity vthes8=0;
        parameter Modelica.Units.SI.Velocity vther8=0;
        parameter Modelica.Units.SI.Pressure ps1in=3170000;
        parameter Modelica.Units.SI.Pressure ps1out=2620000;
        parameter Modelica.Units.SI.Pressure pr1out=2610000;
        parameter Modelica.Units.SI.Pressure ps2out=1400000;
        parameter Modelica.Units.SI.Pressure pr2out=522600;
        parameter Modelica.Units.SI.Pressure ps3out=350000;
        parameter Modelica.Units.SI.Pressure pr3out=253000;
        parameter Modelica.Units.SI.Pressure ps4out=180000;
        parameter Modelica.Units.SI.Pressure pr4out=137800;
        parameter Modelica.Units.SI.Pressure ps5out=72000;
        parameter Modelica.Units.SI.Pressure pr5out=64200;
        parameter Modelica.Units.SI.Pressure ps6out=58000;
        parameter Modelica.Units.SI.Pressure pr6out=52800;
        parameter Modelica.Units.SI.Pressure ps7out=40000;
        parameter Modelica.Units.SI.Pressure pr7out=26400;
        parameter Modelica.Units.SI.Pressure ps8out=17500;
        parameter Modelica.Units.SI.Pressure pr8out=8100;
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_1=3000e3;
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_2=2980e3;
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_3=2800e3;
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_4=2780e3;
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_5=2740e3;
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_6=2700e3;
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_7=2650e3;
        parameter Modelica.Units.SI.SpecificEnthalpy h_init_8=2630e3;
        parameter Modelica.Units.SI.Area Ar8[3]={3.45,8.1,8.1};
        parameter Modelica.Units.SI.Area As8[3]={2.64,3.45,3.45};
        parameter Modelica.Units.SI.Area Ar7[3]={1.95,2.64,2.64};
        parameter Modelica.Units.SI.Area As7[3]={1.545,1.95,1.95};
        parameter Modelica.Units.SI.Area Ar6[3]={1.515,1.545,1.545};
        parameter Modelica.Units.SI.Area As6[3]={1.515,1.515,1.515};
        parameter Modelica.Units.SI.Area Ar5[3]={1.035,1.515,1.515};
        parameter Modelica.Units.SI.Area As5[3]={0.84,1.035,1.035};
        parameter Modelica.Units.SI.Area Ar4[3]={0.51,0.72,0.72};
        parameter Modelica.Units.SI.Area As4[3]={0.43,0.51,0.51};
        parameter Modelica.Units.SI.Area Ar3[3]={0.25,0.43,0.43};
        parameter Modelica.Units.SI.Area As3[3]={0.23,0.25,0.25};
        parameter Modelica.Units.SI.Area Ar2[3]={0.15,0.23,0.23};
        parameter Modelica.Units.SI.Area As2[3]={0.06,0.15,0.15};
        parameter Modelica.Units.SI.Area Ar1[3]={0.06,0.06,0.06};
        parameter Modelica.Units.SI.Area As1[3]={0.06,0.06,0.06};
        parameter Modelica.Units.SI.Length ri[3]={0.1,0.1,0.1};
        parameter Modelica.Units.SI.Length ros1[3]={0.195,0.2,0.22};
        parameter Modelica.Units.SI.Length ror1[3]={0.22,0.24,0.245};
        parameter Modelica.Units.SI.Length ros2[3]={0.245,0.26,0.265};
        parameter Modelica.Units.SI.Length ror2[3]={0.265,0.29,0.295};
        parameter Modelica.Units.SI.Length ros3[3]={0.295,0.31,0.315};
        parameter Modelica.Units.SI.Length ror3[3]={0.315,0.33,0.335};
        parameter Modelica.Units.SI.Length ros4[3]={0.335,0.37,0.38};
        parameter Modelica.Units.SI.Length ror4[3]={0.38,0.41,0.42};
        parameter Modelica.Units.SI.Length ros5[3]={0.42,0.46,0.47};
        parameter Modelica.Units.SI.Length ror5[3]={0.47,0.51,0.53};
        parameter Modelica.Units.SI.Length ros6[3]={0.53,0.58,0.59};
        parameter Modelica.Units.SI.Length ror6[3]={0.59,0.63,0.64};
        parameter Modelica.Units.SI.Length ros7[3]={0.64,0.68,0.69};
        parameter Modelica.Units.SI.Length ror7[3]={0.69,0.74,0.75};
        parameter Modelica.Units.SI.Length ros8[3]={0.75,0.81,0.82};
        parameter Modelica.Units.SI.Length ror8[3]={0.82,0.87,0.89};
        parameter Modelica.Units.SI.MassFlowRate mflow=54.671;
        parameter Real[2] alphas1 = {pi/3.4,0};
        parameter Real[2] alphar1 = {-pi/3.45,0};
        parameter Real[2] alphas2 = {pi/2.185,0};
        parameter Real[2] alphar2 = {-pi/2.235,0};
        parameter Real[2] alphas3 = {pi/2.43,0};
        parameter Real[2] alphar3 = {-pi/2.41,0};
        parameter Real[2] alphas4 = {pi/2.6,0};
        parameter Real[2] alphar4 = {-pi/2.54,0};
        parameter Real[2] alphas5 = {pi/2.48,0};
        parameter Real[2] alphar5 = {-pi/2.42,0};
        parameter Real[2] alphas6 = {pi/3.33,0};
        parameter Real[2] alphar6 = {-pi/3.62,0};
        parameter Real[2] alphas7 = {pi/2.53,0};
        parameter Real[2] alphar7 = {-pi/2.6,0};
        parameter Real[2] alphas8 = {pi/2.41,0};
        parameter Real[2] alphar8 = {-pi/2.207,0};

      public
        StagebyStageTurbine.MS         MoistSep3(V_MS=0.6, eta=0.227)
          annotation (Placement(transformation(extent={{76,6},{88,18}})));
        StagebyStageTurbine.Turbine_Physical       turbine_Physical(nSt=8)
          annotation (Placement(transformation(extent={{-78,36},{-58,56}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.Generator_Basic
          generator(omega_nominal=50*3.14)
          annotation (Placement(transformation(extent={{-40,42},{-20,62}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor8(
          m_flow_nom=54.86,
          alpha=alphar8,
          A_flow=Ar8,
          dz={0.4,1},
          ro=ror8,
          h_init=2260e3,
          m_init=52,
          p_in_init=ps8out,
          v_the_init=vther8,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{94,2},{102,22}})));

        StagebyStageTurbine.Rotor_Stage                   Rotor7(
          m_flow_nom=55.13,
          alpha=alphar7,
          A_flow=Ar7,
          ro=ror7,
          h_init=2330e3,
          m_init=53,
          p_in_init=ps7out,
          v_the_init=vther7,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{64,2},{72,22}})));

        StagebyStageTurbine.MS         MoistSep2(V_MS=0.25, eta=0.19)
          annotation (Placement(transformation(extent={{50,6},{62,18}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor6(
          m_flow_nom=56.18,
          alpha=alphar6,
          A_flow=Ar6,
          ro=ror6,
          h_init=2336e3,
          m_init=56,
          p_in_init=ps6out,
          v_the_init=vther6,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{38,2},{46,22}})));

        StagebyStageTurbine.Turbine_Tap       turbine_Tap2
          annotation (Placement(transformation(extent={{28,4},{34,20}})));

        StagebyStageTurbine.Rotor_Stage                   Rotor5(
          m_flow_nom=59.78,
          alpha=alphar5,
          A_flow=Ar5,
          ro=ror5,
          h_init=2379e3,
          m_init=59,
          p_in_init=ps5out,
          v_the_init=vther5,
          v_r_init=0.1) annotation (Placement(transformation(extent={{14,2},{22,22}})));

        StagebyStageTurbine.MS         MoistSep1(V_MS=25, eta=0.17)
          annotation (Placement(transformation(extent={{0,6},{12,18}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor4(
          m_flow_nom=60.76,
          alpha=alphar4,
          A_flow=Ar4,
          ro=ror4,
          h_init=2402e3,
          m_init=60,
          p_in_init=ps4out,
          v_the_init=vther4,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-22,2},{-12,22}})));

        StagebyStageTurbine.Turbine_Tap       turbine_Tap1
          annotation (Placement(transformation(extent={{-34,4},{-26,18}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor3(
          m_flow_nom=64.31,
          alpha=alphar3,
          A_flow=Ar3,
          ro=ror3,
          h_init=2477e3,
          m_init=64,
          p_in_init=ps3out,
          v_the_init=vther3,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-48,2},{-38,22}})));

        StagebyStageTurbine.Turbine_Tap       turbine_Tap(Tap_flow(m_flow(start=-5.237983241487215)))
          annotation (Placement(transformation(extent={{-64,4},{-52,20}})));
        StagebyStageTurbine.Rotor_Stage                   Rotor2(
          m_flow_nom=68.22,
          alpha=alphar2,
          A_flow=Ar2,
          ro=ror2,
          h_init=2674e3,
          m_init=68,
          p_in_init=ps2out,
          v_the_init=vther2,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-78,2},{-70,22}})));

        StagebyStageTurbine.Rotor_Stage                   Rotor1(
          m_flow_nom=68.22,
          alpha=alphar1,
          A_flow=Ar1,
          ro=ror1,
          h_init=2999e3,
          m_init=68,
          p_in_init=ps1out,
          v_the_init=vther1,
          v_r_init=0.1)
          annotation (Placement(transformation(extent={{-90,2},{-82,22}})));

        Fluid.HeatExchangers.Generic_HXs.NTU_HX LP(
          NTU=LP_NTU,
          K_tube=17000,
          K_shell=5,
          V_Tube=4.,
          V_Shell=4,
          p_start_tube=2340000,
          h_start_tube_inlet=184e3,
          h_start_tube_outlet=184e3,
          p_start_shell=58000,
          h_start_shell_inlet=405.5e3,
          h_start_shell_outlet=405.5e3,
          Cr_init=0.8,
          deltaX_t_init=0.0,
          deltaX_s_init=0.0,
          Shell(medium(h(start=100000))))
          annotation (Placement(transformation(extent={{20,-28},{44,-54}})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX IP(
          NTU=IP_NTU,
          K_tube=17000,
          K_shell=500,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=3740000,
          h_start_tube_inlet=346.6e3,
          h_start_tube_outlet=346.6e3,
          p_start_shell=497000,
          h_start_shell_inlet=368.2e3,
          h_start_shell_outlet=368.2e3)
          annotation (Placement(transformation(extent={{-18,-28},{8,-54}})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX HP(
          NTU=HP_NTU,
          K_tube=16500,
          K_shell=50,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=3740000,
          h_start_tube_inlet=523.1e3,
          h_start_tube_outlet=523.1e3,
          p_start_shell=497000,
          h_start_shell_inlet=544.5e3,
          h_start_shell_outlet=544.5e3,
          Shell(medium(h(start=500e3))))
          annotation (Placement(transformation(extent={{-78,-30},{-54,-54}})));
        StagebyStageTurbine.BaseClasses.Turbine_Outlet                                                 turbine_Outlet
          annotation (Placement(transformation(extent={{106,2},{110,22}})));
        StagebyStageTurbine.BaseClasses.Turbine_Inlet                                                 turbine_Inlet annotation (
            Placement(transformation(
              extent={{3,-7},{-3,7}},
              rotation=180,
              origin={-97,11})));
        TRANSFORM.Fluid.Volumes.IdealCondenser Condenser(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p(displayUnit="Pa") = 8000,
          V_liquid_start=2,
          set_m_flow=false,
          V_total=100)
          annotation (Placement(transformation(extent={{80,-40},{110,-14}})));
        Control_and_Distribution.SpringBallValve                   LPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr8out,
          K=500,
          opening_init=0.01,
          tau=0.1) annotation (Placement(transformation(
              extent={{-7,-7},{7,7}},
              rotation=270,
              origin={25,-15})));
        Control_and_Distribution.SpringBallValve                   IPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr6out,
          K=4250,
          tau=0.1) annotation (Placement(transformation(
              extent={{-8,-8},{8,8}},
              rotation=270,
              origin={-36,-16})));
        Control_and_Distribution.SpringBallValve                   HPTapValve(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_spring=pr5out,
          K=2300,
          tau=0.1) annotation (Placement(transformation(
              extent={{-8,-8},{8,8}},
              rotation=270,
              origin={-68,-12})));
        Control_and_Distribution.ValveLineartanh                   TCV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=200000,
          m_flow_nominal=68.404,
          opening_actual(start=1)) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=0,
              origin={-114,10})));
        Control_and_Distribution.ValveLinearTotal TBV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=100000,
          m_flow_nominal=68.404,
          opening_actual(start=0)) annotation (Placement(transformation(
              extent={{9,9},{-9,-9}},
              rotation=270,
              origin={-127,39})));
        Modelica.Fluid.Machines.PrescribedPump FWCP(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          allowFlowReversal=false,
          p_a_start=2200000,
          p_b_start=3700000,
          m_flow_start=66.3,
          nParallel=3,
          redeclare function flowCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow
              (V_flow_nominal={0,0.07,0.105}, head_nominal={400,200,0}),
          N_nominal=1500,
          rho_nominal=945,
          use_powerCharacteristic=false,
          redeclare function efficiencyCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.constantEfficiency
              (eta_nominal=0.8),
          V=1.5,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          use_T_start=false,
          h_start=500e3,
          use_N_in=true,
          N_const=890.3)
          annotation (Placement(transformation(extent={{-28,-44},{-44,-60}})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p1(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,4},{-4,-4}},
              rotation=180,
              origin={-124,24})));
        Control_and_Distribution.ValveLinearTotal                  FCV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=200000,
          m_flow_nominal=68.4,
          opening_actual(start=1)) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=0,
              origin={-102,-44})));
        Modelica.Fluid.Machines.PrescribedPump CDP(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          allowFlowReversal=false,
          p_a_start=8000,
          p_b_start=2220000,
          m_flow_start=68.4,
          nParallel=3,
          redeclare function flowCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow
              (V_flow_nominal={0,0.07,0.105}, head_nominal={400,200,0}),
          N_nominal=1500,
          rho_nominal=945,
          use_powerCharacteristic=false,
          redeclare function efficiencyCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.constantEfficiency
              (eta_nominal=0.8),
          V=1.5,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          use_T_start=false,
          h_start=300e3,
          N_const=1278.78)
          annotation (Placement(transformation(extent={{80,-54},{66,-40}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-6,-7},{6,7}},
              rotation=180,
              origin={-130,-45})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p2(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{-4,4},{4,-4}},
              rotation=180,
              origin={-86,-32})));
        TRANSFORM.Fluid.Sensors.Pressure sensor_p3(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(
              extent={{4,4},{-4,-4}},
              rotation=180,
              origin={-114,-28})));
        Modelica.Blocks.Math.Add add(k2=-1) annotation (Placement(
              transformation(
              extent={{5,-5},{-5,5}},
              rotation=0,
              origin={-105,-21})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume5(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=ps1in,
          use_T_start=false,
          h_start=3000e3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=10),
          nPorts_b=2,
          nPorts_a=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-138,10})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow12(redeclare package
            Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-118,58},{-110,66}})));
        EnergyStorage.Concrete_Solid_Media.Components.Dual_Pipe_Model TES(
          nPipes=TES_nPipes,
          dX=TES_Length,
          Pipe_to_Concrete_Length_Ratio=1,
          dY=TES_Width,
          Hot_Con_Start=483.15,
          Cold_Con_Start=473.15)
          annotation (Placement(transformation(extent={{116,46},{136,66}})));
        StagebyStageTurbine.BaseClasses.Turbine_Inlet                                                 turbine_Inlet1
          annotation (Placement(transformation(extent={{48,32},{28,52}})));
        StagebyStageTurbine.TeeJunctionIdeal_Cyl T(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-6,26},{2,18}})));
        Control_and_Distribution.ValveLinearTotal                   DCV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=250000,
          m_flow_nominal=20,
          opening_actual(start=0)) annotation (Placement(transformation(
              extent={{8,-8},{-8,8}},
              rotation=180,
              origin={148,-48})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow2(redeclare package
            Medium =
              Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{-4,4},{4,-4}},
              rotation=90,
              origin={160,-22})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{-170,-54},{-150,-34}}),iconTransformation(
                extent={{-170,-54},{-150,-34}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              Modelica.Media.Examples.TwoPhaseWater) annotation (Placement(
              transformation(extent={{-170,0},{-150,20}}), iconTransformation(extent={{-170,0},
                  {-150,20}})));
        Control_and_Distribution.ValveLinearTotal DFV(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          dp_nominal=250000,
          m_flow_nominal=20,
          opening_actual(start=0)) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={68,42})));
        Control_and_Distribution.TemperatureTwoPort_Superheat T_Super(redeclare
            package Medium = Modelica.Media.Examples.TwoPhaseWater)
          annotation (Placement(transformation(extent={{104,32},{84,52}})));
        Modelica.Blocks.Sources.RealExpression DFV_Ancticipatory_Internal_Block(y=
              DFV_Anticipatory_Internal)
          annotation (Placement(transformation(extent={{-122,78},{-102,98}})));
        Modelica.Blocks.Sources.RealExpression Demand_Internal_Block(y=
              Demand_Internal)
          annotation (Placement(transformation(extent={{-122,94},{-102,114}})));
        Modelica.Blocks.Sources.RealExpression Q_RX_Internal_Block(y=Q_RX_Internal)
          annotation (Placement(transformation(extent={{-122,110},{-102,130}})));
        Modelica.Fluid.Machines.PrescribedPump DFP(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          allowFlowReversal=false,
          p_a_start=8000,
          p_b_start=2220000,
          m_flow_start=68.4,
          nParallel=3,
          redeclare function flowCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow
              ( V_flow_nominal={0,0.07,0.105}, head_nominal={400,200,0}),
          N_nominal=1500,
          rho_nominal=945,
          use_powerCharacteristic=false,
          redeclare function efficiencyCharacteristic =
              Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.constantEfficiency
              (eta_nominal=0.8),
          V=1.5,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          massDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          use_T_start=false,
          h_start=300e3,
          N_const=1278.78)
          annotation (Placement(transformation(extent={{114,-54},{128,-40}})));
      initial equation
        dEdCycle=0;
        t_track = 0;
        Q_Cond_Feed = 0;
        mflowcalc = HP.Tube_in.m_flow;
      //  T_ideal = T_feed_ref;
      equation
        der(t_track)=1;
        der(dEdCycle) = generator.power-Q_nom;
        when t_track>=86400 then
          reinit(dEdCycle,0);
          reinit(t_track,0);
        end when;
        der(mflowcalc) = HP.Tube_in.m_flow - mflowcalc;
        dhfd = (Modelica.Media.Water.StandardWater.specificEnthalpy_pT(HP.Tube_out.p,T_feed_ref)-HP.hex_t);
        dhcn = Condensate_Res.port_a.h_outflow-Modelica.Media.Water.StandardWater.specificEnthalpy_pT(Condensate_Res.port_a.p,HP.Tin_t);
        if  Condensate_Res.m_flow>0 and HP.Tex_t<=T_feed_ref then
          10*der(Q_Cond_Feed) = min(0.5*(HP.Tube_in.m_flow + HP.Tube_out.m_flow) *dhfd,
          Condensate_Res.m_flow*(dhcn)) -Q_Cond_Feed;
        else
          10*der(Q_Cond_Feed) = 0-Q_Cond_Feed;
        end if;

        connect(generator.shaft,turbine_Physical. Generator_torque) annotation (Line(
              points={{-40.1,51.9},{-52,51.9},{-52,52},{-54,52},{-54,51.8},{-58,51.8}},
                                                                            color={0,0,
                0}));
        connect(Rotor8.torque,turbine_Physical. Fluidtorques[1]) annotation (Line(
              points={{96.64,16.6},{96.64,30},{-68.4,30},{-68.4,41.925}},
                                                                       color={175,175,
                175},
            thickness=1));
        connect(Rotor7.Outlet, MoistSep3.Turb_In) annotation (Line(points={{71.92,12},
                {76,12}},                   color={28,108,200},
            thickness=1));
        connect(Rotor7.torque,turbine_Physical. Fluidtorques[2]) annotation (Line(
              points={{66.64,16.6},{66.64,30},{-68.4,30},{-68.4,42.175}},      color={175,175,
                175},
            thickness=1));
        connect(Rotor6.torque,turbine_Physical. Fluidtorques[3]) annotation (Line(
              points={{40.64,16.6},{40.64,30},{-68.4,30},{-68.4,42.425}},
              color={175,175,175},
            thickness=1));
        connect(Rotor6.Outlet, MoistSep2.Turb_In) annotation (Line(points={{45.92,12},
                {50,12}},                          color={28,108,200},
            thickness=1));
        connect(Rotor5.Outlet, turbine_Tap2.Turb_flow) annotation (Line(points={{21.92,
                12},{28.03,12.08}},                       color={28,108,200},
            thickness=1));
        connect(Rotor4.torque,turbine_Physical. Fluidtorques[5]) annotation (Line(
              points={{-18.7,16.6},{-18.7,30},{-68.4,30},{-68.4,42.925}},
                          color={175,175,175},
            thickness=1));
        connect(Rotor2.Outlet, turbine_Tap.Turb_flow) annotation (Line(points={{-70.08,
                12},{-68,12},{-68,12.08},{-63.94,12.08}},
                                                      color={28,108,200},
            thickness=1));
        connect(Rotor3.Outlet, turbine_Tap1.Turb_flow) annotation (Line(points={{-38.1,
                12},{-33.96,12},{-33.96,11.07}},                 color={28,108,200},
            thickness=1));
        connect(Rotor3.torque,turbine_Physical. Fluidtorques[6]) annotation (Line(
              points={{-44.7,16.6},{-44,16.6},{-44,30},{-68.4,30},{-68.4,43.175}},
                                     color={175,175,175},
            thickness=1));
        connect(Rotor2.torque,turbine_Physical. Fluidtorques[7]) annotation (Line(
              points={{-75.36,16.6},{-75.36,30},{-68.4,30},{-68.4,43.425}},
              color={175,175,175},
            thickness=1));
        connect(Rotor1.torque,turbine_Physical. Fluidtorques[8]) annotation (Line(
              points={{-87.36,16.6},{-87.36,30},{-68.4,30},{-68.4,43.675}},
                          color={175,175,175},
            thickness=1));
        connect(LP.Tube_out, IP.Tube_in) annotation (Line(points={{20,-46.2},{8,-46.2}},
                                  color={0,127,255},
            thickness=1));
        connect(Rotor8.Outlet, turbine_Outlet.Turb_flow) annotation (Line(
              points={{101.92,12},{106.02,12.1}},                 color={28,108,200},
            thickness=1));

        connect(HPTapValve.port_b, HP.Shell_in) annotation (Line(points={{-68,-20},{
                -68,-26},{-80,-26},{-80,-40},{-78,-40},{-78,-39.6}},
                                                            color={0,127,255},
            thickness=1));
        connect(HPTapValve.port_a, turbine_Tap.Tap_flow) annotation (Line(points={{-68,-4},
                {-68,0},{-58,0},{-58,9.44}},          color={0,127,255},
            thickness=1));
        connect(IPTapValve.port_a, turbine_Tap1.Tap_flow) annotation (Line(points={{-36,-8},
                {-36,8.76},{-30,8.76}},                color={0,127,255},
            thickness=1));
        connect(TCV.port_b, turbine_Inlet.Pipe_flow) annotation (Line(points={{-106,10},
                {-103,10},{-103,11},{-100,11}},
                                             color={0,127,255},
            thickness=1));
        connect(IP.Tube_out, FWCP.port_a)
          annotation (Line(points={{-18,-46.2},{-22,-46.2},{-22,-46},{-24,-46},{-24,
                -52},{-28,-52}},                         color={0,127,255},
            thickness=1));
        connect(HP.Tube_in, FWCP.port_b) annotation (Line(points={{-54,-46.8},{-54,
                -48},{-48,-48},{-48,-52},{-44,-52}},
                                                 color={0,127,255},
            thickness=1));
        connect(FCV.port_a, HP.Tube_out) annotation (Line(points={{-94,-44},{-84,-44},
                {-84,-46.8},{-78,-46.8}},            color={0,127,255},
            thickness=1));
        connect(FCV.port_b, sensor_m_flow1.port_a) annotation (Line(points={{-110,-44},
                {-124,-44},{-124,-45}},                           color={0,127,255},
            thickness=1));
        connect(sensor_p1.port, TCV.port_a) annotation (Line(points={{-124,20},{-126,
                20},{-126,10},{-122,10}},                 color={0,127,255},
            thickness=1));
        connect(sensor_p2.p, add.u1)
          annotation (Line(points={{-88.4,-32},{-90,-32},{-90,-18},{-99,-18}},
                                                             color={0,0,127}));
        connect(sensor_p3.p, add.u2)
          annotation (Line(points={{-111.6,-28},{-96,-28},{-96,-24},{-99,-24}},
                                                           color={0,0,127}));
        connect(sensor_p3.port, sensor_m_flow1.port_a) annotation (Line(points={{-114,
                -32},{-114,-44},{-122,-44},{-122,-45},{-124,-45}},
                                                       color={0,127,255},
            thickness=1));
        connect(sensor_p2.port, HP.Tube_out) annotation (Line(points={{-86,-36},{-84,
                -36},{-84,-46.8},{-78,-46.8}},        color={0,127,255},
            thickness=1));
        connect(volume5.port_b[1], TBV.port_a) annotation (Line(points={{-132,9.5},{
                -132,12},{-130,12},{-130,28},{-128,28},{-128,30},{-127,30}},
                                                   color={102,44,145},
            thickness=1));
        connect(volume5.port_b[2], TCV.port_a) annotation (Line(points={{-132,10.5},{
                -132,10},{-122,10}},                      color={0,127,255},
            thickness=1));
        connect(sensor_m_flow12.port_a, TBV.port_b) annotation (Line(points={{-118,62},
                {-126,62},{-126,48},{-127,48}},
                                     color={102,44,145},
            thickness=1));
        connect(sensor_m_flow12.port_b, TES.Charge_Inlet) annotation (Line(
              points={{-110,62},{-50,62},{-50,42},{2,42},{2,58.2},{118.2,58.2}},
                                                                     color={102,44,
                145},
            thickness=1));
        connect(T.port_2, turbine_Inlet1.Turb_flow) annotation (Line(
            points={{2,22},{6,22},{6,41.9},{28.1,41.9}},
            color={217,67,180},
            thickness=1));
        connect(T.port_1, Rotor4.Outlet) annotation (Line(
            points={{-6,22},{-8,22},{-8,12},{-12.1,12}},
            color={28,108,200},
            thickness=1));
        connect(port_a, volume5.port_a[1]) annotation (Line(points={{-160,10},{-144,
                10}},                   color={0,127,255},
            thickness=1));
        connect(DFV.port_b, turbine_Inlet1.Pipe_flow) annotation (Line(points={{60,42},
                {48,42}},                 color={217,67,180},
            thickness=1));
        connect(T_Super.port_b, DFV.port_a) annotation (Line(
            points={{84,42},{76,42}},
            color={217,67,180},
            thickness=1));
        connect(T_Super.port_a, TES.Discharge_Outlet) annotation (Line(
            points={{104,42},{124.4,42},{124.4,50.4}},
            color={217,67,180},
            thickness=1));
        connect(DCV.port_b, sensor_m_flow2.port_a) annotation (Line(points={{156,-48},
                {160,-48},{160,-26}},                     color={217,67,180},
            thickness=1));
        connect(sensor_m_flow2.port_b, TES.Discharge_Inlet) annotation (Line(points={{160,-18},
                {160,56},{133.8,56},{133.8,55.8}},          color={217,67,180},
            thickness=1));
        connect(sensorBus.Q_RX, Q_RX_Internal_Block.y) annotation (Line(
            points={{-30,100},{-70,100},{-70,104},{-96,104},{-96,120},{-101,120}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(sensorBus.Demand, Demand_Internal_Block.y) annotation (Line(
            points={{-30,100},{-70,100},{-70,104},{-101,104}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(sensorBus.DFV_Anticipatory, DFV_Ancticipatory_Internal_Block.y)
          annotation (Line(
            points={{-30,100},{-70,100},{-70,104},{-96,104},{-96,88},{-101,88}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(sensorBus.P_Turbine_Inlet, sensor_p1.p) annotation (Line(
            points={{-30,100},{-70,100},{-70,74},{-108,74},{-108,24},{-121.6,24}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=1));

        connect(sensorBus.dP_FCV, add.y) annotation (Line(
            points={{-30,100},{-70,100},{-70,74},{-178,74},{-178,-21},{-110.5,-21}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(sensorBus.Superheat_Sensor_Opening, T_Super.dT) annotation (Line(
            points={{-30,100},{-30,70},{94,70},{94,45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(sensorBus.Feed_Flow_Rate, sensor_m_flow1.m_flow) annotation (Line(
            points={{-30,100},{-70,100},{-70,74},{-178,74},{-178,-56},{-130,-56},{
                -130,-47.52}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(sensorBus.TBV_Mass_Flow, sensor_m_flow12.m_flow) annotation (Line(
            points={{-30,100},{-70,100},{-70,74},{-114,74},{-114,63.44}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(actuatorBus.FWCP_Speed, FWCP.N_in) annotation (Line(
            points={{30,100},{172,100},{172,-64},{-36,-64},{-36,-60}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(actuatorBus.DFV_Opening, DFV.opening) annotation (Line(
            points={{30,100},{68,100},{68,48.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(actuatorBus.TCV_Opening, TCV.opening) annotation (Line(
            points={{30,100},{172,100},{172,-64},{-172,-64},{-172,-4},{-114,-4},{-114,
                3.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(actuatorBus.TBV_Opening, TBV.opening) annotation (Line(
            points={{30,100},{172,100},{172,-64},{-172,-64},{-172,39},{-134.2,39}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=1));

        connect(actuatorBus.DCV_Opening,DCV. opening) annotation (Line(
            points={{30,100},{172,100},{172,-64},{148,-64},{148,-54.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(actuatorBus.FCV_Opening, FCV.opening) annotation (Line(
            points={{30,100},{172,100},{172,-64},{-102,-64},{-102,-50.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(DFP.port_b, DCV.port_a) annotation (Line(
            points={{128,-47},{128,-48},{140,-48}},
            color={217,67,180},
            thickness=1));
        connect(Condenser.port_b, CDP.port_a) annotation (Line(
            points={{95,-37.4},{94,-37.4},{94,-48},{80,-48},{80,-47}},
            color={0,127,255},
            thickness=1));
        connect(Condenser.port_b, DFP.port_a) annotation (Line(
            points={{95,-37.4},{94,-37.4},{94,-47},{114,-47}},
            color={217,67,180},
            thickness=1));
        connect(Rotor5.Inlet, MoistSep1.Turb_Out) annotation (Line(
            points={{14.08,11.8},{14,11.8},{14,12},{12,12}},
            color={28,108,200},
            thickness=1));
        connect(T.port_3, MoistSep1.Turb_In) annotation (Line(
            points={{-2,18},{-2,12},{0,12}},
            color={28,108,200},
            thickness=1));
        connect(IP.Shell_out, LP.Shell_in) annotation (Line(
            points={{8,-38.4},{20,-38.4}},
            color={0,127,255},
            thickness=1));
        connect(IPTapValve.port_b, IP.Shell_in) annotation (Line(
            points={{-36,-24},{-36,-38.4},{-18,-38.4}},
            color={0,127,255},
            thickness=1));
        connect(HP.Shell_out, IP.Shell_in) annotation (Line(
            points={{-54,-39.6},{-36,-39.6},{-36,-38.4},{-18,-38.4}},
            color={0,127,255},
            thickness=1));
        connect(LP.Shell_out, Condenser.port_a) annotation (Line(
            points={{44,-38.4},{62,-38.4},{62,-8},{84.5,-8},{84.5,-17.9}},
            color={0,127,255},
            thickness=1));
        connect(TES.Charge_Outlet, Condenser.port_a) annotation (Line(
            points={{129,62.2},{128,62.2},{128,72},{108,72},{108,26},{114,26},{114,-8},
                {84.5,-8},{84.5,-17.9}},
            color={102,44,145},
            thickness=1));
        connect(turbine_Outlet.Pipe_flow, Condenser.port_a) annotation (Line(
            points={{110,12},{114,12},{114,-8},{84.5,-8},{84.5,-17.9}},
            color={0,127,255},
            thickness=1));
        connect(MoistSep2.Liquid, Condenser.port_a) annotation (Line(
            points={{56,10.08},{56,-8},{84.5,-8},{84.5,-17.9}},
            color={0,127,255},
            thickness=1));
        connect(MoistSep3.Liquid, Condenser.port_a) annotation (Line(
            points={{82,10.08},{82,-8},{84.5,-8},{84.5,-17.9}},
            color={0,127,255},
            thickness=1));
        connect(Rotor8.Inlet, MoistSep3.Turb_Out) annotation (Line(
            points={{94.08,11.8},{94.08,12},{88,12}},
            color={28,108,200},
            thickness=1));
        connect(Rotor7.Inlet, MoistSep2.Turb_Out) annotation (Line(
            points={{64.08,11.8},{62,12}},
            color={28,108,200},
            thickness=1));
        connect(Rotor6.Inlet, turbine_Tap2.Turb_flow2) annotation (Line(
            points={{38.08,11.8},{38.08,12},{34.06,12}},
            color={28,108,200},
            thickness=1));
        connect(port_b, port_b)
          annotation (Line(points={{-160,-44},{-160,-44}}, color={0,127,255}));
        connect(turbine_Tap2.Tap_flow, LPTapValve.port_a) annotation (Line(
            points={{31,9.44},{32,9.44},{32,-4},{26,-4},{26,-8},{25,-8}},
            color={0,127,255},
            thickness=1));
        connect(LPTapValve.port_b, LP.Shell_in) annotation (Line(
            points={{25,-22},{24,-22},{24,-26},{16,-26},{16,-38.4},{20,-38.4}},
            color={0,127,255},
            thickness=1));
        connect(Rotor5.torque, turbine_Physical.Fluidtorques[5]) annotation (Line(
            points={{16.64,16.6},{16.64,30},{-68.4,30},{-68.4,42.925}},
            color={175,175,175},
            thickness=1));
        connect(MoistSep1.Liquid, LP.Shell_in) annotation (Line(
            points={{6,10.08},{6,-28},{16,-28},{16,-38.4},{20,-38.4}},
            color={0,127,255},
            thickness=1));
        connect(CDP.port_b, LP.Tube_in) annotation (Line(
            points={{66,-47},{56,-47},{56,-46},{52,-46},{52,-46.2},{44,-46.2}},
            color={0,127,255},
            thickness=1));
        connect(turbine_Tap1.Turb_flow2, Rotor4.Inlet) annotation (Line(
            points={{-25.92,11},{-24,11},{-24,12},{-21.9,12},{-21.9,11.8}},
            color={28,108,200},
            thickness=1));
        connect(turbine_Tap.Turb_flow2, Rotor3.Inlet) annotation (Line(
            points={{-51.88,12},{-47.9,11.8}},
            color={28,108,200},
            thickness=1));
        connect(sensorBus.Generator_Power, generator.Power) annotation (Line(
            points={{-30,100},{-30,62.8}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=1));
        connect(Rotor1.Outlet, Rotor2.Inlet) annotation (Line(
            points={{-82.08,12},{-77.92,12},{-77.92,11.8}},
            color={28,108,200},
            thickness=1));
        connect(turbine_Inlet.Turb_flow, Rotor1.Inlet) annotation (Line(
            points={{-94.03,11.07},{-92,11.07},{-92,11.8},{-89.92,11.8}},
            color={28,108,200},
            thickness=1));
        connect(port_a, port_a)
          annotation (Line(points={{-160,10},{-160,10}}, color={0,127,255}));
        connect(sensor_m_flow1.port_b, port_b) annotation (Line(
            points={{-136,-45},{-140,-45},{-140,-44},{-160,-44}},
            color={0,127,255},
            thickness=1));

        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                                       Bitmap(
                extent={{-102,-78},{92,84}},
                imageSource=
                    "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxAQEhUQEBIWFRUXFhUVFRUVFxUVFRUVFRUWFhUVFhUYHSggGBolHRUVITEhJSkrLi4uFx8zODMsNygtLisBCgoKDg0OGxAQGi0gIB8tLS0tLS0tLSsrLS0tLS0vLS0uLS0tLS4tLS0vLy0tLS0tLS0tLS0tLS0rKy0rLS0tLf/AABEIAKgBKwMBIgACEQEDEQH/xAAbAAABBQEBAAAAAAAAAAAAAAACAAEDBAUGB//EAEUQAAIBAgMECAMEBwcCBwAAAAECEQADBBIhBTFBUQYTIjJhcYGRQqGxFHLB0QcjM1Ji4fAkQ1NjgpKiFnMVRJOjssLS/8QAGAEBAQEBAQAAAAAAAAAAAAAAAAECAwT/xAApEQEBAAIBAwIFBQEBAAAAAAAAAQIREgMhMUFRImFxscETgZGh8EIy/9oADAMBAAIRAxEAPwDzulSpVpCpUqegalT0qBqVPSqhqVPSigalTxSigalTxTxQDT08UooBpUUUooGpU8UooGpVZTZ94iRbYjypzs2//hP/ALWP4UFWlU5wV3/Df/Y35UDWHG9WHoaCOlTxSigGlRRSigGlRRSigGlRRSigGlRRSigGlRU0UDUqeKUVAqVPT1Q0Uop6VA0UooopRQDFPFFFKKAYpRRRTxQDFKKKKeKICKUUcU8UEcU8UcUooAilFHFKKA8HhGuuEXeePADiT4V0+E2Tatbhmb95vwG4VY2fs8Ya2J776seXJR4CfeauWUmumtRzuWx4fCljoJrQOBymGiRvEigW6bYIB0O+qbY9QYmsjRXDipVwy1lrtNedSLtVedQNtfoxZxAnuPwccfvDj9a8/wBqbOfD3DauDUagjcwO4ivTMLtENxqp0t2UMTYNxe/bBYeK72X5aeIqNSvM4pRRxSijQIpRRxSigCKUUUUooApRRxTRRQxSoopRQDSoopqBqeKeKeKIGKeKeKeKBopRRRSigaKUUUU+WqBiniiiiy1BHFPlqTLThaCKK7bA/o5vPaS5cvLbZlDZChYrO4EyNYjyqL9HnR77Vf624JtWSGM7nub0TxHE+QHGvUsS1Ztc8stPKdtdDUwdo37+LUICASLLtEkKNAZ3kVhWLWAecuOJgSf7Le3epr0P9Ibf2K4YU6poyqw7671YEGvITjWAKqLahhBy2rSEjlKqDSW1cbuNxreAH/nW9MM//wC6LDDAh1Y4l2AYEj7OwmDMavWYUUWJyJmIPa7WYQ4HOKk2ZhRoZnSfLWrdz1V3WNxKXmVrc5SoyyMpiSDI5yDRWCoO8cBv56D3rnmxJVlGvcG77zeNSWXLXoZSweDvylSgJUwJk8vGum9xiRP0i2mUPVIdd5PLkPOucNxuZq5tUzeczPa/oem70otm7KvYkkWkmO8xhUX7znQfWsbdNKHWNzNPbLEgSdfrXW4bochBz4kEiJFtCwBPDOxHjw4VYs9ELIIJuOYMx2fypLtLph7HvurQa7WxikCfrDodPPQmPYGqi9GbQ1UvPCTI9gBWVtrMiorwsXVIYCQCuuZgT3Yq9mXH4qyEdlBkBiAeBE9kjwIg1FFd9a2BhcTdN69iIVssJaUAwFA1JEcOVWsZsDZFtsgZdNJuX8rE8dMwisc5vTo82ilFeiYfY2y7hZbQt3CveCX3cjhqBcMVyHSDZow94217pAZZ5GdPcGrLKbZMUoo4poqgYpoo4pooBilFFTVAMUqKKUUU0U8U4FOBVQMU4FGFpwtUABRAUYWiC0RHlrQ2Ns0X3ysxRQJZgocjkApZZJ8xxqoFrr9hYPq7IJHaftHwHwj219alqW6SYbohgD38c44wbGXdrvzMPnUZ2LsQb9o3D91V/I1ZIkxz099K84RtKxupO7uXs9HkMHGYhj4L+Vuhu4no8ils+KYCJ0PHQfAK4xVn+dWLRCAiFIO8MqsDBBGjAjeBU2unebN/SjsfB2hZsWr5QEnugMSTJJZmEn8hU1r9LeAvMETCXySQBJtjUmBuc153c2gw0QKv3Utr9FpLjrx/vX9GI+lXScY6fpX05s4zDvYt4e4hbLDMykCGB3DyrhEsk6jhrVi6sU9tJI1IOUcOOsaVrGLOzZwqtcsMiqhhM5kCcu8wfQ/Km2egAIA4fiKmw2x3e3IMMFjj2o4VFgTv8vxFM0WrjxcXf3BwJ+JvCr2HxGa+mXeAcwPZyiDB1HMgVS6xetVW07A1/wBTVrWtgI7ZyS0lTpoCBrB5g8a1j4RW2dsY4vEuASLasWuNyk6qNN5Mx5TwrqMVdW0ot2lCou5YkeZnefE1b2ZaFu2UVMsszsde0TzrM2jWLdplbtawOILpJCgye6qJy35QJ8zXC9LtpXnxQtWr1xFAiEuOgLFsuuUj92uxwd4JZLncudj5DWvN2ul763GBM9W5gE74Zt3iWpfR0w8FZuu927du3rrKGuNl6x4yhjC7+Og9RXpdvDqMHaxeJNpLXU2SWeYUsoSIAJ3mPWuH/wDDrOVhGjaGDBgMG0OonQawa3MRiLmJwpwBug2jbVbIKBX62wyXAheSGLBWEaHURm1NcOrzmrh79/p6/u6yS72v9G9lLi3dsPi7bhGDNlW6AA5YqJdVnundyrhdqIrX3ugdprl0HTeVfRvZl9QTxro8BdubPREsXMrPd/tGR0ZlFoQtlt+Vj1jMdx0XxqG/atqAVGa2NSD3lLQDmO/UgamRNOlymdtu56fn+0smtaN0Rfq8W4iAzXAfdmHzAo+mpnED/tr/APJqDD3xby3LXaQOujDVCNQp17JgaEGCB6VY2ngL2Mu9ZYQuuVQSCvZI1KmSNdZ8iK7Ys5OaK0xFbdzoxjV/uGPkVP0NQYvYWJtAl7ZAEyToNN8Tv47q1vSMqKaKlihIqiOKaKkimigCKaKOKUUBC3RC3W0uzzyqQbO8K1pnbDFuiFut0bNPKrNrYdxu7bY+SsfoKaNubFunFs111ronim3Ye56oR9auWuguMP8Acx5sg/8AtU7G3I7LwPW3FQ7plvujf+XrXY3BV/ZvQXFI2Y9WNCNWM6+QNav/AEhd43F9AzfWKxlWMrtyiDtL94fUVz+HXquylpIGna36eld3i+jd62ZEMBr2dDp/CfwmuSx6/rHH8R+tcM5LZK1hdJsBtS0WFvEWLbIxAOgMT6aedYfTTYQwd/LbYm26i5bnUhWkFSeJBBHlFW7dol1AEnMNPWug/SBgHuWcPdVJKhkbLqQDBQQNY0b3rjLOn1ZJ4rtPixeZ9XUqrU7W6Eiva5bUr558xUl2FKHdw9Ka5ZYnsqTqNwJ+lS7SwzQsqwEwSQQBW54HTbJ2laRCWYDSsbA3teGvj4zurpMHh4tNbwyqpVVCsEtszXMoaWd1JksdBIgRpxNK1a2jdhbguOhDHf1qjKNCBbzQ0kaASa459T31/Pf+Gphb4ZG1J61QoJORYABJnM0QBxrTx2zrmXFXLmNuIFtdmzlcFQCpAtAuFdoUTH74J1NXMXYXDrad5W62dcrKo7CqdYIzwC/w5Tr4a0rl0KI4IqmF3raMBXsEfANOzu+cc7b1NcfH3dscf058Xli7Mx1oX7V5BeL2wFFxsoA1aCVAYmS8Rm1mvQtouCdCsE9ntKJk6ZZOvpXF7Wwpto18JGS5Z64qAFK3JazdVd2V9N2khf3qpYq5YxV173VNazEZWDZsoUBVEEDcFXjw36zXTV32/wB/u7nlJlO7qOkOM6vAsOLnIP8AU3a+QNY2xcYnUPLAMoCmSB2cxKke8eg5il0hxrBbVjEWS7KufNnZFdmnt5QOKkNv+PhWEEDGbC3FInMCwZY3aNAMcIIPnWpb7JJJ6tlr+4T61Nhb6hstyeraFeN6idLi/wASnUeUbiazltsBBBJgGeXIU2HvSNfKqunV37LX7bBv29lij5R+0YKSrSN4dEYr4pA74jmhj2zZ0OuviCOKsOI5itvB4kh0ZTrcsso106zDHPaJ/wDTtCsLaqrbvsbZEFs68oMOo/2stZkXa+l1LN1LgBNi8vaSZIUnLctz+8jCVO/RDx1mRHFy5hC5yt2VYdmXGtm4DyOgjlcNUnGeywA7t1HEQSBcVg88v2ae1XL1wZbVwDtdWuuYD9kzp3YJJhF1HL2TuV2mA2re60JnMZ4iBunxq30hxKNhbvezZLmYMpCyQVEEjfqKxcG367OCGIYsVUy2pJHZ3j1rS2+xuYe4iaswAAMKe8s6GOE1qTtpzy7XbzaKaKuXcBdXvW3HmrD8Kg6uqqGKaKmNs0OSghIpstTFKbJQelrszwqVdmeFdEuHFSCwK7uO3IbVW7hUF+yxR1ZdRyMiCOI3VcH6UDZw4uX7JZs4t/qyIJKlgYO7ceNXulmGnCXPDIfZ1rzPa1nPhXA+G7ab3W4v41x6jUdRif0zv/d4Qf6nj6A1mYj9MGObuWrS+7flXCHCxGYwCYmuj2b0VJCvIIIBB8D61mY78NXUaSfpA2td1NxEH8KQfmaixPSvHtvxNz5D8Ksr0bPFtOIG/wBKsDotaI1J85NX9PJnlFdsZiLjIBcuMZzEZj3QDJOsBdRqdKg2jiLanW/ZzMe711nMPvZm7M8wG8ql2hsNCl3CrccXr/VBWKsbeVC7qkqOzpbafQ8a89xGz3tXMtxe60NlIIkbwGEjmK82M5Z2b1Z8v7evhMcJlZvfz7fT6uuw/wBqLXbdu7hlFsPnRftV9lUPDKcoyuZaIHjpA0ht9Gr7m1de/irgdyMqWGtZcpHC5cUIuukLw3aVYt4u/iP1guXTnZWCh3Chl7KgBSAoltw0OpO4RLgcHdW4l1beZlY3FLCdWGZjqdCVy6/xrypcOr53+fu3z6XjX4WOlGx2S+xtoxRgbkgEhdCXk7huJ9ao4LHXerlLdiQWBe4ciiMuWY5ydfCuoGyNqsjLfvqASZLmxZXKVZSsAyV1zc9BWPi+i+G6nq7uNtd/MBbm63WEQB2RG6eNa6Fzxw1l5/eufWnTue8fFV8HjsTecW7d/CyWUBbSm6dR2gTLAfeOkAk1FfxF63dFp8cXcAMUS0iI6k/vKOU6TwrZ6O7Pw2GD2BiLxEq2a3ZORgy7mZyBII3n8TVi5h8FauW7tqybuUZGW5cVEKZWyhUtoMsMQd/Pfw1z6nPV8Jw6fDc8sHC4Ozc6kMFdrXZDRcKh1JuOVVT2tQBMdrKPCtE4PGXd73WUjvMzRlK5Cx1EjJeVjzVyd6TUuJ6RWzdzWLVuz1ZCubaFxm0YFmPrUL7YFxYfGGIZYWZ1RkjKPBhr/Dupwl8zZzvpdIdq7Bvi3nuABkEwSWbW4LN1Sd5KOE14rcU8KktfZ7CWnaGazdti6N4fD4oNaxNuNxA0YTxuGo8RetllLW8QwvM+Vm7KsWa3mCyBPaVfKfGss38MwZRYuC24nR9SAwI0JPFRxrWM9p9kysvm/dt7PupctjDOdAmKwFx4Ldm24uYe4VG8q0afwgCoExezjgwiB3xEMmYAgMc6kOF+6CI8arYDHWs7RZIJuG65ZzEtvjWrr4bDZpyfGiQXuEdrLGhPIk6zurUxtYuUh8VtdbuGTD38L1rpOV4dbqxossomADuPKobW0CxVQ2FV7fYJYHrOyCpUlgAx0AknWKG9tgW7ZgAJCZQBHaLXAdfJV9zXM4W+HktEkkkHmTJrUwZuXs1b+FxrO79W7DgyJKuARvKSq6a6mshcJdttDo6jNqchgCd8xWrh+yZRmU81JFa1ra2KEA3esA3C6of/AJHUVbhSZxj4K8oa2zGcj3WOWHJDC0BMaiYb2rW2Xsq3dknDu5KW1GjMEKIq6DLJnKPiHHfV+50huOO3aCN/iWOrz/8Auo/yFTYXG4RiDiL+OuRwuMcnkVs5AR6GsZYVqdSJrGwbaGbqMAYlOrcyATlhkuOU3neDVTbFqHVbGHV1C7s/6wanQBCr+68atoNnl86i1bbNOe3gw1yOS5gQh8davpeQuWDY7EAmQt57SWh4ZQikj0qY4992Vm5X3cpntK/9ps4hZ1yh1Htnt5o9a28HtmyOxaYInPFdfcI+6ASo96k6T7TcWRhhh7VlLjZ4UliCpHdkALPh486wMDYlgDXThKzzrrcLbRgGbaFk/wANpLFoAcv1mc/Olda009bcwcToA1zE3COZUCAfAVPszZVogSgPmK1FwVtdygelZ46vlOXycptmxs8W26u1cLkdh8nUqG49niPCPWuXOGrt+klvMVUKYEkmNJPCaw/stS1ueGEcPQ/Zq3jhKH7HTavTgaIGqou0uuru4IukIzYa8P8ALY+2v4V5i5HVXQeSH2cfnXqGNtu9q4oUmUcbjxU15TiP2dz/ALZPsQfwrnm1GRirfXRbSMwObXjAMiut6LPdFgIymVZl3E6aEa8ta4jZN2bw9R7g11uw2dldWduwwUBTk0yiJyxPHfTGZSfC1derogznWPpPtvqEXfGs6xf6m/1hXMMhAzKbnazIRzg6HXz51bfaJuQcmhA7UAd3s85HdreNyn/pmyeittLEWlZOsOupWXZBoIJ7I5Mfes7GvlDJhrNl1Y5s7EQpgc2LHjwrF6eXNbLH/MHuF/nVDZ5zW7igSerzDj2rZDmP9IcVzuHxb26zP4NadDs67dtK/W3rSS2YC2NBOYERC5R2p05Vau420NWvMeOjDd2dIQTEKONc1fuqEtmAM9sA/eQm2fWFB9ac7TUNI4An5QPmQPWpcJ7rM77R02H2vaBDKqsS2UTbLNJI0ztr8Q48a5vGbSa/fUo3YDro+mo0kmdwk1f2Lgrt9VKEDJdDkNOohIA8ez86ysJhINxXEFbhBB4bx+FJ08ce881L1Mspq1cfpLfC9WpKo2UFQYBiN/PWqOI2leLFZ4ke1FfsjMscx9RR4yzF1h/msP8Akav/AEz6M7A41l0aGBOYhlntH4gw7SnyIrV/6oCrCHEjhFvEBF9GNtmA8PnVBbIKT4VnCyY3cTUywl8tSumTHPiClwKVyKAC1xrjMQSQzM3HyA3Vq9I9jPh7C31BKFyT2Y6tbsFVPMAiJ/i8axtkWLjIvVozafCrH6V6LtvDXr2FuWUnM1vKAxIEkceVJeM1E1vu80w10nTix18B/WldVZXDiCbd53zWWOqqgcjICDMkaHnWTsXYN+zeRcRaYAliWiVMKcsMJG/xrtEww4L+74d3UV02xfLznpZ37SJa6q2oMLnLyVuMpMkDl86pJbB3ivRNu9EruLa2QVQLnkmSTnKnQDfuPvRYX9Higdq8SfABR85rPKRqTs4WwsA5SRu9N9Wrd64OTfI11mL6COolGn+uYrJudGsSvwGtTKJcap28WIlgRrH0/OtPB3EMaiqLbLxK77T8eE8vyq1hsG471tl/0sPwrW2dOu2Uls7orXS2BWLsXDREKZ9a6O1grp+Ejz0+W+sZXRI5rpVsS9iGRrREKpBBkakzvArMwHR7GI2thiBxWG+mtepYHDZFIYjnPAe9Ocbh03sCeQ1Py0rl+pd9nXhNOawOHuKO1bYean8q0EwN1tyEeJ0/nVjE9IB8Fs85YgfIfnVF9r33EgxMd0R899TnU4Ro4LAG3Jdlg8xoPUxVTH3cED2lR9Ncqgn0aPoaz7pdjJJPiZJqP7OTvrOm9q+Mt4c/s7RU6mcxP/H+dUfslbAwtF9mrURm7W2n1NprgIBUSM24kGYI5HdXRbA25YxNsXLKRwdYBKtxHlyNchiQrqVbUHQ1y+zcfc2XiQQM1ptCp3Mv7vgRvB/nXoycsXt2dnEZdDprpvrxLGWjkuA/4bj1ymvTV2sb1oXbJlGGhn5HiCK82x2Eu27pB1Rs2u+MwOh8Na52K4XAYoWrqu26RMV2nR3Eh2vQCIZd/MAg/SuQvbGu8BW3sjEXrT3D1DEvB5AEb9dedWXV0tm3WO27z/A1EWAEAzv9JJMe5PvWb12Mud1EXz1P1/CgubNxT6PfI+6I+kVvlGeNY/TPtKh5MfmKsdE8Mj3bYU5YmZ10ymfP+dTYjooWBm4ZO5mP1B4UfRrYuKs3wWQZVkZgykGVMQN/uKzb3ak7aW+n2xA2H660wDWpYgCAyNAYCPi0B9K5K5s82kRyIJI+kjSvT9oYE3bT2z2QwIJG8TxislOi+HyjPneOLGCfRYmud5WtTUWOgl2bLnSc8T/pWPqag6RbLuXL7PbQHMtsnTvspcGY1mMomtvZOAt2Vy21AWZ0nUxEmd9Xrlsk6e4qjmMPgbhErZFphwyoT5h9W+lPa6JqYJ5zIJJnnXWWrB4kjz1/r2qd1SOBPE6ge1YxxmPhb3cwuxMMujDN6x76CKtYXY+GUzbsofHIGj1OoreTBrvyiOY/KnZIHYWfKRH51raILdvTdHpA9IFaCW9N/wA6zbmMyznI95Ptwp02xbG4EnwAAP8AXlWdK1erXdGvl8tDU1nBqeA9oNcrtLpW1tewigzpMsdN54RV3Y/Tiw/ZxCG2f3lJZfM/EPnTjTbfvYZ9yLHyPlpVcpcHfAHoeHvWhhcRZuLntsHHNGzeh5HwNBcxdlO+8RzIY/7BUUWGsAgEuB4a/jUn2eDzHlu9KzMT0ltL+zRn8e4Pnr8qx7u3bxPZhJ36CaaNuuGGtn4RPHQ/jUF3EYa2e0V9CW+S1yNzEu4GZi2vPQem4U8k6DdTibdNe6QW0BFu2THEkIPlrWZe2zeJ0hJ35ROnrVAJO+pVWrxTaVrzMRmJPmZ+tIAmkoqZRTRsyWxU6oKZakWiHCUYt0gaMGoGFun6uiBoqDg2es/amGW8hRvQ8jV0mql+vU5Mzovt98FcNi8T1THtDfHAXFH1H5Cu2xmA6zVWUqRIPAg7iNNa4Da+E6wSNGG4/hWn0J6TZP7HfjITCMd9tie6Z+E/I+B0xW53a9zZarvM8oqP7NrxjnXRvgGJggDzO7yqS1sojQkeGu+sm2Ph8FG4aen41ZtYNiYAB84+XOtlMJl3jTy/OriYYR3fr9Kowk2YeKg+WmnhVgbOCEQQPCCTWuUPwmPofypNby9pmAHMxHrNRWRc2aH1n0iPlwqH/wANt2+9pykSK0MXtfCrp1na5IC3zAyxWJjNvoTC2mPixj2AmguW7qcgPTf+A86YgHXd4zv+VYGI2ncI0hZ5AVX6+e80nfrJ+VB0xxdtdC4HlJn0FQNtNRJVJ8yAa5439dBP9Cna4x3CPnTRtuNty58ICnTcJPzrOxeNZ+/cZuepj1A0qmLZ51ItsU0bJ3B0EnfRK7eFOq1IFppNqWJ2ctzvTPOaz7mybidztD510AWjC1Ri7GW6jyVYaGTrBkbjWuGOukfzqYCiAqWG0YUn0qZbdOtGKaNnValWgFGDUEi0YqMGiBoqZTUitUANEGqaFgNUitVYNRhqirQajDVVDUYepoWQ1HmqsHos9NDhiaiuCaOaY16HNn3rdYO1sER+sUeY5iuoupNVLludDSm9Ok/R90q+0KuDvGbgH6pzvdR8BP7wHuPEa9rdCWh+tZUB/eYD614LisO1i4HWQuYGR8JBkEcq6M3e0WbU8eM1hp6Pe6RYRJAdrhHBASPdoHzrLxHTDWLdkebkn/isfWuPW+ORpkzkyKaG9iekF9+88DkgCjj6/Osq5iiWlmLHmxLc+NB9nZu8alTCqKaNoziOWtIZyZiKtrbA3CiC1dJtVFgneakXDgVYiniroRBKILUkU8UEYWiC0UU8VAwFEBSiioEKIUwpxQEKIUIpxQGDRA0ANEDUEgogajBpwaKlBogaiBogaglBogaiBogaglBow1QA0Qaipw1EGquGog1TQshqLPVYNT5qaHIzSpUq7MFQ5BypUqBG0DwqNcItKlQTJaA3CpAKVKoCAogKalQEKIUqVUPT0qVQKnp6VAhT01KgIUqVKgenpUqB6elSoHFEDTUqijBp5pUqBwaKaVKoHmiDU1KoogaIGlSoHmnDU9KoHzU+ampUV//Z",
                fileName="modelica://MikkelsonModeling/../../../Downloads/stmtur.jpg")}),
                                                                       Diagram(
              coordinateSystem(preserveAspectRatio=false), graphics={Line(points={{
                    -89.92,11.8},{-84,11.8},{-84,10}},    color={28,108,200})}),
          experiment(
            StopTime=30,
            __Dymola_NumberOfIntervals=531,
            Tolerance=0.0005,
            __Dymola_Algorithm="Esdirk45a"));
      end Diagram_ONLY_NuScale_Secondary_With_TES;

      model SubSystem_Dummy

        extends BaseClasses.Partial_SubSystem_A(
          redeclare replaceable CS_Dummy CS,
          redeclare replaceable ED_Dummy ED,
          redeclare Data.Data_Dummy data);

      equation

        annotation (
          defaultComponentName="changeMe",
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                  140}})),
          Icon(coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{-94,82},{94,74}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={255,255,237},
                fillPattern=FillPattern.Solid,
                textString="Change Me")}));
      end SubSystem_Dummy;

      model CS_Dummy

        extends BaseClasses.Partial_ControlSystem;

      equation

      annotation(defaultComponentName="changeMe_CS", Icon(graphics={
              Text(
                extent={{-94,82},{94,74}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={255,255,237},
                fillPattern=FillPattern.Solid,
                textString="Change Me")}));
      end CS_Dummy;

      model CS_Mass

        extends BaseClasses.Partial_ControlSystem;

        TRANSFORM.Controls.PI_Control PID(
          k=-1e-9,
          Ti=30,
          y_start=-1)                     annotation (Placement(transformation(
              extent={{3,3},{-3,-3}},
              rotation=180,
              origin={5,-55})));
        Modelica.Blocks.Sources.Constant TBV_Flow(k=52e6)
          annotation (Placement(transformation(
              extent={{-4,4},{4,-4}},
              rotation=0,
              origin={-16,-56})));
        Modelica.Blocks.Sources.Constant TCV_Ref(k=data.P_Turbine_Reference)
          annotation (Placement(transformation(
              extent={{-4,4},{4,-4}},
              rotation=0,
              origin={-14,-28})));
        TRANSFORM.Controls.PI_Control PI2(
          k=1e-6,
          Ti=10,
          initType=Modelica.Blocks.Types.Init.InitialOutput,
          directActing=false,
          x_start=1000,
          y_start=1)
          annotation (Placement(transformation(extent={{4,4},{-4,-4}},
              rotation=180,
              origin={0,-28})));
        Modelica.Blocks.Sources.Constant FCV_Ref(k=data.Feed_Flow_Nominal)
          annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={-14,-8})));
        TRANSFORM.Controls.PI_Control PI3(
          k=1/51.4,
          Ti=3,
          initType=Modelica.Blocks.Types.Init.InitialOutput,
          x_start=0,
          y_start=1)
          annotation (Placement(transformation(extent={{4,4},{-4,-4}},
              rotation=180,
              origin={2,-8})));
        Data.Data_Cycle data(P_Turbine_Reference=3720000)
          annotation (Placement(transformation(extent={{-80,56},{-60,76}})));
        Control_and_Distribution.Timer                   timer(Start_Time=10)
          annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={22,8})));
        Control_and_Distribution.Timer                   timer1(Start_Time=15)
          annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={26,-22})));
        Control_and_Distribution.Timer                   timer2(Start_Time=60)
          annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={32,-46})));
        Modelica.Blocks.Sources.Constant FWCP_Ref1(k=data.dP_FCV_Reference)
          annotation (Placement(transformation(
              extent={{-4,4},{4,-4}},
              rotation=0,
              origin={-10,42})));
        TRANSFORM.Controls.LimPID     FWCP(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=15/55000,
          Ti=20,
          y_start=1220) annotation (Placement(transformation(
              extent={{-3,3},{3,-3}},
              rotation=0,
              origin={5,41})));
        Modelica.Blocks.Sources.Constant FWCP_Ref2(k=1250) annotation (Placement(
              transformation(
              extent={{-4,4},{4,-4}},
              rotation=0,
              origin={6,28})));
        Modelica.Blocks.Math.Add add3_1(k1=1)
          annotation (Placement(transformation(extent={{22,52},{42,72}})));
        Modelica.Blocks.Math.Min min1
          annotation (Placement(transformation(extent={{90,-42},{94,-38}})));
        Modelica.Blocks.Math.Max max1
          annotation (Placement(transformation(extent={{102,-46},{106,-42}})));
        Modelica.Blocks.Sources.Constant k1(k=1) annotation (Placement(transformation(
              extent={{-2,2},{2,-2}},
              rotation=0,
              origin={82,-42})));
        Modelica.Blocks.Sources.Constant k2(k=0.0) annotation (Placement(
              transformation(
              extent={{-2,2},{2,-2}},
              rotation=0,
              origin={98,-44})));
      equation

        connect(PI2.u_s, TCV_Ref.y)
          annotation (Line(points={{-4.8,-28},{-9.6,-28}}, color={0,0,127}));
        connect(sensorBus.P_Turbine_Inlet, PI2.u_m) annotation (Line(
            points={{-30,-100},{-30,-38},{-2,-38},{-2,-32.8},{0,-32.8}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(PI3.u_s, FCV_Ref.y)
          annotation (Line(points={{-2.8,-8},{-9.6,-8}}, color={0,0,127}));
        connect(sensorBus.Feed_Flow_Rate, PI3.u_m) annotation (Line(
            points={{-30,-100},{-30,-20},{2,-20},{2,-12.8}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TBV_Opening, timer2.y) annotation (Line(
            points={{30,-100},{30,-74},{42,-74},{42,-46},{36.56,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TCV_Opening, timer1.y) annotation (Line(
            points={{30,-100},{32,-100},{32,-60},{48,-60},{48,-22},{30.56,-22}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.FCV_Opening, timer.y) annotation (Line(
            points={{30,-100},{30,-56},{52,-56},{52,8},{26.56,8}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(PI3.y, timer.u) annotation (Line(points={{6.4,-8},{12,-8},{12,4},{
                17.2,4},{17.2,8}}, color={0,0,127}));
        connect(timer1.u, PI2.y) annotation (Line(points={{21.2,-22},{16,-22},{16,-28},
                {4.4,-28}}, color={0,0,127}));
        connect(FWCP.u_s, FWCP_Ref1.y) annotation (Line(points={{1.4,41},{-2,41},{-2,
                42},{-5.6,42}}, color={0,0,127}));
        connect(sensorBus.dP_FCV,FWCP. u_m) annotation (Line(
            points={{-30,-100},{-30,50},{5,50},{5,44.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(FWCP_Ref2.y,add3_1. u2) annotation (Line(points={{10.4,28},{14,28},{
                14,56},{20,56}},   color={0,0,127}));
        connect(FWCP.y,add3_1. u1)
          annotation (Line(points={{8.3,41},{8.3,68},{20,68}},    color={0,0,127}));
        connect(actuatorBus.FWCP_Speed,add3_1. y) annotation (Line(
            points={{30,-100},{30,48},{60,48},{60,62},{43,62}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Generator_Power, PID.u_m) annotation (Line(
            points={{-30,-100},{-30,-64},{5,-64},{5,-58.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TBV_Flow.y, PID.u_s) annotation (Line(points={{-11.6,-56},{-6,-56},{
                -6,-55},{1.4,-55}}, color={0,0,127}));
        connect(min1.y, max1.u1) annotation (Line(points={{94.2,-40},{96,-40},{96,-38},
                {101.6,-38},{101.6,-42.8}}, color={0,0,127}));
        connect(max1.u2, k2.y)
          annotation (Line(points={{101.6,-45.2},{100.2,-44}}, color={0,0,127}));
        connect(min1.u2, k1.y) annotation (Line(points={{89.6,-41.2},{84.2,-41.2},{
                84.2,-42}}, color={0,0,127}));
        connect(PID.y, min1.u1) annotation (Line(points={{8.3,-55},{74,-55},{74,-38.8},
                {89.6,-38.8}}, color={0,0,127}));
        connect(max1.y, timer2.u) annotation (Line(points={{106.2,-44},{118,-44},{118,
                -38},{20,-38},{20,-46},{27.2,-46}}, color={0,0,127}));
          annotation (Placement(transformation(extent={{-94,4},{-64,36}})),
                 defaultComponentName="changeMe_CS", Icon(graphics={
              Text(
                extent={{-94,82},{94,74}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={255,255,237},
                fillPattern=FillPattern.Solid,
                textString="Change Me")}));
      end CS_Mass;

      model CS_Modal
        import NHES;

        extends BaseClasses.Partial_ControlSystem;
        Real TBV_Lin;
        Real TBV_Quad;
        Real TBV_Sum;
        Data.Data_Modal data(
          P_Turbine_Reference=3720000,
          dP_FCV_Reference=200000,
          Q_RX_Nominal=160e6,
          Q_Turb_Nominal=52000000)
          annotation (Placement(transformation(extent={{-66,12},{-46,32}})));
        TRANSFORM.Controls.LimPID     FWCP(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=15/55000,
          Ti=20,
          y_start=1220) annotation (Placement(transformation(
              extent={{-3,3},{3,-3}},
              rotation=0,
              origin={3,-79})));
        Modelica.Blocks.Sources.Constant FWCP_Ref(k=data.dP_FCV_Reference)
          annotation (Placement(transformation(
              extent={{-4,4},{4,-4}},
              rotation=0,
              origin={-12,-78})));
        Modelica.Blocks.Sources.Constant FWCP_Ref1(k=1000) annotation (Placement(
              transformation(
              extent={{-4,4},{4,-4}},
              rotation=0,
              origin={4,-92})));
        Modelica.Blocks.Math.Add add3_1(k1=1)
          annotation (Placement(transformation(extent={{20,-68},{40,-48}})));
        Modelica.Blocks.Math.Add add_DFV annotation (Placement(transformation(
              extent={{5,-5},{-5,5}},
              rotation=180,
              origin={-7,-25})));
        Modelica.Blocks.Sources.Constant DFV_max(k=1)
          annotation (Placement(transformation(extent={{-12,-42},{-4,-34}})));
        Modelica.Blocks.Math.Min min_DFV_signal annotation (Placement(transformation(
              extent={{3,-3},{-3,3}},
              rotation=180,
              origin={11,-29})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.Delay
          delay_DFV(Ti=10) annotation (Placement(transformation(
              extent={{3,-3},{-3,3}},
              rotation=180,
              origin={35,-27})));
        TRANSFORM.Controls.PI_Control PI_TCV_TurbP(
          k=-1e-6,
          Ti=10,
          initType=Modelica.Blocks.Types.Init.InitialOutput,
          y_start=0.0)  annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={18,-4})));
        Modelica.Blocks.Sources.Constant TCV_Ref_P(k=3.72e6)
          annotation (Placement(transformation(extent={{0,0},{8,-8}}, rotation=0)));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.BaseClasses.Peaking_Operational_Logic
          demand_Shim_Logic_New_2_1(
          Q_nom=data.Q_Turb_Nominal,
          Ti_Charge=0.01,
          Ti_Discharge=0.01) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-2,50})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.PI_Control_Reset_Input
          PI_DCV(
          k=10,
          Ti=25,
          k_s=5e-9,
          k_m=5e-9)
          annotation (Placement(transformation(extent={{122,82},{142,102}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer(Start_Time=60) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-134,42})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
          minMaxFilter annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-134,8})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer1(Start_Time=30) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={162,68})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.MinMaxFilter
          minMaxFilter1 annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={170,-20})));
        TRANSFORM.Controls.LimPID     PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1E-9,
          Ti=30,
          initType=Modelica.Blocks.Types.Init.InitialOutput,
          xi_start=0,
          y_start=1)
          annotation (Placement(transformation(extent={{-2,2},{2,-2}},
              rotation=90,
              origin={-86,-56})));
        Modelica.Blocks.Sources.Constant const7(k=data.Q_Rx_Nom)
          annotation (Placement(transformation(extent={{-6,-6},{6,6}},
              rotation=90,
              origin={-88,-76})));
        Modelica.Blocks.Math.Add add4(k1=0.0, k2=1)
          annotation (Placement(transformation(extent={{-60,-50},{-52,-42}})));
        TRANSFORM.Controls.LimPID     PID1(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1/700,
          Ti=5,
          initType=Modelica.Blocks.Types.Init.InitialOutput,
          xi_start=0,
          y_start=0.93)
          annotation (Placement(transformation(extent={{6,6},{-6,-6}},
              rotation=90,
              origin={-100,-20})));
        Modelica.Blocks.Sources.Constant const3(k=68.4)
          annotation (Placement(transformation(extent={{5,-5},{-5,5}},
              rotation=90,
              origin={-101,5})));
        Modelica.Blocks.Math.Add add1(k1=1)
          annotation (Placement(transformation(extent={{70,-40},{78,-32}})));
        TRANSFORM.Controls.LimPID PI_TCV_TurbP_PID(
          k=-1e-6,
          Ti=10,
          yMax=1,
          yMin=-0.2,
          initType=Modelica.Blocks.Types.Init.InitialOutput,
          y_start=0.51) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={96,-2})));
        Modelica.Blocks.Sources.Constant TCV_Ref_P1(k=3.72e6)
          annotation (Placement(transformation(extent={{78,2},{86,-6}},
                                                                      rotation=0)));
        Modelica.Blocks.Logical.Switch switch1 annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={208,40})));
        Modelica.Blocks.Sources.Constant const1(k=0)
          annotation (Placement(transformation(extent={{5,-5},{-5,5}},
              rotation=90,
              origin={221,79})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{5,-5},{-5,5}},
              rotation=90,
              origin={201,71})));
        Modelica.Blocks.Math.Min min1 annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={170,16})));
        TRANSFORM.Controls.LimPID PI_TBV1(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=-6e-10,
          Ti=10,
          yMax=1,
          yMin=0.0,
          initType=Modelica.Blocks.Types.Init.InitialOutput,
          y_start=0.0) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-88,42})));
        Modelica.Blocks.Math.Min TBV_Elec_Demand annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-104,98})));
        Modelica.Blocks.Sources.Constant const4(k=100e6)
          annotation (Placement(transformation(extent={{5,-5},{-5,5}},
              rotation=90,
              origin={-119,129})));
        Modelica.Blocks.Math.Add TBV_Mass_Ref
          annotation (Placement(transformation(extent={{-172,-76},{-152,-56}})));
        Modelica.Blocks.Sources.Constant const5(k=-5.9436)
          annotation (Placement(transformation(extent={{5,-5},{-5,5}},
              rotation=90,
              origin={-193,-51})));
        Modelica.Blocks.Math.Gain gain(k=1.892e-6)
          annotation (Placement(transformation(extent={{-150,-110},{-170,-90}})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.Timer
          timer2(Start_Time=25, init_mult=0.1) annotation (Placement(
              transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={52,-18})));
        Modelica.Blocks.Sources.Constant FWCP_Ref2(k=0.9)  annotation (Placement(
              transformation(
              extent={{-4,4},{4,-4}},
              rotation=0,
              origin={72,-14})));
        Modelica.Blocks.Math.Min min2 annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-118,-104})));
        Modelica.Blocks.Sources.Constant const6(k=data.Q_Turb_Nominal)
          annotation (Placement(transformation(extent={{5,-5},{-5,5}},
              rotation=90,
              origin={-81,-111})));
        NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.Control_and_Distribution.Delay
          delay_DFV1(Ti=1) annotation (Placement(transformation(
              extent={{-3,-3},{3,3}},
              rotation=180,
              origin={-137,-97})));
      equation
        TBV_Mass_Ref.u2 = TBV_Sum;
      algorithm
        if gain.u>data.Q_Turb_Nominal then
          TBV_Lin := gain.k*data.Q_Turb_Nominal;
          TBV_Quad := data.Q_Turb_Nominal*data.Q_Turb_Nominal*(-9.086e-15);
          else
        TBV_Lin := gain.y;
        TBV_Quad := gain.u*gain.u*(-9.086e-15);
        end if;
        TBV_Sum := TBV_Quad+TBV_Lin;
      equation
        connect(sensorBus.dP_FCV, FWCP.u_m) annotation (Line(
            points={{-30,-100},{-30,-70},{3,-70},{3,-75.4}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(FWCP.u_s, FWCP_Ref.y) annotation (Line(points={{-0.6,-79},{-4,-79},{-4,
                -78},{-7.6,-78}}, color={0,0,127}));
        connect(FWCP.y, add3_1.u1)
          annotation (Line(points={{6.3,-79},{6.3,-52},{18,-52}}, color={0,0,127}));
        connect(FWCP_Ref1.y, add3_1.u2) annotation (Line(points={{8.4,-92},{12,-92},{
                12,-64},{18,-64}}, color={0,0,127}));
        connect(actuatorBus.FWCP_Speed, add3_1.y) annotation (Line(
            points={{30,-100},{30,-72},{58,-72},{58,-58},{41,-58}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(delay_DFV.u, min_DFV_signal.y) annotation (Line(points={{31.4,-27},{24,
                -27},{24,-29},{14.3,-29}}, color={0,0,127}));
        connect(add_DFV.y, min_DFV_signal.u2) annotation (Line(points={{-1.5,-25},{8,-25},
                {8,-24},{7.4,-24},{7.4,-27.2}}, color={0,0,127}));
        connect(min_DFV_signal.u1, DFV_max.y) annotation (Line(points={{7.4,-30.8},{8,
                -30.8},{8,-38},{-3.6,-38}}, color={0,0,127}));
        connect(sensorBus.DFV_Anticipatory, add_DFV.u1) annotation (Line(
            points={{-30,-100},{-30,-28},{-13,-28}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Superheat_Sensor_Opening, add_DFV.u2) annotation (Line(
            points={{-30,-100},{-30,-22},{-13,-22}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV_Ref_P.y, PI_TCV_TurbP.u_s)
          annotation (Line(points={{8.4,-4},{13.2,-4}}, color={0,0,127}));
        connect(sensorBus.P_Turbine_Inlet, PI_TCV_TurbP.u_m) annotation (Line(
            points={{-30,-100},{-26,-100},{-26,16},{18,16},{18,0.8}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(demand_Shim_Logic_New_2_1.DFV_Power, PI_DCV.u_m) annotation (Line(
              points={{9.9,49.9},{118,49.9},{118,80},{132,80}}, color={0,0,127}));
        connect(demand_Shim_Logic_New_2_1.DFV_Demand, PI_DCV.u_s) annotation (Line(
              points={{0.9,61.9},{0.9,66},{116,66},{116,92},{120,92}}, color={0,0,127}));
        connect(demand_Shim_Logic_New_2_1.Discharge, PI_DCV.k_in) annotation (Line(
              points={{4.7,61.9},{4.7,100},{120,100}}, color={255,0,255}));
        connect(timer.y,minMaxFilter. u) annotation (Line(points={{-134,37.44},{-120,
                37.44},{-120,12.8},{-134,12.8}},color={0,0,127}));
        connect(sensorBus.Demand, demand_Shim_Logic_New_2_1.Demand) annotation (Line(
            points={{-30,-100},{-30,26},{-2,26},{-2,38}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(timer1.u, PI_DCV.y)
          annotation (Line(points={{162,80},{162,92},{143,92}}, color={0,0,127}));
        connect(const3.y,PID1. u_s) annotation (Line(points={{-101,-0.5},{-100,-0.5},
                {-100,-12.8}},color={0,0,127}));
        connect(PID1.y,add4. u1) annotation (Line(points={{-100,-26.6},{-100,-42},{-64,
                -42},{-64,-38},{-60.8,-38},{-60.8,-43.6}},
                                             color={0,0,127}));
        connect(PID.y,add4. u2) annotation (Line(points={{-86,-53.8},{-86,-48.4},{-60.8,
                -48.4}},                     color={0,0,127}));
        connect(const7.y, PID.u_s) annotation (Line(points={{-88,-69.4},{-88,-62},{-86,
                -62},{-86,-58.4}}, color={0,0,127}));
        connect(sensorBus.Q_RX, PID.u_m) annotation (Line(
            points={{-30,-100},{-98,-100},{-98,-56},{-88.4,-56}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Feed_Flow_Rate, PID1.u_m) annotation (Line(
            points={{-30,-100},{-32,-100},{-32,-44},{-116,-44},{-116,-20},{-107.2,-20}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.FCV_Opening, add4.y) annotation (Line(
            points={{30,-100},{28,-100},{28,-114},{-44,-114},{-44,-46},{-51.6,-46}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Generator_Power, demand_Shim_Logic_New_2_1.Power)
          annotation (Line(
            points={{-30,-100},{-30,26},{2,26},{2,37.8}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TCV_Opening, add1.y) annotation (Line(
            points={{30,-100},{68,-100},{68,-98},{106,-98},{106,-38},{78.4,-38},{78.4,
                -36}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.TBV_Opening, minMaxFilter.y) annotation (Line(
            points={{30,-100},{30,-34},{24,-34},{24,-16},{-68,-16},{-68,3.44},{-134,
                3.44}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.DFV_Opening, delay_DFV.y) annotation (Line(
            points={{30,-100},{58,-100},{58,-90},{60,-90},{60,-27},{38.42,-27}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.DCV_Opening, minMaxFilter1.y) annotation (Line(
            points={{30,-100},{30,-74},{118,-74},{118,-31.4},{170,-31.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(PI_TCV_TurbP_PID.u_s, TCV_Ref_P1.y) annotation (Line(points={{91.2,-2},
                {88,-2},{88,-2},{86.4,-2}}, color={0,0,127}));
        connect(sensorBus.P_Turbine_Inlet, PI_TCV_TurbP_PID.u_m) annotation (Line(
            points={{-30,-100},{-30,14},{96,14},{96,2.8}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(demand_Shim_Logic_New_2_1.Discharge, switch1.u2) annotation (Line(
              points={{4.7,61.9},{4.7,108},{212,108},{212,52},{208,52}}, color={255,0,
                255}));
        connect(switch1.u1, const2.y) annotation (Line(points={{200,52},{200,54},{198,
                54},{198,65.5},{201,65.5}}, color={0,0,127}));
        connect(const1.y, switch1.u3) annotation (Line(points={{221,73.5},{221,66},{
                218,66},{218,58},{216,58},{216,52}}, color={0,0,127}));
        connect(switch1.y, min1.u2) annotation (Line(points={{208,29},{192,29},{192,
                28},{176,28}}, color={0,0,127}));
        connect(timer1.y, min1.u1) annotation (Line(points={{162,56.6},{164,56.6},{
                164,28}}, color={0,0,127}));
        connect(minMaxFilter1.u, min1.y)
          annotation (Line(points={{170,-8},{170,5}}, color={0,0,127}));
        connect(sensorBus.Generator_Power, PI_TBV1.u_m) annotation (Line(
            points={{-30,-100},{-30,34},{-24,34},{-24,44},{-83.2,44},{-83.2,42}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TBV_Elec_Demand.y, PI_TBV1.u_s) annotation (Line(points={{-104,87},{-106,
                87},{-106,78},{-86,78},{-86,46.8},{-88,46.8}}, color={0,0,127}));
        connect(sensorBus.Demand,TBV_Elec_Demand. u2) annotation (Line(
            points={{-30,-100},{-30,56},{-82,56},{-82,120},{-98,120},{-98,110}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TBV_Elec_Demand.u1,const4. y) annotation (Line(points={{-110,110},{-110,
                123.5},{-119,123.5}},         color={0,0,127}));
        connect(PI_TBV1.y, timer.u) annotation (Line(points={{-88,37.6},{-88,34},{-116,
                34},{-116,52},{-134,52},{-134,46.8}}, color={0,0,127}));
        connect(const5.y, TBV_Mass_Ref.u1) annotation (Line(points={{-193,-56.5},{-193,
                -60},{-174,-60}}, color={0,0,127}));

        connect(PI_TCV_TurbP.y, timer2.u) annotation (Line(points={{22.4,-4},{36,-4},
                {36,-6},{52,-6},{52,-13.2}}, color={0,0,127}));
        connect(timer2.y, add1.u2) annotation (Line(points={{52,-22.56},{52,-38},{
                69.2,-38},{69.2,-38.4}}, color={0,0,127}));
        connect(FWCP_Ref2.y, add1.u1) annotation (Line(points={{76.4,-14},{82,-14},{
                82,-26},{64,-26},{64,-33.6},{69.2,-33.6}}, color={0,0,127}));
        connect(const6.y, min2.u2) annotation (Line(points={{-81,-116.5},{-81,-124},{
                -94,-124},{-94,-112},{-106,-112},{-106,-110}}, color={0,0,127}));
        connect(sensorBus.Demand, min2.u1) annotation (Line(
            points={{-30,-100},{-30,-76},{-76,-76},{-76,-102},{-100,-102},{-100,-98},
                {-106,-98}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(gain.u, delay_DFV1.y) annotation (Line(points={{-148,-100},{-144,-100},
                {-144,-97},{-140.42,-97}}, color={0,0,127}));
        connect(min2.y, delay_DFV1.u) annotation (Line(points={{-129,-104},{-132,-104},
                {-132,-97},{-133.4,-97}}, color={0,0,127}));
          annotation (Placement(transformation(extent={{-94,4},{-64,36}})),
                 defaultComponentName="changeMe_CS", Icon(graphics={
              Text(
                extent={{-94,82},{94,74}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={255,255,237},
                fillPattern=FillPattern.Solid,
                textString="Change Me")}));
      end CS_Modal;

      model ED_Dummy

        extends BaseClasses.Partial_EventDriver;

      equation

      annotation(defaultComponentName="changeMe_CS", Icon(graphics={
              Text(
                extent={{-94,82},{94,74}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={255,255,237},
                fillPattern=FillPattern.Solid,
                textString="Change Me")}));
      end ED_Dummy;

      package Components

        model Economic_Sim_Profile
          extends BaseClasses.Partial_ControlSystem;

          extends NHES.Icons.DummyIcon;

          parameter Modelica.Units.SI.Time Ramp_Stor=600 "Time allowed for demand ramp";
          parameter Modelica.Units.SI.Time Ramp_Dis=600 "Time allowed for demand ramp";
          parameter Modelica.Units.SI.Power Q_nom=52000000;

          Modelica.Blocks.Math.Sum Charge_Sum(nin=7) annotation (Placement(
                transformation(
                extent={{6,-6},{-6,6}},
                rotation=90,
                origin={-58,44})));
          Modelica.Blocks.Sources.Trapezoid Dch1(
            amplitude=12e6,
            rising=Ramp_Dis,
            width=8*3600 - Ramp_Dis,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=46800 - Ramp_Dis/2) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-35,47})));
          Modelica.Blocks.Sources.Trapezoid Ch1(
            amplitude=-0.45*Q_nom,
            rising=Ramp_Stor,
            width=3600*8 - Ramp_Stor,
            falling=Ramp_Stor,
            period=864000,
            offset=0,
            startTime=3600 - Ramp_Stor/2) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-77,81})));
          Modelica.Blocks.Math.Sum Anticipatory_Signals(nin=7) annotation (Placement(
                transformation(
                extent={{6,-6},{-6,6}},
                rotation=90,
                origin={16,0})));
          Modelica.Blocks.Sources.Constant NomPower(k=Q_nom)
            annotation (Placement(transformation(extent={{-94,2},{-84,12}})));
          Modelica.Blocks.Math.Sum Discharge_Sum(nin=7) annotation (Placement(
                transformation(
                extent={{6,-6},{-6,6}},
                rotation=90,
                origin={-20,32})));
          Modelica.Blocks.Math.Add3 Net_Demand
            annotation (Placement(transformation(extent={{10,10},{-10,-10}},
                rotation=90,
                origin={-44,-28})));
          Modelica.Blocks.Sources.Trapezoid Ch2(
            amplitude=-0.45*Q_nom,
            rising=Ramp_Stor,
            width=3600*3 - Ramp_Stor,
            falling=Ramp_Stor,
            period=864000,
            offset=0,
            startTime=90000 - Ramp_Stor/2) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-77,71})));
          Modelica.Blocks.Sources.Trapezoid Ch3(
            amplitude=-0.45*Q_nom,
            rising=Ramp_Stor,
            width=3600*1 - Ramp_Stor,
            falling=Ramp_Stor,
            period=864000,
            offset=0,
            startTime=255600 - Ramp_Stor/2) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-77,61})));
          Modelica.Blocks.Sources.Trapezoid Ch4(
            amplitude=-0.45*Q_nom,
            rising=Ramp_Stor,
            width=3600 - Ramp_Stor,
            falling=Ramp_Stor,
            period=864000,
            offset=0,
            startTime=270000 - Ramp_Stor/2) annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=90,
                origin={-61,91})));
          Modelica.Blocks.Sources.Trapezoid Ch5(
            amplitude=-0.45*Q_nom,
            rising=Ramp_Stor,
            width=6*3600 - Ramp_Stor,
            falling=Ramp_Stor,
            period=864000,
            offset=0,
            startTime=342000 - Ramp_Stor/2) annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={-47,81})));
          Modelica.Blocks.Sources.Trapezoid Ch6(
            amplitude=-0.45*Q_nom,
            rising=Ramp_Stor,
            width=2*3600 - Ramp_Stor,
            falling=Ramp_Stor,
            period=864000,
            offset=0,
            startTime=439200 - Ramp_Stor/2) annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={-47,71})));
          Modelica.Blocks.Sources.Trapezoid Ch7(
            amplitude=-0.45*Q_nom,
            rising=Ramp_Stor,
            width=3*3600 - Ramp_Stor,
            falling=Ramp_Stor,
            period=864000,
            offset=0,
            startTime=612000 - Ramp_Stor/2) annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={-47,61})));
          Modelica.Blocks.Sources.Trapezoid DCh2(
            amplitude=12e6,
            rising=Ramp_Dis,
            width=5*3600 - Ramp_Dis,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=129600 - Ramp_Dis/2) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-35,57})));
          Modelica.Blocks.Sources.Trapezoid DCh3(
            amplitude=12e6,
            rising=Ramp_Dis,
            width=2*3600 - Ramp_Dis,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=226800 - Ramp_Dis/2) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-35,67})));
          Modelica.Blocks.Sources.Trapezoid DCh4(
            amplitude=12e6,
            rising=Ramp_Dis,
            width=2*3600 - Ramp_Dis,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=313200 - Ramp_Dis/2) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={-31,75})));
          Modelica.Blocks.Sources.Trapezoid DCh5(
            amplitude=12e6,
            rising=Ramp_Dis,
            width=6*3600 - Ramp_Dis,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=396000 - Ramp_Dis/2) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={-21,75})));
          Modelica.Blocks.Sources.Trapezoid DCh6(
            amplitude=12e6,
            rising=Ramp_Dis,
            width=1*3600 - Ramp_Dis,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=489600 - Ramp_Dis/2) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={-11,75})));
          Modelica.Blocks.Sources.Trapezoid DCh7(
            amplitude=12e6,
            rising=Ramp_Dis,
            width=2*3600 - Ramp_Dis,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=655200 - Ramp_Dis/2) annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={-5,67})));
          Modelica.Blocks.Sources.Trapezoid Ant7(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=655200 - Ramp_Dis) annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={35,31})));
          Modelica.Blocks.Sources.Trapezoid Ant6(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=489600 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={27,37})));
          Modelica.Blocks.Sources.Trapezoid Ant5(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=396000 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={17,37})));
          Modelica.Blocks.Sources.Trapezoid Ant4(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=313200 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={7,37})));
          Modelica.Blocks.Sources.Trapezoid Ant3(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=226800 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={1,31})));
          Modelica.Blocks.Sources.Trapezoid Ant2(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=129600 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={1,21})));
          Modelica.Blocks.Sources.Trapezoid Ant1(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=46800 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={1,11})));
        equation
          connect(NomPower.y,Net_Demand. u3) annotation (Line(points={{-83.5,7},{-74,7},
                  {-74,8},{-64,8},{-64,-16},{-52,-16}},
                                           color={0,0,127}));
          connect(Charge_Sum.y,Net_Demand. u2) annotation (Line(points={{-58,37.4},{-58,
                  -10},{-44,-10},{-44,-16}},              color={0,0,127}));
          connect(Discharge_Sum.y,Net_Demand. u1) annotation (Line(points={{-20,25.4},{-20,
                  12},{-22,12},{-22,-12},{-30,-12},{-30,-16},{-36,-16}},
                                                    color={0,0,127}));
          connect(Ch1.y,Charge_Sum. u[1]) annotation (Line(points={{-73.7,81},{-62,81},
                  {-62,51.2},{-56.9714,51.2}},color={0,0,127}));
          connect(Dch1.y,Discharge_Sum. u[1]) annotation (Line(points={{-31.7,47},{
                  -18.9714,47},{-18.9714,39.2}},
                                         color={0,0,127}));
          connect(Ant1.y,Anticipatory_Signals. u[1]) annotation (Line(points={{4.3,11},
                  {17.0286,11},{17.0286,7.2}},  color={0,0,127}));
          connect(Ch2.y,Charge_Sum. u[2]) annotation (Line(points={{-73.7,71},{-57.3143,
                  71},{-57.3143,51.2}},
                                    color={0,0,127}));
          connect(Ant2.y,Anticipatory_Signals. u[2]) annotation (Line(points={{4.3,21},
                  {16.6857,21},{16.6857,7.2}},   color={0,0,127}));
          connect(DCh2.y,Discharge_Sum. u[2]) annotation (Line(points={{-31.7,57},{
                  -19.3143,57},{-19.3143,39.2}},
                                         color={0,0,127}));
          connect(Ant3.y,Anticipatory_Signals. u[3]) annotation (Line(points={{4.3,31},
                  {16.3429,31},{16.3429,7.2}},   color={0,0,127}));
          connect(DCh3.y,Discharge_Sum. u[3]) annotation (Line(points={{-31.7,67},{
                  -19.6571,67},{-19.6571,39.2}},
                                         color={0,0,127}));
          connect(Ch4.y,Charge_Sum. u[4]) annotation (Line(points={{-61,87.7},{-61,76},{
                  -58,76},{-58,51.2}}, color={0,0,127}));
          connect(DCh4.y,Discharge_Sum. u[4]) annotation (Line(points={{-31,71.7},{-31,55.85},
                  {-20,55.85},{-20,39.2}},                   color={0,0,127}));
          connect(Ant4.y,Anticipatory_Signals. u[4]) annotation (Line(points={{7,33.7},{
                  7,26},{16,26},{16,7.2}},         color={0,0,127}));
          connect(Ch5.y,Charge_Sum. u[5]) annotation (Line(points={{-50.3,81},{-58.3429,
                  81},{-58.3429,51.2}},
                                    color={0,0,127}));
          connect(DCh5.y,Discharge_Sum. u[5]) annotation (Line(points={{-21,71.7},{-21,
                  55.85},{-20.3429,55.85},{-20.3429,39.2}},  color={0,0,127}));
          connect(Ant5.y,Anticipatory_Signals. u[5]) annotation (Line(points={{17,33.7},
                  {17,19.85},{15.6571,19.85},{15.6571,7.2}},     color={0,0,127}));
          connect(Ch6.y,Charge_Sum. u[6]) annotation (Line(points={{-50.3,71},{-58.6857,
                  71},{-58.6857,51.2}},
                                    color={0,0,127}));
          connect(DCh6.y,Discharge_Sum. u[6]) annotation (Line(points={{-11,71.7},{-11,
                  68},{-20.6857,68},{-20.6857,39.2}},  color={0,0,127}));
          connect(Ant6.y,Anticipatory_Signals. u[6]) annotation (Line(points={{27,33.7},
                  {27,28},{15.3143,28},{15.3143,7.2}},     color={0,0,127}));
          connect(Ch7.y,Charge_Sum. u[7]) annotation (Line(points={{-50.3,61},{-59.0286,
                  61},{-59.0286,51.2}},
                                    color={0,0,127}));
          connect(Ant7.y,Anticipatory_Signals. u[7]) annotation (Line(points={{31.7,31},
                  {14.9714,31},{14.9714,7.2}},   color={0,0,127}));
          connect(DCh7.y,Discharge_Sum. u[7]) annotation (Line(points={{-8.3,67},{
                  -21.0286,67},{-21.0286,39.2}},
                                         color={0,0,127}));
          connect(Ch3.y,Charge_Sum. u[3]) annotation (Line(points={{-73.7,61},{-57.6571,
                  61},{-57.6571,51.2}},
                                    color={0,0,127}));
          connect(actuatorBus.Demand, Net_Demand.y) annotation (Line(
              points={{30,-100},{28,-100},{28,-54},{-48,-54},{-48,-39},{-44,-39}},
              color={111,216,99},
              pattern=LinePattern.Dash,
              thickness=0.5));
        annotation(defaultComponentName="SC", experiment(StopTime=3600,
                __Dymola_NumberOfIntervals=3600),
            Diagram(coordinateSystem(extent={{-160,-100},{160,180}})),
            Icon(coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
                          Text(
                  extent={{-94,82},{94,74}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fillColor={255,255,237},
                  fillPattern=FillPattern.Solid,
                  textString="Input Setpoints: Modelica Path")}));
        end Economic_Sim_Profile;

        model Demand_Curve_Generator
          extends BaseClasses.Partial_ControlSystem;

          extends NHES.Icons.DummyIcon;

          parameter Modelica.Units.SI.Time Ramp_Stor=600 "Time allowed for demand ramp";
          parameter Modelica.Units.SI.Time Ramp_Dis=600 "Time allowed for demand ramp";
          parameter Modelica.Units.SI.Power Q_nom=52000000;

          Modelica.Blocks.Math.Sum Anticipatory_Signals(nin=7) annotation (Placement(
                transformation(
                extent={{6,-6},{-6,6}},
                rotation=90,
                origin={16,-12})));
          Modelica.Blocks.Math.Add  Net_Demand
            annotation (Placement(transformation(extent={{10,10},{-10,-10}},
                rotation=90,
                origin={-34,-26})));
          Modelica.Blocks.Sources.Constant NomPower(k=Q_nom)
            annotation (Placement(transformation(extent={{-74,38},{-64,48}})));
          Modelica.Blocks.Sources.Ramp      Ch1(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=5000)               annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-57,117})));
          Modelica.Blocks.Sources.Ramp      Ch2(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=8000)                annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-57,107})));
          Modelica.Blocks.Sources.Ramp      Ch3(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=11000)                annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-57,97})));
          Modelica.Blocks.Sources.Ramp      Ch4(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=14000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=90,
                origin={-41,127})));
          Modelica.Blocks.Sources.Ramp      Ch5(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=17000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={-27,117})));
          Modelica.Blocks.Sources.Ramp      Ch6(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=20000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={-27,107})));
          Modelica.Blocks.Sources.Ramp      Ch7(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=23000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={-27,97})));
          Modelica.Blocks.Math.Sum Charge_Sum(nin=28)
                                                     annotation (Placement(
                transformation(
                extent={{6,-6},{-6,6}},
                rotation=90,
                origin={-38,58})));
          Modelica.Blocks.Sources.Trapezoid Ant7(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=655200 - Ramp_Dis) annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={33,29})));
          Modelica.Blocks.Sources.Trapezoid Ant6(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=489600 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={25,35})));
          Modelica.Blocks.Sources.Trapezoid Ant5(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=396000 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={15,35})));
          Modelica.Blocks.Sources.Trapezoid Ant4(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=313200 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=270,
                origin={5,35})));
          Modelica.Blocks.Sources.Trapezoid Ant3(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=226800 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-1,29})));
          Modelica.Blocks.Sources.Trapezoid Ant2(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=129600 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-1,19})));
          Modelica.Blocks.Sources.Trapezoid Ant1(
            amplitude=1,
            rising=Ramp_Dis,
            width=1800,
            falling=Ramp_Dis,
            period=864000,
            offset=0,
            startTime=46800 - Ramp_Dis) annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-1,9})));
          Modelica.Blocks.Sources.Ramp      Ch8(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=43000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={19,97})));
          Modelica.Blocks.Sources.Ramp      Ch9(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=40000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={19,107})));
          Modelica.Blocks.Sources.Ramp      Ch10(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=37000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={19,117})));
          Modelica.Blocks.Sources.Ramp      Ch11(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=34000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=90,
                origin={5,127})));
          Modelica.Blocks.Sources.Ramp      Ch12(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=25000)              annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-11,117})));
          Modelica.Blocks.Sources.Ramp      Ch13(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=28000)               annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-11,107})));
          Modelica.Blocks.Sources.Ramp      Ch14(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=31000)                annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-11,97})));
          Modelica.Blocks.Sources.Ramp      Ch15(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=63000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={-101,97})));
          Modelica.Blocks.Sources.Ramp      Ch16(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=60000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={-101,107})));
          Modelica.Blocks.Sources.Ramp      Ch17(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=57000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={-101,117})));
          Modelica.Blocks.Sources.Ramp      Ch18(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=54000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=90,
                origin={-115,127})));
          Modelica.Blocks.Sources.Ramp      Ch19(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=45000)              annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-131,117})));
          Modelica.Blocks.Sources.Ramp      Ch20(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=48000)               annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-131,107})));
          Modelica.Blocks.Sources.Ramp      Ch21(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=51000)                annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={-131,97})));
          Modelica.Blocks.Sources.Ramp      Ch22(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=83000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={93,93})));
          Modelica.Blocks.Sources.Ramp      Ch23(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=80000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={93,103})));
          Modelica.Blocks.Sources.Ramp      Ch24(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=77000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=0,
                origin={93,113})));
          Modelica.Blocks.Sources.Ramp      Ch25(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=74000)                annotation (Placement(transformation(
                extent={{3,-3},{-3,3}},
                rotation=90,
                origin={79,123})));
          Modelica.Blocks.Sources.Ramp      Ch26(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=65000)              annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={63,113})));
          Modelica.Blocks.Sources.Ramp      Ch27(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=68000)               annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={63,103})));
          Modelica.Blocks.Sources.Ramp      Ch28(
            height=-1e6,
            duration=20,
            offset=0,
            startTime=71000)                annotation (Placement(transformation(
                extent={{-3,-3},{3,3}},
                rotation=0,
                origin={63,93})));
        equation
          connect(actuatorBus.Demand, Net_Demand.y) annotation (Line(
              points={{30,-100},{28,-100},{28,-54},{-48,-54},{-48,-37},{-34,-37}},
              color={111,216,99},
              pattern=LinePattern.Dash,
              thickness=0.5));
          connect(Charge_Sum.y,Net_Demand. u2) annotation (Line(points={{-38,51.4},{-38,
                  -14},{-40,-14}},                        color={0,0,127}));
          connect(Ch1.y,Charge_Sum. u[1]) annotation (Line(points={{-53.7,117},{-36,117},
                  {-36,70},{-36.8429,70},{-36.8429,65.2}},
                                              color={0,0,127}));
          connect(Ch2.y,Charge_Sum. u[2]) annotation (Line(points={{-53.7,107},{-36,107},
                  {-36,70},{-36.9286,70},{-36.9286,65.2}},
                                    color={0,0,127}));
          connect(Ch4.y,Charge_Sum. u[4]) annotation (Line(points={{-41,123.7},{-41,116},
                  {-36,116},{-36,70},{-37.1,70},{-37.1,65.2}},
                                       color={0,0,127}));
          connect(Ch5.y,Charge_Sum. u[5]) annotation (Line(points={{-30.3,117},{-36,117},
                  {-36,70},{-37.1857,70},{-37.1857,65.2}},
                                    color={0,0,127}));
          connect(Ch6.y,Charge_Sum. u[6]) annotation (Line(points={{-30.3,107},{-36,107},
                  {-36,70},{-37.2714,70},{-37.2714,65.2}},
                                    color={0,0,127}));
          connect(Ch7.y,Charge_Sum. u[7]) annotation (Line(points={{-30.3,97},{-36,97},
                  {-36,70},{-37.3571,70},{-37.3571,65.2}},
                                    color={0,0,127}));
          connect(Ch3.y,Charge_Sum. u[3]) annotation (Line(points={{-53.7,97},{-36,97},
                  {-36,70},{-37.0143,70},{-37.0143,65.2}},
                                    color={0,0,127}));
          connect(Ant1.y, Anticipatory_Signals.u[1]) annotation (Line(points={{2.3,9},{
                  18,9},{18,-4.8},{17.0286,-4.8}}, color={0,0,127}));
          connect(Ant2.y, Anticipatory_Signals.u[2]) annotation (Line(points={{2.3,19},
                  {16.6857,19},{16.6857,-4.8}}, color={0,0,127}));
          connect(Ant3.y, Anticipatory_Signals.u[3]) annotation (Line(points={{2.3,29},
                  {16.3429,29},{16.3429,-4.8}}, color={0,0,127}));
          connect(Ant4.y, Anticipatory_Signals.u[4]) annotation (Line(points={{5,31.7},
                  {5,28},{16,28},{16,-4.8}}, color={0,0,127}));
          connect(Ant5.y, Anticipatory_Signals.u[5])
            annotation (Line(points={{15,31.7},{15.6571,-4.8}}, color={0,0,127}));
          connect(Ant6.y, Anticipatory_Signals.u[6]) annotation (Line(points={{25,31.7},
                  {25,28},{15.3143,28},{15.3143,-4.8}}, color={0,0,127}));
          connect(Ant7.y, Anticipatory_Signals.u[7]) annotation (Line(points={{29.7,29},
                  {14,29},{14,-4.8},{14.9714,-4.8}}, color={0,0,127}));
          connect(Ch14.y, Charge_Sum.u[8]) annotation (Line(points={{-7.7,97},{2,97},{2,
                  65.2},{-37.4429,65.2}}, color={0,0,127}));
          connect(Ch8.y, Charge_Sum.u[14]) annotation (Line(points={{15.7,97},{6,97},{6,
                  65.2},{-37.9571,65.2}}, color={0,0,127}));
          connect(Ch9.y, Charge_Sum.u[13]) annotation (Line(points={{15.7,107},{4,107},
                  {4,65.2},{-37.8714,65.2}}, color={0,0,127}));
          connect(Ch10.y, Charge_Sum.u[12]) annotation (Line(points={{15.7,117},{4,117},
                  {4,65.2},{-37.7857,65.2}}, color={0,0,127}));
          connect(Ch11.y, Charge_Sum.u[11]) annotation (Line(points={{5,123.7},{4,123.7},
                  {4,65.2},{-37.7,65.2}}, color={0,0,127}));
          connect(Ch12.y, Charge_Sum.u[10]) annotation (Line(points={{-7.7,117},{4,117},
                  {4,65.2},{-37.6143,65.2}}, color={0,0,127}));
          connect(Ch13.y, Charge_Sum.u[9]) annotation (Line(points={{-7.7,107},{4,107},
                  {4,65.2},{-37.5286,65.2}}, color={0,0,127}));
          connect(Ch28.y, Charge_Sum.u[15]) annotation (Line(points={{66.3,93},{74,93},
                  {74,65.2},{-38.0429,65.2}}, color={0,0,127}));
          connect(Ch27.y, Charge_Sum.u[16]) annotation (Line(points={{66.3,103},{
                  -38.1286,103},{-38.1286,65.2}}, color={0,0,127}));
          connect(Ch26.y, Charge_Sum.u[17]) annotation (Line(points={{66.3,113},{82,113},
                  {82,65.2},{-38.2143,65.2}}, color={0,0,127}));
          connect(Ch25.y, Charge_Sum.u[18]) annotation (Line(points={{79,119.7},{79,
                  65.2},{-38.3,65.2}}, color={0,0,127}));
          connect(Ch22.y, Charge_Sum.u[19]) annotation (Line(points={{89.7,93},{78,93},
                  {78,65.2},{-38.3857,65.2}}, color={0,0,127}));
          connect(Ch23.y, Charge_Sum.u[20]) annotation (Line(points={{89.7,103},{76,103},
                  {76,65.2},{-38.4714,65.2}}, color={0,0,127}));
          connect(Ch24.y, Charge_Sum.u[21]) annotation (Line(points={{89.7,113},{78,113},
                  {78,65.2},{-38.5571,65.2}}, color={0,0,127}));
          connect(Ch15.y, Charge_Sum.u[22]) annotation (Line(points={{-104.3,97},{-114,
                  97},{-114,65.2},{-38.6429,65.2}}, color={0,0,127}));
          connect(Ch16.y, Charge_Sum.u[23]) annotation (Line(points={{-104.3,107},{-118,
                  107},{-118,65.2},{-38.7286,65.2}}, color={0,0,127}));
          connect(Ch17.y, Charge_Sum.u[24]) annotation (Line(points={{-104.3,117},{-118,
                  117},{-118,62},{-38.8143,62},{-38.8143,65.2}}, color={0,0,127}));
          connect(Ch18.y, Charge_Sum.u[25]) annotation (Line(points={{-115,123.7},{-115,
                  65.2},{-38.9,65.2}}, color={0,0,127}));
          connect(Ch19.y, Charge_Sum.u[26]) annotation (Line(points={{-127.7,117},{-116,
                  117},{-116,65.2},{-38.9857,65.2}}, color={0,0,127}));
          connect(Ch20.y, Charge_Sum.u[27]) annotation (Line(points={{-127.7,107},{-114,
                  107},{-114,65.2},{-39.0714,65.2}}, color={0,0,127}));
          connect(Ch21.y, Charge_Sum.u[28]) annotation (Line(points={{-127.7,97},{-114,
                  97},{-114,65.2},{-39.1571,65.2}}, color={0,0,127}));
          connect(Net_Demand.u1, NomPower.y) annotation (Line(points={{-28,-14},{-28,40},
                  {-26,40},{-26,43},{-63.5,43}}, color={0,0,127}));
        annotation(defaultComponentName="SC", experiment(StopTime=3600,
                __Dymola_NumberOfIntervals=3600),
            Diagram(coordinateSystem(extent={{-160,-100},{160,180}})),
            Icon(coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
                          Text(
                  extent={{-94,82},{94,74}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fillColor={255,255,237},
                  fillPattern=FillPattern.Solid,
                  textString="Input Setpoints: Modelica Path")}));
        end Demand_Curve_Generator;

        model Economic_Sim_IPCO_July
          extends BaseClasses.Partial_ControlSystem;

          extends NHES.Icons.DummyIcon;

          parameter Modelica.Units.SI.Time Ramp_Time=300 "Time allowed for demand ramp";
          parameter Modelica.Units.SI.Power Q_nom=52000000;

          parameter Modelica.Units.SI.Time Interval_length = 3600;
          parameter Integer intervals_to_steady_state = 2;
          parameter Integer demand_intervals = 24*5;
          Modelica.Units.SI.Power netDemand_Internal;
          Modelica.Units.SI.Time t_track;
          Modelica.Units.SI.Time t_remain;
          Integer count(start = 1);
          Real Anticipatory_Internal;
          /* Demand intervals need to have nominal power placed in during intervals to steady state, and then add 1 at the end for the final 
  0.5*Ramp_Time length of the useful simulation as the reactor would continue to a new power level.*/
          parameter Modelica.Units.SI.Power Demand_Input[demand_intervals + intervals_to_steady_state+1] = 1e6*{52.0,52.0,
          56.6,57.5,52.8,47.8,43.1,44.4,43.1,42.4,41.7,41.5,43.2,43.6,45.5,48.2,50.4,54.5,58.3,59.9,60.9,61.3,62.3,61.5,60.4,58.6,
          56.6,53.5,50.6,46.6,43.0,41.4,39.9,38.2,37.3,38.8,40.5,41.1,42.7,43.2,49.9,47.4,50.0,52.7,54.8,56.0,54.8,54.7,56.1,56.0,
          52.9,49.2,44.8,41.6,41.2,40.2,38.6,38.3,37.7,39.0,41.3,41.7,41.7,42.9,44.5,46.9,47.8,48.6,49.9,51.3,51.6,51.4,52.2,52.5,
          49.9,47.6,43.9,40.9,38.4,36.7,36.3,37.1,37.4,37.5,38.2,38.3,39.9,42.6,45.1,47.9,50.4,52.6,53.9,55.7,56.8,57.0,56.7,53.4,
          51.3,48.7,45.3,43.2,41.4,39.8,38.9,38.4,37.8,38.2,38.2,38.1,39.3,41.0,43.5,46.7,49.8,52.7,55.4,58.0,60.2,61.1,61.0,59.6,56.6};
          Modelica.Blocks.Sources.RealExpression
                                   Anticipatory_Signals(y=Anticipatory_Internal)        annotation (Placement(
                transformation(
                extent={{6,-6},{-6,6}},
                rotation=90,
                origin={16,0})));
          Modelica.Blocks.Sources.RealExpression
                                    Net_Demand(y=netDemand_Internal)
            annotation (Placement(transformation(extent={{10,10},{-10,-10}},
                rotation=90,
                origin={-44,-28})));
        initial equation
          Anticipatory_Internal = 0;
          t_track = 0;
        equation
          //1
          der(t_track) = 1;
          //2

          //3
          t_remain = Interval_length - t_track;
          when
              (t_track >=Interval_length) then
            //4
            count = pre(count) +1;
            reinit(t_track,0);
          end when;
          //5
          if
            (t_track >= Interval_length - 0.5*Ramp_Time) then
            netDemand_Internal = 0.5*(1+t_remain/(0.5*Ramp_Time))*Demand_Input[count] + 0.5*(1-t_remain/(0.5*Ramp_Time))*Demand_Input[count+1];
            elseif
                  (t_track <= 0.5*Ramp_Time and count > 1) then
            netDemand_Internal = 0.5*(1-t_track/(0.5*Ramp_Time))*Demand_Input[count-1] + 0.5*(1+t_track/(0.5*Ramp_Time))*Demand_Input[count];
            else
            netDemand_Internal = Demand_Input[count];
          end if;

          //6
          if
            (netDemand_Internal > Q_nom and t_track > Interval_length-Ramp_Time or t_track < Ramp_Time and netDemand_Internal > Q_nom) then
            der(Anticipatory_Internal) = 1-Anticipatory_Internal;
          else
            der(Anticipatory_Internal) = -Anticipatory_Internal;
          end if;

        annotation(defaultComponentName="SC", experiment(StopTime=3600,
                __Dymola_NumberOfIntervals=3600),
            Diagram(coordinateSystem(extent={{-160,-100},{160,180}})),
            Icon(coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
                          Text(
                  extent={{-94,82},{94,74}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fillColor={255,255,237},
                  fillPattern=FillPattern.Solid,
                  textString="Input Setpoints: Modelica Path")}));
        end Economic_Sim_IPCO_July;
        annotation (Documentation(info="<html>
<p>Components to aid top level models. </p>
</html>"));
      end Components;

      package Data

        model Data_Dummy

          extends BaseClasses.Record_Data;

          annotation (
            defaultComponentName="data",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                  lineColor={0,0,0},
                  extent={{-100,-90},{100,-70}},
                  textString="changeMe")}),
            Diagram(coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
</html>"));
        end Data_Dummy;

        model Data_Cycle

          extends BaseClasses.Record_Data;
          parameter Modelica.Units.SI.Time Charge_Length = 17500; //Note this is adjusted in Trapezoid as Charge_Length-Charge_Ramp, same for discharge
          parameter Modelica.Units.SI.Time Charge_Ramp = 500;
          parameter Modelica.Units.SI.Time Charge_Delay = 9600;
          parameter Modelica.Units.SI.Time Cycle_Period = 86400;
          parameter Modelica.Units.SI.Time Discharge_Length = 22500;
          parameter Modelica.Units.SI.Time Discharge_Ramp = 1500;
          parameter Modelica.Units.SI.Time Discharge_Delay = 36000;

          parameter Modelica.Units.SI.Pressure P_Turbine_Reference = 37.6e5;
          parameter Modelica.Units.SI.PressureDifference dP_FCV_Reference = 2e5;
          parameter Modelica.Units.SI.MassFlowRate Feed_Flow_Nominal = 68.4;
          parameter Modelica.Units.SI.MassFlowRate Cycle_Bypass_Mflow_Reference = 32;

          annotation (
            defaultComponentName="data",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                  lineColor={0,0,0},
                  extent={{-100,-90},{100,-70}},
                  textString="changeMe")}),
            Diagram(coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
</html>"));
        end Data_Cycle;

        model Data_Modal

          extends BaseClasses.Record_Data;
          parameter Modelica.Units.SI.Time Charge_Length = 17500; //Note this is adjusted in Trapezoid as Charge_Length-Charge_Ramp, same for discharge
          parameter Modelica.Units.SI.Time Charge_Ramp = 500;
          parameter Modelica.Units.SI.Time Charge_Delay = 9600;
          parameter Modelica.Units.SI.Time Cycle_Period = 86400;
          parameter Modelica.Units.SI.Time Discharge_Length = 22500;
          parameter Modelica.Units.SI.Time Discharge_Ramp = 1500;
          parameter Modelica.Units.SI.Time Discharge_Delay = 36000;

          parameter Modelica.Units.SI.Pressure P_Turbine_Reference = 37.6e5;
          parameter Modelica.Units.SI.PressureDifference dP_FCV_Reference = 2e5;
          parameter Modelica.Units.SI.MassFlowRate Feed_Flow_Nominal = 68.4;
          parameter Modelica.Units.SI.MassFlowRate Cycle_Bypass_Mflow_Reference = 32;
          parameter Modelica.Units.SI.Power Q_RX_Nominal = 162e6;
          parameter Modelica.Units.SI.Power Q_Turb_Nominal = 52e6;
          parameter Modelica.Units.SI.Power Q_Rx_Nom = 160e6;

          annotation (
            defaultComponentName="data",
            Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                  lineColor={0,0,0},
                  extent={{-100,-90},{100,-70}},
                  textString="changeMe")}),
            Diagram(coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
</html>"));
        end Data_Modal;
      end Data;

      package BaseClasses
        extends TRANSFORM.Icons.BasesPackage;

        partial model Partial_SubSystem

          extends NHES.Systems.BaseClasses.Partial_SubSystem;

          extends Record_SubSystem;

          replaceable Partial_ControlSystem CS annotation (choicesAllMatching=true,
              Placement(transformation(extent={{-18,122},{-2,138}})));
          replaceable Partial_EventDriver ED annotation (choicesAllMatching=true,
              Placement(transformation(extent={{2,122},{18,138}})));
          replaceable Record_Data data
            annotation (Placement(transformation(extent={{42,122},{58,138}})));

          SignalSubBus_ActuatorInput actuatorBus
            annotation (Placement(transformation(extent={{10,80},{50,120}}),
                iconTransformation(extent={{10,80},{50,120}})));
          SignalSubBus_SensorOutput sensorBus
            annotation (Placement(transformation(extent={{-50,80},{-10,120}}),
                iconTransformation(extent={{-50,80},{-10,120}})));

        equation
          connect(sensorBus, ED.sensorBus) annotation (Line(
              points={{-30,100},{-16,100},{7.6,100},{7.6,122}},
              color={239,82,82},
              pattern=LinePattern.Dash,
              thickness=0.5));
          connect(sensorBus, CS.sensorBus) annotation (Line(
              points={{-30,100},{-12.4,100},{-12.4,122}},
              color={239,82,82},
              pattern=LinePattern.Dash,
              thickness=0.5));
          connect(actuatorBus, CS.actuatorBus) annotation (Line(
              points={{30,100},{12,100},{-7.6,100},{-7.6,122}},
              color={111,216,99},
              pattern=LinePattern.Dash,
              thickness=0.5));
          connect(actuatorBus, ED.actuatorBus) annotation (Line(
              points={{30,100},{20,100},{12.4,100},{12.4,122}},
              color={111,216,99},
              pattern=LinePattern.Dash,
              thickness=0.5));

          annotation (
            defaultComponentName="changeMe",
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                    100,140}})));
        end Partial_SubSystem;

        partial model Partial_SubSystem_A

          extends Partial_SubSystem;

          extends Record_SubSystem_A;

          annotation (
            defaultComponentName="changeMe",
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    140}})));
        end Partial_SubSystem_A;

        partial model Record_Data

          extends Modelica.Icons.Record;

          annotation (defaultComponentName="data",
          Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end Record_Data;

        partial record Record_SubSystem

          annotation (defaultComponentName="subsystem",
          Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end Record_SubSystem;

        partial record Record_SubSystem_A

          extends Record_SubSystem;

          annotation (defaultComponentName="subsystem",
          Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end Record_SubSystem_A;

        partial model Partial_ControlSystem

          extends NHES.Systems.BaseClasses.Partial_ControlSystem;

          SignalSubBus_ActuatorInput actuatorBus
            annotation (Placement(transformation(extent={{10,-120},{50,-80}}),
                iconTransformation(extent={{10,-120},{50,-80}})));
          SignalSubBus_SensorOutput sensorBus
            annotation (Placement(transformation(extent={{-50,-120},{-10,-80}}),
                iconTransformation(extent={{-50,-120},{-10,-80}})));

          annotation (
            defaultComponentName="CS",
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                    100,100}})));

        end Partial_ControlSystem;

        partial model Partial_EventDriver

          extends NHES.Systems.BaseClasses.Partial_EventDriver;

          SignalSubBus_ActuatorInput actuatorBus
            annotation (Placement(transformation(extent={{10,-120},{50,-80}}),
                iconTransformation(extent={{10,-120},{50,-80}})));
          SignalSubBus_SensorOutput sensorBus
            annotation (Placement(transformation(extent={{-50,-120},{-10,-80}}),
                iconTransformation(extent={{-50,-120},{-10,-80}})));

          annotation (
            defaultComponentName="ED",
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})));

        end Partial_EventDriver;

        expandable connector SignalSubBus_ActuatorInput

          extends NHES.Systems.Interfaces.SignalSubBus_ActuatorInput;

          annotation (defaultComponentName="actuatorBus",
          Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end SignalSubBus_ActuatorInput;

        expandable connector SignalSubBus_SensorOutput

          extends NHES.Systems.Interfaces.SignalSubBus_SensorOutput;

          annotation (defaultComponentName="sensorBus",
          Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end SignalSubBus_SensorOutput;

        block Peaking_Operational_Logic
          "Linear transfer function with evaluation threshold"
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.Power Q_nom=53.5e6;
          parameter Modelica.Units.SI.Time Ti_Charge=1;
          parameter Modelica.Units.SI.Time Ti_Discharge=1;
          parameter Modelica.Units.SI.Time Ti_Feed=1;
          Modelica.Blocks.Interfaces.RealInput Demand "Connector of Real input signal"
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealOutput TBV_Demand
            "Connector of Real output signal" annotation (Placement(transformation(
                  extent={{100,26},{138,64}}),  iconTransformation(extent={{100,26},{
                    138,64}})));
          Modelica.Blocks.Interfaces.RealInput Power "Connector of Real input signal"
            annotation (Placement(transformation(extent={{-142,-60},{-102,-20}})));
          Modelica.Blocks.Interfaces.RealOutput DFV_Demand
                                                    "Connector of Real output signal"
            annotation (Placement(transformation(extent={{100,-50},{138,-12}}),
                iconTransformation(extent={{100,-48},{138,-10}})));

          Modelica.Blocks.Interfaces.BooleanOutput
                                                Charge
            "Connector of Real output signal" annotation (Placement(transformation(
                  extent={{100,-8},{138,30}}),  iconTransformation(extent={{100,-12},{138,
                    26}})));
          Modelica.Blocks.Interfaces.BooleanOutput
                                                Discharge
                                                    "Connector of Real output signal"
            annotation (Placement(transformation(extent={{100,-84},{138,-46}}),
                iconTransformation(extent={{100,-86},{138,-48}})));
          Modelica.Blocks.Interfaces.RealOutput TBV_Power
            "Connector of Real output signal" annotation (Placement(transformation(
                  extent={{100,64},{138,102}}),iconTransformation(
                extent={{-19,-19},{19,19}},
                rotation=90,
                origin={-1,119})));
          Modelica.Blocks.Interfaces.RealOutput DFV_Power
            "Connector of Real output signal" annotation (Placement(transformation(
                  extent={{198,18},{236,56}}), iconTransformation(
                extent={{19,-19},{-19,19}},
                rotation=90,
                origin={-1,-119})));
          Modelica.Blocks.Interfaces.RealOutput FCV_Power
            "Connector of Real output signal" annotation (Placement(transformation(
                  extent={{-28,-22},{10,16}}), iconTransformation(extent={{-100,28},{-138,
                    66}})));
          Modelica.Blocks.Interfaces.BooleanOutput
                                                Nominal
            "Connector of Real output signal" annotation (Placement(transformation(
                  extent={{-28,-56},{10,-18}}), iconTransformation(extent={{-100,66},{-138,
                    104}})));
          Modelica.Blocks.Interfaces.RealOutput FCV_Demand
            "Connector of Real output signal" annotation (Placement(transformation(
                  extent={{-28,16},{10,54}}),  iconTransformation(
                extent={{-19,-19},{19,19}},
                rotation=90,
                origin={-81,119})));
        initial equation
          DFV_Power = 0;
          TBV_Power = 0;
          DFV_Demand = 0;
          TBV_Demand = 0;
          FCV_Power =0;
          FCV_Demand = 0;
        equation
          if
            (Demand > Q_nom) then
            Charge = false;
            Discharge = true;
            Nominal = false;
            Ti_Discharge*der(DFV_Demand) = Demand - DFV_Demand;
            Ti_Charge*der(TBV_Demand) = -TBV_Demand;
            Ti_Charge*der(TBV_Power) = -TBV_Power;
            Ti_Discharge*der(DFV_Power) = Power -DFV_Power;
            Ti_Feed*der(FCV_Demand) = -FCV_Demand;
            Ti_Feed*der(FCV_Power) = -FCV_Power;
          elseif
                (Demand < Q_nom) then
            Charge = true;
            Discharge = false;
            Nominal = false;
            Ti_Discharge*der(DFV_Demand) = -DFV_Demand;
            Ti_Charge*der(TBV_Demand) = Demand-TBV_Demand;
            Ti_Discharge*der(DFV_Power) = -DFV_Power;
            Ti_Charge*der(TBV_Power) =  Power-TBV_Power;
            Ti_Feed*der(FCV_Demand) = -FCV_Demand;
            Ti_Feed*der(FCV_Power) = -FCV_Power;
          else
            Charge = false;
            Discharge = false;
            Nominal = true;
            Ti_Discharge*der(DFV_Demand) = -DFV_Demand;
            Ti_Charge*der(TBV_Demand) = -TBV_Demand;
            Ti_Discharge*der(DFV_Power) = -DFV_Power;
            Ti_Charge*der(TBV_Power) = -TBV_Power;
            Ti_Feed*der(FCV_Demand) = Demand - FCV_Demand;
            Ti_Feed*der(FCV_Power) = Power - FCV_Power;

          end if;

          annotation (Documentation(info="<html>
<p>
Block has one continuous Real input and one continuous Real output signal.
</p>
</html>"));
        end Peaking_Operational_Logic;
      end BaseClasses;

      package StagebyStageTurbine

        package BaseClasses

          model TRANSFORMMoistureSeparator_MIKK
            extends TRANSFORM.Fluid.Volumes.BaseClasses.PartialSimpleVolume(
              redeclare replaceable package Medium =
                  Modelica.Media.Interfaces.PartialTwoPhaseMedium,
              mb=port_a.m_flow + port_b.m_flow + port_Liquid.m_flow,
              Ub=port_a.m_flow*actualStream(port_a.h_outflow) + port_b.m_flow*
                  actualStream(port_b.h_outflow) + Q_flow_internal + Q_gen + port_Liquid.m_flow
                  *actualStream(port_Liquid.h_outflow),
              mXib=port_a.m_flow*actualStream(port_a.Xi_outflow) + port_b.m_flow*
                  actualStream(port_b.Xi_outflow) + port_Liquid.m_flow*actualStream(
                  port_Liquid.Xi_outflow),
              mCb=port_a.m_flow*actualStream(port_a.C_outflow) + port_b.m_flow*
                  actualStream(port_b.C_outflow) + mC_flow_internal + mC_gen +
                  port_Liquid.m_flow*actualStream(port_Liquid.C_outflow));

            TRANSFORM.Fluid.Interfaces.FluidPort_Flow port_Liquid(redeclare
                package Medium =
                         Medium, p(start=p_start)) annotation (Placement(transformation(
                    extent={{-50,-50},{-30,-30}}), iconTransformation(extent={{-50,-50},{-30,
                      -30}})));

            parameter Modelica.Units.SI.Efficiency eta_sep(
              min=0,
              max=1) = 0.99 "Separation efficiency";

            Modelica.Units.SI.MassFlowRate m_cond;
            Modelica.Units.SI.MassFraction x_abs;
            Modelica.Units.SI.Pressure p_crit=Medium.fluidConstants[1].criticalPressure;
            Modelica.Units.SI.SpecificEnthalpy h_lsat;
            Modelica.Units.SI.SpecificEnthalpy h_vsat;
            Modelica.Units.SI.SpecificEnthalpy enthalpy_usedfor_inlet;

          equation

            x_abs = noEvent(if medium.p/p_crit < 1.0 then max(0.0, min(1.0, (medium.h -
              h_lsat)/max(h_vsat - h_lsat, 1e-6))) else 1.0) "Steam quality";
            h_lsat = Medium.specificEnthalpy(Medium.setBubbleState(Medium.setSat_p(medium.p)));
            h_vsat = Medium.specificEnthalpy(Medium.setDewState(Medium.setSat_p(medium.p)));
            assert(x_abs > 0, "Steam separator is full with liquid.");

            m_cond = -max(1e-6, 1 - x_abs)*max({port_a.m_flow,port_b.m_flow,0})*eta_sep;

            port_Liquid.m_flow = m_cond;
            port_Liquid.h_outflow = h_lsat;
            port_Liquid.Xi_outflow = medium.Xi;
            port_Liquid.C_outflow = C;

            port_b.h_outflow = (medium.h-(1-x_abs)*eta_sep*h_lsat)/(1-(1-x_abs)*eta_sep);
           // port_b.h_outflow = h_lsat + eta_sep*(h_vsat-h_lsat);
            port_b.Xi_outflow = medium.Xi;
            port_b.p = medium.p;
            port_b.C_outflow = C;

            port_a.p = medium.p + medium.d*g_n*0.5*geometry.dheight;
            port_a.h_outflow = medium.h;
            port_a.Xi_outflow = medium.Xi;
            port_a.C_outflow = C;

            enthalpy_usedfor_inlet = actualStream(port_a.h_outflow);

            annotation (defaultComponentName="separator", Documentation(info="<html>
<p>Model updated by Daniel Mikkelson (dmmikkel@ncsu.edu, daniel.mikkelson@inl.gov) to avoid breakdowns in situations where x_abs &gt; eta_sep in previous model. </p>
<p>Model based on the equations m_steam_in + m_steam_out + m_liq = dm/dt = 0 at steady state and m_steam_in*h_steam_in + m_steam_out*h_steam_out + m_liq*h_liq = m*du/dt  = 0 at steady state. </p>
<p>Eta_sep is now defined as the fraction of liquid present removed by the moisture separator. Given this definition and h_liq = h_f, the expression for h_steam_out is found based on current moisture separator properties and the mass flow rate of liquid. </p>
<p>The system tends towards equilibrium at x_abs = (h_steam_in - h_f)/(h_g-h_f). </p>
</html>"));
          end TRANSFORMMoistureSeparator_MIKK;

          model Turbine_Inlet
            "Turbine inlet node that allows for a general fluid flow port to transition into the multi-velocity port useful for internal turbine modeling."
            replaceable package medium = Modelica.Media.Water.StandardWater;
            flow Modelica.Units.SI.MassFlowRate mdot;
            parameter Boolean Vels_in = false;
            FluidFlow Turb_flow(redeclare package Medium = medium) annotation (Placement(
                  transformation(extent={{90,-10},{110,10}}), iconTransformation(extent={
                      {84,-16},{114,14}})));
            TRANSFORM.Fluid.Interfaces.FluidPort_Flow Pipe_flow(redeclare
                package Medium =                                                           medium)
              annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
            Modelica.Blocks.Interfaces.RealInput v_rin if Vels_in annotation (Placement(transformation(
                    extent={{-32,32},{8,72}}), iconTransformation(
                  extent={{20,-20},{-20,20}},
                  rotation=270,
                  origin={58,-46})));
            Modelica.Blocks.Interfaces.RealInput v_thein if Vels_in annotation (Placement(transformation(
                    extent={{-32,32},{8,72}}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=270,
                  origin={56,46})));
          protected
            Modelica.Blocks.Interfaces.RealInput v_rinternal;
            Modelica.Blocks.Interfaces.RealInput v_theinternal;
          equation
            Pipe_flow.m_flow + Turb_flow.m_flow = 0 "Mass conservation";
            mdot=Pipe_flow.m_flow;
            if not Vels_in then
              v_rinternal = 0;
              v_theinternal = 0;
            end if;
            if
              (Turb_flow.m_flow<0 and not Vels_in) then
            Turb_flow.v_r = 0 "Assumption of no radial velocity outside of the turbine";
            Turb_flow.v_theta = 0 "Assumption of no rotational velocity outside of the turbine";
            elseif
                  (Turb_flow.m_flow>0) then
              Turb_flow.v_r = inStream(Turb_flow.v_r);
              Turb_flow.v_theta = inStream(Turb_flow.v_theta);
            else
              Turb_flow.v_r = v_rinternal;
              Turb_flow.v_theta=v_theinternal;
            end if;
            Turb_flow.p = Pipe_flow.p;
            Pipe_flow.Xi_outflow = inStream(Turb_flow.Xi_outflow);
            Turb_flow.Xi_outflow = inStream(Pipe_flow.Xi_outflow);
            Pipe_flow.C_outflow = inStream(Turb_flow.C_outflow);
            Turb_flow.C_outflow = inStream(Pipe_flow.C_outflow);
            Turb_flow.h_outflow = inStream(Pipe_flow.h_outflow);
            Pipe_flow.h_outflow = inStream(Turb_flow.h_outflow);
            connect(v_rin,v_rinternal);
            connect(v_thein,v_theinternal);
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Rectangle(
                    extent={{-100,26},{0,-26}},
                    lineColor={28,108,200},
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid), Rectangle(
                    extent={{0,26},{100,-26}},
                    lineColor={28,108,200},
                    fillColor={85,170,255},
                    fillPattern=FillPattern.Solid)}),                      Diagram(
                  coordinateSystem(preserveAspectRatio=false)));
          end Turbine_Inlet;

          model Turbine_Outlet
            "Turbine outlet node that allows for transition back from multi-velocity port to a general fluid port. Essentially, the model kills the non-1-dimensional velocities."
            replaceable package medium = Modelica.Media.Water.StandardWater;
            parameter Boolean Vels_out = false;
            FluidFlow Turb_flow(redeclare package Medium = medium) annotation (Placement(
                  transformation(extent={{-110,-10},{-90,10}}), iconTransformation(extent=
                     {{-114,-14},{-84,16}})));
            TRANSFORM.Fluid.Interfaces.FluidPort_Flow Pipe_flow(redeclare
                package Medium =                                                           medium)
              annotation (Placement(transformation(extent={{90,-10},{110,10}})));
                Modelica.Blocks.Interfaces.RealOutput v_rout
                                                            if Vels_out annotation (Placement(transformation(
                    extent={{-32,32},{8,72}}), iconTransformation(
                  extent={{-20,-20},{20,20}},
                  rotation=270,
                  origin={58,-46})));
            Modelica.Blocks.Interfaces.RealOutput v_theout
                                                          if Vels_out annotation (Placement(transformation(
                    extent={{-32,32},{8,72}}), iconTransformation(
                  extent={{20,-20},{-20,20}},
                  rotation=270,
                  origin={56,46})));
          protected
            Modelica.Blocks.Interfaces.RealInput v_rinternal;
            Modelica.Blocks.Interfaces.RealInput v_theinternal;
          equation
            Pipe_flow.m_flow + Turb_flow.m_flow = 0 "Mass conservation";
            Pipe_flow.p = Turb_flow.p;
            v_rinternal = Turb_flow.v_r;
            v_theinternal = Turb_flow.v_theta;
            if
              (Turb_flow.m_flow<0) then
            Turb_flow.v_r = 0 "Assumption of no radial velocity outside of the turbine";
            Turb_flow.v_theta = 0 "Assumption of no rotational velocity outside of the turbine";
            else
              Turb_flow.v_r = inStream(Turb_flow.v_r);
              Turb_flow.v_theta = inStream(Turb_flow.v_theta);
            end if;
            Pipe_flow.Xi_outflow = inStream(Turb_flow.Xi_outflow);
            Turb_flow.Xi_outflow = inStream(Pipe_flow.Xi_outflow);
            Pipe_flow.C_outflow = inStream(Turb_flow.C_outflow);
            Turb_flow.C_outflow = inStream(Pipe_flow.C_outflow);
            Turb_flow.h_outflow = inStream(Pipe_flow.h_outflow);
            Pipe_flow.h_outflow = inStream(Turb_flow.h_outflow);
            connect(v_theout, v_theinternal);
            connect(v_rout, v_rinternal);
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Rectangle(
                    extent={{-100,26},{0,-26}},
                    lineColor={28,108,200},
                    fillColor={85,170,255},
                    fillPattern=FillPattern.Solid), Rectangle(
                    extent={{0,26},{100,-26}},
                    lineColor={28,108,200},
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid)}),                      Diagram(
                  coordinateSystem(preserveAspectRatio=false)));
          end Turbine_Outlet;

          partial model PartialTeeJunction_Cyl
            "Base class for a splitting/joining component with three ports"
            import Modelica.Fluid.Types;
            import Modelica.Fluid.Types.PortFlowDirection;

            replaceable package Medium=Modelica.Media.Interfaces.PartialMedium
              "Medium in the component"
              annotation (choicesAllMatching=true);

            FluidFlow port_1(redeclare package Medium = Medium, m_flow(min=if (
                    portFlowDirection_1 == PortFlowDirection.Entering) then 0.0 else -
                    Modelica.Constants.inf, max=if (portFlowDirection_1 ==
                    PortFlowDirection.Leaving) then 0.0 else Modelica.Constants.inf))
              annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
            FluidFlow port_2(redeclare package Medium = Medium, m_flow(min=if (
                    portFlowDirection_2 == PortFlowDirection.Entering) then 0.0 else -
                    Modelica.Constants.inf, max=if (portFlowDirection_2 ==
                    PortFlowDirection.Leaving) then 0.0 else Modelica.Constants.inf))
              annotation (Placement(transformation(extent={{90,-10},{110,10}})));
            FluidFlow port_3(redeclare package Medium = Medium, m_flow(min=if (
                    portFlowDirection_3 == PortFlowDirection.Entering) then 0.0 else -
                    Modelica.Constants.inf, max=if (portFlowDirection_3 ==
                    PortFlowDirection.Leaving) then 0.0 else Modelica.Constants.inf))
              annotation (Placement(transformation(extent={{-10,90},{10,110}})));

          protected
            parameter PortFlowDirection portFlowDirection_1=PortFlowDirection.Bidirectional
              "Flow direction for port_1"
             annotation(Dialog(tab="Advanced"));
            parameter PortFlowDirection portFlowDirection_2=PortFlowDirection.Bidirectional
              "Flow direction for port_2"
             annotation(Dialog(tab="Advanced"));
            parameter PortFlowDirection portFlowDirection_3=PortFlowDirection.Bidirectional
              "Flow direction for port_3"
             annotation(Dialog(tab="Advanced"));

            annotation(Icon(coordinateSystem(
                  preserveAspectRatio=true,
                  extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                    extent={{-100,44},{100,-44}},
                    fillPattern=FillPattern.HorizontalCylinder,
                    fillColor={0,127,255}),
                  Text(
                    extent={{-150,-89},{150,-129}},
                    lineColor={0,0,255},
                    textString="%name"),
                  Rectangle(
                    extent={{-44,100},{44,44}},
                    fillPattern=FillPattern.VerticalCylinder,
                    fillColor={0,127,255}),
                  Rectangle(
                    extent={{-22,82},{21,-4}},
                    fillPattern=FillPattern.Solid,
                    fillColor={0,128,255},
                    pattern=LinePattern.None)}));
          end PartialTeeJunction_Cyl;

          connector FluidFlow
            "Interface for quasi one-dimensional fluid flow in a piping network (incompressible or compressible, one or more phases, one or more substances)"

            replaceable package Medium =
                Modelica.Media.Interfaces.PartialMedium
              "Medium model" annotation (choicesAllMatching=true);
              //  parameter Modelica.SIunits.Area A "flow area";
            flow Modelica.Units.SI.MassFlowRate m_flow
              "Translational velocity into the component.";
            stream Modelica.Units.SI.Velocity v_r;
            stream Modelica.Units.SI.Velocity v_theta;
           // Medium.MassFlowRate m_flow;
            Medium.AbsolutePressure p "Thermodynamic pressure in the connection point";
            stream Medium.SpecificEnthalpy h_outflow
              "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
            stream Medium.MassFraction Xi_outflow[Medium.nXi]
              "Independent mixture mass fractions m_i/m close to the connection point if m_flow < 0";
            stream Medium.ExtraProperty C_outflow[Medium.nC]
              "Properties c_i/m close to the connection point if m_flow < 0";

              annotation (defaultComponentName="Turb_port",Icon(graphics={Text(extent={{-150,110},{150,50}},
                      textString="%name"),
                  Ellipse(
                    extent={{-60,-60},{60,60}},
                    lineColor={28,108,200},
                    fillColor={85,170,255},
                    fillPattern=FillPattern.Sphere),
                  Ellipse(
                    extent={{26,26},{-28,-28}},
                    lineColor={28,108,200},
                    fillPattern=FillPattern.Sphere,
                    fillColor={0,0,103}),
                  Line(
                    points={{-160,80}},
                    color={102,44,145},
                    arrow={Arrow.None,Arrow.Filled})}));
          end FluidFlow;

          connector Torque "Connector of torque that communicates rotational speed"
            Modelica.Units.SI.AngularVelocity w;
            flow Modelica.Units.SI.Torque tau;
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Ellipse(
                    extent={{-80,80},{80,-80}},
                    lineColor={28,108,200},
                    fillColor={181,181,181},
                    fillPattern=FillPattern.Solid), Text(
                    extent={{-40,24},{38,-22}},
                    lineColor={0,0,0},
                    fillColor={181,181,181},
                    fillPattern=FillPattern.None,
                    textString="Tau")}),                                   Diagram(
                  coordinateSystem(preserveAspectRatio=false)));
          end Torque;

          package CylindricalSupport

            partial model PartialSource "Partial component source with one fluid connector"
                import Modelica.Constants;
                extends
                TRANSFORM.Fluid.Interfaces.Records.Visualization_showName;
              parameter Integer nPorts=0 "Number of ports" annotation(Dialog(connectorSizing=true));
              parameter Modelica.Units.SI.Velocity v_radial=0;
              parameter Modelica.Units.SI.Velocity v_rotational=0;

              replaceable package Medium =
                  Modelica.Media.Interfaces.PartialMedium
                  "Medium model within the source"
                 annotation (choicesAllMatching=true);
              Medium.BaseProperties medium "Medium in the source";
              FluidFlow ports[nPorts](redeclare package Medium = Medium)
                annotation (Placement(transformation(extent={{90,-10},{110,10}})));
            protected
              parameter Modelica.Fluid.Types.PortFlowDirection flowDirection=Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                "Allowed flow direction" annotation (Evaluate=true, Dialog(tab="Advanced"));
            equation
              // Only one connection allowed to a port to avoid unwanted ideal mixing
              for i in 1:nPorts loop
                assert(cardinality(ports[i]) <= 1,"
each ports[i] of boundary shall at most be connected to one component.
If two or more connections are present, ideal mixing takes
place with these connections, which is usually not the intention
of the modeller. Increase nPorts to add an additional port.
");              ports[i].p          = medium.p;
                 ports[i].h_outflow  = medium.h;
                 ports[i].Xi_outflow = medium.Xi;
                 ports[i].v_r = v_radial;
                 ports[i].v_theta = v_rotational;
              end for;
              annotation (defaultComponentName="boundary", Documentation(info="<html>
<p>
Partial component to model the <b>volume interface</b> of a <b>source</b>
component, such as a mass flow source. The essential
features are:
</p>
<ul>
<li> The pressure in the connection port (= ports.p) is identical to the
     pressure in the volume.</li>
<li> The outflow enthalpy rate (= port.h_outflow) and the composition of the
     substances (= port.Xi_outflow) are identical to the respective values in the volume.</li>
</ul>
</html>"),      Icon(graphics={
                    Text(
                      extent={{-149,134},{151,94}},
                      lineColor={0,0,255},
                      textString="%name",
                      visible=DynamicSelect(true,showName))}));
            end PartialSource;

            partial model PartialFlowSource
              "Partial component source with one fluid connector"
              import Modelica.Constants;
                extends
                TRANSFORM.Fluid.Interfaces.Records.Visualization_showName;
              parameter Integer nPorts=0 "Number of ports" annotation(Dialog(connectorSizing=true));
              parameter Modelica.Units.SI.Velocity v_radial=0;
              parameter Modelica.Units.SI.Velocity v_rotational=0;
              replaceable package Medium =
                  Modelica.Media.Interfaces.PartialMedium
                  "Medium model within the source"
                 annotation (choicesAllMatching=true);
              Medium.BaseProperties medium "Medium in the source";
              FluidFlow ports[nPorts](redeclare package Medium = Medium)
                annotation (Placement(transformation(extent={{90,-10},{110,10}})));
            protected
              parameter Modelica.Fluid.Types.PortFlowDirection flowDirection=Modelica.Fluid.Types.PortFlowDirection.Bidirectional
                "Allowed flow direction" annotation (Evaluate=true, Dialog(tab="Advanced"));
            equation
              assert(abs(sum(abs(ports.m_flow)) - max(abs(ports.m_flow))) <= Modelica.Constants.small, "FlowSource only supports one connection with flow");
              // Only one connection allowed to a port to avoid unwanted ideal mixing
              for i in 1:nPorts loop
                assert(cardinality(ports[i]) <= 1,"
each ports[i] of boundary shall at most be connected to one component.
If two or more connections are present, ideal mixing takes
place with these connections, which is usually not the intention
of the modeller. Increase nPorts to add an additional port.
");              ports[i].p          = medium.p;
                 ports[i].h_outflow  = medium.h;
                 ports[i].Xi_outflow = medium.Xi;
                 ports[i].v_r = v_radial;
                 ports[i].v_theta = v_rotational;
              end for;
              annotation (defaultComponentName="boundary", Documentation(info="<html>
<p>
Partial component to model the <b>volume interface</b> of a <b>source</b>
component, such as a mass flow source. The essential
features are:
</p>
<ul>
<li> The pressure in the connection port (= ports.p) is identical to the
     pressure in the volume.</li>
<li> The outflow enthalpy rate (= port.h_outflow) and the composition of the
     substances (= port.Xi_outflow) are identical to the respective values in the volume.</li>
</ul>
</html>"),      Icon(graphics={
                    Text(
                      extent={{-149,134},{151,94}},
                      lineColor={0,0,255},
                      textString="%name",
                      visible=DynamicSelect(true,showName))}));
            end PartialFlowSource;

            partial model PartialVolume_cyl "Base class for volume models"
              import Modelica.Fluid.Types.Dynamics;
              import Modelica.Media.Interfaces.Choices.IndependentVariables;
              replaceable package Medium =
                  Modelica.Media.Interfaces.PartialMedium
                "Medium properties" annotation (choicesAllMatching=true);
              // Inputs provided to the volume model
              input Modelica.Units.SI.Volume V(min=0) "Volume"
                annotation (Dialog(group="Inputs"));
              // Initialization
              parameter Dynamics energyDynamics=Dynamics.DynamicFreeInitial
                "Formulation of energy balances"
                annotation (Evaluate=true, Dialog(tab="Advanced", group="Dynamics"));
              parameter Dynamics massDynamics=energyDynamics "Formulation of mass balances"
                annotation (Evaluate=true, Dialog(tab="Advanced", group="Dynamics"));
              final parameter Dynamics substanceDynamics=massDynamics
                "Formulation of substance balances"
                annotation (Evaluate=true, Dialog(tab="Advanced", group="Dynamics"));
              parameter Dynamics traceDynamics=massDynamics
                "Formulation of trace substance balances"
                annotation (Evaluate=true, Dialog(tab="Advanced", group="Dynamics"));
              parameter Modelica.Units.SI.AbsolutePressure p_start=Medium.p_default
                "Pressure" annotation (Dialog(tab="Initialization", group=
                      "Start Value: Absolute Pressure"));
              parameter Boolean use_T_start=true "Use T_start if true, otherwise h_start"
                annotation (Evaluate=true, Dialog(tab="Initialization", group=
                      "Start Value: Temperature"));
              parameter Modelica.Units.SI.Temperature T_start=Medium.T_default
                "Temperature" annotation (Evaluate=true, Dialog(
                  tab="Initialization",
                  group="Start Value: Temperature",
                  enable=use_T_start));
              parameter Modelica.Units.SI.SpecificEnthalpy h_start=
                  Medium.specificEnthalpy_pTX(
                  p_start,
                  T_start,
                  X_start) "Specific enthalpy" annotation (Dialog(
                  tab="Initialization",
                  group="Start Value: Specific Enthalpy",
                  enable=not use_T_start));
              parameter Modelica.Units.SI.MassFraction X_start[Medium.nX]=Medium.X_default
                "Mass fraction" annotation (Dialog(
                  tab="Initialization",
                  group="Start Value: Species Mass Fraction",
                  enable=Medium.nXi > 0));
              parameter TRANSFORM.Units.ExtraProperty C_start[Medium.nC]=fill(0, Medium.nC)
                "Mass-Specific value" annotation (Dialog(
                  tab="Initialization",
                  group="Start Value: Trace Substances",
                  enable=Medium.nC > 0));
              Medium.BaseProperties medium(
                each preferredMediumStates=true,
                p(start=p_start),
                h(start=if not use_T_start then h_start else Medium.specificEnthalpy_pTX(
                      p_start,
                      T_start,
                      X_start[1:Medium.nXi])),
                T(start=if use_T_start then T_start else Medium.temperature_phX(
                      p_start,
                      h_start,
                      X_start[1:Medium.nXi])),
                Xi(start=X_start[1:Medium.nXi]),
                X(start=X_start),
                d(start=if use_T_start then Medium.density_pTX(
                      p_start,
                      T_start,
                      X_start[1:Medium.nXi]) else Medium.density_phX(
                      p_start,
                      h_start,
                      X_start[1:Medium.nXi])));
              // Total quantities
              Modelica.Units.SI.Mass m "Mass";
              Modelica.Units.SI.InternalEnergy U "Internal energy";
              Modelica.Units.SI.Mass mXi[Medium.nXi] "Species mass";
              TRANSFORM.Units.ExtraPropertyExtrinsic mC[Medium.nC]
                "Trace substance extrinsic value";
              TRANSFORM.Units.ExtraPropertyExtrinsic[Medium.nC] mC_scaled
                "Scaled trace substance for improved numerical stability";
              // C has the additional parameter because it is not included in the medium
              // i.e.,Xi has medium[:].Xi but there is no variable medium[:].C
              TRANSFORM.Units.ExtraProperty C[Medium.nC](stateSelect=StateSelect.prefer,
                  start=C_start) "Trace substance mass-specific value";
              // Mass Balance
              Modelica.Units.SI.MassFlowRate mb=0
                "Mass flow rate source/sinks within volumes";
              // Energy Balance
              Modelica.Units.SI.HeatFlowRate Ub=0
                "Energy source/sinks within volumes (e.g., ohmic heating, external convection)";
              // Species Balance
              Modelica.Units.SI.MassFlowRate mXib[Medium.nXi]=zeros(Medium.nXi)
                "Species mass flow rates source/sinks within volumes";
              // Trace Balance
              TRANSFORM.Units.ExtraPropertyFlowRate mCb[Medium.nC]=zeros(Medium.nC)
                "Trace flow rate source/sinks within volumes (e.g., chemical reactions, external convection)";
              Modelica.Units.SI.Force vtheb=0;
              Modelica.Units.SI.Force vrb=0;
              Modelica.Units.SI.Velocity v_r;
              Modelica.Units.SI.Velocity v_the;
            protected
              parameter Boolean initialize_p=not Medium.singleState
                "= true to set up initial equations for pressure";
            initial equation
              // Mass Balance
              if massDynamics == Dynamics.FixedInitial then
                if initialize_p then
                  medium.p = p_start;
                end if;
              elseif massDynamics == Dynamics.SteadyStateInitial then
                if initialize_p then
                  der(medium.p) = 0;
                end if;
              end if;
              // Energy Balance
              if energyDynamics == Dynamics.FixedInitial then
                /*
    if use_T_start then
      medium.T = T_start;
    else
      medium.h = h_start;
    end if;
    */
                if Medium.ThermoStates == IndependentVariables.ph or Medium.ThermoStates
                     == IndependentVariables.phX then
                  medium.h = h_start;
                else
                  medium.T = T_start;
                end if;
              elseif energyDynamics == Dynamics.SteadyStateInitial then
                /*
    if use_T_start then
      der(medium.T) = 0;
    else
      der(medium.h) = 0;
    end if;
    */
                if Medium.ThermoStates == IndependentVariables.ph or Medium.ThermoStates
                     == IndependentVariables.phX then
                  der(medium.h) = 0;
                else
                  der(medium.T) = 0;
                end if;
              end if;
              // Species Balance
              if substanceDynamics == Dynamics.FixedInitial then
                medium.Xi = X_start[1:Medium.nXi];
              elseif substanceDynamics == Dynamics.SteadyStateInitial then
                der(medium.Xi) = zeros(Medium.nXi);
              end if;
              // Trace Balance
              if traceDynamics == Dynamics.FixedInitial then
                C = C_start;
              elseif traceDynamics == Dynamics.SteadyStateInitial then
                der(mC) = zeros(Medium.nC);
              end if;
            equation
              assert(not (energyDynamics <> Dynamics.SteadyState and massDynamics ==
                Dynamics.SteadyState) or Medium.singleState, "If 'massDynamics == Modelica.Fluid.Types.Dynamics.SteadyState', then it is
         required that 'energyDynamics==Modelica.Fluid.Types.Dynamics.SteadyState' or Medium not conserving mass if volume is fixed.");
              // Total Quantities
              m = V*medium.d;
              U = m*medium.u;
              mXi = m*medium.Xi;
              mC = m*C;
              m*der(v_r) = vrb;
              m*der(v_the) = vtheb;
              // Mass Balance
              if massDynamics == Dynamics.SteadyState then
                0 = mb;
              else
                der(m) = mb;
              end if;
              // Energy Balance
              if energyDynamics == Dynamics.SteadyState then
                0 = Ub;
              else
                der(U) = Ub;
              end if;
              // Species Balance
              if substanceDynamics == Dynamics.SteadyState then
                zeros(Medium.nXi) = mXib;
              else
                der(mXi) = mXib;
              end if;
              // Trace Balance
              if traceDynamics == Dynamics.SteadyState then
                zeros(Medium.nC) = mCb;
              else
                der(mC_scaled) = mCb ./ Medium.C_nominal;
                mC = mC_scaled .* Medium.C_nominal;
              end if;
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                    coordinateSystem(preserveAspectRatio=false)));
            end PartialVolume_cyl;
          end CylindricalSupport;

          function NZer
            "Function returns a value that will switch between positive 1 and negative 1 without a divide by 0 error when the argument is 0."
            input Real m;
            constant Real k = 0.0001;
            output Real l;
          algorithm
            l := m/sqrt(m*m+k);
          end NZer;
        end BaseClasses;

        model Stator_Stage
          "Non-moving deflection structure within a turbine, helping remove more energy from fluid in the rotor stage"
          constant Integer nV=2 "Set # of nodes, at present they are used one for deflection or turbine work and the second is the gap between stages";
          constant Modelica.Units.SI.Acceleration grav=9.81 "gravity";
          constant Real pi = 3.14159 "pi";
          constant Real maxangle = Modelica.Constants.pi/2;

          parameter Boolean isenthalpic = false "Automatically sets Q term such that isentropic conditions occur in the stator region (h_in = h_out).";
          Modelica.Units.SI.MassFlowRate mdot[nV + 1]
            "Mass flow rate edge-wise along the two nedes";
          Modelica.Units.SI.Velocity v_z[nV + 1]
            "Translational velocity edge-wise along the two nodes";
          Modelica.Units.SI.Velocity v_r[nV] "Rotational velocity in each node";
          Modelica.Units.SI.Velocity v_the[nV] "Angular velocity in each node";
          Modelica.Units.SI.Velocity vnet[nV] "Total velocity in each node";
          Modelica.Units.SI.Velocity v_rin "Inlet rotational velocity";
          Modelica.Units.SI.Velocity v_rout "Outlet rotational velocity";
          Modelica.Units.SI.Velocity v_thein "Inlet angular velocity";
          Modelica.Units.SI.Velocity v_theout "Outlet rotational velocity";
          Modelica.Units.SI.Pressure p[nV] "Node pressure";
          Modelica.Units.SI.Pressure pin "Inlet pressure";
          Modelica.Units.SI.Pressure pout "Outlet pressure";
          Modelica.Units.SI.SpecificEnthalpy h[nV] "Node enthalpy";
          Modelica.Units.SI.SpecificEnthalpy hin "Inlet enthalpy";
          Modelica.Units.SI.SpecificEnthalpy hout "Outlet enthalpy";

          Modelica.Units.SI.Power hflow[nV + 1]
            "Enthalpy flow rate across node boundaries";
          Modelica.Units.SI.AngularVelocity omega[nV] "Angular velocity";
          Modelica.Units.SI.Frequency f_fluid[nV] "Angular frequency";
          parameter Modelica.Units.SI.Angle alpha[nV]={pi/4,pi/4}
            "Angular deflection of each node outlet"
            annotation (dialog(group="Geometry"));
          Modelica.Units.SI.Impulse mom[nV] "Momentum in each node";
          Modelica.Units.SI.Force momdot[nV + 1]
            "Rate of momentum flux across node boundaries";
          Modelica.Units.SI.Force radmomdot[nV + 1] "Radial momentum flux";
          Modelica.Units.SI.Force rotmomdot[nV + 1] "Rotational momentum flux";
          Medium.ThermodynamicState states[nV];
          Medium.ThermodynamicState statein;
          Medium.ThermodynamicState stateout;
          Modelica.Units.SI.Density rhoflow[nV + 1]
            "Upstream density flowing across boundaries";
          Modelica.Units.SI.Velocity dv_r[nV] "Change in radial velocity";
          Modelica.Units.SI.Velocity dv_z[nV] "Change in translational velocity";
          Modelica.Units.SI.Velocity dv_the[nV] "Change in rotational velocity";
          parameter Modelica.Units.SI.Area A_flow[nV + 1]=0.1*ones(nV + 1) "Flow area"
            annotation (dialog(group="Geometry"));
          parameter Modelica.Units.SI.Length dz[nV]={0.3,0.1} "Axial length"
            annotation (dialog(group="Geometry"));
          parameter Modelica.Units.SI.Length dheight[nV]=zeros(nV) "Elevation change"
            annotation (dialog(group="Geometry"));
          parameter Modelica.Units.SI.Length ri[nV + 1]=zeros(nV + 1)
            "Inner radius of flow area" annotation (dialog(group="Geometry"));
          parameter Modelica.Units.SI.Length ro[nV + 1]={0.18,0.21,0.22}
            "Outer radius of flow area" annotation (dialog(group="Geometry"));
          parameter Real Kfld=0.5 "K_nom + fL/D in turbine"
                                                           annotation(dialog(group = "Geometry"));
          Modelica.Units.SI.Length rave[nV + 1]
            "Calculated mass averaged radius based on constant density and assumption of annulus flow";
          Modelica.Units.SI.Area Amid[nV] "Flow area at midpoint";
          Modelica.Units.SI.Volume Vol[nV] "Node volume";
          Modelica.Units.SI.Mass m[nV] "Node mass";
          Modelica.Units.SI.Velocity mach "Speed of sound";
          Modelica.Units.SI.Force Ff[nV]
            "Wall friction force, currently used as a K = K_nom+fL/d = constant";
          Modelica.Units.SI.Force Fthe[nV] "Angular force";
          Modelica.Units.SI.Force Fr[nV] "Radial force";
          Modelica.Units.SI.Force Fz[nV] "Translational force";
          Modelica.Units.SI.Power q[nV] "Heat conduction/convection";
          Modelica.Units.SI.Power Q[nV] "Total node energy imparted";

          Modelica.Units.SI.SpecificEntropy s[nV] "Node entropy";
          Modelica.Units.SI.Length dr[nV] "Change in flow radius";
          replaceable package Medium = Modelica.Media.Water.StandardWater
          constrainedby Modelica.Media.Interfaces.PartialMedium;
          parameter Modelica.Units.SI.SpecificEnthalpy h_init=3000e3 "Initial enthalpy"
            annotation (dialog(group="Initialization"));
          parameter Modelica.Units.SI.MassFlowRate m_init=66.3 "Initial mass flow rate"
            annotation (dialog(group="Initialization"));
          parameter Modelica.Units.SI.Pressure p_in_init=500000 "Initial inlet pressure"
            annotation (dialog(group="Initialization"));
          parameter Modelica.Units.SI.Pressure p_out_init=500000 "Initial outlet pressure"
            annotation (dialog(group="Initialization"));
          parameter Modelica.Units.SI.Velocity v_the_init=0 "Initial rotational velocity"
            annotation (dialog(group="Initialization"));

          parameter Modelica.Units.SI.Velocity v_r_init=0 "Initial radial velocity"
            annotation (dialog(group="Initialization"));

          BaseClasses.FluidFlow Inlet(redeclare replaceable package Medium =
                               Medium) annotation (Placement(transformation(extent={{-112,
                    -12},{-92,8}}), iconTransformation(extent={{-118,-22},{-78,18}})));
          BaseClasses.FluidFlow Outlet(redeclare replaceable package Medium =
                                           Medium) annotation (Placement(
                transformation(extent={{86,-10},{106,10}}), iconTransformation(extent=
                   {{70,-34},{130,26}})));

        initial equation
          //initial equations are complete, and assume that all forces in the system are 0.
          //This may change, but is currently fine as of 3/5/20.
           for i in 1:nV loop
            h[i] = h_init;
            mdot[i+1] = m_init;

            v_the[i] = v_the_init;
            v_r[i] = v_r_init;
            Ff[i] = 0;
          //  states[i] = Medium.setState_phX(p_in_init,h_init,Medium.X_default);
            Fr[i] = 0;
            Fz[i] = -Fthe[i];
           // states[i].d*A_flow[i]*v_z[i] = mdot[i];
           end for;
          // states[2].d*A_flow[nV+1]*v_z[nV+1] = mdot[nV+1];
          // Fthe[1] = v_the_init*m_init*abs(v_the_init)/dz[1];
          // Fthe[nV] = 0;
            pin = p_in_init;
         //   pout = p_out_init;
             p[2] = 0.5*pin+0.5*p_out_init;
         // pout = p_out_init;

        equation
          statein= Medium.setState_phX(pin,hin,Inlet.Xi_outflow);
          stateout = Medium.setState_phX(pout,hout,Outlet.Xi_outflow);
          mach = Medium.velocityOfSound(states[1]);
          for i in 1:nV loop

            //Calculation for inner geometry, fluid state tracking variable.
            dr[i] = rave[i+1]-rave[i];
            states[i] = Medium.setState_phX(p[i],h[i],Medium.X_default);
            s[i] = Medium.specificEntropy(states[i]);
            Amid[i]*2 = A_flow[i+1]+A_flow[i];
            Vol[i] = Amid[i]*dz[i];
            mom[i] = mdot[i]*v_z[i+1];
            m[i] =Vol[i]*states[i].d;
            v_the[i] = rave[i]*omega[i];
            f_fluid[i] = omega[i]/(2*pi);
            //Current assumption. Heat flow between the fluid and the turbine stages could be added. At present we'll assume thermal equilibrium.
            q[i] =0;
            //Power on the fluid is the sum of all forces dotted with their respective velocities plus heat

            vnet[i]*vnet[i] = (v_r[i]*v_r[i]+v_the[i]*v_the[i]+v_z[i+1]*v_z[i+1]);
            //Calcultion of all forces is delayed slightly using the derivative term. The goal is to give slightly smoother behavior to simulations.
            //Radial force is calculated as the amount required to cause the center of mass to move so that the density profile is even.
            der(Fr[i]) = mdot[i+1]*(dr[i]/dz[i]*v_z[i+1]-v_r[i])*abs(dr[i]/dz[i]*v_z[i+1]-v_r[i])/dz[i];
            //If statement ensures that no by-zero division occurs
            if
              (alpha[i]>0.0 or alpha[i]<0.0) then
              //Angular force of deflection is rho*A*(delv^2), the derivative could then be construed as mdot (rho*Vol/time)*(delv)^2/distance.
            der(Fthe[i]) = mdot[i+1]*(tan(alpha[i])*v_z[i+1]-v_the[i])*abs(tan(alpha[i])*v_z[i+1]-v_the[i])/dz[i];
              //Looking at the force vector, as it is perpendicular to the stator/vane, then using the angular dependency we obtain the value below.
            der(Fz[i]) = -der(Fthe[i])/tan(alpha[i]);
              else
                //Neither force should exist if there's no deflection.
              der(Fthe[i]) = -Fthe[i];
              der(Fz[i]) = -Fz[i];
            end if;
            der(Ff[i]) = (0.5*states[i].d*v_z[i+1]*abs(v_z[i])*Kfld-Ff[i])/0.01;

          end for;
          for i in 1:nV+1 loop
            v_z[i]*A_flow[i]*rhoflow[i] = mdot[i];
            momdot[i] = abs(v_z[i])*mdot[i];
            rave[i] = 0.75*(ro[i]^4-ri[i]^4)/(ro[i]^3-ri[i]^3);
          end for;
          if isenthalpic then
          der(Q[1]) = (hin-h[1])*mdot[1]/0.01;
          der(Q[2]) = (h[1]-h[2])*mdot[2]/0.01;
          else
            for i in 1:nV loop
              Q[i] = Fr[i]*abs(dv_r[i]) + Fthe[i]*abs(dv_the[i]) + q[i] + Fz[i]*abs(dv_z[i]);
            end for;
          end if;

        //Now unused assumptions.
           // if(i == nV) then
          //  if conserve_kinetic then
           //  mdot[3]*vnet[2]*vnet[2]=mdot[2]*vnet[1]*vnet[1];
           // elseif isobaric then
          //    pout= p[2];
           // elseif isentropic then
           //   s[2] = s[1];
          //  elseif isenthalpic then
          //  der(Fz[i]) = -0.90*(h[i]-h[i-1])*m[i]*mach/dz[i]/dz[i];
          //  else
         //   if(alpha[i]>0 or alpha[i]<0) then
         //     Fz[i] = -abs(Fthe[i]/tan(alpha[i]));
         //   end if;
         //   else
        //
         //   der(Fz[i]) = 0;
         //   end if;

          //5 conservation equations, for mass, energy, and a velocity equation for each of rotational, radial, and translational speeds
          //Node 1//
          der(m[1]) + mdot[2]-mdot[1] = 0;
          m[1]*der(Medium.specificInternalEnergy(states[1])) + hflow[2]-hflow[1] = -p[1]*Vol[1]*(v_z[2]-v_z[1])/dz[1] - v_z[2]*Ff[1]+Q[1];
          //m[1]*der(v_z[2]) + momdot[2]-momdot[1] + Amid[1]*((p[2]-p[1])+states[1].d*grav*dheight[1])/dz[1] = -Ff[1]+Fz[1];
          m[1]*der(v_z[2]) + momdot[2]-momdot[1]+A_flow[2]*p[2]-A_flow[1]*p[1] = -Ff[1]+Fz[1];
          m[1]*der(v_r[1]) + radmomdot[2] - radmomdot[1] = Fr[1];
          m[1]*der(v_the[1]) + rotmomdot[2]-rotmomdot[1] = Fthe[1];

          //Node 2//
          der(m[2])  + mdot[3]-mdot[2] = 0;
          m[2]*der(Medium.specificInternalEnergy(states[2]))  + hflow[3]-hflow[2] =-p[2]*Vol[2]*(v_z[3]-v_z[2])/dz[2] - v_z[3]*Ff[2]+Q[2];
          m[2]*der(v_z[3]) + momdot[3]-momdot[2]+A_flow[3]*pout-A_flow[2]*p[2]=-Ff[2]+Fz[2];// + Ff[2] = Fz[2];
          m[2]*der(v_r[2]) + radmomdot[3]-radmomdot[2] = Fr[2];
          m[2]*der(v_the[2]) + rotmomdot[3]-rotmomdot[2] = Fthe[2];

          //Those equations ignore intrafluid friction terms that certainly exist, but are impossible to use without radial and angular discretization.
         //boundary conditions//
          dv_r[1] = semiLinear(
              BaseClasses.NZer(v_z[1]),
              v_r[1] - v_rin,
              v_r[1] - v_r[2]);
          dv_r[2] = semiLinear(
              BaseClasses.NZer(v_z[2]),
              v_r[2] - v_r[1],
              v_r[2] - v_rout);
          dv_z[1] = v_z[2]-v_z[1];
          dv_z[2] = v_z[3]-v_z[2];
          dv_the[1] = semiLinear(
              BaseClasses.NZer(v_z[1]),
              v_the[1] - v_thein,
              v_the[1] - v_the[2]);
          dv_the[2] = semiLinear(
              BaseClasses.NZer(v_z[2]),
              v_the[2] - v_the[1],
              v_the[2] - v_theout);

          //semiLinear function takes care of donor directions. Note that in rhoflow[], the second value must be negative to ensure that
          //the donor density is always >0 across the boundaries (what does -2kg/m^3 mean?)
          hflow[1] = semiLinear(mdot[1],hin,h[1]);
          //hflow[1] = semiLinear(mdot[1],Medium.specificInternalEnergy(statein),Medium.specificInternalEnergy(states[1]));
          radmomdot[1] = semiLinear(mdot[1],v_rin,v_r[1]);
          rotmomdot[1] = semiLinear(mdot[1],v_thein,v_the[1]);
          rhoflow[1] = semiLinear(
              BaseClasses.NZer(v_z[1]),
              Medium.density(Medium.setState_phX(
                pin,
                hin,
                Medium.X_default)),
              -states[1].d);
          //interface-by-interface enthalpy flow calculations.
          hflow[2] = semiLinear(mdot[2],h[1],h[2]);
          //hflow[2] = semiLinear(mdot[2],Medium.specificInternalEnergy(states[1]),Medium.specificInternalEnergy(states[2]));
          radmomdot[2] = semiLinear(mdot[2],v_r[1],v_r[2]);
          rotmomdot[2] = semiLinear(mdot[2],v_the[1],v_the[2]);
          rhoflow[2] = semiLinear(
              BaseClasses.NZer(v_z[2]),
              states[1].d,
              -states[2].d);
          hflow[3] = semiLinear(mdot[3],h[2],hout);
         // hflow[3] = semiLinear(mdot[3],Medium.specificInternalEnergy(states[2]),Medium.specificInternalEnergy(stateout));
          radmomdot[3] = semiLinear(mdot[3],v_r[2],v_rout);
          rotmomdot[3] = semiLinear(mdot[3],v_the[2],v_theout);
          rhoflow[3] = semiLinear(
              BaseClasses.NZer(v_z[3]),
              states[2].d,
              -Medium.density(Medium.setState_phX(
                pout,
                hout,
                Medium.X_default)));

          //Connections to the inlet and outlet nodes.
          hout = states[2].h;
          v_theout = v_the[2];
          v_rout = v_r[2];
          p[1] = pin;

          hin=inStream(Inlet.h_outflow);

          Inlet.h_outflow = hin;
            Inlet.p = p[1];
          Inlet.m_flow = mdot[1];
          v_rin = Inlet.v_r;
          inStream(Inlet.v_r) = v_rin;
          Inlet.v_theta = v_thein;
          inStream(Inlet.v_theta) = v_thein;
          pout = Outlet.p;
          hout = Outlet.h_outflow;
            Outlet.m_flow + mdot[3]=0;
          Outlet.v_r = v_rout;
          Outlet.v_theta = v_theout;

          Inlet.Xi_outflow = inStream(Outlet.Xi_outflow);
          Inlet.C_outflow = inStream(Outlet.C_outflow);
          Outlet.Xi_outflow = inStream(Inlet.Xi_outflow);
          Outlet.Xi_outflow = inStream(Inlet.C_outflow);

          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Polygon(
                  points={{40,-40},{48,-26},{40,-6},{100,-6},{100,-40},{40,-40}},
                  lineColor={28,108,200},
                  fillColor={0,128,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{30,-40},{40,-40},{48,-26},{42,-10},{28,-10},{36,-24},{30,-40}},
                  lineColor={28,108,200},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,-40},{30,-40},{36,-24},{26,-6},{-100,-6},{-100,-40}},
                  lineColor={28,108,200},
                  fillColor={0,128,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,40},{30,40},{36,24},{26,6},{-100,6},{-100,40}},
                  lineColor={28,108,200},
                  fillColor={0,128,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{30,40},{40,40},{48,26},{42,10},{28,10},{36,24},{30,40}},
                  lineColor={28,108,200},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{40,40},{48,26},{40,6},{100,6},{100,40},{40,40}},
                  lineColor={28,108,200},
                  fillColor={0,128,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,40},{100,40},{100,52},{-100,44},{-100,40}},
                  lineColor={28,108,200},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,-40},{100,-40},{100,-52},{-100,-44},{-100,-40}},
                  lineColor={28,108,200},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-100,6},{100,-6}},
                  lineColor={28,108,200},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-66,42},{-18,4}},
                  lineColor={0,0,0},
                  textString="1"),
                Text(
                  extent={{46,40},{94,2}},
                  lineColor={0,0,0},
                  textString="2")}),                                     Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>The stator stage of a turbine is a deflection stage. Fluid enters the stage and is deflected to rotate around the axis of translation in order to impinge upon turbine blades in the next stage. This model contains 2 fluid nodes and 2 fluid flow ports. The fluid deflection is considered to happen between the first and second nodes. </p>
<p>The key parameter in stator and rotor stage components is alpha. The alpha values are the designed deflection angles within the model. NOTE: These have so far been used in a [x, 0] format. An alpha value of 0 indicates that there is no deflection on that node. The deflection is assumed to occur at the end of the node that is indicated. </p>
<p>The fluid velocity derivatives are dependent on the translational, rotational, and radial forces exerted either by the fluid or on the fluid. Each velocity essentially follows the same equation: </p>
<p><span style=\"font-family: Calibri; font-size: 11pt;\"><img src=\"file:///C:/Users/MIKKDM/AppData/Local/Temp/3/msohtmlclip1/01/clip_image002.png\"/></span> </p>
<p>The radial force is taken as an internal expansion force of the fluid to move the center of the mass flow while the fluid flows from node 1 to node 2. The center of mass is taken assuming a constant density and internal and external radius values. </p>
<p>The resulting force in the axial and rotational directions is due to the structure of the stator stage of the turbine machine. The force has two components, each acting in the direction of rotation or translation. The model is centered around the <b>rotation </b>of the fluid. Thus, the stator stage is assumed to deflect the rotation of the fluid to a certain design angle alpha. </p>
<p><span style=\"font-family: Calibri; font-size: 11pt;\"><img src=\"file:///C:/Users/MIKKDM/AppData/Local/Temp/3/msohtmlclip1/01/clip_image004.png\"/></span> </p>
<p>The energy content removed from the fluid, which impacts the calculated enthalpy, in the stator stage is the sum of the force vectors dotted with the velocity (which results in the component forces multiplied by the change in the velocities). </p>
</html>"));
        end Stator_Stage;

        model Rotor_Stage
          "For most variable comments, see Stator_Stage. This stage is the power producing stage wherein the turbine blades rotate based on the energy impinged by the flowing fluid"
          constant Integer nV=2;
          constant Modelica.Units.SI.Acceleration grav=9.81;
          constant Real pi = 3.14159;
          parameter Modelica.Units.SI.MassFlowRate m_flow_nom=60;
          Modelica.Units.SI.Angle defl[nV];
          Modelica.Units.SI.MassFlowRate mdot[nV + 1];
          Modelica.Units.SI.Velocity v_z[nV + 1];
          Modelica.Units.SI.Velocity v_r[nV];
          Modelica.Units.SI.Velocity v_the[nV];
          Modelica.Units.SI.Velocity vnet[nV + 1];
          Modelica.Units.SI.Velocity v_rin;
          Modelica.Units.SI.Velocity v_rout;
          Modelica.Units.SI.Velocity v_thein;
          Modelica.Units.SI.Velocity v_theout;
          Modelica.Units.SI.Pressure p[nV];
          constant Modelica.Units.SI.Angle maxangle=-Modelica.Constants.pi/2;
          Modelica.Units.SI.Pressure pin;
          Modelica.Units.SI.Pressure pout;
          Modelica.Units.SI.SpecificEnthalpy h[nV];
          Modelica.Units.SI.SpecificEnthalpy hin;
          Modelica.Units.SI.SpecificEnthalpy hout;

          Modelica.Units.SI.Power hflow[nV + 1];
          Modelica.Units.SI.AngularVelocity omega[nV];
          Modelica.Units.SI.Frequency f_fluid[nV];
          parameter Modelica.Units.SI.Angle alpha[nV]={pi/4,pi/4}
            annotation (dialog(group="Geometry"));
        //  stream Modelica.SIunits.SpecificEnthalpy hin;
          Modelica.Units.SI.Impulse mom[nV];
          Modelica.Units.SI.Force momdot[nV + 1];
          Modelica.Units.SI.Force radmomdot[nV + 1];
          Modelica.Units.SI.Force rotmomdot[nV + 1];
          Medium.ThermodynamicState states[nV];
          Modelica.Units.SI.Density rhoflow[nV + 1];
          Modelica.Units.SI.Velocity dv_r[nV] "Change in radial velocity";
          Modelica.Units.SI.Velocity dv_z[nV] "Change in translational velocity";
          Modelica.Units.SI.Velocity dv_the[nV] "Change in rotational velocity";
          parameter Modelica.Units.SI.Area A_flow[nV + 1]=0.1*ones(nV + 1) "Flow areas"
            annotation (dialog(group="Geometry"));
          parameter Modelica.Units.SI.Length dz[nV]={0.3,0.1} "Axial length"
            annotation (dialog(group="Geometry"));
          parameter Modelica.Units.SI.Length dheight[nV]=zeros(nV) "Height difference"
            annotation (dialog(group="Geometry"));
          parameter Modelica.Units.SI.Length ri[nV + 1]=zeros(nV + 1) "Inner radii"
            annotation (dialog(group="Geometry"));
          parameter Modelica.Units.SI.Length ro[nV + 1]={0.21,0.21,0.21} "Outer radii"
            annotation (dialog(group="Geometry"));
          //parameter Modelica.SIunits.Area Asurf annotation(dialog(group = "Geometry"));
          Modelica.Units.SI.Length rave[nV + 1];
          Modelica.Units.SI.Torque tau;
          Modelica.Units.SI.Velocity Turb_speed "Linear rotational velocity of turbine blades";
          Modelica.Units.SI.Area Amid[nV];
          Modelica.Units.SI.Volume Vol[nV];
          Modelica.Units.SI.Mass m[nV];

          Modelica.Units.SI.Force Ff[nV];
          Modelica.Units.SI.Force Fthe[nV];
          Modelica.Units.SI.Force Fr[nV];
          Modelica.Units.SI.Force Fz[nV];
          Modelica.Units.SI.Power q[nV];
          Modelica.Units.SI.Power Q[nV];
          Modelica.Units.SI.Velocity vturbexit;
          Modelica.Units.SI.SpecificEntropy s[nV];
          Modelica.Units.SI.Length dr[nV];
          Modelica.Units.SI.MomentOfInertia I[nV];
          replaceable package Medium = Modelica.Media.Water.StandardWater
          constrainedby Modelica.Media.Interfaces.PartialMedium;
          parameter Modelica.Units.SI.SpecificEnthalpy h_init=3000e3 "Initial enthalpy"
            annotation (dialog(group="Initialization"));
          parameter Modelica.Units.SI.MassFlowRate m_init=66.3 "Initial mass flow rate"
            annotation (dialog(group="Initialization"));
          parameter Modelica.Units.SI.Pressure p_in_init=500000 "Initial inlet pressure"
            annotation (dialog(group="Initialization"));
          parameter Modelica.Units.SI.Pressure p_init=0 "If=0, take outlet pressure and inlet pressure";
          parameter Modelica.Units.SI.Velocity v_the_init=0 "Initial rotational velocity"
            annotation (dialog(group="Initialization"));
          parameter Modelica.Units.SI.Velocity v_r_init=0 "Initial radial velocity"
            annotation (dialog(group="Initialization"));
          Medium.ThermodynamicState statein;
          Medium.ThermodynamicState stateout;
          Modelica.Units.SI.Power Mech_Q;
          Modelica.Units.SI.Torque tau2;
        //  Modelica.SIunits.Power Mech_Q2;

          BaseClasses.FluidFlow Inlet(redeclare replaceable package Medium =
                               Medium) annotation (Placement(transformation(extent={{-112,
                    -12},{-92,8}}), iconTransformation(extent={{-118,-22},{-78,18}})));
          BaseClasses.FluidFlow Outlet(redeclare replaceable package Medium =
                                           Medium) annotation (Placement(
                transformation(extent={{86,-10},{106,10}}), iconTransformation(extent=
                   {{68,-30},{128,30}})));

          BaseClasses.Torque torque annotation (Placement(
                transformation(extent={{-44,36},{-24,56}}), iconTransformation(extent=
                   {{-44,36},{-24,56}})));
        initial equation
          for i in 1:nV loop
            h[i] = h_init;
            mdot[i+1] = m_init;
          //  p[i] = p_init;
            v_the[i] = v_the_init;
            v_r[i] = v_r_init;
            Ff[i] = 0;
          //  Fthe[i] = 0;
            Fr[i] = 0;
            Fz[i] = 0;
            defl[i] = alpha[i];
          end for;
             Fthe[1] = v_the_init*m_init*abs(v_the_init)/dz[1];
           Fthe[nV] = 0;
           if
             (p_init == 0) then
          p[1] = p_in_init;
          p[2] = 0.5*(p[1]+pout);
           else
             p[1] = p_init;
             p[2] = p_init;
           end if;
        equation
            statein=Medium.setState_phX(Inlet.p,Inlet.h_outflow,Inlet.Xi_outflow);
          stateout = Medium.setState_phX(Outlet.p,Outlet.h_outflow,Outlet.Xi_outflow);
          torque.tau + tau2 = 0;
        //  Mech_Q2 = tau2*(v_thein-v_the[1])/rave[1];
          sqrt(torque.w*torque.w+0.00001)*tau2 = mdot[1]*(hin-h[1])-Ff[1]*v_z[1];
          torque.w*rave[1] - Turb_speed=0;
          vturbexit = Turb_speed+v_z[2]*tan(defl[1]);
          tau = -rave[1]*Fthe[1];
          for i in 1:nV loop

            if
              (alpha[i]>0.0 or alpha[i]<0.0) then
             // der(defl[i]) = ((ksq*((mdot[1]-m_flow_nom)/m_flow_nom*abs((mdot[1]-m_flow_nom)/m_flow_nom)) + klin*(mdot[1]-m_flow_nom)/m_flow_nom
             //  + ktanh*(-1*tanh(2*(mdot[1]-m_flow_nom)/m_flow_nom)))*(maxangle-alpha[i])+alpha[i]-defl[i])/(5);
           //  der(defl[i]) = ((Mech_Q-mdot[1]*ref_Eperkg)/ref_Eperkg*(maxangle-alpha[i])+alpha[i]-defl[i])/1000;
           // der(defl[i]) = (atan((mdot[1]-m_flow_nom)/m_flow_nom)^2*(maxangle-alpha[i]) + alpha[i])/5;
            der(defl[i]) = (((0.073492*((mdot[1]-m_flow_nom)/m_flow_nom)^2-1.01591*(mdot[1]-m_flow_nom)/m_flow_nom)*(maxangle-alpha[i])+alpha[i])-defl[i])/10;
            der(Fthe[i]) = -mdot[i]*(v_the[i]-vturbexit)*abs(v_z[i+1])/dz[i];
            der(Fz[i]) = 0;
            else
              defl[i] = 0;
              der(Fthe[i]) = 0;
              der(Fz[i]) = 0;
            end if;
          end for;
          Mech_Q = mdot[3]*(hin-h[1]);
          der(Q[2]) = (h[1]-h[2])*mdot[2]/0.01;
            Q[1] = Fr[1]*abs(dv_r[1]) + Fthe[1]*abs(dv_the[1]) + q[1] + Fz[1]*abs(dv_z[1]);
           for i in 1:nV loop
            I[i] = states[i].d*2*pi*dz[i]*(ro[i]^4-ri[i]^4)/4;
            dr[i] = rave[i+1]-rave[i];
            Amid[i]*2 = A_flow[i+1]+A_flow[i];
            Vol[i] = Amid[i]*dz[i];
          //Q[i] = Fr[i]*abs(dv_r[i]) + Fthe[i]*abs(dv_the[i]) + q[i]+Fz[i]*abs(dv_z[i]);
            der(Fr[i]) = mdot[i+1]*(dr[i]/dz[i]*v_z[i+1]-v_r[i])*abs(dr[i]/dz[i]*v_z[i+1]-v_r[i])/dz[i];
            //der(Fr[i]) =0;
            der(Ff[i]) = (0.5*states[i].d*v_z[i+1]*abs(v_z[i])*0.00-Ff[i])/0.01;
            states[i] = Medium.setState_phX(p[i],h[i],Medium.X_default);
            q[i] =0;
            mom[i] = mdot[i]*v_z[i+1];
            m[i] =Vol[i]*states[i].d;
            v_the[i] = rave[i]*omega[i];
            f_fluid[i] = omega[i]/(2*pi);
            s[i] = Medium.specificEntropy(states[i]);
          end for;
          //5 conservation equations, for mass, energy, and a velocity equation for each of rotational, radial, and translational speeds
          //Node 1//
          der(m[1]) + mdot[2]-mdot[1] = 0;
          m[1]*der(Medium.specificInternalEnergy(states[1])) + hflow[2]-hflow[1] = -p[1]*Vol[1]*(v_z[2]-v_z[1])/dz[1] - v_z[2]*Ff[1]+Q[1];
          //m[1]*der(v_z[2]) + momdot[2]-momdot[1] + Amid[1]*((p[2]-p[1])+states[1].d*grav*dheight[1])/dz[1] = -Ff[1]+Fz[1];
          m[1]*der(v_z[2]) + momdot[2]-momdot[1] + A_flow[2]*p[2]-A_flow[1]*p[1] = -Ff[1]+Fz[1];
          m[1]*der(v_r[1]) + radmomdot[2] - radmomdot[1] = Fr[1];
          m[1]*der(v_the[1]) + rotmomdot[2]-rotmomdot[1] = Fthe[1];

          //Node 2//
          der(m[2])  + mdot[3]-mdot[2] = 0;
          m[2]*der(Medium.specificInternalEnergy(states[2]))  + hflow[3]-hflow[2] =-p[2]*Vol[2]*(v_z[3]-v_z[2])/dz[2] - v_z[3]*Ff[2]+Q[2];
          m[2]*der(v_z[3]) + momdot[3]-momdot[2]+A_flow[3]*pout-A_flow[2]*p[2]=-Ff[2]+Fz[2];// + Ff[2] = Fz[2];
          m[2]*der(v_r[2]) + radmomdot[3]-radmomdot[2] = Fr[2];
          m[2]*der(v_the[2]) + rotmomdot[3]-rotmomdot[2] = Fthe[2];

         //boundary conditions//

        //  mtap = 0;

          for i in 1:nV+1 loop
            v_z[i]*A_flow[i]*rhoflow[i] = mdot[i];
            momdot[i] = abs(v_z[i])*mdot[i];
            rave[i] = 0.75*(ro[i]^4-ri[i]^4)/(ro[i]^3-ri[i]^3);
          end for;
          dv_r[1] = semiLinear(
              BaseClasses.NZer(v_z[1]),
              v_r[1] - v_rin,
              v_r[1] - v_r[2]);
          dv_r[2] = semiLinear(
              BaseClasses.NZer(v_z[2]),
              v_r[2] - v_r[1],
              v_r[2] - v_rout);
          dv_z[1] = v_z[2]-v_z[1];
          dv_z[2] = v_z[3]-v_z[2];
          dv_the[1] = semiLinear(
              BaseClasses.NZer(v_z[1]),
              v_the[1] - v_thein,
              v_the[1] - v_the[2]);
          dv_the[2] = semiLinear(
              BaseClasses.NZer(v_z[2]),
              v_the[2] - v_the[1],
              v_the[2] - v_theout);
          //semiLinear should take care of the donor directions.
          hflow[1] = semiLinear(mdot[1],hin,h[1]);
          radmomdot[1] = semiLinear(mdot[1],v_rin,v_r[1]);
          rotmomdot[1] = semiLinear(mdot[1],v_thein,v_the[1]);
          rhoflow[1] = semiLinear(v_z[1]/(sqrt(v_z[1]*v_z[1]+0.00001)),Medium.density(Medium.setState_phX(pin,hin,Medium.X_default)),-states[1].d);
          //interface-by-interface enthalpy flow calculations.
          hflow[2] = semiLinear(mdot[2],h[1],h[2]);
          radmomdot[2] = semiLinear(mdot[2],v_r[1],v_r[2]);
          rotmomdot[2] = semiLinear(mdot[2],v_the[1],v_the[2]);
          rhoflow[2] = semiLinear(v_z[2]/sqrt((v_z[2]*v_z[2]+0.00001)),states[1].d,-states[2].d);

          //min = mdot[1];
          hflow[3] = semiLinear(mdot[3],h[2],hout);
          radmomdot[3] = semiLinear(mdot[3],v_r[2],v_rout);
          rotmomdot[3] = semiLinear(mdot[3],v_the[2],v_theout);
          rhoflow[3] = semiLinear(v_z[3]/sqrt((v_z[3]*v_z[3]+0.00001)),states[2].d,-Medium.density(Medium.setState_phX(pout,hout,Medium.X_default)));
          //v_rin = 0;
         // v_thein = 0;
          //pout = 500000;
        //  hin = 3000e3;
          //mdot[1] = 66.3;
          vnet[1]*vnet[1] = semiLinear(
              BaseClasses.NZer(v_z[1]),
              v_rin,
              v_r[1])^2 + semiLinear(
              BaseClasses.NZer(v_z[1]),
              v_thein,
              v_the[1])^2 + v_z[1]*v_z[1];
          vnet[2]*vnet[2] = semiLinear(
              BaseClasses.NZer(v_z[2]),
              v_r[1],
              v_r[2])^2 + semiLinear(
              BaseClasses.NZer(v_z[2]),
              v_the[1],
              v_the[2])^2 + v_z[2]*v_z[2];
          vnet[3]*vnet[3] = semiLinear(
              BaseClasses.NZer(v_z[3]),
              v_r[2],
              v_rout)^2 + semiLinear(
              BaseClasses.NZer(v_z[2]),
              v_the[2],
              v_theout)^2 + v_z[3]*v_z[3];
          hout = states[2].h;
          v_theout = v_the[2];
          v_rout = v_r[2];
          p[1] = pin;
          //mdot[3] + Outlet.m_flow = 0;

          hin=inStream(Inlet.h_outflow);
          Inlet.h_outflow = hin;
            Inlet.p = p[1];
          Inlet.m_flow = mdot[1];
          v_rin = Inlet.v_r;
          inStream(Inlet.v_r) = v_rin;
          Inlet.v_theta = v_thein;
          inStream(Inlet.v_theta) = v_thein;
          pout = Outlet.p;
          hout = Outlet.h_outflow;
            Outlet.m_flow + mdot[3]=0;
          Outlet.v_r = v_rout;
          Outlet.v_theta = v_theout;

          Inlet.Xi_outflow = inStream(Outlet.Xi_outflow);
          Inlet.C_outflow = inStream(Outlet.C_outflow);
          Outlet.Xi_outflow = inStream(Inlet.Xi_outflow);
          Outlet.Xi_outflow = inStream(Inlet.C_outflow);

          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Polygon(
                  points={{-32,-40},{-22,-22},{-28,-6},{100,-6},{100,-40},{-32,-40}},
                  lineColor={28,108,200},
                  fillColor={0,128,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-40,-36},{-30,-36},{-22,-22},{-28,-6},{-42,-6},{-34,-20},{-40,
                      -36}},
                  lineColor={28,108,200},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,-40},{-42,-40},{-34,-20},{-42,-6},{-100,-6},{-100,-40}},
                  lineColor={28,108,200},
                  fillColor={0,128,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,40},{-40,40},{-32,20},{-40,6},{-100,6},{-100,40}},
                  lineColor={28,108,200},
                  fillColor={0,128,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-38,36},{-28,36},{-20,22},{-26,6},{-40,6},{-32,20},{-38,36}},
                  lineColor={28,108,200},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-30,40},{-20,22},{-26,6},{100,6},{100,40},{-30,40}},
                  lineColor={28,108,200},
                  fillColor={0,128,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,40},{100,40},{100,52},{-100,44},{-100,40}},
                  lineColor={28,108,200},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,-40},{100,-40},{100,-52},{-100,-44},{-100,-40}},
                  lineColor={28,108,200},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-100,6},{100,-6}},
                  lineColor={28,108,200},
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-86,42},{-38,4}},
                  lineColor={0,0,0},
                  textString="1"),
                Text(
                  extent={{16,40},{64,2}},
                  lineColor={0,0,0},
                  textString="2")}),                                     Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>The rotor stage is similar to the stator stage in structure. 2 fluid nodes calculate fluid properties, and two fluid ports connect to other parts of the turbine. A torque port is also present on the rotor stage to account for the energy removed from the fluid and applied to the turbine. </p>
<p>The primary difference between the rotor stage and the stator stage is that there is a viscosity approximation that impacts the resulting angle of rotational deflection. Considering the no-slip condition, there are 2 physical phenomena that impact that actual resulting rotation of the fluid as it flows through the turbine stages. The first is a contact force between the fluid as it impinges upon the blades of the turbine. The second force is the internal viscous forces that propagates much of this contact force through the remainder of the fluid. This is not an instantaneous action and is impacted then by the speed of the fluid. As such, there is a quadratic correction equation introduced into the rotor stage. The coefficients thus far have been estimated by investigating the impact that reducing turbine velocity has on the relative rotational speed of the turbine and the fluid. The biggest takeaway from this is: the fluid speed should be kept at near-nominal values where possible to continue to maintain confidence in results. Future care could be taken to obtain a generalized equation for this change in angular deflection. </p>
</html>"));
        end Rotor_Stage;

        model MS
          "Fluid flow port compatible moisture separator. Liquid removal port is standard fluid port."
          replaceable package Medium = Modelica.Media.Water.StandardWater;
          parameter Modelica.Units.SI.Volume V_MS=0.05 "Moisture separator volume";
          parameter Real eta = 0.99 "Separation efficiency";
          parameter Modelica.Units.SI.Pressure p_start=200000 "Initial pressure";
          parameter Modelica.Units.SI.SpecificEnthalpy h_start=2000e3 "Initial steam mixture enthalpy";

          BaseClasses.TRANSFORMMoistureSeparator_MIKK separator(
            redeclare package Medium = Medium,
            p_start=p_start,
            use_T_start=false,
            h_start=h_start,
            redeclare model Geometry =
                TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
                (V=V_MS),
            eta_sep=eta)
            annotation (Placement(transformation(extent={{-8,-10},{12,10}})));
          BaseClasses.Turbine_Outlet turbine_Outlet(Vels_out=true)
            annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));
          BaseClasses.Turbine_Inlet turbine_Inlet(Vels_in=true)
            annotation (Placement(transformation(extent={{20,-10},{40,10}})));
          BaseClasses.FluidFlow Turb_In(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
          BaseClasses.FluidFlow Turb_Out(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{90,-10},{110,10}})));
          Modelica.Fluid.Interfaces.FluidPort_a Liquid(redeclare package Medium =
                Medium)
            annotation (Placement(transformation(extent={{-10,-42},{10,-22}}),
                iconTransformation(extent={{-10,-42},{10,-22}})));
        equation

          connect(turbine_Inlet.v_thein, turbine_Outlet.v_theout) annotation (Line(
                points={{35.6,4.6},{35.6,20},{-34.4,20},{-34.4,4.6}}, color={0,0,127}));
          connect(turbine_Outlet.v_rout, turbine_Inlet.v_rin) annotation (Line(points={{
                  -34.2,-4.6},{-34.2,-22},{35.8,-22},{35.8,-4.6}}, color={0,0,127}));
          connect(separator.port_Liquid, Liquid)
            annotation (Line(points={{-2,-4},{-2,-32},{0,-32}},   color={0,127,255}));
          connect(separator.port_b, turbine_Inlet.Pipe_flow)
            annotation (Line(points={{8,0},{20,0}}, color={0,127,255}));
          connect(separator.port_a, turbine_Outlet.Pipe_flow)
            annotation (Line(points={{-4,0},{-30,0}}, color={0,127,255}));
          connect(turbine_Outlet.Turb_flow, Turb_In) annotation (Line(points={{-49.9,0.1},
                  {-72.95,0.1},{-72.95,0},{-100,0}}, color={28,108,200}));
          connect(turbine_Inlet.Turb_flow, Turb_Out) annotation (Line(points={{39.9,-0.1},
                  {69.95,-0.1},{69.95,0},{100,0}}, color={28,108,200}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,-12},{100,-34}},
                  lineColor={28,108,200},
                  fillColor={33,133,255},
                  fillPattern=FillPattern.Solid),
                  Rectangle(
                  extent={{-100,26},{100,-12}},
                  lineColor={28,108,200},
                  fillColor={170,255,255},
                  fillPattern=FillPattern.Solid), Rectangle(
                  extent={{-48,-12},{48,-34}},
                  lineColor={28,108,200},
                  fillColor={0,0,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-78,20},{70,20},{70,16},{-72,16},{-72,12},{70,12},{70,8},{
                      -72,8},{-72,4},{70,4},{70,0},{-72,0},{-72,-4},{70,-4},{70,-8},{
                      -72,-8}},
                  color={175,175,175},
                  thickness=1),
                Polygon(
                  points={{-76,-8},{-70,-10},{-66,-12},{-66,-14},{-64,-12},{-60,-10},{
                      -54,-10},{-52,-10},{-50,-8},{-76,-8}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillColor={85,170,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-64,-16},{-66,-20}},
                  lineColor={0,0,0},
                  fillColor={85,170,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{24,16},{30,14},{34,12},{34,10},{36,12},{40,14},{46,14},{48,
                      14},{50,16},{24,16}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillColor={85,170,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{36,8},{34,4}},
                  lineColor={0,0,0},
                  fillColor={85,170,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-18,4},{-12,2},{-8,0},{-8,-2},{-6,0},{-2,2},{4,2},{6,2},{8,4},
                      {-18,4}},
                  lineColor={0,0,0},
                  smooth=Smooth.Bezier,
                  fillColor={85,170,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-6,-4},{-8,-8}},
                  lineColor={0,0,0},
                  fillColor={85,170,255},
                  fillPattern=FillPattern.Solid)}),                      Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>This moisture separator portion was submitted to TRANSFORM. As of now, the author has not checked to make sure that the TRANSFORM moisture separator has been updated based on that submission (separation efficiency application was changed). The model accepts a fluid stream and diverts an assumed efficiency amount of liquid to a third port. Note: the liquid removal port&rsquo;s pressure is allowed to float due to modeling restrictions (cannot dictate m, h, and p). </p>
<p>The main function is: </p>
<p><span style=\"font-family: Calibri; font-size: 11pt;\"><img src=\"file:///C:/Users/MIKKDM/AppData/Local/Temp/4/msohtmlclip1/01/clip_image002.png\"/></span> </p>
</html>"));
        end MS;

        model Turbine_Tap
          "Two fluid flow ports with a standard fluid flow tap port, the pressure is set to be equal across all ports and the mass flow rates between the ports are conserved."
          replaceable package medium = Modelica.Media.Water.StandardWater;
          BaseClasses.FluidFlow Turb_flow(redeclare package Medium = medium)
            annotation (Placement(transformation(extent={{-110,-10},{-90,10}}),
                iconTransformation(extent={{-114,-14},{-84,16}})));
          TRANSFORM.Fluid.Interfaces.FluidPort_Flow Tap_flow(redeclare package
              Medium =                                                                   medium)
            annotation (Placement(transformation(extent={{-10,-42},{10,-22}}),
                iconTransformation(extent={{-10,-42},{10,-22}})));
          BaseClasses.FluidFlow Turb_flow2(redeclare package Medium = medium)
            annotation (Placement(transformation(extent={{92,-10},{112,10}}),
                iconTransformation(extent={{92,-10},{112,10}})));
        equation
          Tap_flow.m_flow + Turb_flow.m_flow + Turb_flow2.m_flow= 0 "Mass conservation";
           Tap_flow.p = Turb_flow.p;
          Turb_flow2.p=Turb_flow.p;

          Turb_flow2.v_r = inStream(Turb_flow.v_r);
          Turb_flow.v_r = inStream(Turb_flow2.v_r);
          Turb_flow2.v_theta = inStream(Turb_flow.v_theta);
          Turb_flow.v_theta = inStream(Turb_flow2.v_theta);
          Turb_flow2.h_outflow = inStream(Turb_flow.h_outflow);
          Turb_flow2.Xi_outflow = inStream(Turb_flow.Xi_outflow);
          Turb_flow.Xi_outflow = inStream(Turb_flow2.Xi_outflow);
          Turb_flow2.C_outflow = inStream(Turb_flow.C_outflow);
          Turb_flow.C_outflow = inStream(Turb_flow2.C_outflow);
          Turb_flow.h_outflow = inStream(Turb_flow2.h_outflow);
          Tap_flow.h_outflow = inStream(Turb_flow.h_outflow);
          Tap_flow.C_outflow = inStream(Turb_flow.C_outflow);
          Tap_flow.Xi_outflow = inStream(Turb_flow.Xi_outflow);
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,-12},{100,-34}},
                  lineColor={28,108,200},
                  fillColor={85,170,255},
                  fillPattern=FillPattern.Solid),
                  Rectangle(
                  extent={{-100,26},{100,-12}},
                  lineColor={28,108,200},
                  fillColor={85,170,255},
                  fillPattern=FillPattern.Solid), Rectangle(
                  extent={{-48,-12},{48,-34}},
                  lineColor={28,108,200},
                  fillColor={0,0,255},
                  fillPattern=FillPattern.Solid)}),                      Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>The turbine tap equates pressure at all 3 ports: 2 fluid flow ports and a fluid port. The mass flow rate conservation equation is imposed as well. The amount of mass flow removed from the main turbine flow at any point is a function of what is downstream of the turbine taps. The rotational and radial flow are maintained from the tap inlet to the tap outlet. &nbsp; </p>
</html>"));
        end Turbine_Tap;

        model TeeJunctionIdeal_Cyl
          "Splitting/joining component with static balances for an infinitesimal control volume. Effectively the opposite of a Turbine_Tap, but uses 3 Fluid Flow ports."
          extends
            NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.PartialTeeJunction_Cyl;

        equation
          connect(port_1, port_2) annotation (Line(
              points={{-100,0},{100,0}}, color={0,127,255}));
          connect(port_1, port_3) annotation (Line(
              points={{-100,0},{0,0},{0,100}}, color={0,127,255}));
          annotation(Documentation(info="<html>
  This model is the simplest implementation for a splitting/joining component for
  three flows. Its use is not required. It just formulates the balance
  equations in the same way that the connect semantics would formulate them anyways.
  The main advantage of using this component is, that the user does not get
  confused when looking at the specific enthalpy at each port which might be confusing
  when not using a splitting/joining component. The reason for the confusion is that one examines the mixing
  enthalpy of the infinitesimal control volume introduced with the connect statement when
  looking at the specific enthalpy in the connector which
  might not be equal to the specific enthalpy at the port in the \"real world\".</html>"));
        end TeeJunctionIdeal_Cyl;

        model Turbine_Physical
          Modelica.Mechanics.Rotational.Interfaces.Flange_a Generator_torque
            annotation (Placement(transformation(extent={{90,48},{110,68}}),
                iconTransformation(extent={{90,48},{110,68}})));
          parameter Integer nSt = 10 "Number of ROTOR stages this model will be connected to";
          parameter Modelica.Units.SI.MomentOfInertia I_turb=1000 "Moment of inertia of the entire turbine";
          parameter Modelica.Units.SI.AngularVelocity om_start=3600*60/(2*3.14159) "Initial rotational speed";
          Modelica.Units.SI.AngularVelocity om(start=om_start) "Rotational speed of turbine";
          Modelica.Units.SI.Torque torq_int[nSt] "Internal torque vector";
          Modelica.Units.SI.Torque total_torque_fluid "Sum of internal torque vector";
          Modelica.Units.SI.Angle phi(start=0) "Initial angle, required for Flange_a port to the generator";
          Modelica.Units.SI.Power P_turb "Turbine power";

          BaseClasses.Torque Fluidtorques[nSt]
            annotation (Placement(transformation(extent={{-14,-42},{6,-22}})));

        equation
          for i in 1:nSt loop
            Fluidtorques[i].w = om;
            Fluidtorques[i].tau = torq_int[i];
          end for;
          der(om)*I_turb = total_torque_fluid + Generator_torque.tau;
          total_torque_fluid = sum(torq_int);
          phi = Generator_torque.phi;
          der(phi) = om;
          P_turb = total_torque_fluid*om;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Polygon(
                  points={{-100,38},{-100,-22},{100,-42},{100,78},{-100,38}},
                  lineColor={28,108,200},
                  fillColor={181,181,181},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{32,86},{112,34}},
                  lineColor={244,125,35},
                  fillColor={181,181,181},
                  fillPattern=FillPattern.None,
                  textString="e-")}),                                    Diagram(
                coordinateSystem(preserveAspectRatio=false), graphics={Polygon(
                  points={{-100,40},{-100,-20},{100,-40},{100,80},{-100,40}},
                  lineColor={28,108,200},
                  fillColor={181,181,181},
                  fillPattern=FillPattern.Solid)}),
            Documentation(info="<html>
<p>The physical turbine model connects to rotor stage components via the torque port. It also connects to the generator via a torque port. The turbine itself maintains a rotational speed omega, and a torque equation is applied on the turbine to determine that rotational speed. The main turbine parameters are the number of torque ports (should equal the number of rotor stages) and the moment of inertia of the turbine. </p>
</html>"));
        end Turbine_Physical;

        package Boundary_Conditions

          model MassFlowSource_h
            "Ideal flow source that produces a prescribed mass flow with prescribed specific enthalpy, mass fraction and trace substances"
            import Modelica.Media.Interfaces.Choices.IndependentVariables;
            extends
              NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.CylindricalSupport.PartialFlowSource;
            parameter Boolean use_m_flow_in = false
              "Get the mass flow rate from the input connector"
              annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
            parameter Boolean use_h_in= false
              "Get the specific enthalpy from the input connector"
              annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
            parameter Boolean use_X_in = false
              "Get the composition from the input connector"
              annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
            parameter Boolean use_C_in = false
              "Get the trace substances from the input connector"
              annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
            parameter Medium.MassFlowRate m_flow = 0
              "Fixed mass flow rate going out of the fluid port"
              annotation (Evaluate = true,
                          Dialog(enable = not use_m_flow_in));
            parameter Medium.SpecificEnthalpy h = Medium.h_default
              "Fixed value of specific enthalpy"
              annotation (Evaluate = true,
                          Dialog(enable = not use_h_in));
            parameter Medium.MassFraction X[Medium.nX] = Medium.X_default
              "Fixed value of composition"
              annotation (Evaluate = true,
                          Dialog(enable = (not use_X_in) and Medium.nXi > 0));
            parameter Medium.ExtraProperty C[Medium.nC](
                 quantity=Medium.extraPropertiesNames)=fill(0, Medium.nC)
              "Fixed values of trace substances"
              annotation (Evaluate=true,
                          Dialog(enable = (not use_C_in) and Medium.nC > 0));
            Modelica.Blocks.Interfaces.RealInput m_flow_in     if use_m_flow_in
              "Prescribed mass flow rate"
              annotation (Placement(transformation(extent={{-120,60},{-80,100}})));
            Modelica.Blocks.Interfaces.RealInput h_in              if use_h_in
              "Prescribed fluid specific enthalpy"
              annotation (Placement(transformation(extent={{-140,20},{-100,60}}), iconTransformation(extent={{-140,20},{-100,60}})));
            Modelica.Blocks.Interfaces.RealInput X_in[Medium.nX]
                                                               if use_X_in
              "Prescribed fluid composition"
              annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
            Modelica.Blocks.Interfaces.RealInput C_in[Medium.nC]
                                                               if use_C_in
              "Prescribed boundary trace substances"
              annotation (Placement(transformation(extent={{-120,-100},{-80,-60}}), iconTransformation(extent={{-120,-100},{-80,-60}})));
          protected
            Modelica.Blocks.Interfaces.RealInput m_flow_in_internal
              "Needed to connect to conditional connector";
            Modelica.Blocks.Interfaces.RealInput h_in_internal
              "Needed to connect to conditional connector";
            Modelica.Blocks.Interfaces.RealInput X_in_internal[Medium.nX]
              "Needed to connect to conditional connector";
            Modelica.Blocks.Interfaces.RealInput C_in_internal[Medium.nC]
              "Needed to connect to conditional connector";
          equation
            Modelica.Fluid.Utilities.checkBoundary(
              Medium.mediumName,
              Medium.substanceNames,
              Medium.singleState,
              true,
              X_in_internal,
              "MassFlowSource_h");
            connect(m_flow_in, m_flow_in_internal);
            connect(h_in, h_in_internal);
            connect(X_in, X_in_internal);
            connect(C_in, C_in_internal);
            if not use_m_flow_in then
              m_flow_in_internal = m_flow;
            end if;
            if not use_h_in then
              h_in_internal = h;
            end if;
            if not use_X_in then
              X_in_internal = X;
            end if;
            if not use_C_in then
              C_in_internal = C;
            end if;
            if Medium.ThermoStates == IndependentVariables.ph or
               Medium.ThermoStates == IndependentVariables.phX then
               medium.h = h_in_internal;
            else
               medium.T = Medium.temperature(Medium.setState_phX(medium.p, h_in_internal, X_in_internal));
            end if;
            sum(ports.m_flow) = -m_flow_in_internal;
            medium.Xi = X_in_internal[1:Medium.nXi];
            ports.C_outflow = fill(C_in_internal, nPorts);
            annotation (defaultComponentName="boundary",
              Icon(coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                    extent={{36,45},{100,-45}},
                    lineColor={0,0,0},
                    fillPattern=FillPattern.HorizontalCylinder,
                    fillColor={0,127,255}),
                  Ellipse(
                    extent={{-100,80},{60,-80}},
                    lineColor={0,0,255},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{-60,70},{60,0},{-60,-68},{-60,70}},
                    lineColor={0,0,255},
                    fillColor={0,0,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{-54,32},{16,-30}},
                    lineColor={255,0,0},
                    textString="m"),
                  Ellipse(
                    extent={{-26,30},{-18,22}},
                    lineColor={255,0,0},
                    fillColor={255,0,0},
                    fillPattern=FillPattern.Solid),
                  Text(
                    visible=use_m_flow_in,
                    extent={{-185,132},{-45,100}},
                    lineColor={0,0,0},
                    textString="m_flow"),
                  Text(
                    visible=use_h_in,
                    extent={{-113,72},{-73,38}},
                    lineColor={0,0,0},
                    textString="h"),
                  Text(
                    visible=use_X_in,
                    extent={{-153,-44},{-33,-72}},
                    lineColor={0,0,0},
                    textString="X"),
                  Text(
                    visible=use_X_in,
                    extent={{-155,-98},{-35,-126}},
                    lineColor={0,0,0},
                    textString="C")}),
              Documentation(info="<html>
<p>
Models an ideal flow source, with prescribed values of flow rate, temperature and composition:
</p>
<ul>
<li> Prescribed mass flow rate.</li>
<li> Prescribed specific enthalpy.</li>
<li> Boundary composition (only for multi-substance or trace-substance flow).</li>
</ul>
<p>If <code>use_m_flow_in</code> is false (default option), the <code>m_flow</code> parameter
is used as boundary pressure, and the <code>m_flow_in</code> input connector is disabled; if <code>use_m_flow_in</code> is true, then the <code>m_flow</code> parameter is ignored, and the value provided by the input connector is used instead.</p>
<p>The same thing goes for the temperature and composition</p>
<p>
Note, that boundary temperature,
mass fractions and trace substances have only an effect if the mass flow
is from the boundary into the port. If mass is flowing from
the port into the boundary, the boundary definitions,
with exception of boundary flow rate, do not have an effect.
</p>
</html>"));
          end MassFlowSource_h;

          model Boundary_ph
            "Boundary with prescribed pressure, specific enthalpy, composition and trace substances"
            import Modelica.Media.Interfaces.Choices.IndependentVariables;
            extends
              NHES.Systems.BalanceOfPlant.RankineCycle.Models.StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.CylindricalSupport.PartialSource;
            parameter Boolean use_p_in = false
              "Get the pressure from the input connector"
              annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
            parameter Boolean use_h_in= false
              "Get the specific enthalpy from the input connector"
              annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
            parameter Boolean use_X_in = false
              "Get the composition from the input connector"
              annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
            parameter Boolean use_C_in = false
              "Get the trace substances from the input connector"
              annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
            parameter Medium.AbsolutePressure p = Medium.p_default
              "Fixed value of pressure"
              annotation (Evaluate = true,
                          Dialog(enable = not use_p_in));
            parameter Medium.SpecificEnthalpy h = Medium.h_default
              "Fixed value of specific enthalpy"
              annotation (Evaluate = true,
                          Dialog(enable = not use_h_in));
            parameter Medium.MassFraction X[Medium.nX] = Medium.X_default
              "Fixed value of composition"
              annotation (Evaluate = true,
                          Dialog(enable = (not use_X_in) and Medium.nXi > 0));
            parameter Medium.ExtraProperty C[Medium.nC](
                 quantity=Medium.extraPropertiesNames)=fill(0, Medium.nC)
              "Fixed values of trace substances"
              annotation (Evaluate=true,
                          Dialog(enable = (not use_C_in) and Medium.nC > 0));
            Modelica.Blocks.Interfaces.RealInput p_in if use_p_in
              "Prescribed boundary pressure"
              annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
            Modelica.Blocks.Interfaces.RealInput h_in if use_h_in
              "Prescribed boundary specific enthalpy"
              annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
            Modelica.Blocks.Interfaces.RealInput X_in[Medium.nX] if use_X_in
              "Prescribed boundary composition"
              annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
            Modelica.Blocks.Interfaces.RealInput C_in[Medium.nC] if use_C_in
              "Prescribed boundary trace substances"
              annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
          protected
            Modelica.Blocks.Interfaces.RealInput p_in_internal
              "Needed to connect to conditional connector";
            Modelica.Blocks.Interfaces.RealInput h_in_internal
              "Needed to connect to conditional connector";
            Modelica.Blocks.Interfaces.RealInput X_in_internal[Medium.nX]
              "Needed to connect to conditional connector";
            Modelica.Blocks.Interfaces.RealInput C_in_internal[Medium.nC]
              "Needed to connect to conditional connector";
          equation
            Modelica.Fluid.Utilities.checkBoundary(Medium.mediumName, Medium.substanceNames,
              Medium.singleState, true, X_in_internal, "Boundary_ph");
            connect(p_in, p_in_internal);
            connect(h_in, h_in_internal);
            connect(X_in, X_in_internal);
            connect(C_in, C_in_internal);
            if not use_p_in then
              p_in_internal = p;
            end if;
            if not use_h_in then
              h_in_internal = h;
            end if;
            if not use_X_in then
              X_in_internal = X;
            end if;
            if not use_C_in then
              C_in_internal = C;
            end if;
            medium.p = p_in_internal;
            if Medium.ThermoStates == IndependentVariables.ph or
               Medium.ThermoStates == IndependentVariables.phX then
               medium.h = h_in_internal;
            else
               medium.T = Medium.temperature(Medium.setState_phX(p_in_internal, h_in_internal, X_in_internal));
            end if;
            medium.Xi = X_in_internal[1:Medium.nXi];
            ports.C_outflow = fill(C_in_internal, nPorts);
            annotation (defaultComponentName="boundary",
              Icon(coordinateSystem(
                  preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                  Ellipse(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,0},
                    fillPattern=FillPattern.Sphere,
                    fillColor={0,127,255}),
                  Line(
                    visible=use_p_in,
                    points={{-100,80},{-60,80}},
                    color={0,0,255}),
                  Line(
                    visible=use_h_in,
                    points={{-100,40},{-92,40}},
                    color={0,0,255}),
                  Line(
                    visible=use_X_in,
                    points={{-100,-40},{-92,-40}},
                    color={0,0,255}),
                  Line(
                    visible=use_C_in,
                    points={{-100,-80},{-60,-80}},
                    color={0,0,255}),
                  Text(
                    visible=use_p_in,
                    extent={{-150,134},{-72,94}},
                    lineColor={0,0,0},
                    textString="p"),
                  Text(
                    visible=use_h_in,
                    extent={{-166,34},{-64,-6}},
                    lineColor={0,0,0},
                    textString="h"),
                  Text(
                    visible=use_X_in,
                    extent={{-164,4},{-62,-36}},
                    lineColor={0,0,0},
                    textString="X"),
                  Text(
                    visible=use_C_in,
                    extent={{-164,-90},{-62,-130}},
                    lineColor={0,0,0},
                    textString="C")}),
              Documentation(info="<html>
<p>
Defines prescribed values for boundary conditions:
</p>
<ul>
<li> Prescribed boundary pressure.</li>
<li> Prescribed boundary temperature.</li>
<li> Boundary composition (only for multi-substance or trace-substance flow).</li>
</ul>
<p>If <code>use_p_in</code> is false (default option), the <code>p</code> parameter
is used as boundary pressure, and the <code>p_in</code> input connector is disabled; if <code>use_p_in</code> is true, then the <code>p</code> parameter is ignored, and the value provided by the input connector is used instead.</p>
<p>The same thing goes for the specific enthalpy and composition</p>
<p>
Note, that boundary temperature,
mass fractions and trace substances have only an effect if the mass flow
is from the boundary into the port. If mass is flowing from
the port into the boundary, the boundary definitions,
with exception of boundary pressure, do not have an effect.
</p>
</html>"));
          end Boundary_ph;
        end Boundary_Conditions;

        model Generator_Basic
          "Boundary condition generator for a shaft connector with no electical power connector"
          Modelica.Mechanics.Rotational.Interfaces.Flange_a shaft annotation (Placement(
                transformation(extent={{-110,-10},{-90,10}}, rotation=0),
                iconTransformation(extent={{-111,-11},{-91,9}})));
          SI.Angle phi(start=0,fixed=true) "Absolute rotation angle of component";
          SI.AngularVelocity omega_m "Absolute angular velocity of component (= der(phi))";
          SI.AngularAcceleration a
            "Absolute angular acceleration of component (= der(w))";
          parameter Real efficiency=0.99 "Constant generator efficiency";
          parameter SI.AngularVelocity omega_nominal=50*2*3.14
            "Fixed angular mechanical flange velocity";
          Modelica.Units.SI.Power power "Generated power";
          Modelica.Blocks.Interfaces.RealOutput Power annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={0,108})));
        equation
          // Assumes that the rotational inertia rotates with a fixed speed, i.e. the acceleration is 0
          power =shaft.tau*omega_m*efficiency;
          power = Power;
          phi =shaft.phi;
          der(phi) = omega_m;
          omega_m = omega_nominal;
          a = 0;
          annotation (defaultComponentName="generator",
            Icon(graphics={
                Rectangle(
                  extent={{-102,6},{-60,-6}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={160,160,164}),    Ellipse(
                      extent={{60,-60},{-60,60}},
                      lineColor={0,0,0},
                      lineThickness=0.5,
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),
                                 Text(
                      extent={{-26,24},{28,-28}},
                      lineColor={0,0,0},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid,
                      textString="G")}),
            Documentation(info="<html>
<p>This model describes the conversion between mechanical power and electrical power in an ideal synchronous generator. 
The frequency in the electrical connector is the e.m.f. of generator.
<p>It is possible to consider the generator inertia in the model, by setting the parameter <tt>J > 0</tt>. 
</html>"));
        end Generator_Basic;
      annotation (Documentation(info="<html>
<p>The goal of this package is to allow for the detailed simulation of an energy conversion cycle. That is achieved by building a turbine in a stage-by-stage format, designing with deflection angles and cross sectional areas. By designing the turbine in this manner, the user has ready access to intermediate fluid conditions and can either tap these fluid streams or use moisture separators. Additionally, a user can junction in other fluid streams (so if one wanted a reheat stream or a peaking stream). </p>
<p>This is done by changing the velocity profile from 1-D into 3-D cylindrical. The geometry is still 1-D area averaged, and so the velocities are still defined as existing within a single axial node, but simply having those rotational and radial components. The forces exchanged between the turbine stages and the HTF define the torque applied on the turbine, which then dictates the power via a generator component. </p>
<p>The Eight_Stage_Turbine example shows all of the capabilities of this package in one single location. It demonstrates the use of the stator and rotor stages, along with the conversion components switching between the cylindrical flow and linear flow components. It also shows the application of the new boundary conditions. </p>
<p>This package has allowed for simulation of some of the most complex fluid networks observed to date within Dymola/Modelica. Due to the complexity involved by adding so many junctions, it is highly recommended that users build systems component-by-component. Attempting to combine many components together without a grasp for initial conditions can cause failure in initialization stages in otherwise well-posed systems (true across all of Dymola, but very easy to do here). </p>
<p>The original intent of this package was to enhance our ability to observe system-wide implications of the use of energy storage in integrated energy systems with nuclear reactors. System-wide pressure changes are readily observed when these systems are built up and nuclear reactor feedback is observable. Minimal control optimization has been done so far, but having this level of complexity in our modeling should allow for control mechanism studies moving forward. </p>
<p>A final developer note: when building such complex fluid networks, it is often possible that adding even one more connection can cause the Dymola matrix building routines to fail and have some form of computation error. It is often possible to alleviate this issue by introducing a quick &quot;Delay&quot; component. While admittedly not physical, even introducing a delay component with a 1ms derivative term can help loosen the solution matrix. It is better to have a minimally off solution than no solution at all. </p>
<p>(A delay box sets Time_Constant*der(Output) = Input-Output, so technically Output=/=Input, but it&apos;s always exponentially approaching and should be equal within general orders of magnitude. And hey, it&apos;s probably better than our correlations). </p>
<p>Contact: Daniel Mikkelson, Ph.D.</p>
<p>Idaho National Laboratory</p>
<p>daniel.mikkelson@inl.gov</p>
</html>"));
      end StagebyStageTurbine;

      package Control_and_Distribution "A support package for the stage by stage turbine package."

        model SpringBallValve
          "Valve that allows minimum flow until a pressure value is met, and then becomes completely open."
          extends TRANSFORM.Fluid.Valves.BaseClasses.PartialTwoPortTransport;
          parameter Modelica.Units.SI.AbsolutePressure p_spring
            "Nominal pressure at which valve will open"
            annotation (Dialog(group="Nominal operating point"));
          input Real K( unit="1/(m.kg)") "This value is equal to K_nominal/(2*A^2) for flow area A and lookup value K_nominal in standard engineering tables."
            annotation (Dialog(group="Inputs"));
          Modelica.Units.SI.AbsolutePressure p_in;
          parameter Real opening_init = 1;
          Real opening(start = opening_init);
          parameter Real tau(unit = "1/s") = 0.1;
          parameter Real open_min = 0;
        equation
          p_in = port_a.p;
          if p_in>p_spring then
            der(opening) = (1-opening)/tau;
          else
            der(opening) = (open_min-opening)/tau;
            end if;
          port_a.p-port_b.p = port_a.m_flow*sqrt(port_a.m_flow*port_a.m_flow + 0.001*0.001)*K/((opening+0.001));
          // Isenthalpic state transformation (no storage and no loss of energy)
          port_a.h_outflow = inStream(port_b.h_outflow);
          port_b.h_outflow = inStream(port_a.h_outflow);
        annotation (
          Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}}), graphics={
                Line(points={{0,50},{0,0}}),
                Rectangle(
                  extent={{-20,60},{20,50}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,50}},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points=DynamicSelect({{-100,0},{100,-0},{100,0},{0,0},{-100,-0},{-100,
                      0}}, {{-100,50*opening_actual},{-100,50*opening_actual},{100,-50*opening_actual},{
                      100,50*opening_actual},{0,0},{-100,-50*opening_actual},{-100,50*opening_actual}}),
                  fillColor={0,255,0},
                  lineColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,
                      50}}, lineColor={0,0,0})}),
          Documentation(info="<html>
<p>A spring ball valve is a 1-directional valve. Its defining flow characteristics are identical to other valves in the TRANSFORM library (dp_nominal, m_flow_nominal). The spring ball valve operates based on the inlet pressure of the valve: opening when a threshold pressure is reached and diminishing to a minimum opening value when the pressure is not high enough. &nbsp;&nbsp; </p>
</html>",   revisions="<html>
<ul>
<li><i>4 May 2020</i>
    by <a href=\"mailto:daniel.mikkelson@inl.gov\">Daniel Mikkelson</a>:<br>
       Adapted from the TRANSFORM library.</li>
</ul>
</html>"));
        end SpringBallValve;

        model ValveLineartanh
          "Valve for water/steam flows with near-linear pressure drop as a hyperbolic tangent function"
          extends TRANSFORM.Fluid.Valves.BaseClasses.PartialTwoPortTransport;
          parameter Modelica.Units.SI.AbsolutePressure dp_nominal
            "Nominal pressure drop at full opening"
            annotation (Dialog(group="Nominal operating point"));
          parameter Medium.MassFlowRate m_flow_nominal
            "Nominal mass flowrate at full opening";
          final parameter Modelica.Fluid.Types.HydraulicConductance k=m_flow_nominal/
              dp_nominal/0.93055 "Hydraulic conductance at full opening";
              Real opening_actual "Actual valve open amount";
          Modelica.Blocks.Interfaces.RealInput opening
            "=1: completely open, =0: completely closed"
          annotation (Placement(transformation(
                origin={0,90},
                extent={{-20,-20},{20,20}},
                rotation=270), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={0,80})));
        equation
          opening_actual = 0.5 + 0.5*tanh((opening-0.5)/0.379564427300032);
          //Note that this method allows for 6.5% overflow of nominal design points.
          m_flow = opening_actual*k*dp;

          // Isenthalpic state transformation (no storage and no loss of energy)
          port_a.h_outflow = inStream(port_b.h_outflow);
          port_b.h_outflow = inStream(port_a.h_outflow);
        annotation (
          Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}}), graphics={
                Line(points={{0,50},{0,0}}),
                Rectangle(
                  extent={{-20,60},{20,50}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,50}},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points=DynamicSelect({{-100,0},{100,-0},{100,0},{0,0},{-100,-0},{-100,
                      0}}, {{-100,50*opening_actual},{-100,50*opening_actual},{100,-50*opening_actual},{
                      100,50*opening_actual},{0,0},{-100,-50*opening_actual},{-100,50*opening_actual}}),
                  fillColor={0,255,0},
                  lineColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,
                      50}}, lineColor={0,0,0})}),
          Documentation(info="<html>
<p>This valve is a standard linear valve with one notable exception. The controlled opening value is not applied to the pressure drop equation. Instead, the hyperbolic tangent of the opening value is named opening_actual and that value is applied to the pressure drop equation. </p>
<p>The hyperbolic tangent function appears as a horizontal tangent function, changing from one extreme value to another over a small range. The advantage of a hyperbolic tangent function as opposed to a logical switch or even a linear switch between two values is that the function has a continuous derivative that can be evaluated within Modelica models. </p>
<p>The purpose of using this filter is to allow controllers to span any real value as an input while the valve will actually operate on [0,1]. (If allowed to go negative, the valve will increase pressure of fluid moving across it. </p>
</html>",   revisions="<html>
<ul>
<li><i>4 May 2020</i>
    by <a href=\"mailto:daniel.mikkelson@inl.gov\">Daniel Mikkelson</a>:<br>
       Adapted from the TRANSFORM library.</li>
</ul>
</html>"));
        end ValveLineartanh;

        block MinMaxFilter "Delays an input or output signal"
          parameter Real min = 0 "Minimum output value";
          parameter Real max = 1 "Maximum output value";

          Modelica.Blocks.Interfaces.RealInput u
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                  extent={{100,-14},{128,14}}), iconTransformation(extent={{100,-14},{128,
                    14}})));
        initial equation
        y=u;
        equation
          if
            (y <= min and u <= min) then
            der(y)=0;
          elseif
                (u >=max and y >= max) then
            der(y) = 0;
          else
            der(y) = u-y;
          end if;

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>The Min/Max filter uses a derivative term to exponentially approach a value. Once the minimum or maximum value is reached, then the derivative of the output is set to 0. </p>
</html>"));
        end MinMaxFilter;

        model ValveLinearTotal
          "Valve for water/steam flows with a linear pressure drop"
          extends TRANSFORM.Fluid.Valves.BaseClasses.PartialTwoPortTransport;
          parameter Modelica.Units.SI.AbsolutePressure dp_nominal
            "Nominal pressure drop at full opening"
            annotation (Dialog(group="Nominal operating point"));
          parameter Medium.MassFlowRate m_flow_nominal
            "Nominal mass flowrate at full opening";
          final parameter Modelica.Fluid.Types.HydraulicConductance k=m_flow_nominal/
              dp_nominal "Hydraulic conductance at full opening";
              Real opening_actual;
          Modelica.Blocks.Interfaces.RealInput opening
            "=1: completely open, =0: completely closed"
          annotation (Placement(transformation(
                origin={0,90},
                extent={{-20,-20},{20,20}},
                rotation=270), iconTransformation(
                extent={{-20,-20},{20,20}},
                rotation=270,
                origin={0,80})));

        equation

          opening_actual =opening;
          //Note that this method allows for 6.5% overflow of nominal design points.
          m_flow = opening_actual*k*dp;

          // Isenthalpic state transformation (no storage and no loss of energy)
          port_a.h_outflow = inStream(port_b.h_outflow);
          port_b.h_outflow = inStream(port_a.h_outflow);
        annotation (
          Icon(coordinateSystem(
                preserveAspectRatio=true,
                extent={{-100,-100},{100,100}}), graphics={
                Line(points={{0,50},{0,0}}),
                Rectangle(
                  extent={{-20,60},{20,50}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,50}},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points=DynamicSelect({{-100,0},{100,-0},{100,0},{0,0},{-100,-0},{-100,
                      0}}, {{-100,50*opening_actual},{-100,50*opening_actual},{100,-50*opening_actual},{
                      100,50*opening_actual},{0,0},{-100,-50*opening_actual},{-100,50*opening_actual}}),
                  fillColor={0,255,0},
                  lineColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,
                      50}}, lineColor={0,0,0})}),
          Documentation(info="<html>
<p>A linear valve, identical to TRANSFORM.Fluid.Valves.ValveLinear. Likely will replace in models and eliminate this. The renaming confused the author. </p>
</html>",   revisions="<html>
<ul>
<li><i>4 May 2020</i>
    by <a href=\"mailto:daniel.mikkelson@inl.gov\">Daniel Mikkelson</a>:<br>
       Adapted from the TRANSFORM library.</li>
</ul>
</html>"));
        end ValveLinearTotal;

        block PI_Control_Reset_Input
          "Proportional-Integral controller: y = yb + Kc*e + Kc/Ti*integral(e), with a logical input for integral reset"
          import Modelica.Blocks.Types.Init;
          extends Modelica.Blocks.Interfaces.SVcontrol;
          parameter Real k(unit="1") = 1 "Error Gain";
          parameter Modelica.Units.SI.Time Ti(
            start=1,
            min=Modelica.Constants.small) = 1 "Time Constant (Ti>0 required)";
          parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.NoInit
            "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)"
            annotation (Evaluate=true, Dialog(group="Initialization"));

          parameter Real yb=0 "Output bias";
          parameter Real k_s=1 "Scaling factor for setpoint: k_s*u_s";
          parameter Real k_m=1 "Scaling factor for measurement: k_m*u_m";
          parameter Boolean directActing=true "=false reverse acting"
            annotation (Evaluate=true);
          parameter Real x_start=0 "Initial or guess value of error integral (state)"
            annotation (Dialog(group="Initialization"));
          parameter Real y_start=0 "Initial value of output" annotation (Dialog(enable=
                  initType == Init.SteadyState or initType == Init.InitialOutput, group=
                 "Initialization"));
          Real x(start=x_start) "Error integral (state)";
          Real Kc=k*(if directActing then +1 else -1);
          Real e=k_s*u_s - k_m*u_m;

          Modelica.Blocks.Interfaces.BooleanInput
                    k_in
                        "Connector of setpoint input signal" annotation (Placement(
                transformation(extent={{-140,60},{-100,100}})));
        initial equation
          if initType == Init.SteadyState then
            der(x) = 0;
          elseif initType == Init.InitialState then
            x = x_start;
          elseif initType == Init.InitialOutput then
            y = y_start;
          end if;
        equation

        if k_in then
          Ti*der(x) = e;
        else
          der(x) = -10*x;
        end if;
          y = yb + Kc*e + Kc*x;
          //y = yb + Kc*e;
          annotation (
            defaultComponentName="PI",
            Documentation(info="<html>
<p>This is a custom PI controller based on the PI TRANSFORM controller but also uses a logical input to dictate a form of anti-windup. The purpose is to force a PI controller to effectively be forced to turn off when the logical input is false and operate normally when the logical is true. During long periods of controller integral calculation when the controller is not in use, the controller will produce a large integral term which could cause controller lag when the operational mode changes. </p>
<p>This blocks defines the transfer function between the input u and the output y (element-wise) as <i>PI</i> system: </p>
<p><span style=\"font-family: Courier New;\">                 1</span></p>
<p><span style=\"font-family: Courier New;\">   y = k * (1 + ---) * u</span></p>
<p><span style=\"font-family: Courier New;\">                T*s</span></p>
<p><span style=\"font-family: Courier New;\">           T*s + 1</span></p>
<p><span style=\"font-family: Courier New;\">     = k * ------- * u</span></p>
<p><span style=\"font-family: Courier New;\">             T*s</span></p>
<p>If you would like to be able to change easily between different transfer functions (FirstOrder, SecondOrder, ... ) by changing parameters, use the general model class <b>TransferFunction</b> instead and model a PI SISO system with parameters</p><p>b = {k*T, k}, a = {T, 0}. </p>
<p><span style=\"font-family: Courier New;\">Example:</span></p>
<p><br><span style=\"font-family: Courier New;\">   parameter: k = 0.3,  T = 0.4</span></p>
<p><br><span style=\"font-family: Courier New;\">   results in:</span></p>
<p><span style=\"font-family: Courier New;\">               0.4 s + 1</span></p>
<p><span style=\"font-family: Courier New;\">      y = 0.3 ----------- * u</span></p>
<p><span style=\"font-family: Courier New;\">                 0.4 s</span> </p>
<p>It might be difficult to initialize the PI component in steady state due to the integrator part. This is discussed in the description of package <a href=\"modelica://Modelica.Blocks.Continuous#info\">Continuous</a>. </p>
</html>"),  Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,
                    100}}), graphics={
                Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
                Polygon(
                  points={{-80,90},{-88,68},{-72,68},{-80,90}},
                  lineColor={192,192,192},
                  fillColor={192,192,192},
                  fillPattern=FillPattern.Solid),
                Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
                Polygon(
                  points={{90,-80},{68,-72},{68,-88},{90,-80}},
                  lineColor={192,192,192},
                  fillColor={192,192,192},
                  fillPattern=FillPattern.Solid),
                Line(points={{-80.0,-80.0},{-80.0,-20.0},{60.0,80.0}}, color={0,0,127}),
                Text(
                  extent={{0,6},{60,-56}},
                  lineColor={192,192,192},
                  textString="PI"),
                Text(
                  extent={{-150,-150},{150,-110}},
                  lineColor={0,0,0},
                  textString="T=%T")}),
            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,
                    100}})));
        end PI_Control_Reset_Input;

        model TemperatureTwoPort_Superheat
          "Ideal two port temperature sensor measuring superheat"
          extends TRANSFORM.Fluid.Sensors.BaseClasses.PartialTwoPortSensor;
          extends
            TRANSFORM.Fluid.Sensors.BaseClasses.PartialMultiSensor_1values(      final
              var=T, redeclare replaceable function iconUnit =
                TRANSFORM.Units.Conversions.Functions.Temperature_K.to_degC
              constrainedby
              TRANSFORM.Units.Conversions.Functions.Temperature_K.BaseClasses.to);
          Modelica.Units.SI.Temperature Tsat;
          Modelica.Units.SI.Temperature T;
          replaceable package HTF =Modelica.Media.Water.StandardWater
          constrainedby Modelica.Media.Interfaces.PartialMedium annotation(allMatchingChoices=true);
          /*"This is introduced because for some reason when I use Medium.saturationTemperature(),
  it says it's not in the Medium package. So. I've gone around it. It worked previously as 
  Medium.saturationTemperature(). Any fix would be greatly appreciated. -Daniel" */
          Modelica.Blocks.Interfaces.RealOutput dT(
            final quantity="ThermodynamicTemperature",
            min=0,
            displayUnit="degC") "Temperature of the passing fluid" annotation (
              Placement(transformation(
                origin={0,110},
                extent={{10,-10},{-10,10}},
                rotation=270), iconTransformation(
                extent={{10,-10},{-10,10}},
                rotation=270,
                origin={0,36})));
        protected
          Medium.Temperature T_a_inflow "Temperature of inflowing fluid at port_a";
          Medium.Temperature T_b_inflow
            "Temperature of inflowing fluid at port_b or T_a_inflow, if uni-directional flow";
        equation

          Tsat = HTF.saturationTemperature(port_a.p);
          //dT, which is the real output connector. By applying the spliceTanh function, this model is designed to be connected to a shutoff valve.
          dT = TRANSFORM.Math.spliceTanh(1,0,(T-Tsat-5),4.0);
          if allowFlowReversal then
            T_a_inflow = Medium.temperature(Medium.setState_phX(
              port_b.p,
              port_b.h_outflow,
              port_b.Xi_outflow));
            T_b_inflow = Medium.temperature(Medium.setState_phX(
              port_a.p,
              port_a.h_outflow,
              port_a.Xi_outflow));
            T = Modelica.Fluid.Utilities.regStep(
              port_a.m_flow,
              T_a_inflow,
              T_b_inflow,
              m_flow_small);
          else
            T = Medium.temperature(Medium.setState_phX(
              port_b.p,
              port_b.h_outflow,
              port_b.Xi_outflow));
            T_a_inflow = T;
            T_b_inflow = T;
          end if;
          annotation (
            defaultComponentName="sensor_T",
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}}), graphics={
                Text(
                  extent={{78,56},{-18,27}},
                  lineColor={0,0,0},
                  textString="T"),
                Line(points={{50,0},{100,0}}, color={0,128,255}),
                Line(points={{-100,0},{-50,0}}, color={0,128,255})}),
            Documentation(info="<html>
<p>The two port temperature sensor from TRANSFORM is the base model. The only difference is that instead of measuring the actual temperature, this model measures the amount of superheat of the fluid. This is then, in this model, transferred into an open or close signal. Its design is to then be connected into a valve and to close said valve if the temperature of the fluid becomes saturated or subcooled. </p>
</html>"));
        end TemperatureTwoPort_Superheat;

        block Delay "Delays an input or output signal"
          parameter Modelica.Units.SI.Time Ti=1 "Delay time";

          Modelica.Blocks.Interfaces.RealInput u
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                  extent={{100,-14},{128,14}}), iconTransformation(extent={{100,-14},{128,
                    14}})));
        initial equation
          y=u;
        equation
          der(y)*Ti = u-y;

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>The delay model simply communicates a value from point A to point B using a slight delay. Delay_Time*der(output) = input-output </p>
</html>"));
        end Delay;

        model LossResistance
          extends
            TRANSFORM.Fluid.FittingsAndResistances.BaseClasses.PartialResistance;
          input Real K( unit="1/(m4)") "This value is equal to K_nominal/(2*A^2) for flow area A and lookup value K_nominal in standard engineering tables."
            annotation (Dialog(group="Inputs"));

          Modelica.Units.SI.Density d;
          parameter Modelica.Units.SI.Pressure dp_init=10000;

        initial equation
        //  dp_init = port_a.m_flow*sqrt(port_a.m_flow*port_a.m_flow + 0.1*0.1)*K/state.d;
        equation
          d = Medium.density(state);

         port_a.p-port_b.p = port_a.m_flow*sqrt(port_a.m_flow*port_a.m_flow + 0.1*0.1)*K/d;

          annotation (defaultComponentName="resistance",
                Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                  extent={{-30,-50},{30,-70}},
                  lineColor={0,0,0},
                  textString="Set R")}),
                Diagram(coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>Loss resistance is a 2 port fluid connector that calculates a pressure drop based on a loss coefficient K. This is a typical loss coefficient in lookup tables divided by the area of the resistance squared. </p>
</html>"));
        end LossResistance;

        block Timer "Delays a real signal until start time is established. Output=Input*multiplication_factor, which can be initially set to anything. Nominally, factor should be between 0 and 1"
          parameter Modelica.Units.SI.Time Start_Time=2700 "Time to allow multiplication rate change";
          parameter Real init_mult=0 "Initial multiplication rate";
          Real mult;
          Modelica.Blocks.Interfaces.RealInput u
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                  extent={{100,-14},{128,14}}), iconTransformation(extent={{100,-14},{128,
                    14}})));
        initial equation
        mult=init_mult;
        equation
          if
            (time < Start_Time) then
            der(mult) = 0;
          else
            der(mult) = 1-mult;
          end if;
          y=mult*u;

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p>The timer block is an initialization block. The output is equal to a value multiplying the input. The multiplier is initialized after some start time. </p>
</html>"));
        end Timer;

        block Greater_der
          "Output y is true, if input u1 is greater than input u2"
          extends Modelica.Blocks.Interfaces.partialBooleanComparison;

        equation
          y = der(u1) > u2;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,
                    -100},{100,100}}), graphics={
                Ellipse(extent={{32,10},{52,-10}}, lineColor={0,0,127}),
                Line(points={{-100,-80},{42,-80},{42,0}}, color={0,0,127}),
                Line(
                  points={{-54,20},{-8,0},{-54,-20}},
                  thickness=0.5)}), Documentation(info="<html>
<p>
The output is <strong>true</strong> if Real input u1 is greater than
Real input u2, otherwise the output is <strong>false</strong>.
</p>
</html>"));
        end Greater_der;
      end Control_and_Distribution;
    annotation (Documentation(info="<html>
<p>This package combines the StagebyStageTurbine models with some Control_and_Distribution models and with the CTES models in Energy Storage to demonstrate two energy arbitrage models with different levels of control mechanisms. </p>
<p>Also included is a simple demonstration of the NTU_HX model (contained within the Components package). A description of that component is included in the manual. </p>
</html>"));
    end StagebyStageTurbineSecondary;

    package Obsolete
      model Intermediate_Rankine_Cycle_TESUC_3_Peaking_IC_3 "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.TESTurbine data(
            V_FeedwaterMixVolume=10,
            V_Header=10,
            valve_SHS_mflow=30,
            valve_SHS_dp_nominal=1200000,
            valve_TCV_LPT_mflow=30,
            valve_TCV_LPT_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            firstfeedpump_p_nominal=2000000,
            secondfeedpump_p_nominal=2000000));

        Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={40,-128})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=421.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=3) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={84,-92})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-102,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-92,30},{-72,50}})));

        TRANSFORM.Fluid.Machines.Pump_Controlled pump_controlled(
          N_nominal=1500,
          dp_nominal=500000,
          m_flow_nominal=67,
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          controlType="RPM",
          use_port=true) annotation (Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-105,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear PRV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={0,-128})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));

        TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=1500000,
          m_flow_nominal=15) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-60,24})));
        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal=data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          V=data.V_tee,
          p_start=init.tee_p_start)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={90,4})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal=data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-40})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a2(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{150,62},{170,82}}),
              iconTransformation(extent={{88,58},{108,78}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{150,-156},{170,-136}}),
              iconTransformation(extent={{88,-62},{108,-42}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T3(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={134,72})));
        TRANSFORM.Fluid.Valves.ValveLinear TCV_LPT(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_LPT_dp_nominal,
          m_flow_nominal=data.valve_TCV_LPT_mflow) annotation (Placement(
              transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={104,72})));
        TRANSFORM.Fluid.Valves.ValveLinear SHS_charge_control(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_SHS_dp_nominal,
          m_flow_nominal=data.valve_SHS_mflow) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-62,-102})));
        TRANSFORM.Fluid.Valves.ValveLinear Discharge_OnOff(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=500000,
          m_flow_nominal=20) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={126,-146})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=2000000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={94,-148})));
        TRANSFORM.Fluid.Valves.ValveLinear RMF(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=1000,
          m_flow_nominal=67) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-106,-96})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-124,-106},{-144,-86}})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
                {84,-106},{104,-106},{104,-48},{110,-48}},
                                                         color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-95,40},{-88,40}},   color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-76,39.5},{-76,40},{-12,40}},
                                                        color={0,127,255}));
        connect(PRV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-60,74},{
                -60,40},{-12,40}},   color={0,127,255}));
        connect(boundary.ports[1],PRV. port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV,PRV. opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{30,-128},
                {10,-128}},                              color={0,127,255}));
        connect(pump_controlled.port_a, sensor_T2.port_b) annotation (Line(points={{-94,
                -41},{-94,-42},{-82,-42}}, color={0,127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-128},{50,-128}},          color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
                {84,-76},{84,-82}},                      color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
          annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                          color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
              points={{-24,-40},{-20,-40},{-20,-128},{-10,-128}},
              color={0,127,255}));
        connect(InternalBypass.port_a, header.port_b[2]) annotation (Line(points={{-68,24},
                {-76,24},{-76,40.5}},                             color={0,127,255}));
        connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
              points={{-52,24},{-24,24},{-24,5}},                   color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
          annotation (Line(
            points={{30,100},{-64,100},{-64,36},{-60,36},{-60,30.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(HPT.shaft_b,LPT. shaft_a) annotation (Line(
            points={{52,34},{56,34},{56,-24},{46,-24},{46,-30}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(LPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
                {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
                127,255}));
        connect(sensor_T1.port_b, HPT.portHP) annotation (Line(points={{28,40},{32,40}},
                                color={0,127,255}));
        connect(HPT.portLP, tee.port_2) annotation (Line(points={{52,40},{72,40},{72,
                36},{90,36},{90,14}}, color={0,127,255}));
        connect(LPT.portHP, tee.port_1) annotation (Line(points={{52,-30},{66,-30},{
                66,-28},{90,-28},{90,-6}}, color={0,127,255}));
        connect(sensorBus.SHS_Return_T, sensor_T3.T) annotation (Line(
            points={{-30,100},{-30,74},{88,74},{88,58},{134,58},{134,68.4}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TCV_SHS, TCV_LPT.opening) annotation (Line(
            points={{30,100},{104,100},{104,78.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a1, SHS_charge_control.port_a) annotation (Line(points={{-92,
                -160},{-92,-102},{-70,-102}}, color={0,127,255}));
        connect(SHS_charge_control.port_b, FeedwaterMixVolume.port_b[3]) annotation (
            Line(points={{-54,-102},{-20,-102},{-20,-39.3333},{-24,-39.3333}}, color=
                {0,127,255}));
        connect(actuatorBus.SHS_throttle, SHS_charge_control.opening) annotation (
            Line(
            points={{30,100},{-90,100},{-90,-84},{-62,-84},{-62,-95.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV_LPT.port_b, sensor_T3.port_b)
          annotation (Line(points={{112,72},{124,72}}, color={0,127,255}));
        connect(sensor_T3.port_a, port_a2)
          annotation (Line(points={{144,72},{160,72}}, color={0,127,255}));
        connect(TCV_LPT.port_a, tee.port_3) annotation (Line(points={{96,72},{90,72},
                {90,52},{104,52},{104,4},{100,4}}, color={0,127,255}));
        connect(Discharge_OnOff.port_b, port_b1)
          annotation (Line(points={{134,-146},{160,-146}}, color={0,127,255}));
        connect(actuatorBus.Discharge_OnOff_Throttle, Discharge_OnOff.opening)
          annotation (Line(
            points={{30,100},{186,100},{186,-132},{126,-132},{126,-139.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(firstfeedpump1.port_a, Condenser.port_b) annotation (Line(points={{84,
                -148},{78,-148},{78,-128},{146,-128},{146,-112}}, color={0,127,255}));
        connect(firstfeedpump1.port_b, Discharge_OnOff.port_a) annotation (Line(
              points={{104,-148},{112,-148},{112,-146},{118,-146}}, color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump_controlled.inputSignal) annotation (
           Line(
            points={{30,100},{-56,100},{-56,-60},{-105,-60},{-105,-48.7}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(RMF.port_b, pump_controlled.port_b) annotation (Line(points={{-98,-96},
                {-92,-96},{-92,-62},{-122,-62},{-122,-41},{-116,-41}}, color={0,127,
                255}));
        connect(actuatorBus.Reactor_mflow, RMF.opening) annotation (Line(
            points={{30,100},{-68,100},{-68,34},{-70,34},{-70,22},{-126,22},{-126,-82},
                {-106,-82},{-106,-89.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Reactor_mflow, sensor_m_flow.m_flow) annotation (Line(
            points={{-30,100},{-94,100},{-94,54},{-130,54},{-130,-82},{-134,-82},{
                -134,-92.4}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-109,40}}, color={0,127,255}));
        connect(sensor_m_flow.port_a, RMF.port_a)
          annotation (Line(points={{-124,-96},{-114,-96}}, color={0,127,255}));
        connect(sensor_m_flow.port_b, port_b) annotation (Line(points={{-144,-96},{
                -148,-96},{-148,-54},{-146,-54},{-146,-40},{-160,-40}}, color={0,127,
                255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_TESUC_3_Peaking_IC_3;

      model Intermediate_Rankine_Cycle_TESUC_1_Independent "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.TESTurbine data(
            V_FeedwaterMixVolume=10,
            V_Header=10,
            valve_SHS_mflow=30,
            valve_SHS_dp_nominal=1200000,
            valve_TCV_LPT_mflow=30,
            valve_TCV_LPT_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            firstfeedpump_p_nominal=2000000,
            secondfeedpump_p_nominal=2000000));

        Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={40,-128})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=421.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=3) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={84,-92})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump_SimpleMassFlow pump_SimpleMassFlow1(
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          use_input=true,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater)              annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-121,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={0,-128})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));

        TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=1500000,
          m_flow_nominal=15) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-74,22})));
        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal=data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal=data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-40})));
        TRANSFORM.Fluid.Valves.ValveLinear SHS_charge_control(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_SHS_dp_nominal,
          m_flow_nominal=data.valve_SHS_mflow) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-62,-102})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
                {84,-106},{104,-106},{104,-48},{110,-48}},
                                                         color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,41.5},{-60,41.5},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.in_m_flow)
          annotation (Line(
            points={{30,100},{-90,100},{-90,-58},{-121,-58},{-121,-49.03}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{30,-128},
                {10,-128}},                              color={0,127,255}));
        connect(port_b, pump_SimpleMassFlow1.port_b) annotation (Line(points={{-160,-40},
                {-132,-40},{-132,-41}},                            color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-110,-41},{-110,-42},{-82,-42}},                    color={0,
                127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-128},{50,-128}},          color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
                {84,-76},{84,-82}},                      color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
          annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                          color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
              points={{-24,-40},{-20,-40},{-20,-128},{-10,-128}},
              color={0,127,255}));
        connect(InternalBypass.port_a, header.port_b[2]) annotation (Line(points={{
                -82,22},{-94,22},{-94,24},{-106,24},{-106,42.5}}, color={0,127,255}));
        connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
              points={{-66,22},{-44,22},{-44,20},{-24,20},{-24,5}}, color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
          annotation (Line(
            points={{30,100},{-74,100},{-74,28.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(HPT.shaft_b,LPT. shaft_a) annotation (Line(
            points={{52,34},{56,34},{56,-24},{46,-24},{46,-30}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(LPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
                {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
                127,255}));
        connect(sensor_T1.port_b, HPT.portHP) annotation (Line(points={{28,40},{32,40}},
                                color={0,127,255}));
        connect(port_a1, SHS_charge_control.port_a) annotation (Line(points={{-92,
                -160},{-92,-102},{-70,-102}}, color={0,127,255}));
        connect(SHS_charge_control.port_b, FeedwaterMixVolume.port_b[3]) annotation (
            Line(points={{-54,-102},{-20,-102},{-20,-39.3333},{-24,-39.3333}}, color=
                {0,127,255}));
        connect(actuatorBus.SHS_throttle, SHS_charge_control.opening) annotation (
            Line(
            points={{30,100},{-90,100},{-90,-84},{-62,-84},{-62,-95.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(LPT.portHP, HPT.portLP) annotation (Line(points={{52,-30},{52,-26},{
                64,-26},{64,40},{52,40}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_TESUC_1_Independent;

      model Intermediate_Rankine_Cycle_TESUC_3_Peaking_IC_2 "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.TESTurbine data(
            V_FeedwaterMixVolume=10,
            V_Header=10,
            valve_SHS_mflow=30,
            valve_SHS_dp_nominal=1200000,
            valve_TCV_LPT_mflow=30,
            valve_TCV_LPT_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            firstfeedpump_p_nominal=2000000,
            secondfeedpump_p_nominal=2000000));

        Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={40,-128})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=421.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=3) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={84,-92})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump_SimpleMassFlow pump_SimpleMassFlow1(
          use_input=true,
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater)              annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-121,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear PRV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={0,-128})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));

        TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=1500000,
          m_flow_nominal=15) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-74,22})));
        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal=data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          V=data.V_tee,
          p_start=init.tee_p_start)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={90,4})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal=data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-40})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a2(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{150,62},{170,82}}),
              iconTransformation(extent={{88,58},{108,78}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{150,-156},{170,-136}}),
              iconTransformation(extent={{88,-62},{108,-42}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T3(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={134,72})));
        TRANSFORM.Fluid.Valves.ValveLinear TCV_LPT(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_LPT_dp_nominal,
          m_flow_nominal=data.valve_TCV_LPT_mflow) annotation (Placement(
              transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={104,72})));
        TRANSFORM.Fluid.Valves.ValveLinear SHS_charge_control(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_SHS_dp_nominal,
          m_flow_nominal=data.valve_SHS_mflow) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-62,-102})));
        TRANSFORM.Fluid.Valves.ValveLinear Discharge_OnOff(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=500000,
          m_flow_nominal=20) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={126,-146})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=2000000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={94,-148})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
                {84,-106},{104,-106},{104,-48},{110,-48}},
                                                         color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,41.5},{-60,41.5},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(PRV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1],PRV. port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV,PRV. opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{30,-128},
                {10,-128}},                              color={0,127,255}));
        connect(port_b, pump_SimpleMassFlow1.port_b) annotation (Line(points={{-160,-40},
                {-132,-40},{-132,-41}},                            color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-110,-41},{-110,-42},{-82,-42}},                    color={0,
                127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-128},{50,-128}},          color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
                {84,-76},{84,-82}},                      color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
          annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                          color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
              points={{-24,-40},{-20,-40},{-20,-128},{-10,-128}},
              color={0,127,255}));
        connect(InternalBypass.port_a, header.port_b[2]) annotation (Line(points={{
                -82,22},{-94,22},{-94,24},{-106,24},{-106,42.5}}, color={0,127,255}));
        connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
              points={{-66,22},{-44,22},{-44,20},{-24,20},{-24,5}}, color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
          annotation (Line(
            points={{30,100},{-74,100},{-74,28.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(HPT.shaft_b,LPT. shaft_a) annotation (Line(
            points={{52,34},{56,34},{56,-24},{46,-24},{46,-30}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(LPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
                {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
                127,255}));
        connect(sensor_T1.port_b, HPT.portHP) annotation (Line(points={{28,40},{32,40}},
                                color={0,127,255}));
        connect(HPT.portLP, tee.port_2) annotation (Line(points={{52,40},{72,40},{72,
                36},{90,36},{90,14}}, color={0,127,255}));
        connect(LPT.portHP, tee.port_1) annotation (Line(points={{52,-30},{66,-30},{
                66,-28},{90,-28},{90,-6}}, color={0,127,255}));
        connect(sensorBus.SHS_Return_T, sensor_T3.T) annotation (Line(
            points={{-30,100},{-30,74},{88,74},{88,58},{134,58},{134,68.4}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TCV_SHS, TCV_LPT.opening) annotation (Line(
            points={{30,100},{104,100},{104,78.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a1, SHS_charge_control.port_a) annotation (Line(points={{-92,
                -160},{-92,-102},{-70,-102}}, color={0,127,255}));
        connect(SHS_charge_control.port_b, FeedwaterMixVolume.port_b[3]) annotation (
            Line(points={{-54,-102},{-20,-102},{-20,-39.3333},{-24,-39.3333}}, color=
                {0,127,255}));
        connect(actuatorBus.SHS_throttle, SHS_charge_control.opening) annotation (
            Line(
            points={{30,100},{-90,100},{-90,-84},{-62,-84},{-62,-95.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV_LPT.port_b, sensor_T3.port_b)
          annotation (Line(points={{112,72},{124,72}}, color={0,127,255}));
        connect(sensor_T3.port_a, port_a2)
          annotation (Line(points={{144,72},{160,72}}, color={0,127,255}));
        connect(TCV_LPT.port_a, tee.port_3) annotation (Line(points={{96,72},{90,72},
                {90,52},{104,52},{104,4},{100,4}}, color={0,127,255}));
        connect(Discharge_OnOff.port_b, port_b1)
          annotation (Line(points={{134,-146},{160,-146}}, color={0,127,255}));
        connect(actuatorBus.Discharge_OnOff_Throttle, Discharge_OnOff.opening)
          annotation (Line(
            points={{30,100},{186,100},{186,-132},{126,-132},{126,-139.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(firstfeedpump1.port_a, Condenser.port_b) annotation (Line(points={{84,
                -148},{78,-148},{78,-128},{146,-128},{146,-112}}, color={0,127,255}));
        connect(firstfeedpump1.port_b, Discharge_OnOff.port_a) annotation (Line(
              points={{104,-148},{112,-148},{112,-146},{118,-146}}, color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.in_m_flow)
          annotation (Line(
            points={{30,100},{-92,100},{-92,-56},{-121,-56},{-121,-49.03}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_TESUC_3_Peaking_IC_2;

      model Intermediate_Rankine_Cycle_TESUC_3_Peaking_IC "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.TESTurbine data(
            valve_SHS_mflow=35,
            valve_SHS_dp_nominal=1000000,
            valve_TCV_LPT_mflow=30,
            valve_TCV_LPT_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            firstfeedpump_p_nominal=2000000,
            secondfeedpump_p_nominal=2000000));

        Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={40,-128})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=421.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=3) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={84,-92})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump_SimpleMassFlow pump_SimpleMassFlow1(
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          use_input=true,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater)              annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-121,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={0,-128})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));

        TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=1500000,
          m_flow_nominal=15) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-74,22})));
        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal=data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          V=data.V_tee,
          p_start=init.tee_p_start)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={90,4})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal=data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-40})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a2(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{150,62},{170,82}}),
              iconTransformation(extent={{88,58},{108,78}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{150,-156},{170,-136}}),
              iconTransformation(extent={{88,-62},{108,-42}})));
        TRANSFORM.Fluid.Machines.Pump_SimpleMassFlow pump_SimpleMassFlow2(
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          use_input=true,
          redeclare package Medium = Modelica.Media.Water.StandardWater)
                                                               annotation (
            Placement(transformation(
              extent={{11,-11},{-11,11}},
              rotation=180,
              origin={137,-143})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T3(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={134,72})));
        TRANSFORM.Fluid.Valves.ValveLinear TCV_LPT(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_LPT_dp_nominal,
          m_flow_nominal=data.valve_TCV_LPT_mflow) annotation (Placement(
              transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={104,72})));
        TRANSFORM.Fluid.Valves.ValveLinear SHS_charge_control(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_SHS_dp_nominal,
          m_flow_nominal=data.valve_SHS_mflow) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-62,-102})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
                {84,-106},{104,-106},{104,-48},{110,-48}},
                                                         color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,41.5},{-60,41.5},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.in_m_flow)
          annotation (Line(
            points={{30,100},{-90,100},{-90,-58},{-121,-58},{-121,-49.03}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{30,-128},
                {10,-128}},                              color={0,127,255}));
        connect(port_b, pump_SimpleMassFlow1.port_b) annotation (Line(points={{-160,-40},
                {-132,-40},{-132,-41}},                            color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-110,-41},{-110,-42},{-82,-42}},                    color={0,
                127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-128},{50,-128}},          color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
                {84,-76},{84,-82}},                      color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
          annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                          color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
              points={{-24,-40},{-20,-40},{-20,-128},{-10,-128}},
              color={0,127,255}));
        connect(InternalBypass.port_a, header.port_b[2]) annotation (Line(points={{
                -82,22},{-94,22},{-94,24},{-106,24},{-106,42.5}}, color={0,127,255}));
        connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
              points={{-66,22},{-44,22},{-44,20},{-24,20},{-24,5}}, color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
          annotation (Line(
            points={{30,100},{-74,100},{-74,28.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(HPT.shaft_b,LPT. shaft_a) annotation (Line(
            points={{52,34},{56,34},{56,-24},{46,-24},{46,-30}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(LPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
                {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
                127,255}));
        connect(sensor_T1.port_b, HPT.portHP) annotation (Line(points={{28,40},{32,40}},
                                color={0,127,255}));
        connect(HPT.portLP, tee.port_2) annotation (Line(points={{52,40},{72,40},{72,
                36},{90,36},{90,14}}, color={0,127,255}));
        connect(LPT.portHP, tee.port_1) annotation (Line(points={{52,-30},{66,-30},{
                66,-28},{90,-28},{90,-6}}, color={0,127,255}));
        connect(pump_SimpleMassFlow2.port_b, port_b1) annotation (Line(points={{148,
                -143},{152,-143},{152,-146},{160,-146}}, color={0,127,255}));
        connect(pump_SimpleMassFlow2.port_a, firstfeedpump.port_a) annotation (Line(
              points={{126,-143},{122,-143},{122,-128},{50,-128}}, color={0,127,255}));
        connect(actuatorBus.condensor_pump, pump_SimpleMassFlow2.in_m_flow)
          annotation (Line(
            points={{30,100},{190,100},{190,-160},{137,-160},{137,-151.03}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.SHS_Return_T, sensor_T3.T) annotation (Line(
            points={{-30,100},{-30,74},{88,74},{88,58},{134,58},{134,68.4}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.TCV_SHS, TCV_LPT.opening) annotation (Line(
            points={{30,100},{104,100},{104,78.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a1, SHS_charge_control.port_a) annotation (Line(points={{-92,
                -160},{-92,-102},{-70,-102}}, color={0,127,255}));
        connect(SHS_charge_control.port_b, FeedwaterMixVolume.port_b[3]) annotation (
            Line(points={{-54,-102},{-20,-102},{-20,-39.3333},{-24,-39.3333}}, color=
                {0,127,255}));
        connect(actuatorBus.SHS_throttle, SHS_charge_control.opening) annotation (
            Line(
            points={{30,100},{-90,100},{-90,-84},{-62,-84},{-62,-95.6}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV_LPT.port_b, sensor_T3.port_b)
          annotation (Line(points={{112,72},{124,72}}, color={0,127,255}));
        connect(sensor_T3.port_a, port_a2)
          annotation (Line(points={{144,72},{160,72}}, color={0,127,255}));
        connect(TCV_LPT.port_a, tee.port_3) annotation (Line(points={{96,72},{90,72},
                {90,52},{104,52},{104,4},{100,4}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_TESUC_3_Peaking_IC;

      model Intermediate_Rankine_Cycle_TESUC_3_Peaking "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.TESTurbine data(
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            firstfeedpump_p_nominal=2000000,
            secondfeedpump_p_nominal=2000000));

        Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={40,-128})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=421.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=3) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={84,-92})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump_SimpleMassFlow pump_SimpleMassFlow1(
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          use_input=true,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater)              annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-121,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={0,-128})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));

        TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=1500000,
          m_flow_nominal=15) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-74,22})));
        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal=data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          V=data.V_tee,
          p_start=init.tee_p_start)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={90,4})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal=data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-40})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a2(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{150,62},{170,82}}),
              iconTransformation(extent={{88,58},{108,78}})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.secondfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={138,-146})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{150,-156},{170,-136}}),
              iconTransformation(extent={{88,-62},{108,-42}})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
                {84,-106},{104,-106},{104,-48},{110,-48}},
                                                         color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,41.5},{-60,41.5},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.in_m_flow)
          annotation (Line(
            points={{30,100},{-90,100},{-90,-58},{-121,-58},{-121,-49.03}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{30,-128},
                {10,-128}},                              color={0,127,255}));
        connect(port_b, pump_SimpleMassFlow1.port_b) annotation (Line(points={{-160,-40},
                {-132,-40},{-132,-41}},                            color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-110,-41},{-110,-42},{-82,-42}},                    color={0,
                127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-128},{50,-128}},          color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
                {84,-76},{84,-82}},                      color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
          annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                          color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
              points={{-24,-40},{-20,-40},{-20,-128},{-10,-128}},
              color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[3], port_a1) annotation (Line(points={{-24,
                -39.3333},{-20,-39.3333},{-20,-108},{-92,-108},{-92,-160}},
                                                                  color={0,127,255}));
        connect(InternalBypass.port_a, header.port_b[2]) annotation (Line(points={{
                -82,22},{-94,22},{-94,24},{-106,24},{-106,42.5}}, color={0,127,255}));
        connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
              points={{-66,22},{-44,22},{-44,20},{-24,20},{-24,5}}, color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
          annotation (Line(
            points={{30,100},{-74,100},{-74,28.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(HPT.shaft_b,LPT. shaft_a) annotation (Line(
            points={{52,34},{56,34},{56,-24},{46,-24},{46,-30}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(LPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
                {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
                127,255}));
        connect(tee.port_3, port_a2) annotation (Line(points={{100,4},{144,4},{144,72},
                {160,72}},                       color={0,127,255}));
        connect(Condenser.port_b, firstfeedpump1.port_a) annotation (Line(points={{146,
                -112},{146,-132},{118,-132},{118,-146},{128,-146}}, color={0,127,255}));
        connect(firstfeedpump1.port_b, port_b1)
          annotation (Line(points={{148,-146},{160,-146}}, color={0,127,255}));
        connect(sensor_T1.port_b, HPT.portHP) annotation (Line(points={{28,40},{32,40}},
                                color={0,127,255}));
        connect(HPT.portLP, tee.port_2) annotation (Line(points={{52,40},{72,40},{72,
                36},{90,36},{90,14}}, color={0,127,255}));
        connect(LPT.portHP, tee.port_1) annotation (Line(points={{52,-30},{66,-30},{
                66,-28},{90,-28},{90,-6}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_TESUC_3_Peaking;

      model Intermediate_Rankine_Cycle_TESUC_SmallCycle_Pressure
        "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.TESTurbine data(
            p_steam_vent=15000000,
            T_Steam_Ref=491.15,
            Q_Nom=18.57e6,
            T_Feedwater=310.15,
            p_steam=1200000,
            p_in_nominal=1200000,
            p_condensor=8000,
            V_FeedwaterMixVolume=0.01,
            T_boundary=473.15,
            valve_TCV_mflow=30,
            valve_TCV_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=60,
            HPT_p_exit_nominal=8000,
            HPT_T_in_nominal=491.15,
            HPT_nominal_mflow=30,
            firstfeedpump_p_nominal=100000));

        Data.IntermediateTurbineInitialisation init(
          p_steam_vent=15000000,
          T_Steam_Ref=491.15,
          Q_Nom=20e6,
          T_Feedwater=309.15,
          p_steam=1200000,
          FeedwaterMixVolume_p_start=100000,
          header_p_start=1197000,
          header_h_start=2e6,
          FeedwaterMixVolume_h_start=1e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=1000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=491.15,
          HPT_T_b_start=313.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          p_start=3500000,
          T_start=579.15)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={98,-38})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=true,
          T_start=523.15,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=1,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster pump_SimpleMassFlow1(
          use_input=true,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          p_nominal=1200000)                                   annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-125,-39})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={80,-144})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{78,44},{98,24}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass1(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={64,-22})));

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          use_Stodola=false,
          p_inlet_nominal=data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{36,24},{56,44}})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{98,-48},
                {110,-48}},                              color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,42},{-84,42},{-84,40},{-12,40}},
                                                        color={0,127,255}));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-68,74},{
                -68,40},{-12,40}},   color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_b, pump_SimpleMassFlow1.port_b) annotation (Line(points={{-160,
                -40},{-136,-40},{-136,-39}},                       color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-114,-39},{-114,-42},{-82,-42}},                    color={0,
                127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{98,34},
                {102,34},{102,-22},{98,-22},{98,-28}},   color={0,0,0}));
        connect(R_InternalBypass1.port_b, Condenser.port_a) annotation (Line(points={{
                64,-29},{64,-82},{154,-82},{154,-92},{153,-92}}, color={0,127,255}));
        connect(sensor_T1.port_b, HPT.portHP)
          annotation (Line(points={{28,40},{36,40}}, color={0,127,255}));
        connect(HPT.portLP, R_InternalBypass1.port_a)
          annotation (Line(points={{56,40},{64,40},{64,-15}}, color={0,127,255}));
        connect(HPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{56,34},{78,34}}, color={0,0,0}));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.in_p) annotation (
            Line(
            points={{30,100},{-102,100},{-102,-58},{-125,-58},{-125,-47.03}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensor_T4.port_b, Condenser.port_b) annotation (Line(points={{90,-144},
                {114,-144},{114,-142},{146,-142},{146,-112}}, color={0,127,255}));
        connect(sensor_T2.port_a, sensor_T4.port_a) annotation (Line(points={{-62,-42},
                {-10,-42},{-10,-144},{70,-144}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_TESUC_SmallCycle_Pressure;

      model SteamTurbine_L1_boundaries_no_heat_pump

        extends BaseClasses.Partial_SubSystem_B(
          redeclare replaceable ControlSystems.CS_Dummy CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.IdealTurbine data);

        parameter SI.Pressure p_condenser=1e4 "Condenser operating pressure";
        parameter SI.Pressure p_reservoir=port_b_nominal.p "Reservoir operating pressure";

        TRANSFORM.Fluid.Machines.SteamTurbine steamTurbine(
          redeclare package Medium = Medium,
          use_T_start=false,
          h_a_start=port_a_start.h,
          m_flow_start=port_a_start.m_flow,
          m_flow_nominal=port_a_nominal.m_flow,
          use_T_nominal=false,
          nUnits=2,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          p_b_start=p_condenser,
          p_outlet_nominal=p_condenser,
          d_nominal=Medium.density_ph(steamTurbine.p_inlet_nominal, port_a_nominal.h),
          p_a_start=header.p_start -valve_TCV.dp_start,
          p_inlet_nominal=port_a_nominal.p -valve_TCV.dp_nominal)
          annotation (Placement(transformation(extent={{40,-10},{60,10}})));
        Electrical.Generator      generator1(J=1e4)
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{130,-10},{150,10}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance(
            redeclare package Medium = Medium, R=1)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={80,-30})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                                          condenser(
          redeclare package Medium = Medium,
          set_m_flow=true,
          p=p_condenser)
          annotation (Placement(transformation(extent={{77,-94},{97,-74}})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume(
          redeclare package Medium = Medium,
          use_T_start=false,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.01),
          p_start=p_condenser,
          h_start=steamTurbine.h_b_start)
          annotation (Placement(transformation(extent={{58,-30},{78,-10}})));
        TRANSFORM.Fluid.Volumes.DumpTank reservoir(
          redeclare package Medium = Medium,
          A=10,
          p_start=p_reservoir,
          level_start=10)
          annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));
        Modelica.Fluid.Fittings.MultiPort multiPort(redeclare package Medium =
              Medium, nPorts_b=2)
                             annotation (Placement(transformation(
              extent={{-4,-10},{4,10}},
              rotation=90,
              origin={0,-80})));
        Modelica.Fluid.Fittings.MultiPort multiPort1(redeclare package Medium =
              Medium, nPorts_b=if nPorts_a3 > 0 then nPorts_a3+2 else 2)
                             annotation (Placement(transformation(
              extent={{-4,-10},{4,10}},
              rotation=90,
              origin={80,-66})));
        TRANSFORM.Fluid.Sensors.Pressure pressure(redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
        TRANSFORM.Fluid.Valves.ValveCompressible valve_BV(
          rho_nominal=Medium.density_ph(port_a_nominal.p, port_a_nominal.h),
          p_nominal=port_a_nominal.p,
          redeclare package Medium = Medium,
          m_flow_nominal=port_a_nominal.m_flow,
          dp_nominal=100000)
          annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume_bypass(
          use_T_start=false,
          h_start=port_a_start.h,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.01),
          redeclare package Medium = Medium,
          p_start=p_condenser)
                         "included for numeric purposes"
          annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance3(R=1,
            redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={0,-10})));
        Modelica.Blocks.Sources.RealExpression W_balance1
          "Electricity loss/gain not accounted for in connections (e.g., heating/cooling, pumps, etc.) [W]"
          annotation (Placement(transformation(extent={{-96,118},{-84,130}})));
        TRANSFORM.Fluid.Valves.ValveCompressible valve_TCV(
          rho_nominal=Medium.density_ph(port_a_nominal.p, port_a_nominal.h),
          p_nominal=port_a_nominal.p,
          redeclare package Medium = Medium,
          m_flow_nominal=port_a_nominal.m_flow,
          dp_nominal=100000)
          annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=port_a_start.h,
          p_start=port_a_start.p,
          nPorts_a=1,
          nPorts_b=3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance4(R=1,
            redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-130,40})));
        TRANSFORM.Fluid.BoundaryConditions.Boundary_ph boundary_a3[nPorts_a3](
          redeclare package Medium = Medium,
          each nPorts=1,
          p=port_a3_nominal_p,
          h=port_a3_nominal_h) if nPorts_a3 > 0
          annotation (Placement(transformation(extent={{50,-150},{30,-130}})));
         TRANSFORM.Fluid.Valves.CheckValve checkValve[nPorts_a3](redeclare
            package Medium =
                      Medium, m_flow_start=port_a3_start_m_flow) if nPorts_a3 > 0
           annotation (Placement(transformation(extent={{0,-150},{20,-130}})));
         TRANSFORM.Fluid.BoundaryConditions.MassFlowSource_h boundary_m_flow_a3[
           nPorts_a3](
           redeclare package Medium = Medium,
           each nPorts=1,
          each use_m_flow_in=true,
          each use_h_in=true)  if nPorts_a3 > 0
           annotation (Placement(transformation(extent={{72,-150},{92,-130}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate massFlowRate[nPorts_a3](redeclare
            package Medium = Medium) if nPorts_a3 > 0
          annotation (Placement(transformation(extent={{-30,-150},{-10,-130}})));
        TRANSFORM.Fluid.Sensors.SpecificEnthalpyTwoPort
                                                 specificEnthalpy[nPorts_a3](
            redeclare package Medium = Medium) if nPorts_a3 > 0
          annotation (Placement(transformation(extent={{-60,-150},{-40,-130}})));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{70,10},{90,-10}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance2(R=1,
            redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-50,-80})));
        TRANSFORM.Controls.LimPID_Hysteresis PID1(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k_s=1/reservoir.level_start,
          k_m=1/reservoir.level_start,
          k=1e2,
          yMin=0,
          eOn=0.1*reservoir.level_start)
          annotation (Placement(transformation(extent={{-62,-50},{-42,-30}})));
        Modelica.Blocks.Sources.RealExpression level_setpoint(y=reservoir.level_start)
          annotation (Placement(transformation(extent={{-94,-42},{-74,-22}})));
        Modelica.Blocks.Sources.RealExpression level_measure(y=reservoir.level)
          "noEvent(if time < 10 then reservoir.level_start else reservoir.level)"
          annotation (Placement(transformation(extent={{-94,-62},{-74,-42}})));
        TRANSFORM.Fluid.BoundaryConditions.MassFlowSource_T boundary2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_m_flow_in=true,
          T=298.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-28,-70},{-8,-50}})));
      equation

      for i in 1:nPorts_a3 loop
          connect(specificEnthalpy[i].port_a, port_a3[i]);
          connect(specificEnthalpy[i].port_b, massFlowRate[i].port_a);
           connect(checkValve[i].port_a, massFlowRate[i].port_b);
           connect(checkValve[i].port_b, boundary_a3[i].ports[1]);
      connect(boundary_m_flow_a3[i].ports[1], multiPort1.ports_b[i+2]);

      end for;

        connect(generator1.portElec, sensorW.port_a)
          annotation (Line(points={{120,0},{130,0}}, color={255,0,0}));
        connect(sensorW.port_b, portElec_b)
          annotation (Line(points={{150,0},{160,0}}, color={255,0,0}));
        connect(steamTurbine.portLP, volume.port_a)
          annotation (Line(points={{60,6},{60,-20},{62,-20}},   color={0,127,255}));
        connect(multiPort.port_a, reservoir.port_a)
          annotation (Line(points={{0,-84},{0,-91.6}}, color={0,127,255}));
        connect(volume.port_b, resistance.port_a)
          annotation (Line(points={{74,-20},{80,-20},{80,-23}}, color={0,127,255}));
        connect(multiPort1.port_a, condenser.port_a)
          annotation (Line(points={{80,-70},{80,-77}}, color={0,127,255}));
        connect(condenser.port_b, multiPort.ports_b[1]) annotation (Line(points={{87,-92},
                {87,-100},{20,-100},{20,-68},{-2,-68},{-2,-76}}, color={0,127,255}));
        connect(sensorBus.p_inlet_steamTurbine, pressure.p)
          annotation (Line(
            points={{-29.9,100.1},{-94,100.1},{-94,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(volume_bypass.port_a, valve_BV.port_b)
          annotation (Line(points={{-26,0},{-60,0}}, color={0,127,255}));
        connect(volume_bypass.port_b, resistance3.port_a)
          annotation (Line(points={{-14,0},{4.44089e-16,0},{4.44089e-16,-3}},
                                                             color={0,127,255}));
        connect(resistance3.port_b, multiPort1.ports_b[1]) annotation (Line(points={{
                -4.44089e-16,-17},{-4.44089e-16,-28},{0,-28},{0,-40},{80,-40},{80,-62}},
                                                            color={0,127,255}));
        connect(resistance.port_b, multiPort1.ports_b[2]) annotation (Line(points={{80,-37},
                {80,-62}},                        color={0,127,255}));
        connect(valve_BV.port_a, header.port_b[1]) annotation (Line(points={{-80,0},{
                -100,0},{-100,39.3333},{-104,39.3333}}, color={0,127,255}));
        connect(valve_TCV.port_a, header.port_b[2]) annotation (Line(points={{-80,40},
                {-92,40},{-92,40},{-104,40}},     color={0,127,255}));
        connect(port_a, resistance4.port_a)
          annotation (Line(points={{-160,40},{-137,40}}, color={0,127,255}));
        connect(resistance4.port_b, header.port_a[1])
          annotation (Line(points={{-123,40},{-116,40}}, color={0,127,255}));
        connect(massFlowRate.m_flow, boundary_m_flow_a3.m_flow_in) annotation (Line(
              points={{-20,-136.4},{-20,-124},{62,-124},{62,-132},{72,-132}},
                                                                            color={0,0,
                127}));
        connect(specificEnthalpy.h_out, boundary_m_flow_a3.h_in) annotation (Line(
              points={{-50,-136.4},{-50,-126},{60,-126},{60,-136},{70,-136}},
                                                                            color={0,0,
                127}));
        connect(steamTurbine.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{60,0},{70,0}}, color={0,0,0}));
        connect(powerSensor.flange_b, generator1.shaft_a)
          annotation (Line(points={{90,0},{100,0}}, color={0,0,0}));
        connect(valve_TCV.port_b, steamTurbine.portHP)
          annotation (Line(points={{-60,40},{40,40},{40,6}}, color={0,127,255}));
        connect(pressure.port, header.port_b[3]) annotation (Line(points={{-100,50},{
                -100,40},{-104,40},{-104,40.6667}},     color={0,127,255}));
        connect(actuatorBus.opening_TCV,valve_TCV. opening)
          annotation (Line(
            points={{30.1,100.1},{30.1,100.1},{-8,100.1},{-8,102},{-70,102},{-70,48}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(resistance2.port_a, reservoir.port_b) annotation (Line(points={{-43,
                -80},{-40,-80},{-40,-114},{0,-114},{0,-108.4}}, color={0,127,255}));
        connect(actuatorBus.opening_BV, valve_BV.opening)
          annotation (Line(
            points={{30.1,100.1},{-8,100.1},{-8,102},{-50,102},{-50,20},{-70,20},{-70,
                8}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.W_total, sensorW.W) annotation (Line(
            points={{-29.9,100.1},{140,100.1},{140,11}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(level_measure.y, PID1.u_m)
          annotation (Line(points={{-73,-52},{-52,-52}}, color={0,0,127}));
        connect(level_setpoint.y, PID1.u_s)
          annotation (Line(points={{-73,-32},{-68,-32},{-68,-40},{-64,-40}},
                                                         color={0,0,127}));
        connect(PID1.y, boundary2.m_flow_in) annotation (Line(points={{-41,-40},{-38,
                -40},{-38,-52},{-28,-52}}, color={0,0,127}));
        connect(boundary2.ports[1], multiPort.ports_b[2])
          annotation (Line(points={{-8,-60},{2,-60},{2,-76}}, color={0,127,255}));
        connect(port_b, resistance2.port_b) annotation (Line(points={{-160,-40},{-148,
                -40},{-148,-38},{-132,-38},{-132,-80},{-57,-80}}, color={0,127,255}));
        annotation (defaultComponentName="BOP", Icon(coordinateSystem(extent={{-100,-100},
                  {100,100}}),                       graphics={
              Rectangle(
                extent={{-2.09756,2},{83.9024,-2}},
                lineColor={0,0,0},
                origin={-39.9024,-64},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={27.4218,-39.8278},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-14.1867,-1},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={24.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={36.4272,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-14,46},{12,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-64,46},{-16,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-24,49},{-6,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Ellipse(
                extent={{-13,49},{-17,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Rectangle(
                extent={{-24,63},{-6,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-14,49},{-16,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={10,30},
                rotation=-90),
              Polygon(
                points={{6,16},{6,-14},{36,-32},{36,36},{6,16}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-62.1867,-41},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Line(points={{10,-42}}, color={0,0,0}),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={49.2136,-41.9886},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Text(
                extent={{15,-8},{25,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Polygon(
                points={{4,-44},{0,-48},{16,-48},{12,-44},{4,-44}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{2,-34},{14,-46}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{9,-37},{9,-43},{5,-40},{9,-37}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Ellipse(
                extent={{50,12},{78,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{59,-8},{69,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Rectangle(
                extent={{-0.487802,2},{19.5122,-2}},
                lineColor={0,0,0},
                origin={26,-38.4878},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{36,-42},{64,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{45,-62},{55,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Text(
                extent={{-94,82},{94,74}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={255,255,237},
                fillPattern=FillPattern.Solid,
                textString="Turbine"),
              Rectangle(
                extent={{-0.243902,2},{9.7562,-2}},
                lineColor={0,0,0},
                origin={-40,-62.2438},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder)}),
          Diagram(coordinateSystem(extent={{-160,-160},{160,140}})),
          experiment(StopTime=1000));
      end SteamTurbine_L1_boundaries_no_heat_pump;

      model Intermediate_Rankine_Cycle_TESUC_2 "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.TESTurbine data(
            V_FeedwaterMixVolume=0.01,
            valve_TCV_mflow=300,
            valve_TCV_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            HPT_p_exit_nominal=10000,
            HPT_T_in_nominal=579.15,
            firstfeedpump_p_nominal=2000000));

        Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={108,-144})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=421.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=3) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={98,-38})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump_SimpleMassFlow pump_SimpleMassFlow1(
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          use_input=true,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater)              annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-121,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={80,-144})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{78,44},{98,24}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass1(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={64,-22})));
        TRANSFORM.Fluid.Machines.SteamTurbine steamTurbine(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_T_start=false,
          h_a_start=port_a_start.h,
          m_flow_start=port_a_start.m_flow,
          m_flow_nominal=port_a_nominal.m_flow,
          use_Stodola=true,
          use_T_nominal=true,
          nUnits=2,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          p_b_start=data.p_condensor,
          p_outlet_nominal=data.p_condensor,
          T_nominal=579.15,
          d_nominal=Medium.density_ph(steamTurbine.p_inlet_nominal, port_a_nominal.h),
          p_a_start=header.p_start - TCV.dp_start,
          p_inlet_nominal=port_a_nominal.p)
          annotation (Placement(transformation(extent={{40,22},{60,42}})));

        TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=1500000,
          m_flow_nominal=15) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-74,22})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{98,-48},
                {110,-48}},                              color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,41.5},{-60,41.5},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.in_m_flow)
          annotation (Line(
            points={{30,100},{-90,100},{-90,-58},{-121,-58},{-121,-49.03}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{98,-144},
                {90,-144}},                              color={0,127,255}));
        connect(port_b, pump_SimpleMassFlow1.port_b) annotation (Line(points={{-160,-40},
                {-132,-40},{-132,-41}},                            color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-110,-41},{-110,-42},{-82,-42}},                    color={0,
                127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-144},{118,-144}},         color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{98,34},
                {102,34},{102,-22},{98,-22},{98,-28}},   color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
          annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                          color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
              points={{-24,-40},{-10,-40},{-10,-42},{32,-42},{32,-144},{70,-144}},
              color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[3], port_a1) annotation (Line(points={{-24,
                -39.3333},{-20,-39.3333},{-20,-108},{-92,-108},{-92,-160}},
                                                                  color={0,127,255}));
        connect(R_InternalBypass1.port_b, Condenser.port_a) annotation (Line(points={{
                64,-29},{64,-82},{154,-82},{154,-92},{153,-92}}, color={0,127,255}));
        connect(steamTurbine.portLP, R_InternalBypass1.port_a)
          annotation (Line(points={{60,38},{64,38},{64,-15}}, color={0,127,255}));
        connect(steamTurbine.portHP, sensor_T1.port_b)
          annotation (Line(points={{40,38},{34,38},{34,40},{28,40}},
                                                     color={0,127,255}));
        connect(steamTurbine.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{60,32},{68,32},{68,34},{78,34}},
                                                     color={0,0,0}));
        connect(InternalBypass.port_a, header.port_b[2]) annotation (Line(points={{
                -82,22},{-94,22},{-94,24},{-106,24},{-106,42.5}}, color={0,127,255}));
        connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
              points={{-66,22},{-44,22},{-44,20},{-24,20},{-24,5}}, color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
          annotation (Line(
            points={{30,100},{-74,100},{-74,28.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_TESUC_2;

      model SteamTurbine_L1_boundaries_no_heat

        extends BaseClasses.Partial_SubSystem_B(
          redeclare replaceable ControlSystems.CS_Dummy CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.IdealTurbine data);

        parameter SI.Pressure p_condenser=1e4 "Condenser operating pressure";
        parameter SI.Pressure p_reservoir=port_b_nominal.p "Reservoir operating pressure";

        TRANSFORM.Fluid.Machines.SteamTurbine steamTurbine(
          redeclare package Medium = Medium,
          use_T_start=false,
          h_a_start=port_a_start.h,
          m_flow_start=port_a_start.m_flow,
          m_flow_nominal=port_a_nominal.m_flow,
          use_T_nominal=false,
          nUnits=2,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          p_b_start=p_condenser,
          p_outlet_nominal=p_condenser,
          d_nominal=Medium.density_ph(steamTurbine.p_inlet_nominal, port_a_nominal.h),
          p_a_start=header.p_start -valve_TCV.dp_start,
          p_inlet_nominal=port_a_nominal.p -valve_TCV.dp_nominal)
          annotation (Placement(transformation(extent={{40,-10},{60,10}})));
        Electrical.Generator      generator1(J=1e4)
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{130,-10},{150,10}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance(
            redeclare package Medium = Medium, R=1)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={80,-30})));
        TRANSFORM.Fluid.Volumes.IdealCondenser
                                          condenser(
          redeclare package Medium = Medium,
          set_m_flow=true,
          p=p_condenser)
          annotation (Placement(transformation(extent={{77,-94},{97,-74}})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume(
          redeclare package Medium = Medium,
          use_T_start=false,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.01),
          p_start=p_condenser,
          h_start=steamTurbine.h_b_start)
          annotation (Placement(transformation(extent={{58,-30},{78,-10}})));
        TRANSFORM.Fluid.Volumes.DumpTank reservoir(
          redeclare package Medium = Medium,
          A=10,
          p_start=p_reservoir,
          level_start=10)
          annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));
        Modelica.Fluid.Fittings.MultiPort multiPort(redeclare package Medium =
              Medium, nPorts_b=2)
                             annotation (Placement(transformation(
              extent={{-4,-10},{4,10}},
              rotation=90,
              origin={0,-80})));
        Modelica.Fluid.Fittings.MultiPort multiPort1(redeclare package Medium =
              Medium, nPorts_b=if nPorts_a3 > 0 then nPorts_a3+2 else 2)
                             annotation (Placement(transformation(
              extent={{-4,-10},{4,10}},
              rotation=90,
              origin={80,-66})));
        TRANSFORM.Fluid.Sensors.Pressure pressure(redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
        TRANSFORM.Fluid.Valves.ValveCompressible valve_BV(
          rho_nominal=Medium.density_ph(port_a_nominal.p, port_a_nominal.h),
          p_nominal=port_a_nominal.p,
          redeclare package Medium = Medium,
          m_flow_nominal=port_a_nominal.m_flow,
          dp_nominal=100000)
          annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume_bypass(
          use_T_start=false,
          h_start=port_a_start.h,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.01),
          redeclare package Medium = Medium,
          p_start=p_condenser)
                         "included for numeric purposes"
          annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance3(R=1,
            redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={0,-10})));
        Modelica.Blocks.Sources.RealExpression W_balance1
          "Electricity loss/gain not accounted for in connections (e.g., heating/cooling, pumps, etc.) [W]"
          annotation (Placement(transformation(extent={{-96,118},{-84,130}})));
        TRANSFORM.Fluid.Valves.ValveCompressible valve_TCV(
          rho_nominal=Medium.density_ph(port_a_nominal.p, port_a_nominal.h),
          p_nominal=port_a_nominal.p,
          redeclare package Medium = Medium,
          m_flow_nominal=port_a_nominal.m_flow,
          dp_nominal=100000)
          annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=port_a_start.h,
          p_start=port_a_start.p,
          nPorts_a=1,
          nPorts_b=3,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance4(R=1,
            redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-130,40})));
        TRANSFORM.Fluid.BoundaryConditions.Boundary_ph boundary_a3[nPorts_a3](
          redeclare package Medium = Medium,
          each nPorts=1,
          p=port_a3_nominal_p,
          h=port_a3_nominal_h) if nPorts_a3 > 0
          annotation (Placement(transformation(extent={{50,-150},{30,-130}})));
         TRANSFORM.Fluid.Valves.CheckValve checkValve[nPorts_a3](redeclare
            package Medium =
                      Medium, m_flow_start=port_a3_start_m_flow) if nPorts_a3 > 0
           annotation (Placement(transformation(extent={{0,-150},{20,-130}})));
         TRANSFORM.Fluid.BoundaryConditions.MassFlowSource_h boundary_m_flow_a3[
           nPorts_a3](
           redeclare package Medium = Medium,
           each nPorts=1,
          each use_m_flow_in=true,
          each use_h_in=true)  if nPorts_a3 > 0
           annotation (Placement(transformation(extent={{72,-150},{92,-130}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate massFlowRate[nPorts_a3](redeclare
            package Medium = Medium) if nPorts_a3 > 0
          annotation (Placement(transformation(extent={{-30,-150},{-10,-130}})));
        TRANSFORM.Fluid.Sensors.SpecificEnthalpyTwoPort
                                                 specificEnthalpy[nPorts_a3](
            redeclare package Medium = Medium) if nPorts_a3 > 0
          annotation (Placement(transformation(extent={{-60,-150},{-40,-130}})));
        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{70,10},{90,-10}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance2(R=1,
            redeclare package Medium = Medium)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-50,-80})));
        TRANSFORM.Controls.LimPID_Hysteresis PID1(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k_s=1/reservoir.level_start,
          k_m=1/reservoir.level_start,
          k=1e2,
          yMin=0,
          eOn=0.1*reservoir.level_start)
          annotation (Placement(transformation(extent={{-62,-50},{-42,-30}})));
        Modelica.Blocks.Sources.RealExpression level_setpoint(y=reservoir.level_start)
          annotation (Placement(transformation(extent={{-94,-42},{-74,-22}})));
        Modelica.Blocks.Sources.RealExpression level_measure(y=reservoir.level)
          "noEvent(if time < 10 then reservoir.level_start else reservoir.level)"
          annotation (Placement(transformation(extent={{-94,-62},{-74,-42}})));
        TRANSFORM.Fluid.BoundaryConditions.MassFlowSource_T boundary2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_m_flow_in=true,
          T=298.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-28,-70},{-8,-50}})));
      equation

      for i in 1:nPorts_a3 loop
          connect(specificEnthalpy[i].port_a, port_a3[i]);
          connect(specificEnthalpy[i].port_b, massFlowRate[i].port_a);
           connect(checkValve[i].port_a, massFlowRate[i].port_b);
           connect(checkValve[i].port_b, boundary_a3[i].ports[1]);
      connect(boundary_m_flow_a3[i].ports[1], multiPort1.ports_b[i+2]);

      end for;

        connect(generator1.portElec, sensorW.port_a)
          annotation (Line(points={{120,0},{130,0}}, color={255,0,0}));
        connect(sensorW.port_b, portElec_b)
          annotation (Line(points={{150,0},{160,0}}, color={255,0,0}));
        connect(steamTurbine.portLP, volume.port_a)
          annotation (Line(points={{60,6},{60,-20},{62,-20}},   color={0,127,255}));
        connect(multiPort.port_a, reservoir.port_a)
          annotation (Line(points={{0,-84},{0,-91.6}}, color={0,127,255}));
        connect(volume.port_b, resistance.port_a)
          annotation (Line(points={{74,-20},{80,-20},{80,-23}}, color={0,127,255}));
        connect(multiPort1.port_a, condenser.port_a)
          annotation (Line(points={{80,-70},{80,-77}}, color={0,127,255}));
        connect(condenser.port_b, multiPort.ports_b[1]) annotation (Line(points={{87,-92},
                {87,-100},{20,-100},{20,-68},{-2,-68},{-2,-76}}, color={0,127,255}));
        connect(sensorBus.p_inlet_steamTurbine, pressure.p)
          annotation (Line(
            points={{-29.9,100.1},{-94,100.1},{-94,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(volume_bypass.port_a, valve_BV.port_b)
          annotation (Line(points={{-26,0},{-60,0}}, color={0,127,255}));
        connect(volume_bypass.port_b, resistance3.port_a)
          annotation (Line(points={{-14,0},{4.44089e-16,0},{4.44089e-16,-3}},
                                                             color={0,127,255}));
        connect(resistance3.port_b, multiPort1.ports_b[1]) annotation (Line(points={{
                -4.44089e-16,-17},{-4.44089e-16,-28},{0,-28},{0,-40},{80,-40},{80,-62}},
                                                            color={0,127,255}));
        connect(resistance.port_b, multiPort1.ports_b[2]) annotation (Line(points={{80,-37},
                {80,-62}},                        color={0,127,255}));
        connect(valve_BV.port_a, header.port_b[1]) annotation (Line(points={{-80,0},{
                -100,0},{-100,39.3333},{-104,39.3333}}, color={0,127,255}));
        connect(valve_TCV.port_a, header.port_b[2]) annotation (Line(points={{-80,40},
                {-92,40},{-92,40},{-104,40}},     color={0,127,255}));
        connect(port_a, resistance4.port_a)
          annotation (Line(points={{-160,40},{-137,40}}, color={0,127,255}));
        connect(resistance4.port_b, header.port_a[1])
          annotation (Line(points={{-123,40},{-116,40}}, color={0,127,255}));
        connect(massFlowRate.m_flow, boundary_m_flow_a3.m_flow_in) annotation (Line(
              points={{-20,-136.4},{-20,-124},{62,-124},{62,-132},{72,-132}},
                                                                            color={0,0,
                127}));
        connect(specificEnthalpy.h_out, boundary_m_flow_a3.h_in) annotation (Line(
              points={{-50,-136.4},{-50,-126},{60,-126},{60,-136},{70,-136}},
                                                                            color={0,0,
                127}));
        connect(steamTurbine.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{60,0},{70,0}}, color={0,0,0}));
        connect(powerSensor.flange_b, generator1.shaft_a)
          annotation (Line(points={{90,0},{100,0}}, color={0,0,0}));
        connect(valve_TCV.port_b, steamTurbine.portHP)
          annotation (Line(points={{-60,40},{40,40},{40,6}}, color={0,127,255}));
        connect(pressure.port, header.port_b[3]) annotation (Line(points={{-100,50},{
                -100,40},{-104,40},{-104,40.6667}},     color={0,127,255}));
        connect(actuatorBus.opening_TCV,valve_TCV. opening)
          annotation (Line(
            points={{30.1,100.1},{30.1,100.1},{-8,100.1},{-8,102},{-70,102},{-70,48}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(resistance2.port_a, reservoir.port_b) annotation (Line(points={{-43,
                -80},{-40,-80},{-40,-114},{0,-114},{0,-108.4}}, color={0,127,255}));
        connect(actuatorBus.opening_BV, valve_BV.opening)
          annotation (Line(
            points={{30.1,100.1},{-8,100.1},{-8,102},{-50,102},{-50,20},{-70,20},{-70,
                8}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.W_total, sensorW.W) annotation (Line(
            points={{-29.9,100.1},{140,100.1},{140,11}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(level_measure.y, PID1.u_m)
          annotation (Line(points={{-73,-52},{-52,-52}}, color={0,0,127}));
        connect(level_setpoint.y, PID1.u_s)
          annotation (Line(points={{-73,-32},{-68,-32},{-68,-40},{-64,-40}},
                                                         color={0,0,127}));
        connect(PID1.y, boundary2.m_flow_in) annotation (Line(points={{-41,-40},{-38,
                -40},{-38,-52},{-28,-52}}, color={0,0,127}));
        connect(boundary2.ports[1], multiPort.ports_b[2])
          annotation (Line(points={{-8,-60},{2,-60},{2,-76}}, color={0,127,255}));
        connect(port_b, resistance2.port_b) annotation (Line(points={{-160,-40},{-148,
                -40},{-148,-38},{-132,-38},{-132,-80},{-57,-80}}, color={0,127,255}));
        annotation (defaultComponentName="BOP", Icon(coordinateSystem(extent={{-100,-100},
                  {100,100}}),                       graphics={
              Rectangle(
                extent={{-2.09756,2},{83.9024,-2}},
                lineColor={0,0,0},
                origin={-39.9024,-64},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={27.4218,-39.8278},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-14.1867,-1},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={24.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={36.4272,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-14,46},{12,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-64,46},{-16,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-24,49},{-6,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Ellipse(
                extent={{-13,49},{-17,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Rectangle(
                extent={{-24,63},{-6,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-14,49},{-16,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={10,30},
                rotation=-90),
              Polygon(
                points={{6,16},{6,-14},{36,-32},{36,36},{6,16}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-62.1867,-41},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Line(points={{10,-42}}, color={0,0,0}),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={49.2136,-41.9886},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Text(
                extent={{15,-8},{25,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Polygon(
                points={{4,-44},{0,-48},{16,-48},{12,-44},{4,-44}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{2,-34},{14,-46}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{9,-37},{9,-43},{5,-40},{9,-37}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Ellipse(
                extent={{50,12},{78,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{59,-8},{69,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Rectangle(
                extent={{-0.487802,2},{19.5122,-2}},
                lineColor={0,0,0},
                origin={26,-38.4878},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{36,-42},{64,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{45,-62},{55,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Text(
                extent={{-94,82},{94,74}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={255,255,237},
                fillPattern=FillPattern.Solid,
                textString="Turbine"),
              Rectangle(
                extent={{-0.243902,2},{9.7562,-2}},
                lineColor={0,0,0},
                origin={-40,-62.2438},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder)}),
          Diagram(coordinateSystem(extent={{-160,-160},{160,140}})),
          experiment(StopTime=1000));
      end SteamTurbine_L1_boundaries_no_heat;

      model Intermediate_Rankine_Cycle_TESUC_SmallCycle "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.TESTurbine data(
            p_steam_vent=15000000,
            T_Steam_Ref=491.15,
            Q_Nom=18.57e6,
            T_Feedwater=310.15,
            p_steam=1200000,
            p_in_nominal=1200000,
            p_condensor=8000,
            V_FeedwaterMixVolume=0.01,
            T_boundary=473.15,
            valve_TCV_mflow=30,
            valve_TCV_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=60,
            HPT_p_exit_nominal=8000,
            HPT_T_in_nominal=491.15,
            HPT_nominal_mflow=30,
            firstfeedpump_p_nominal=100000));

        Data.IntermediateTurbineInitialisation init(
          p_steam_vent=15000000,
          T_Steam_Ref=491.15,
          Q_Nom=20e6,
          T_Feedwater=309.15,
          p_steam=1200000,
          FeedwaterMixVolume_p_start=100000,
          header_p_start=1000000,
          header_h_start=2e6,
          FeedwaterMixVolume_h_start=1e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=1000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=491.15,
          HPT_T_b_start=313.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          p_start=3500000,
          T_start=579.15)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={108,-144})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=309.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=2) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={98,-38})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=1,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump_SimpleMassFlow pump_SimpleMassFlow1(
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          use_input=true,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater)              annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-121,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={80,-144})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{78,44},{98,24}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass1(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={64,-22})));

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          use_Stodola=false,
          p_inlet_nominal=data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{36,24},{56,44}})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{98,-48},
                {110,-48}},                              color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,42},{-84,42},{-84,40},{-12,40}},
                                                        color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.in_m_flow)
          annotation (Line(
            points={{30,100},{-90,100},{-90,-58},{-121,-58},{-121,-49.03}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-68,74},{
                -68,40},{-12,40}},   color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{98,-144},
                {90,-144}},                              color={0,127,255}));
        connect(port_b, pump_SimpleMassFlow1.port_b) annotation (Line(points={{-160,-40},
                {-132,-40},{-132,-41}},                            color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-110,-41},{-110,-42},{-82,-42}},                    color={0,
                127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-144},{118,-144}},         color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{98,34},
                {102,34},{102,-22},{98,-22},{98,-28}},   color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], sensor_T4.port_a) annotation (Line(
              points={{-24,-40.5},{-10,-40.5},{-10,-42},{32,-42},{32,-144},{70,-144}},
              color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], port_a1) annotation (Line(points={{-24,
                -39.5},{-20,-39.5},{-20,-108},{-92,-108},{-92,-160}},
                                                                  color={0,127,255}));
        connect(R_InternalBypass1.port_b, Condenser.port_a) annotation (Line(points={{
                64,-29},{64,-82},{154,-82},{154,-92},{153,-92}}, color={0,127,255}));
        connect(sensor_T1.port_b, HPT.portHP)
          annotation (Line(points={{28,40},{36,40}}, color={0,127,255}));
        connect(HPT.portLP, R_InternalBypass1.port_a)
          annotation (Line(points={{56,40},{64,40},{64,-15}}, color={0,127,255}));
        connect(HPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{56,34},{78,34}}, color={0,0,0}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_TESUC_SmallCycle;

      model Intermediate_Rankine_Cycle_TESUC "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.TESTurbine data(
            V_FeedwaterMixVolume=0.01,
            valve_TCV_mflow=300,
            valve_TCV_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            HPT_p_exit_nominal=10000,
            HPT_T_in_nominal=579.15,
            firstfeedpump_p_nominal=2000000));

        Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          p_start=3500000,
          T_start=579.15)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={108,-144})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=421.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=3) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={98,-38})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump_SimpleMassFlow pump_SimpleMassFlow1(
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          use_input=true,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater)              annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-121,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        Models.StagebyStageTurbineSecondary.Control_and_Distribution.SpringBallValve
          InternalBypassValve(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_start=init.InternalBypassValve_dp_start,
          m_flow_start=init.InternalBypassValve_mflow_start,
          m_flow_small=data.InternalBypassValve_mflow_small,
          p_spring=data.InternalBypassValve_p_spring,
          K=data.InternalBypassValve_K,
          opening_init=0,
          tau=data.InternalBypassValve_tau)
          annotation (Placement(transformation(extent={{-82,10},{-62,30}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={80,-144})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{78,44},{98,24}})));

        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, m_flow)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-102,-170},{-82,-150}}),
              iconTransformation(extent={{-74,-106},{-54,-86}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass1(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={64,-22})));
        TRANSFORM.Fluid.Machines.SteamTurbine steamTurbine(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_T_start=false,
          h_a_start=port_a_start.h,
          m_flow_start=port_a_start.m_flow,
          m_flow_nominal=port_a_nominal.m_flow,
          use_Stodola=true,
          use_T_nominal=true,
          nUnits=2,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          p_b_start=data.p_condensor,
          p_outlet_nominal=data.p_condensor,
          T_nominal=579.15,
          d_nominal=Medium.density_ph(steamTurbine.p_inlet_nominal, port_a_nominal.h),
          p_a_start=header.p_start - TCV.dp_start,
          p_inlet_nominal=port_a_nominal.p)
          annotation (Placement(transformation(extent={{40,22},{60,42}})));

      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{98,-48},
                {110,-48}},                              color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,41.5},{-60,41.5},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.in_m_flow)
          annotation (Line(
            points={{30,100},{-90,100},{-90,-58},{-121,-58},{-121,-49.03}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(InternalBypassValve.port_a, header.port_b[2]) annotation (Line(points={{-82,20},
                {-104,20},{-104,40},{-106,40},{-106,42.5}},          color={0,127,255}));
        connect(InternalBypassValve.port_b, R_InternalBypass.port_a)
          annotation (Line(points={{-62,20},{-24,20},{-24,5}}, color={0,127,255}));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{98,-144},
                {90,-144}},                              color={0,127,255}));
        connect(port_b, pump_SimpleMassFlow1.port_b) annotation (Line(points={{-160,-40},
                {-132,-40},{-132,-41}},                            color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-110,-41},{-110,-42},{-82,-42}},                    color={0,
                127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-144},{118,-144}},         color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{98,34},
                {102,34},{102,-22},{98,-22},{98,-28}},   color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
          annotation (Line(points={{-24,-40.6667},{-24,-9}},
                                                          color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
              points={{-24,-40},{-10,-40},{-10,-42},{32,-42},{32,-144},{70,-144}},
              color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[3], port_a1) annotation (Line(points={{-24,
                -39.3333},{-20,-39.3333},{-20,-108},{-92,-108},{-92,-160}},
                                                                  color={0,127,255}));
        connect(R_InternalBypass1.port_b, Condenser.port_a) annotation (Line(points={{
                64,-29},{64,-82},{154,-82},{154,-92},{153,-92}}, color={0,127,255}));
        connect(steamTurbine.portLP, R_InternalBypass1.port_a)
          annotation (Line(points={{60,38},{64,38},{64,-15}}, color={0,127,255}));
        connect(steamTurbine.portHP, sensor_T1.port_b)
          annotation (Line(points={{40,38},{34,38},{34,40},{28,40}},
                                                     color={0,127,255}));
        connect(steamTurbine.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{60,32},{68,32},{68,34},{78,34}},
                                                     color={0,0,0}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_TESUC;

      model Intermediate_Rankine_Cycle_3 "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.TESTurbine data);

          parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
          parameter Modelica.Units.SI.Pressure pr3out=200000 annotation(dialog(tab = "Initialization", group = "Pressure"));
          parameter SI.Pressure p_condenser=1e4 "Condenser operating pressure";
          parameter SI.Pressure p_reservoir=port_b_nominal.p "Reservoir operating pressure";

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=1800000,
          T_a_start=852.15,
          T_b_start=573.15,
          m_flow_nominal=50,
          p_inlet_nominal=3447400,
          p_outlet_nominal=2400000,
          T_nominal=563.15)
          annotation (Placement(transformation(extent={{32,22},{52,42}})));
        Fluid.Vessels.IdealCondenser Condenser(
          p=10000,
          V_total=150,
          V_liquid_start=1.2)
          annotation (Placement(transformation(extent={{50,-98},{30,-78}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));
        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=10000,
          m_flow_nominal=80) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=1800000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=80,
          p_inlet_nominal=2400000,
          p_outlet_nominal=8000,
          T_nominal=523.15) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={44,-6})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
            package Medium = Modelica.Media.Water.StandardWater, V=5,
          p_start=2400000)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={82,24})));
        TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=10000,
          m_flow_nominal=5)   annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={84,-26})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-118,-40})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump1(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=1000000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={40,-152})));
        Models.StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
          Moisture_Separator(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=20000,
          T_start=338.15,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.01))
          annotation (Placement(transformation(extent={{58,30},{78,50}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=90,
              origin={47,-62})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance3(R=1000,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-34,-4})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase
                                                      IP(
          NTU=20,
          K_tube=17000,
          K_shell=500,
          redeclare package Tube_medium = Modelica.Media.Water.StandardWater,
          redeclare package Shell_medium = Modelica.Media.Water.StandardWater,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=1000000,
          h_start_tube_inlet=1e6,
          h_start_tube_outlet=1.05e6,
          p_start_shell=2200000,
          h_start_shell_inlet=3e6,
          h_start_shell_outlet=2.9e6,
          dp_init_tube=0,
          dp_init_shell=100000,
          Q_init=1e6,
          m_start_tube=50,
          m_start_shell=26)
          annotation (Placement(transformation(extent={{66,-118},{86,-138}})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase
                                                     IP1(
          NTU=20,
          K_tube=17000,
          K_shell=500,
          redeclare package Tube_medium = Modelica.Media.Water.StandardWater,
          redeclare package Shell_medium = Modelica.Media.Water.StandardWater,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=1000000,
          p_start_shell=2400000,
          Q_init=1e6)
          annotation (Placement(transformation(extent={{-20,-26},{0,-46}})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=2300000,
          use_T_start=false,
          h_start=3.5e6,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=80),
          nPorts_a=3,
          nPorts_b=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={88,-72})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow2(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=90,
              origin={41,-110})));
        Electrical.Generator      generator1(J=1e4)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={46,-32})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{124,-52},{144,-32}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance1(R=1,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={90,-110})));
        Modelica.Blocks.Sources.RealExpression level_setpoint(y=reservoir.level_start)
          annotation (Placement(transformation(extent={{-154,-10},{-134,10}})));
        Modelica.Blocks.Sources.RealExpression level_measure(y=reservoir.level)
          "noEvent(if time < 10 then reservoir.level_start else reservoir.level)"
          annotation (Placement(transformation(extent={{-154,-30},{-134,-10}})));
        TRANSFORM.Controls.LimPID_Hysteresis PID1(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k_s=1/reservoir.level_start,
          k_m=1/reservoir.level_start,
          k=1e2,
          yMin=0,
          eOn=0.1*reservoir.level_start)
          annotation (Placement(transformation(extent={{-124,-16},{-104,4}})));
        TRANSFORM.Fluid.BoundaryConditions.MassFlowSource_T boundary2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_m_flow_in=true,
          use_T_in=true,
          T=348.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-84,-38},{-64,-18}})));
        TRANSFORM.Fluid.Volumes.DumpTank reservoir(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          A=10,
          p_start=p_reservoir,
          level_start=10,
          h_start=1e6)
          annotation (Placement(transformation(extent={{-70,-78},{-50,-58}})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=3600000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={4,-88})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T3(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-46,-40})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance4(R=1,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));
        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=port_a_start.h,
          p_start=port_a_start.p,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,30},{-102,50}})));
        TRANSFORM.Fluid.Machines.Pump_SimpleMassFlow pump_SimpleMassFlow1(
          m_flow_nominal=80,
          use_input=true,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater)              annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-141,-63})));
        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=12000000,
          T=573.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));
        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=50) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));
        Models.StagebyStageTurbineSecondary.Control_and_Distribution.SpringBallValve
          springBallValve(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_start=1000000,
          m_flow_start=0,
          m_flow_small=1e-2,
          p_spring=5500000,
          K=50,
          opening_init=0,
          tau=0.0001)
          annotation (Placement(transformation(extent={{-82,10},{-62,30}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={74,-142})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T5(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={16,-144})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T6(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={42,-132})));
      initial equation

      equation

        connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
            points={{32,38},{30,38},{30,40},{28,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portHP, tee.port_1) annotation (Line(
            points={{50,4},{50,8},{82,8},{82,14}},
            color={0,127,255},
            thickness=0.5));
        connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
            points={{92,24},{92,0},{84,0},{84,-16}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-96,100},{-96,-56},{-118,-56},{-118,-43.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
            points={{52,32},{52,14},{44,14},{44,4}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(HPT.portLP, Moisture_Separator.port_a) annotation (Line(
            points={{52,38},{58,38},{58,40},{62,40}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_b, tee.port_2) annotation (Line(
            points={{74,40},{82,40},{82,34}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portLP, sensor_m_flow1.port_a) annotation (Line(
            points={{50,-16},{50,-52},{47,-52},{47,-56}},
            color={0,127,255},
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));
        connect(resistance3.port_b, IP1.Shell_in) annotation (Line(points={{-34,-11},{
                -34,-26},{-24,-26},{-24,-34},{-20,-34}},       color={0,127,255}));
        connect(IP1.Shell_out, volume.port_a[1]) annotation (Line(points={{0,-34},{30,
                -34},{30,-50},{72,-50},{72,-58},{84,-58},{84,-66},{87.3333,-66}},
                                               color={0,127,255}));
        connect(LPT_Bypass.port_b, volume.port_a[2]) annotation (Line(points={{84,-36},
                {84,-66},{88,-66}},                         color={0,127,255}));
        connect(Moisture_Separator.port_Liquid, volume.port_a[3]) annotation (Line(
              points={{64,36},{64,-14},{72,-14},{72,-58},{88.6667,-58},{88.6667,-66}},
                                                                    color={0,127,255}));

        connect(sensor_m_flow1.port_b, Condenser.port_a) annotation (Line(points={{47,
                -68},{46,-68},{46,-74},{47,-74},{47,-78}}, color={0,127,255}));
        connect(Condenser.port_b, sensor_m_flow2.port_a)
          annotation (Line(points={{40,-98},{41,-98},{41,-104}}, color={0,127,255}));
        connect(LPT.shaft_b, generator1.shaft_a)
          annotation (Line(points={{44,-16},{44,-20},{46,-20},{46,-22}},
                                                       color={0,0,0}));
        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{46,-42},
                {46,-46},{118,-46},{118,-42},{124,-42}}, color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{144,-42},{148,
                -42},{148,-14},{146,-14},{146,0},{160,0}}, color={255,0,0}));
        connect(volume.port_b[1], IP.Shell_in) annotation (Line(points={{88,-78},{88,
                -90},{58,-90},{58,-126},{66,-126}}, color={0,127,255}));
        connect(resistance1.port_a, sensor_m_flow1.port_a) annotation (Line(points={{90,-103},
                {66,-103},{66,-52},{47,-52},{47,-56}},          color={0,127,255}));
        connect(IP.Shell_out, resistance1.port_b) annotation (Line(points={{86,-126},
                {90,-126},{90,-117}}, color={0,127,255}));
        connect(level_measure.y, PID1.u_m) annotation (Line(points={{-133,-20},{-128,-20},
                {-128,-26},{-114,-26},{-114,-18}}, color={0,0,127}));
        connect(level_setpoint.y, PID1.u_s) annotation (Line(points={{-133,0},{-132,0},
                {-132,-6},{-126,-6}},           color={0,0,127}));
        connect(PID1.y, boundary2.m_flow_in) annotation (Line(points={{-103,-6},{-100,
                -6},{-100,-20},{-84,-20}}, color={0,0,127}));
        connect(boundary2.ports[1], reservoir.port_a) annotation (Line(points={{-64,-28},
                {-60,-28},{-60,-59.6}}, color={0,127,255}));
        connect(pump2.port_b, IP1.Tube_in) annotation (Line(points={{4,-78},{4,-40},{0,
                -40}},           color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
            Line(
            points={{30,100},{116,100},{116,-26},{92,-26}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensor_T2.port_a, reservoir.port_b) annotation (Line(points={{-108,-40},
                {-104,-40},{-104,-82},{-60,-82},{-60,-76.4}}, color={0,127,255}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{134,100},{134,-31}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Condensor_Input_mflow, sensor_m_flow1.m_flow) annotation (
            Line(
            points={{-30,100},{-30,18},{28,18},{28,-62},{44.48,-62}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Condensor_Output_mflow, sensor_m_flow2.m_flow) annotation (
            Line(
            points={{-30,100},{-30,18},{28,18},{28,-110},{38.48,-110}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensor_T3.port_b, reservoir.port_a) annotation (Line(points={{-56,-40},
                {-60,-40},{-60,-59.6}}, color={0,127,255}));
        connect(sensor_T3.port_a, IP1.Tube_out)
          annotation (Line(points={{-36,-40},{-20,-40}}, color={0,127,255}));
        connect(port_a, resistance4.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(resistance4.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-118,40}}, color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,39.5},{-60,39.5},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(sensor_T3.T, boundary2.T_in) annotation (Line(points={{-46,-36.4},{-46,
                -12},{-92,-12},{-92,-24},{-86,-24}}, color={0,0,127}));
        connect(port_b, pump_SimpleMassFlow1.port_b) annotation (Line(points={{-160,
                -40},{-152,-40},{-152,-63}},       color={0,127,255}));
        connect(sensor_T2.port_b, pump_SimpleMassFlow1.port_a) annotation (Line(
              points={{-128,-40},{-132,-40},{-132,-54},{-126,-54},{-126,-63},{-130,
                -63}},                                   color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.in_m_flow)
          annotation (Line(
            points={{30,100},{-176,100},{-176,-80},{-141,-80},{-141,-71.03}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(springBallValve.port_a, header.port_b[2]) annotation (Line(points={{
                -82,20},{-86,20},{-86,40.5},{-106,40.5}}, color={0,127,255}));
        connect(springBallValve.port_b, resistance3.port_a)
          annotation (Line(points={{-62,20},{-34,20},{-34,3}}, color={0,127,255}));
        connect(pump1.port_b, sensor_T4.port_b) annotation (Line(points={{50,-152},{
                50,-166},{60,-166},{60,-142},{64,-142}}, color={0,127,255}));
        connect(sensor_T4.port_a, IP.Tube_in) annotation (Line(points={{84,-142},{90,
                -142},{90,-132},{86,-132}}, color={0,127,255}));
        connect(sensor_m_flow2.port_b, sensor_T5.port_b) annotation (Line(points={{41,
                -116},{40,-116},{40,-126},{-4,-126},{-4,-144},{6,-144}}, color={0,127,
                255}));
        connect(sensor_T5.port_a, pump1.port_a) annotation (Line(points={{26,-144},{
                28,-144},{28,-152},{30,-152}}, color={0,127,255}));
        connect(IP.Tube_out, sensor_T6.port_a)
          annotation (Line(points={{66,-132},{52,-132}}, color={0,127,255}));
        connect(sensor_T6.port_b, pump2.port_a) annotation (Line(points={{32,-132},{
                18,-132},{18,-112},{4,-112},{4,-98}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-2.09756,2},{83.9024,-2}},
                lineColor={0,0,0},
                origin={-45.9024,-64},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-68.1867,-41},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={4,30},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-22,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{0,16},{0,-14},{30,-32},{30,36},{0,16}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{11,-8},{21,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={30.4272,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.487802,2},{19.5122,-2}},
                lineColor={0,0,0},
                origin={20,-38.488},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.243902,2},{9.7562,-2}},
                lineColor={0,0,0},
                origin={-46,-62.244},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={21.4218,-39.828},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-4,-34},{8,-46}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-2,-44},{-6,-48},{10,-48},{6,-44},{-2,-44}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-20,46},{6,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-30,49},{-12,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-20,49},{-22,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-30,63},{-12,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-19,49},{-23,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{3,-37},{3,-43},{-1,-40},{3,-37}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255})}),                            Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_3;

      model Intermediate_Rankine_Cycle_2 "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.ObsoleteCS.CS_IntermediateControl_PID_2 CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.IdealTurbine data);

          parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
          parameter Modelica.Units.SI.Pressure pr3out=200000 annotation(dialog(tab = "Initialization", group = "Pressure"));
          parameter SI.Pressure p_condenser=1e4 "Condenser operating pressure";
          parameter SI.Pressure p_reservoir=port_b_nominal.p "Reservoir operating pressure";

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=1800000,
          T_a_start=852.15,
          T_b_start=573.15,
          m_flow_nominal=200,
          p_inlet_nominal=3447400,
          p_outlet_nominal=2500000,
          T_nominal=563.15)
          annotation (Placement(transformation(extent={{34,24},{54,44}})));
        Fluid.Vessels.IdealCondenser Condenser(
          p=10000,
          V_total=150,
          V_liquid_start=1.2)
          annotation (Placement(transformation(extent={{50,-98},{30,-78}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));
        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=10000,
          m_flow_nominal=200)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=1800000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=100,
          p_inlet_nominal=2400000,
          p_outlet_nominal=8000,
          T_nominal=473.15) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-6})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
            package Medium = Modelica.Media.Water.StandardWater, V=5,
          p_start=2400000)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={82,24})));
        TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=10000,
          m_flow_nominal=10)  annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={84,-26})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-118,-40})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump1(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=1000000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={40,-130})));
        Models.StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
          Moisture_Separator(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=20000,
          T_start=338.15,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.01))
          annotation (Placement(transformation(extent={{58,30},{78,50}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=90,
              origin={47,-62})));
        TRANSFORM.Fluid.Valves.ValveCompressible valve_BV(
          dp_start=100000,
          rho_nominal=Medium.density_ph(port_a_nominal.p, port_a_nominal.h),
          opening_nominal=1,
          p_nominal=port_a_nominal.p,
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_nominal=5,
          dp_nominal=100000)
          annotation (Placement(transformation(extent={{-86,6},{-66,26}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance3(R=1,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-34,-4})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase
                                                      IP(
          NTU=20,
          K_tube=17000,
          K_shell=500,
          redeclare package Tube_medium = Modelica.Media.Water.StandardWater,
          redeclare package Shell_medium = Modelica.Media.Water.StandardWater,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=1000000,
          h_start_tube_inlet=1e6,
          h_start_tube_outlet=1.05e6,
          p_start_shell=2200000,
          h_start_shell_inlet=3e6,
          h_start_shell_outlet=2.9e6,
          dp_init_tube=0,
          dp_init_shell=100000,
          Q_init=1e6,
          m_start_tube=50,
          m_start_shell=26)
          annotation (Placement(transformation(extent={{66,-118},{86,-138}})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase
                                                     IP1(
          NTU=20,
          K_tube=17000,
          K_shell=500,
          redeclare package Tube_medium = Modelica.Media.Water.StandardWater,
          redeclare package Shell_medium = Modelica.Media.Water.StandardWater,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=1000000,
          p_start_shell=2400000,
          Q_init=1e6)
          annotation (Placement(transformation(extent={{-32,-26},{-12,-46}})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=2300000,
          use_T_start=false,
          h_start=3.5e6,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=200),
          nPorts_a=3,
          nPorts_b=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={88,-72})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow2(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=90,
              origin={41,-110})));
        Electrical.Generator      generator1(J=1e4)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={46,-32})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{124,-52},{144,-32}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance1(R=1,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={90,-110})));
        Modelica.Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_m_flow_in=true,
          T=318.9576,
          nPorts=1)
          annotation (Placement(transformation(extent={{-56,-120},{-36,-100}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow3(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=180,
              origin={-15,-110})));
        Modelica.Blocks.Sources.RealExpression level_setpoint(y=reservoir.level_start)
          annotation (Placement(transformation(extent={{-154,-10},{-134,10}})));
        Modelica.Blocks.Sources.RealExpression level_measure(y=reservoir.level)
          "noEvent(if time < 10 then reservoir.level_start else reservoir.level)"
          annotation (Placement(transformation(extent={{-154,-30},{-134,-10}})));
        TRANSFORM.Controls.LimPID_Hysteresis PID1(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k_s=1/reservoir.level_start,
          k_m=1/reservoir.level_start,
          k=1e2,
          yMin=0,
          eOn=0.1*reservoir.level_start)
          annotation (Placement(transformation(extent={{-122,-18},{-102,2}})));
        TRANSFORM.Fluid.BoundaryConditions.MassFlowSource_T boundary2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_m_flow_in=true,
          T=298.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-86,-38},{-66,-18}})));
        TRANSFORM.Fluid.Volumes.DumpTank reservoir(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          A=10,
          p_start=p_reservoir,
          level_start=10,
          h_start=1e6)
          annotation (Placement(transformation(extent={{-70,-78},{-50,-58}})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=3600000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={4,-88})));
        TRANSFORM.Fluid.Machines.Pump_Controlled pump(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          N_nominal=1200,
          dp_nominal=100000,
          m_flow_nominal=200,
          d_nominal=1000,
          controlType="RPM",
          use_port=true)
          annotation (Placement(transformation(extent={{-76,-70},{-96,-90}})));
      initial equation

      equation

        connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
            points={{34,40},{28,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,74},{-32,74},{-32,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portHP, tee.port_1) annotation (Line(
            points={{52,4},{52,8},{82,8},{82,14}},
            color={0,127,255},
            thickness=0.5));
        connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
            points={{92,24},{92,0},{84,0},{84,-16}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-96,100},{-96,-56},{-118,-56},{-118,-43.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
            points={{54,34},{54,14},{46,14},{46,4}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(HPT.portLP, Moisture_Separator.port_a) annotation (Line(
            points={{54,40},{62,40}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_b, tee.port_2) annotation (Line(
            points={{74,40},{82,40},{82,34}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portLP, sensor_m_flow1.port_a) annotation (Line(
            points={{52,-16},{52,-52},{47,-52},{47,-56}},
            color={0,127,255},
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_T2.port_b, port_b)
          annotation (Line(points={{-128,-40},{-160,-40}},color={0,127,255}));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));
        connect(port_a, TCV.port_a)
          annotation (Line(points={{-160,40},{-12,40}}, color={0,127,255}));
        connect(valve_BV.port_a, TCV.port_a) annotation (Line(points={{-86,16},{-90,
                16},{-90,40},{-12,40}}, color={0,127,255}));
        connect(valve_BV.port_b, resistance3.port_a) annotation (Line(points={{-66,16},
                {-34,16},{-34,3}},                                  color={0,127,255}));
        connect(resistance3.port_b, IP1.Shell_in) annotation (Line(points={{-34,-11},
                {-34,-22},{-32,-22},{-32,-34}},                color={0,127,255}));
        connect(IP1.Shell_out, volume.port_a[1]) annotation (Line(points={{-12,-34},{
                70,-34},{70,-60},{84,-60},{84,-62},{87.3333,-62},{87.3333,-66}},
                                               color={0,127,255}));
        connect(LPT_Bypass.port_b, volume.port_a[2]) annotation (Line(points={{84,-36},
                {84,-66},{88,-66}},                         color={0,127,255}));
        connect(pump1.port_b, IP.Tube_in) annotation (Line(points={{40,-140},{40,-144},
                {88,-144},{88,-140},{90,-140},{90,-132},{86,-132}},
                                     color={0,127,255}));
        connect(Moisture_Separator.port_Liquid, volume.port_a[3]) annotation (Line(
              points={{64,36},{64,-14},{72,-14},{72,-58},{88.6667,-58},{88.6667,-66}},
                                                                    color={0,127,255}));

        connect(sensor_m_flow1.port_b, Condenser.port_a) annotation (Line(points={{47,
                -68},{46,-68},{46,-74},{47,-74},{47,-78}}, color={0,127,255}));
        connect(Condenser.port_b, sensor_m_flow2.port_a)
          annotation (Line(points={{40,-98},{41,-98},{41,-104}}, color={0,127,255}));
        connect(pump1.port_a, sensor_m_flow2.port_b) annotation (Line(points={{40,-120},
                {41,-120},{41,-116}}, color={0,127,255}));
        connect(sensor_m_flow1.m_flow, sensorBus.Condensor_Input_mflow) annotation (
            Line(points={{44.48,-62},{30,-62},{30,-64},{-96,-64},{-96,100},{-30,100}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_m_flow2.m_flow, sensorBus.Condensor_Output_mflow) annotation (
            Line(points={{38.48,-110},{16,-110},{16,-64},{-96,-64},{-96,100},{-30,100}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(LPT.shaft_b, generator1.shaft_a)
          annotation (Line(points={{46,-16},{46,-22}}, color={0,0,0}));
        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{46,-42},
                {46,-46},{118,-46},{118,-42},{124,-42}}, color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{144,-42},{148,
                -42},{148,-14},{146,-14},{146,0},{160,0}}, color={255,0,0}));
        connect(sensorW.W, sensorBus.Power) annotation (Line(points={{134,-31},{134,
                94},{-30,94},{-30,100}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(volume.port_b[1], IP.Shell_in) annotation (Line(points={{88,-78},{88,
                -90},{58,-90},{58,-126},{66,-126}}, color={0,127,255}));
        connect(resistance1.port_a, sensor_m_flow1.port_a) annotation (Line(points={{
                90,-103},{74,-103},{74,-52},{47,-52},{47,-56}}, color={0,127,255}));
        connect(IP.Shell_out, resistance1.port_b) annotation (Line(points={{86,-126},
                {90,-126},{90,-117}}, color={0,127,255}));
        connect(boundary1.m_flow_in, actuatorBus.CondensorFlow) annotation (Line(
            points={{-56,-102},{-56,-100},{-72,-100},{-72,-142},{116,-142},{116,100},
                {30,100}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(boundary1.ports[1], sensor_m_flow3.port_a)
          annotation (Line(points={{-36,-110},{-21,-110}}, color={0,127,255}));
        connect(sensor_m_flow3.port_b, sensor_m_flow2.port_a) annotation (Line(points=
               {{-9,-110},{8,-110},{8,-102},{40,-102},{40,-100},{41,-100},{41,-104}},
              color={0,127,255}));
        connect(level_measure.y, PID1.u_m) annotation (Line(points={{-133,-20},{-128,-20},
                {-128,-26},{-112,-26},{-112,-20}}, color={0,0,127}));
        connect(level_setpoint.y, PID1.u_s) annotation (Line(points={{-133,0},{-132,0},
                {-132,-6},{-124,-6},{-124,-8}}, color={0,0,127}));
        connect(PID1.y, boundary2.m_flow_in) annotation (Line(points={{-101,-8},{-100,
                -8},{-100,-20},{-86,-20}}, color={0,0,127}));
        connect(boundary2.ports[1], reservoir.port_a) annotation (Line(points={{-66,-28},
                {-60,-28},{-60,-59.6}}, color={0,127,255}));
        connect(IP.Tube_out, pump2.port_a) annotation (Line(points={{66,-132},{36,-132},
                {36,-122},{4,-122},{4,-98}}, color={0,127,255}));
        connect(pump2.port_b, IP1.Tube_in) annotation (Line(points={{4,-78},{2,-78},{2,
                -40},{-12,-40}}, color={0,127,255}));
        connect(IP1.Tube_out, reservoir.port_a) annotation (Line(points={{-32,-40},{-60,
                -40},{-60,-59.6}}, color={0,127,255}));
        connect(actuatorBus.opening_BV, valve_BV.opening) annotation (Line(
            points={{30.1,100.1},{-16,100.1},{-16,102},{-76,102},{-76,24}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
            Line(
            points={{30,100},{116,100},{116,-26},{92,-26}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(pump.port_a, reservoir.port_b) annotation (Line(points={{-76,-80},{
                -76,-94},{-60,-94},{-60,-76.4}}, color={0,127,255}));
        connect(sensor_T2.port_a, pump.port_b) annotation (Line(points={{-108,-40},{
                -104,-40},{-104,-82},{-96,-82},{-96,-80}}, color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed, pump.inputSignal) annotation (Line(
            points={{30,100},{74,100},{74,102},{116,102},{116,-142},{-86,-142},{-86,
                -87}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,-6},{-3,-6}},
            horizontalAlignment=TextAlignment.Right));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-2.09756,2},{83.9024,-2}},
                lineColor={0,0,0},
                origin={-45.9024,-64},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-68.1867,-41},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={4,30},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-22,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{0,16},{0,-14},{30,-32},{30,36},{0,16}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{11,-8},{21,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={30.4272,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.487802,2},{19.5122,-2}},
                lineColor={0,0,0},
                origin={20,-38.488},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.243902,2},{9.7562,-2}},
                lineColor={0,0,0},
                origin={-46,-62.244},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={21.4218,-39.828},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-4,-34},{8,-46}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-2,-44},{-6,-48},{10,-48},{6,-44},{-2,-44}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-20,46},{6,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-30,49},{-12,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-20,49},{-22,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-30,63},{-12,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-19,49},{-23,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{3,-37},{3,-43},{-1,-40},{3,-37}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255})}),                            Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_2;

      model Intermediate_Rankine_Cycle_Basic "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable ControlSystems.ObsoleteCS.CS_IntermediateControl CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.IdealTurbine data);

        Data.DataInitial_HTGR_Pebble dataInitial(P_LP_Comp_Ref=4000000)
          annotation (Placement(transformation(extent={{78,120},{98,140}})));

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=200,
          p_inlet_nominal=14000000,
          p_outlet_nominal=2500000,
          T_nominal=673.15)
          annotation (Placement(transformation(extent={{34,24},{54,44}})));
        TRANSFORM.Electrical.PowerConverters.Generator_Basic generator
          annotation (Placement(transformation(extent={{34,-34},{14,-14}})));
        Fluid.Vessels.IdealCondenser Condenser(
          p=10000,
          V_total=75,
          V_liquid_start=1.2)
          annotation (Placement(transformation(extent={{56,-58},{36,-38}})));
        TRANSFORM.Fluid.Machines.Pump_Controlled pump(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          N_nominal=1200,
          dp_nominal=15000000,
          m_flow_nominal=50,
          d_nominal=1000,
          controlType="RPM",
          use_port=true)
          annotation (Placement(transformation(extent={{-24,-30},{-44,-50}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));
        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,76})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=100000,
          m_flow_nominal=500)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));
        Modelica.Blocks.Sources.RealExpression Electrical_Power(y=generator.power)
          annotation (Placement(transformation(extent={{-100,106},{-88,120}})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=200,
          p_inlet_nominal=14000000,
          p_outlet_nominal=8000,
          T_nominal=673.15) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-6})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=5500000,
          T_start=473.15,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0),
          use_TraceMassPort=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-4,-40})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
            package Medium = Modelica.Media.Water.StandardWater, V=5)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={76,26})));
        TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=2.5) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={86,-34})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-70,-40})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump1(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=5500000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{40,-74},{20,-54}})));
        Models.StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
          Moisture_Separator(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume)
          annotation (Placement(transformation(extent={{56,30},{76,50}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=90,
              origin={61,-24})));
      initial equation

      equation

        connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
            points={{34,40},{28,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.Feed_Pump_Speed, pump.inputSignal) annotation (Line(
            points={{30,100},{116,100},{116,-82},{-34,-82},{-34,-47}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,76},{-24,76}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Power, Electrical_Power.y) annotation (Line(
            points={{-30,100},{-80,100},{-80,112},{-84,112},{-84,113},{-87.4,113}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(volume1.port_b, pump.port_a) annotation (Line(points={{-10,-40},{-24,-40}},
                                          color={0,127,255},
            thickness=0.5));
        connect(LPT.portHP, tee.port_1) annotation (Line(
            points={{52,4},{52,8},{76,8},{76,16}},
            color={0,127,255},
            thickness=0.5));
        connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
            points={{86,26},{86,-24}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT_Bypass.port_b, volume1.port_a) annotation (Line(
            points={{86,-44},{86,-72},{16,-72},{16,-40},{2,-40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensor_T2.port_a, pump.port_b)
          annotation (Line(points={{-60,-40},{-44,-40}},color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-118,100},{-118,-62},{-70,-62},{-70,-43.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(Condenser.port_b, pump1.port_a) annotation (Line(points={{46,-58},{46,
                -64},{40,-64}},                                           color={0,127,
                255},
            thickness=0.5));
        connect(pump1.port_b, volume1.port_a) annotation (Line(points={{20,-64},{16,
                -64},{16,-40},{2,-40}},                    color={0,127,255},
            thickness=0.5));
        connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
            points={{54,34},{54,14},{46,14},{46,4}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
            Line(
            points={{30,100},{116,100},{116,-34},{94,-34}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.portLP, Moisture_Separator.port_a) annotation (Line(
            points={{54,40},{60,40}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_b, tee.port_2) annotation (Line(
            points={{72,40},{76,40},{76,36}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_Liquid, volume1.port_a) annotation (Line(
            points={{62,36},{62,18},{16,18},{16,-40},{2,-40}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portLP, sensor_m_flow1.port_a) annotation (Line(
            points={{52,-16},{52,-18},{61,-18}},
            color={0,127,255},
            thickness=0.5));
        connect(sensor_m_flow1.port_b,Condenser. port_a)
          annotation (Line(points={{61,-30},{61,-36},{53,-36},{53,-38}},
                                                           color={0,127,255},
            thickness=0.5));

        connect(LPT.shaft_b, generator.shaft) annotation (Line(points={{46,-16},{46,-24.1},
                {34.1,-24.1}}, color={0,0,0}));
        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_T2.port_b, port_b)
          annotation (Line(points={{-80,-40},{-160,-40}}, color={0,127,255}));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,66},{-18,40},{-12,40}}, color={0,127,255}));
        connect(port_a, TCV.port_a)
          annotation (Line(points={{-160,40},{-12,40}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-2.09756,2},{83.9024,-2}},
                lineColor={0,0,0},
                origin={-45.9024,-64},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-68.1867,-41},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={4,30},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-22,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{0,16},{0,-14},{30,-32},{30,36},{0,16}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{11,-8},{21,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={30.4272,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.487802,2},{19.5122,-2}},
                lineColor={0,0,0},
                origin={20,-38.488},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.243902,2},{9.7562,-2}},
                lineColor={0,0,0},
                origin={-46,-62.244},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={21.4218,-39.828},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-4,-34},{8,-46}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-2,-44},{-6,-48},{10,-48},{6,-44},{-2,-44}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-20,46},{6,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-30,49},{-12,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-20,49},{-22,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-30,63},{-12,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-19,49},{-23,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{3,-37},{3,-43},{-1,-40},{3,-37}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255})}),                            Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=86400,
            Interval=30,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>The goal of the HTGR models is to obtain a baseline functioning model that can be used to investigate HTGR applications within IES. That being the motivation, there are likely incorrect time constants throughout the system without relevant comparative data to use. Note also that the current core model structure, while this loop is described as a pebble bed (prismatic is pending), is still using the old nuclear core geometry file. This is due to some odd modeling failures during attempts to change. I will modify this description should I obtain the correct core functioning with a reasonable geometry. Using the old core geometry to obtain the correct flow values (flow area, hydraulic diameters, Reynolds numbers) should provide accurate-enough information. </p>
<p>The Dittus-Boelter simple correlation for single phase heat transfer in turbulent flow is used to calculate the heat transfer between the fuel and the coolant, and maximum fuel temperatures appear to agree with literature (~1200C). </p>
<p>Separate HTGR models will be developed for different uses. The primary differentiator is whether a combined cycle is going to be integrated or not. The combined cycle thoerized to be used here takes advantage of the relatively hot waste heat that is produced by an HTGR to boil water at low pressure and send that to a turbine. </p>
<p>No part of this HTGR model should be considered to be optimized. Additionally, thermal mass of the system needs references and then will need to be adjusted (likely through pipes replacing current zero-volume volume nodes) to more appropriately reflect system time constants. </p>
</html>"));
      end Intermediate_Rankine_Cycle_Basic;

      model Intermediate_Rankine_Cycle_Control "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable ControlSystems.ObsoleteCS.CS_IntermediateControl CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.IdealTurbine data);

        Data.DataInitial_HTGR_Pebble dataInitial(P_LP_Comp_Ref=4000000)
          annotation (Placement(transformation(extent={{78,120},{98,140}})));

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=200,
          p_inlet_nominal=14000000,
          p_outlet_nominal=3000000,
          T_nominal=673.15)
          annotation (Placement(transformation(extent={{34,24},{54,44}})));
        TRANSFORM.Electrical.PowerConverters.Generator_Basic generator
          annotation (Placement(transformation(extent={{34,-34},{14,-14}})));
        Fluid.Vessels.IdealCondenser Condenser(
          p=10000,
          V_total=200,
          V_liquid_start=1.2)
          annotation (Placement(transformation(extent={{56,-58},{36,-38}})));
        TRANSFORM.Fluid.Machines.Pump_Controlled pump(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          N_nominal=1200,
          dp_nominal=1000000,
          m_flow_nominal=50,
          d_nominal=1000,
          controlType="RPM",
          use_port=true)
          annotation (Placement(transformation(extent={{-62,-30},{-82,-50}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));
        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,76})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=100000,
          m_flow_nominal=500)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));
        Modelica.Blocks.Sources.RealExpression Electrical_Power(y=generator.power)
          annotation (Placement(transformation(extent={{-100,106},{-88,120}})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=200,
          p_inlet_nominal=2500000,
          p_outlet_nominal=8000,
          T_nominal=673.15) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-6})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
            package Medium = Modelica.Media.Water.StandardWater,
          V=0.1,
          p_start=3000000)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={76,26})));
        TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=2.5) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={94,-32})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-118,-40})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=90,
              origin={61,-24})));
        TRANSFORM.Fluid.Valves.ValveCompressible valve_BV(
          dp_start=100000,
          rho_nominal=Medium.density_ph(port_a_nominal.p, port_a_nominal.h),
          opening_nominal=1,
          p_nominal=port_a_nominal.p,
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_nominal=port_a_nominal.m_flow,
          dp_nominal=100000)
          annotation (Placement(transformation(extent={{-50,6},{-30,26}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance3(R=1,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={0,-10})));
        Modelica.Fluid.Fittings.MultiPort multiPort(redeclare package Medium =
              Modelica.Media.Water.StandardWater, nPorts_b=2)
                             annotation (Placement(transformation(
              extent={{-4,-10},{4,10}},
              rotation=90,
              origin={64,-106})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=12000000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{26,-140},{4,-118}})));
        Modelica.Fluid.Fittings.MultiPort multiPort1(redeclare package Medium =
              Modelica.Media.Water.StandardWater, nPorts_b=2)
                             annotation (Placement(transformation(
              extent={{6,-14},{-6,14}},
              rotation=180,
              origin={-26,-40})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume1(
          p_start=8000000,
          use_T_start=true,
          T_start=473.15,
          h_start=port_a_start.h,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=10),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          "included for numeric purposes"
          annotation (Placement(transformation(extent={{-56,-50},{-36,-30}})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume2(
          p_start=1810000,
          use_T_start=true,
          T_start=473.15,
          h_start=port_a_start.h,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=0.01),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          "included for numeric purposes"
          annotation (Placement(transformation(extent={{38,-142},{58,-122}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance1(R=10,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={94,-72})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump3(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=1800000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{46,-88},{70,-64}})));
      initial equation

      equation

        connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
            points={{34,40},{28,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.Feed_Pump_Speed, pump.inputSignal) annotation (Line(
            points={{30,100},{116,100},{116,-142},{-72,-142},{-72,-47}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,76},{-24,76}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Power, Electrical_Power.y) annotation (Line(
            points={{-30,100},{-80,100},{-80,112},{-84,112},{-84,113},{-87.4,113}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(LPT.portHP, tee.port_1) annotation (Line(
            points={{52,4},{52,8},{76,8},{76,16}},
            color={0,127,255},
            thickness=0.5));
        connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
            points={{86,26},{94,26},{94,-22}},
            color={0,127,255},
            thickness=0.5));
        connect(sensor_T2.port_a, pump.port_b)
          annotation (Line(points={{-108,-40},{-82,-40}},
                                                        color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-96,100},{-96,-56},{-118,-56},{-118,-43.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
            points={{54,34},{54,14},{46,14},{46,4}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
            Line(
            points={{30,100},{116,100},{116,-32},{102,-32}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(LPT.portLP, sensor_m_flow1.port_a) annotation (Line(
            points={{52,-16},{52,-18},{61,-18}},
            color={0,127,255},
            thickness=0.5));
        connect(sensor_m_flow1.port_b,Condenser. port_a)
          annotation (Line(points={{61,-30},{61,-36},{53,-36},{53,-38}},
                                                           color={0,127,255},
            thickness=0.5));

        connect(LPT.shaft_b, generator.shaft) annotation (Line(points={{46,-16},{46,-24.1},
                {34.1,-24.1}}, color={0,0,0}));
        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_T2.port_b, port_b)
          annotation (Line(points={{-128,-40},{-160,-40}},color={0,127,255}));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,66},{-18,40},{-12,40}}, color={0,127,255}));
        connect(port_a, TCV.port_a)
          annotation (Line(points={{-160,40},{-12,40}}, color={0,127,255}));
        connect(valve_BV.port_a, TCV.port_a) annotation (Line(points={{-50,16},{-64,
                16},{-64,40},{-12,40}}, color={0,127,255}));
        connect(pump2.port_b, multiPort1.ports_b[1]) annotation (Line(points={{4,-129},
                {0,-129},{0,-42.8},{-20,-42.8}},                 color={0,127,255}));
        connect(pump.port_a, volume1.port_a)
          annotation (Line(points={{-62,-40},{-52,-40}}, color={0,127,255}));
        connect(volume1.port_b, multiPort1.port_a)
          annotation (Line(points={{-40,-40},{-32,-40}}, color={0,127,255}));
        connect(volume2.port_a, pump2.port_a) annotation (Line(points={{42,-132},{28,-132},
                {28,-129},{26,-129}}, color={0,127,255}));
        connect(multiPort.port_a, volume2.port_b) annotation (Line(points={{64,-110},{
                64,-132},{54,-132}}, color={0,127,255}));
        connect(valve_BV.port_b, resistance3.port_a) annotation (Line(points={{-30,16},
                {-16,16},{-16,8},{4.44089e-16,8},{4.44089e-16,-3}}, color={0,127,255}));
        connect(resistance3.port_b, multiPort1.ports_b[2]) annotation (Line(points={{0,
                -17},{2,-17},{2,-37.2},{-20,-37.2}}, color={0,127,255}));
        connect(valve_BV.opening, actuatorBus.opening_BV) annotation (Line(points={{-40,
                24},{-42,24},{-42,60},{30.1,60},{30.1,100.1}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(HPT.portLP, tee.port_2)
          annotation (Line(points={{54,40},{76,40},{76,36}}, color={0,127,255}));
        connect(multiPort.ports_b[1], resistance1.port_b) annotation (Line(points={{62,-102},
                {62,-102},{62,-92},{94,-92},{94,-79}},       color={0,127,255}));
        connect(resistance1.port_a, LPT_Bypass.port_b)
          annotation (Line(points={{94,-65},{94,-42}}, color={0,127,255}));
        connect(pump3.port_b, multiPort.ports_b[2]) annotation (Line(points={{70,-76},
                {72,-76},{72,-92},{74,-92},{66,-92},{66,-102}}, color={0,127,255}));
        connect(Condenser.port_b, pump3.port_a) annotation (Line(points={{46,-58},{32,
                -58},{32,-76},{46,-76}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-2.09756,2},{83.9024,-2}},
                lineColor={0,0,0},
                origin={-45.9024,-64},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-68.1867,-41},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={4,30},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-22,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{0,16},{0,-14},{30,-32},{30,36},{0,16}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{11,-8},{21,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={30.4272,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.487802,2},{19.5122,-2}},
                lineColor={0,0,0},
                origin={20,-38.488},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.243902,2},{9.7562,-2}},
                lineColor={0,0,0},
                origin={-46,-62.244},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={21.4218,-39.828},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-4,-34},{8,-46}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-2,-44},{-6,-48},{10,-48},{6,-44},{-2,-44}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-20,46},{6,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-30,49},{-12,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-20,49},{-22,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-30,63},{-12,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-19,49},{-23,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{3,-37},{3,-43},{-1,-40},{3,-37}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255})}),                            Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=86400,
            Interval=30,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle_Control;

      model Intermediate_Rankine_Cycle "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.ObsoleteCS.CS_IntermediateControl_PID_2 CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare Data.IdealTurbine data);

          parameter Real IP_NTU = 20.0 "Intermediate pressure NTUHX NTU";
          parameter Modelica.Units.SI.Pressure pr3out=200000 annotation(dialog(tab = "Initialization", group = "Pressure"));

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=200,
          p_inlet_nominal=5000000,
          p_outlet_nominal=2500000,
          T_nominal=673.15)
          annotation (Placement(transformation(extent={{34,24},{54,44}})));
        Fluid.Vessels.IdealCondenser Condenser(
          p=10000,
          V_total=75,
          V_liquid_start=1.2)
          annotation (Placement(transformation(extent={{50,-98},{30,-78}})));
        TRANSFORM.Fluid.Machines.Pump_Controlled pump(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          N_nominal=1200,
          dp_nominal=4000000,
          m_flow_nominal=200,
          d_nominal=1000,
          controlType="RPM",
          use_port=true)
          annotation (Placement(transformation(extent={{-62,-30},{-82,-50}})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));
        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=100000,
          m_flow_nominal=500)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          eta_mech=0.93,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=3000000,
          p_b_start=8000,
          T_a_start=673.15,
          T_b_start=343.15,
          m_flow_nominal=200,
          p_inlet_nominal=14000000,
          p_outlet_nominal=8000,
          T_nominal=673.15) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-6})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
            package Medium = Modelica.Media.Water.StandardWater, V=5,
          p_start=2500000)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={82,24})));
        TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=100) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={86,-24})));
        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-118,-40})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump1(redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=5500000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={40,-130})));
        Models.StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
          Moisture_Separator(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=4000000,
          T_start=773.15,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=5))
          annotation (Placement(transformation(extent={{58,30},{78,50}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow1(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=90,
              origin={47,-62})));
        TRANSFORM.Fluid.Valves.ValveCompressible valve_BV(
          dp_start=100000,
          rho_nominal=Medium.density_ph(port_a_nominal.p, port_a_nominal.h),
          opening_nominal=1,
          p_nominal=port_a_nominal.p,
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_nominal=5,
          dp_nominal=2000000)
          annotation (Placement(transformation(extent={{-86,6},{-66,26}})));
        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance resistance3(R=1,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-34,-4})));
        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 pump2(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=2500000,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{26,-142},{4,-120}})));
        TRANSFORM.Fluid.Volumes.SimpleVolume volume1(
          p_start=8000000,
          use_T_start=true,
          T_start=473.15,
          h_start=port_a_start.h,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=10),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          "included for numeric purposes"
          annotation (Placement(transformation(extent={{-56,-50},{-36,-30}})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX       IP(
          NTU=20,
          K_tube=17000,
          K_shell=500,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=2000000,
          p_start_shell=200000,
          Q_init=1e6)
          annotation (Placement(transformation(extent={{66,-118},{86,-138}})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX      IP1(
          NTU=20,
          K_tube=17000,
          K_shell=500,
          V_Tube=5,
          V_Shell=5,
          p_start_tube=2600000,
          p_start_shell=2400000,
          Q_init=1e6)
          annotation (Placement(transformation(extent={{-30,-26},{-10,-46}})));
        TRANSFORM.Fluid.Volumes.MixingVolume volume(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=3000000,
          use_T_start=false,
          h_start=3.5e6,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=80),
          nPorts_a=3,
          nPorts_b=1)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={86,-72})));
        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=4000000,
          T=573.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-184,64},{-164,84}})));
        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=100000,
          m_flow_nominal=50) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-142,74})));
        Modelica.Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_m_flow_in=true,
          T=318.9576,
          nPorts=1)
          annotation (Placement(transformation(extent={{-56,-120},{-36,-100}})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow2(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,-7},{-6,7}},
              rotation=90,
              origin={41,-110})));
        Electrical.Generator      generator1(J=1e4)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={46,-32})));
        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{124,-52},{144,-32}})));
      initial equation

      equation

        connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
            points={{34,40},{28,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.Feed_Pump_Speed, pump.inputSignal) annotation (Line(
            points={{30,100},{116,100},{116,-142},{-72,-142},{-72,-47}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,74},{-32,74},{-32,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portHP, tee.port_1) annotation (Line(
            points={{52,4},{52,8},{82,8},{82,14}},
            color={0,127,255},
            thickness=0.5));
        connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
            points={{92,24},{92,0},{86,0},{86,-14}},
            color={0,127,255},
            thickness=0.5));
        connect(sensor_T2.port_a, pump.port_b)
          annotation (Line(points={{-108,-40},{-82,-40}},
                                                        color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-96,100},{-96,-56},{-118,-56},{-118,-43.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
            points={{54,34},{54,14},{46,14},{46,4}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
            Line(
            points={{30,100},{116,100},{116,-24},{94,-24}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.portLP, Moisture_Separator.port_a) annotation (Line(
            points={{54,40},{62,40}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_b, tee.port_2) annotation (Line(
            points={{74,40},{82,40},{82,34}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portLP, sensor_m_flow1.port_a) annotation (Line(
            points={{52,-16},{52,-52},{47,-52},{47,-56}},
            color={0,127,255},
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_T2.port_b, port_b)
          annotation (Line(points={{-128,-40},{-160,-40}},color={0,127,255}));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));
        connect(port_a, TCV.port_a)
          annotation (Line(points={{-160,40},{-12,40}}, color={0,127,255}));
        connect(valve_BV.port_a, TCV.port_a) annotation (Line(points={{-86,16},{-90,
                16},{-90,40},{-12,40}}, color={0,127,255}));
        connect(pump.port_a, volume1.port_a)
          annotation (Line(points={{-62,-40},{-52,-40}}, color={0,127,255}));
        connect(valve_BV.port_b, resistance3.port_a) annotation (Line(points={{-66,16},
                {-34,16},{-34,3}},                                  color={0,127,255}));
        connect(volume1.port_b, IP1.Tube_out)
          annotation (Line(points={{-40,-40},{-30,-40}}, color={0,127,255}));
        connect(IP1.Tube_in, pump2.port_b) annotation (Line(points={{-10,-40},{-2,-40},
                {-2,-131},{4,-131}}, color={0,127,255}));
        connect(resistance3.port_b, IP1.Shell_in) annotation (Line(points={{-34,-11},{
                -34,-22},{-30,-22},{-30,-34}},                 color={0,127,255}));
        connect(IP1.Shell_out, volume.port_a[1]) annotation (Line(points={{-10,-34},{
                70,-34},{70,-60},{84,-60},{84,-62},{85.3333,-62},{85.3333,-66}},
                                               color={0,127,255}));
        connect(LPT_Bypass.port_b, volume.port_a[2]) annotation (Line(points={{86,-34},
                {86,-66}},                                  color={0,127,255}));
        connect(pump1.port_b, IP.Tube_in) annotation (Line(points={{40,-140},{40,-144},
                {88,-144},{88,-140},{90,-140},{90,-132},{86,-132}},
                                     color={0,127,255}));
        connect(Moisture_Separator.port_Liquid, volume.port_a[3]) annotation (Line(
              points={{64,36},{64,-14},{72,-14},{72,-58},{86.6667,-58},{86.6667,-66}},
                                                                    color={0,127,255}));
        connect(IP.Tube_out, pump2.port_a) annotation (Line(points={{66,-132},{66,-131},
                {26,-131}},       color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-164,74},{-150,74}}, color={0,127,255}));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-134,74},{-124,74},
                {-124,40},{-12,40}}, color={0,127,255}));
        connect(TBV.opening, actuatorBus.TBV) annotation (Line(
            points={{-142,80.4},{-142,100},{30,100}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(valve_BV.opening, actuatorBus.opening_BV) annotation (Line(
            points={{-76,24},{-76,100.1},{30.1,100.1}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_m_flow1.port_b, Condenser.port_a) annotation (Line(points={{47,
                -68},{46,-68},{46,-74},{47,-74},{47,-78}}, color={0,127,255}));
        connect(IP.Shell_out, volume.port_b[1]) annotation (Line(points={{86,-126},{
                88,-126},{88,-78},{86,-78}}, color={0,127,255}));
        connect(IP.Shell_in, sensor_m_flow1.port_a) annotation (Line(points={{66,-126},
                {62,-126},{62,-52},{47,-52},{47,-56}}, color={0,127,255}));
        connect(boundary1.ports[1], Condenser.port_b) annotation (Line(points={{-36,-110},
                {-26,-110},{-26,-98},{40,-98}},
                                              color={0,127,255}));
        connect(boundary1.m_flow_in, actuatorBus.CondensorFlow) annotation (Line(
            points={{-56,-102},{-56,-100},{-72,-100},{-72,-142},{116,-142},{116,100},{
                30,100}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(Condenser.port_b, sensor_m_flow2.port_a)
          annotation (Line(points={{40,-98},{41,-98},{41,-104}}, color={0,127,255}));
        connect(pump1.port_a, sensor_m_flow2.port_b) annotation (Line(points={{40,-120},
                {41,-120},{41,-116}}, color={0,127,255}));
        connect(sensor_m_flow1.m_flow, sensorBus.Condensor_Input_mflow) annotation (
            Line(points={{44.48,-62},{30,-62},{30,-64},{-96,-64},{-96,100},{-30,100}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_m_flow2.m_flow, sensorBus.Condensor_Output_mflow) annotation (
            Line(points={{38.48,-110},{16,-110},{16,-64},{-96,-64},{-96,100},{-30,100}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(LPT.shaft_b, generator1.shaft_a)
          annotation (Line(points={{46,-16},{46,-22}}, color={0,0,0}));
        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{46,-42},
                {46,-46},{118,-46},{118,-42},{124,-42}}, color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{144,-42},{148,
                -42},{148,-14},{146,-14},{146,0},{160,0}}, color={255,0,0}));
        connect(sensorW.W, sensorBus.Power) annotation (Line(points={{134,-31},{134,
                94},{-30,94},{-30,100}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-2.09756,2},{83.9024,-2}},
                lineColor={0,0,0},
                origin={-45.9024,-64},
                rotation=360,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.81329,5},{66.1867,-5}},
                lineColor={0,0,0},
                origin={-68.1867,-41},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-16,3},{16,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={4,30},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-22,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{0,16},{0,-14},{30,-32},{30,36},{0,16}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{11,-8},{21,6}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.4,3},{15.5,-3}},
                lineColor={0,0,0},
                origin={30.4272,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.487802,2},{19.5122,-2}},
                lineColor={0,0,0},
                origin={20,-38.488},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.243902,2},{9.7562,-2}},
                lineColor={0,0,0},
                origin={-46,-62.244},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.578156,2.1722},{23.1262,-2.1722}},
                lineColor={0,0,0},
                origin={21.4218,-39.828},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-4,-34},{8,-46}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-2,-44},{-6,-48},{10,-48},{6,-44},{-2,-44}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-20,46},{6,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-30,49},{-12,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-20,49},{-22,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-30,63},{-12,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-19,49},{-23,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{3,-37},{3,-43},{-1,-40},{3,-37}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255})}),                            Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=500,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end Intermediate_Rankine_Cycle;

      model SteamTurbine_OpenFeedHeat_DirectCoupling "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare replaceable Data.TESTurbine data(
            p_condensor=8000,
            V_FeedwaterMixVolume=25,
            V_Header=10,
            valve_TCV_mflow=67,
            valve_TCV_dp_nominal=100000,
            valve_SHS_mflow=30,
            valve_SHS_dp_nominal=600000,
            valve_TCV_LPT_mflow=30,
            valve_TCV_LPT_dp_nominal=10000,
            InternalBypassValve_mflow_small=0,
            InternalBypassValve_p_spring=15000000,
            InternalBypassValve_K=40,
            HPT_p_exit_nominal=700000,
            HPT_T_in_nominal=579.15,
            HPT_nominal_mflow=67,
            HPT_efficiency=1,
            LPT_p_in_nominal=700000,
            LPT_p_exit_nominal=7000,
            LPT_T_in_nominal=523.15,
            LPT_nominal_mflow=20,
            LPT_efficiency=1,
            firstfeedpump_p_nominal=2500000,
            secondfeedpump_p_nominal=2000000));

        replaceable Data.IntermediateTurbineInitialisation init(
          FeedwaterMixVolume_p_start=3000000,
            FeedwaterMixVolume_h_start=2e6,
          InternalBypassValve_dp_start=3500000,
          InternalBypassValve_mflow_start=0.1,
          HPT_p_a_start=3000000,
          HPT_p_b_start=10000,
          HPT_T_a_start=523.15,
          HPT_T_b_start=333.15)
        annotation (Placement(transformation(extent={{68,120},{88,140}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)                                    annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-72,-42})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={40,-128})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=data.R_bypass,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=true,
          T_start=421.15,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=2) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,-40})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={84,-92})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,32},{-102,52}})));

        TRANSFORM.Fluid.Machines.Pump                pump_SimpleMassFlow1(
          N_nominal=1500,
          dp_nominal=CS.data.p_steam,
          m_flow_nominal=data.controlledfeedpump_mflow_nominal,
          redeclare package Medium =
              Modelica.Media.Water.StandardWater,
          use_port=true)                                       annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-109,-41})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear PRV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={0,-128})));

        Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor
          annotation (Placement(transformation(extent={{52,-66},{72,-86}})));

        TRANSFORM.Fluid.Valves.ValveLinear InternalBypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=1000000,
          m_flow_nominal=15) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-74,22})));
        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal=data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,24},{52,44}})));
        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          V=data.V_tee,
          p_start=init.tee_p_start)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={90,4})));
        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant
              ( eta_nominal=0.9),
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal=data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={46,-40})));
        TRANSFORM.Fluid.Valves.ValveLinear SHS_charge_control(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_SHS_dp_nominal,
          m_flow_nominal=data.valve_SHS_mflow) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-50,40})));
        TRANSFORM.Fluid.Valves.ValveLinear Discharge_OnOff(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=100000000,
          m_flow_nominal=20) annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={126,-146})));
        TRANSFORM.Fluid.Sensors.MassFlowRate sensor_m_flow(redeclare package
            Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-136,-42})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{50,-156},{70,-136}})));
      initial equation

      equation

        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-30,12},{-48,12},{-48,-58},{-72,-58},{-72,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));

        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{84,-102},
                {84,-106},{104,-106},{104,-48},{110,-48}},
                                                         color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-122,40},{-122,42},{-118,42}},
                                                         color={0,127,255}));
        connect(boundary.ports[1],PRV. port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV,PRV. opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{30,-128},
                {10,-128}},                              color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_a, sensor_T2.port_b) annotation (Line(
              points={{-98,-41},{-98,-42},{-82,-42}},                      color={0,
                127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-128},{50,-128}},          color={0,127,255}));
        connect(powerSensor.flange_b, generator1.shaft_a) annotation (Line(points={{72,-76},
                {84,-76},{84,-82}},                      color={0,0,0}));
        connect(sensor_T2.port_a, FeedwaterMixVolume.port_a[1]) annotation (Line(
              points={{-62,-42},{-42,-42},{-42,-40},{-36,-40}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[1], R_InternalBypass.port_b)
          annotation (Line(points={{-24,-40.5},{-24,-9}}, color={0,127,255}));
        connect(FeedwaterMixVolume.port_b[2], sensor_T4.port_a) annotation (Line(
              points={{-24,-39.5},{-20,-39.5},{-20,-128},{-10,-128}},
              color={0,127,255}));
        connect(InternalBypass.port_a, header.port_b[1]) annotation (Line(points={{-82,22},
                {-94,22},{-94,24},{-106,24},{-106,41.5}},         color={0,127,255}));
        connect(InternalBypass.port_b, R_InternalBypass.port_a) annotation (Line(
              points={{-66,22},{-44,22},{-44,20},{-24,20},{-24,5}}, color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, InternalBypass.opening)
          annotation (Line(
            points={{30,100},{-74,100},{-74,28.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(HPT.shaft_b,LPT. shaft_a) annotation (Line(
            points={{52,34},{56,34},{56,-24},{46,-24},{46,-30}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(LPT.shaft_b, powerSensor.flange_a)
          annotation (Line(points={{46,-50},{46,-76},{52,-76}}, color={0,0,0}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{52,-50},{52,-58},
                {38,-58},{38,-112},{118,-112},{118,-84},{153,-84},{153,-92}}, color={0,
                127,255}));
        connect(sensor_T1.port_b, HPT.portHP) annotation (Line(points={{28,40},{32,40}},
                                color={0,127,255}));
        connect(HPT.portLP, tee.port_2) annotation (Line(points={{52,40},{72,40},{72,
                36},{90,36},{90,14}}, color={0,127,255}));
        connect(LPT.portHP, tee.port_1) annotation (Line(points={{52,-30},{66,-30},{
                66,-28},{90,-28},{90,-6}}, color={0,127,255}));
        connect(actuatorBus.SHS_throttle, SHS_charge_control.opening) annotation (
            Line(
            points={{30,100},{-54,100},{-54,46},{-50,46},{-50,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(actuatorBus.Feed_Pump_Speed, pump_SimpleMassFlow1.inputSignal)
          annotation (Line(
            points={{30,100},{-92,100},{-92,-56},{-109,-56},{-109,-48.7}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(port_b, sensor_m_flow.port_b) annotation (Line(points={{-160,-40},{
                -154,-40},{-154,-42},{-146,-42}}, color={0,127,255}));
        connect(pump_SimpleMassFlow1.port_b, sensor_m_flow.port_a) annotation (Line(
              points={{-120,-41},{-124,-41},{-124,-42},{-126,-42}}, color={0,127,255}));
        connect(sensorBus.Condensor_Output_mflow, sensor_m_flow.m_flow) annotation (
            Line(
            points={{-30,100},{-108,100},{-108,98},{-180,98},{-180,-68},{-136,-68},{
                -136,-45.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(const.y, Discharge_OnOff.opening) annotation (Line(points={{71,-146},
                {76,-146},{76,-132},{126,-132},{126,-139.6}}, color={0,0,127}));
        connect(Discharge_OnOff.port_a, firstfeedpump.port_a) annotation (Line(points=
               {{118,-146},{114,-146},{114,-128},{50,-128}}, color={0,127,255}));
        connect(Discharge_OnOff.port_b, tee.port_3)
          annotation (Line(points={{134,-146},{134,4},{100,4}}, color={0,127,255}));
        connect(SHS_charge_control.port_b, TCV.port_a)
          annotation (Line(points={{-42,40},{-12,40}}, color={0,127,255}));
        connect(PRV.port_a, SHS_charge_control.port_a) annotation (Line(points={{
                -120,74},{-64,74},{-64,40},{-58,40}}, color={0,127,255}));
        connect(header.port_b[2], SHS_charge_control.port_a) annotation (Line(
              points={{-106,42.5},{-106,24},{-94,24},{-94,40},{-86,40},{-86,74},{
                -64,74},{-64,40},{-58,40}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end SteamTurbine_OpenFeedHeat_DirectCoupling;

      model SteamTurbine_L3_ClosedFeedHeat_HTGR "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare replaceable Data.Turbine_2 data(InternalBypassValve_p_spring=
                6500000));

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          Q_units_start={1e7},
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal= data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,22},{52,42}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          Q_units_start={3e7},
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal= data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={44,-6})));

        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
            package Medium = Modelica.Media.Water.StandardWater, V=data.V_tee,
          p_start=init.tee_p_start,
          T_start=init.moisturesep_T_start)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={82,24})));

        TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_LPT_Bypass_dp_nominal,
          m_flow_nominal=data.valve_LPT_Bypass_mflow)   annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={82,-26})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-58,-40})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={108,-144})));

        Models.StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
          Moisture_Separator(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.moisturesep_p_start,
          T_start=init.moisturesep_T_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_moistureseperator))
          annotation (Placement(transformation(extent={{58,30},{78,50}})));

        Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase MainFeedwaterHeater(
          NTU=data.MainFeedHeater_NTU,
          K_tube=data.MainFeedHeater_K_tube,
          K_shell=data.MainFeedHeater_K_shell,
          redeclare package Tube_medium = Modelica.Media.Water.StandardWater,
          redeclare package Shell_medium = Modelica.Media.Water.StandardWater,
          V_Tube=data.MainFeedHeater_V_tube,
          V_Shell=data.MainFeedHeater_V_shell,
          p_start_tube=init.MainFeedHeater_p_start_tube,
          h_start_tube_inlet=init.MainFeedHeater_h_start_tube_inlet,
          h_start_tube_outlet=init.MainFeedHeater_h_start_tube_outlet,
          p_start_shell=init.MainFeedHeater_p_start_shell,
          h_start_shell_inlet=init.MainFeedHeater_h_start_shell_inlet,
          h_start_shell_outlet=init.MainFeedHeater_h_start_shell_outlet,
          dp_init_tube=init.MainFeedHeater_dp_init_tube,
          dp_init_shell=init.MainFeedHeater_dp_init_shell,
          Q_init=init.MainFeedHeater_Q_init,
          m_start_tube=init.MainFeedHeater_m_start_tube,
          m_start_shell=init.MainFeedHeater_m_start_shell)
          annotation (Placement(transformation(extent={{40,-118},{60,-138}})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=false,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=1,
          nPorts_b=1) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={34,-94})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={44,-38})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_feedwater(R=1,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={90,-110})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster SecondFeedwaterPump(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.secondfeedpump_p_nominal,
          allowFlowReversal=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-26,-78})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=1,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,30},{-102,50}})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={80,-144})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T6(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={20,-132})));

        replaceable Data.Turbine_2_init init(FeedwaterMixVolume_h_start=2e6)
          annotation (Placement(transformation(extent={{68,120},{88,140}})));

        TRANSFORM.Fluid.Machines.Pump                pump_SimpleMassFlow2(
          p_a_start=5500000,
          use_T_start=true,
          h_start=1e6,
          N_nominal=1200,
          dp_nominal=15000000,
          m_flow_nominal=50,
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          d_nominal=1000,
          controlType="RPM",
          use_port=true)                                       annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-121,-41})));
      initial equation

      equation

        connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
            points={{32,38},{30,38},{30,40},{28,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portHP, tee.port_1) annotation (Line(
            points={{50,4},{50,8},{82,8},{82,14}},
            color={0,127,255},
            thickness=0.5));
        connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
            points={{92,24},{92,0},{82,0},{82,-16}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-44,100},{-44,-56},{-58,-56},{-58,-43.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
            points={{52,32},{52,14},{44,14},{44,4}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(HPT.portLP, Moisture_Separator.port_a) annotation (Line(
            points={{52,38},{58,38},{58,40},{62,40}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_b, tee.port_2) annotation (Line(
            points={{74,40},{82,40},{82,34}},
            color={0,127,255},
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));
        connect(LPT_Bypass.port_b, FeedwaterMixVolume.port_a[1])
          annotation (Line(points={{82,-36},{82,-44},{72,-44},{72,-58},{34,-58},{34,
                -88}},                                          color={0,127,255}));

        connect(LPT.shaft_b, generator1.shaft_a)
          annotation (Line(points={{44,-16},{44,-28}}, color={0,0,0}));
        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{44,-48},
                {110,-48}},                              color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(FeedwaterMixVolume.port_b[1], MainFeedwaterHeater.Shell_in)
          annotation (Line(points={{34,-100},{34,-126},{40,-126}},
              color={0,127,255}));
        connect(MainFeedwaterHeater.Shell_out,R_feedwater. port_b) annotation (Line(
              points={{60,-126},{90,-126},{90,-117}}, color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
            Line(
            points={{30,100},{114,100},{114,-26},{90,-26}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-118,40}}, color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,40},{-60,40},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{98,-144},
                {90,-144}},                              color={0,127,255}));
        connect(sensor_T4.port_a, MainFeedwaterHeater.Tube_in) annotation (Line(
              points={{70,-144},{64,-144},{64,-132},{60,-132}}, color={0,127,255}));
        connect(MainFeedwaterHeater.Tube_out, sensor_T6.port_a)
          annotation (Line(points={{40,-132},{30,-132}}, color={0,127,255}));
        connect(sensor_T6.port_b, SecondFeedwaterPump.port_a)
          annotation (Line(points={{10,-132},{-26,-132},{-26,-88}},
                                                                color={0,127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-144},{118,-144}},         color={0,127,255}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{50,-16},{60,
                -16},{60,-64},{154,-64},{154,-86},{153,-86},{153,-92}},
                                                               color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed,pump_SimpleMassFlow2. inputSignal)
          annotation (Line(
            points={{30,100},{-56,100},{-56,-26},{-104,-26},{-104,-56},{-121,-56},{
                -121,-48.7}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(port_b, pump_SimpleMassFlow2.port_b) annotation (Line(points={{-160,
                -40},{-146,-40},{-146,-41},{-132,-41}}, color={0,127,255}));
        connect(pump_SimpleMassFlow2.port_a, sensor_T2.port_b) annotation (Line(
              points={{-110,-41},{-94,-41},{-94,-42},{-68,-42},{-68,-40}}, color={0,
                127,255}));
        connect(SecondFeedwaterPump.port_b, sensor_T2.port_a) annotation (Line(points={{-26,-68},
                {-26,-40},{-48,-40}},                 color={0,127,255}));
        connect(R_feedwater.port_a, Condenser.port_a) annotation (Line(points={{90,
                -103},{90,-76},{153,-76},{153,-92}}, color={0,127,255}));
        connect(Moisture_Separator.port_Liquid, firstfeedpump.port_b) annotation (
            Line(points={{64,36},{66,36},{66,-130},{98,-130},{98,-144}}, color={0,127,
                255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end SteamTurbine_L3_ClosedFeedHeat_HTGR;

      model SteamTurbine_L2_ClosedFeedHeat_HTGR_Old "Two stage BOP model"
        extends BaseClasses.Partial_SubSystem_C(
          redeclare replaceable
            ControlSystems.CS_SteamTurbine_L2_PressurePowerFeedtemp CS,
          redeclare replaceable ControlSystems.ED_Dummy ED,
          redeclare replaceable Data.Turbine_2 data(InternalBypassValve_p_spring=
                6500000));

        TRANSFORM.Fluid.Machines.SteamTurbine HPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          Q_units_start={1e7},
          eta_mech=data.HPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.HPT_p_a_start,
          p_b_start=init.HPT_p_b_start,
          T_a_start=init.HPT_T_a_start,
          T_b_start=init.HPT_T_b_start,
          m_flow_nominal=data.HPT_nominal_mflow,
          p_inlet_nominal= data.p_in_nominal,
          p_outlet_nominal=data.HPT_p_exit_nominal,
          T_nominal=data.HPT_T_in_nominal)
          annotation (Placement(transformation(extent={{32,22},{52,42}})));

        Fluid.Vessels.IdealCondenser Condenser(
          p= data.p_condensor,
          V_total=data.V_condensor,
          V_liquid_start=init.condensor_V_liquid_start)
          annotation (Placement(transformation(extent={{156,-112},{136,-92}})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T1(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{6,6},{-6,-6}},
              rotation=180,
              origin={22,40})));

        TRANSFORM.Fluid.Sensors.Pressure     sensor_p(redeclare package Medium =
              Modelica.Media.Water.StandardWater, redeclare function iconUnit =
              TRANSFORM.Units.Conversions.Functions.Pressure_Pa.to_bar)
                                                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-18,60})));

        TRANSFORM.Fluid.Valves.ValveLinear TCV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          m_flow_start=400,
          dp_nominal=data.valve_TCV_dp_nominal,
          m_flow_nominal=data.valve_TCV_mflow)
                             annotation (Placement(transformation(
              extent={{8,8},{-8,-8}},
              rotation=180,
              origin={-4,40})));

        TRANSFORM.Fluid.Machines.SteamTurbine LPT(
          nUnits=1,
          energyDynamics=TRANSFORM.Types.Dynamics.DynamicFreeInitial,
          Q_units_start={3e7},
          eta_mech=data.LPT_efficiency,
          redeclare model Eta_wetSteam =
              TRANSFORM.Fluid.Machines.BaseClasses.WetSteamEfficiency.eta_Constant,
          p_a_start=init.LPT_p_a_start,
          p_b_start=init.LPT_p_b_start,
          T_a_start=init.LPT_T_a_start,
          T_b_start=init.LPT_T_b_start,
          m_flow_nominal=data.LPT_nominal_mflow,
          p_inlet_nominal= data.LPT_p_in_nominal,
          p_outlet_nominal=data.LPT_p_exit_nominal,
          T_nominal=data.LPT_T_in_nominal) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={44,-6})));

        TRANSFORM.Fluid.FittingsAndResistances.TeeJunctionVolume tee(redeclare
            package Medium = Modelica.Media.Water.StandardWater, V=data.V_tee,
          p_start=init.tee_p_start,
          T_start=init.moisturesep_T_start)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={82,24})));

        TRANSFORM.Fluid.Valves.ValveLinear LPT_Bypass(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_LPT_Bypass_dp_nominal,
          m_flow_nominal=data.valve_LPT_Bypass_mflow)   annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={82,-26})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T2(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-58,-40})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster
                                                 firstfeedpump(redeclare
            package Medium =
              Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.firstfeedpump_p_nominal,
          allowFlowReversal=false)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={108,-144})));

        Models.StagebyStageTurbineSecondary.StagebyStageTurbine.BaseClasses.TRANSFORMMoistureSeparator_MIKK
          Moisture_Separator(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p_start=init.moisturesep_p_start,
          T_start=init.moisturesep_T_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_moistureseperator))
          annotation (Placement(transformation(extent={{58,30},{78,50}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_InternalBypass(R=1,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-24,-2})));

        Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase MainFeedwaterHeater(
          NTU=data.MainFeedHeater_NTU,
          K_tube=data.MainFeedHeater_K_tube,
          K_shell=data.MainFeedHeater_K_shell,
          redeclare package Tube_medium = Modelica.Media.Water.StandardWater,
          redeclare package Shell_medium = Modelica.Media.Water.StandardWater,
          V_Tube=data.MainFeedHeater_V_tube,
          V_Shell=data.MainFeedHeater_V_shell,
          p_start_tube=init.MainFeedHeater_p_start_tube,
          h_start_tube_inlet=init.MainFeedHeater_h_start_tube_inlet,
          h_start_tube_outlet=init.MainFeedHeater_h_start_tube_outlet,
          p_start_shell=init.MainFeedHeater_p_start_shell,
          h_start_shell_inlet=init.MainFeedHeater_h_start_shell_inlet,
          h_start_shell_outlet=init.MainFeedHeater_h_start_shell_outlet,
          dp_init_tube=init.MainFeedHeater_dp_init_tube,
          dp_init_shell=init.MainFeedHeater_dp_init_shell,
          Q_init=init.MainFeedHeater_Q_init,
          m_start_tube=init.MainFeedHeater_m_start_tube,
          m_start_shell=init.MainFeedHeater_m_start_shell)
          annotation (Placement(transformation(extent={{40,-118},{60,-138}})));
        Fluid.HeatExchangers.Generic_HXs.NTU_HX_SinglePhase BypassFeedwaterHeater(
          NTU=data.BypassFeedHeater_NTU,
          K_tube=data.BypassFeedHeater_K_tube,
          K_shell=data.BypassFeedHeater_K_shell,
          redeclare package Tube_medium = Modelica.Media.Water.StandardWater,
          redeclare package Shell_medium = Modelica.Media.Water.StandardWater,
          V_Tube=data.BypassFeedHeater_V_tube,
          V_Shell=data.BypassFeedHeater_V_shell,
          p_start_tube=init.BypassFeedHeater_p_start_tube,
          h_start_tube_inlet=init.BypassFeedHeater_h_start_tube_inlet,
          h_start_tube_outlet=init.BypassFeedHeater_h_start_tube_outlet,
          p_start_shell=init.BypassFeedHeater_p_start_shell,
          h_start_shell_inlet=init.BypassFeedHeater_h_start_shell_inlet,
          h_start_shell_outlet=init.BypassFeedHeater_h_start_shell_outlet,
          dp_init_tube=init.BypassFeedHeater_dp_init_tube,
          dp_init_shell=init.BypassFeedHeater_dp_init_shell,
          Q_init=init.BypassFeedHeater_Q_init,
          m_start_tube=init.BypassFeedHeater_m_start_tube,
          m_start_shell=init.BypassFeedHeater_m_start_shell)
          annotation (Placement(transformation(extent={{-20,-26},{0,-46}})));

        TRANSFORM.Fluid.Volumes.MixingVolume FeedwaterMixVolume(
          redeclare package Medium = Modelica.Media.Examples.TwoPhaseWater,
          p_start=init.FeedwaterMixVolume_p_start,
          use_T_start=false,
          h_start=init.FeedwaterMixVolume_h_start,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=data.V_FeedwaterMixVolume),
          nPorts_a=3,
          nPorts_b=1) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={34,-94})));

        Electrical.Generator      generator1(J=data.generator_MoI)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={44,-38})));

        TRANSFORM.Electrical.Sensors.PowerSensor sensorW
          annotation (Placement(transformation(extent={{110,-58},{130,-38}})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_feedwater(R=data.R_feedwater,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={90,-110})));

        TRANSFORM.Fluid.Machines.Pump_PressureBooster SecondFeedwaterPump(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          use_input=false,
          p_nominal=data.secondfeedpump_p_nominal,
          allowFlowReversal=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={6,-76})));

        TRANSFORM.Fluid.FittingsAndResistances.SpecifiedResistance R_entry(R=data.R_entry,
            redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-132,40})));

        TRANSFORM.Fluid.Volumes.MixingVolume header(
          use_T_start=false,
          h_start=init.header_h_start,
          p_start=init.header_p_start,
          nPorts_a=1,
          nPorts_b=2,
          redeclare model Geometry =
              TRANSFORM.Fluid.ClosureRelations.Geometry.Models.LumpedVolume.GenericVolume
              (V=1),
          redeclare package Medium = Modelica.Media.Water.StandardWater)
          annotation (Placement(transformation(extent={{-122,30},{-102,50}})));

        TRANSFORM.Fluid.BoundaryConditions.Boundary_pT boundary(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          p=data.p_boundary,
          T=data.T_boundary,
          nPorts=1)
          annotation (Placement(transformation(extent={{-168,64},{-148,84}})));

        TRANSFORM.Fluid.Valves.ValveLinear TBV(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=data.valve_TBV_dp_nominal,
          m_flow_nominal=data.valve_TBV_mflow) annotation (Placement(transformation(
              extent={{-8,8},{8,-8}},
              rotation=180,
              origin={-128,74})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T4(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={80,-144})));

        TRANSFORM.Fluid.Sensors.TemperatureTwoPort
                                             sensor_T6(redeclare package Medium =
              Modelica.Media.Water.StandardWater)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={20,-132})));

        replaceable Data.Turbine_2_init init(FeedwaterMixVolume_h_start=2e6)
          annotation (Placement(transformation(extent={{68,120},{88,140}})));

        TRANSFORM.Fluid.Machines.Pump                pump_SimpleMassFlow2(
          p_a_start=5500000,
          use_T_start=true,
          h_start=1e6,
          N_nominal=1200,
          dp_nominal=15000000,
          m_flow_nominal=50,
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          d_nominal=1000,
          controlType="RPM",
          use_port=true)                                       annotation (
            Placement(transformation(
              extent={{-11,-11},{11,11}},
              rotation=180,
              origin={-121,-41})));
        TRANSFORM.Fluid.Valves.ValveLinear TBV1(
          redeclare package Medium = Modelica.Media.Water.StandardWater,
          dp_nominal=14000000,
          m_flow_nominal=5)                    annotation (Placement(transformation(
              extent={{11,11},{-11,-11}},
              rotation=180,
              origin={-73,-7})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{-120,2},{-100,22}})));
      initial equation

      equation

        connect(HPT.portHP, sensor_T1.port_b) annotation (Line(
            points={{32,38},{30,38},{30,40},{28,40}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Steam_Temperature, sensor_T1.T) annotation (Line(
            points={{-30,100},{4,100},{4,50},{22,50},{22,42.16}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(TCV.port_b, sensor_T1.port_a) annotation (Line(
            points={{4,40},{16,40}},
            color={0,127,255},
            thickness=0.5));
        connect(LPT.portHP, tee.port_1) annotation (Line(
            points={{50,4},{50,8},{82,8},{82,14}},
            color={0,127,255},
            thickness=0.5));
        connect(tee.port_3, LPT_Bypass.port_a) annotation (Line(
            points={{92,24},{92,0},{82,0},{82,-16}},
            color={0,127,255},
            thickness=0.5));
        connect(sensorBus.Feedwater_Temp, sensor_T2.T) annotation (Line(
            points={{-30,100},{-44,100},{-44,-56},{-58,-56},{-58,-43.6}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(HPT.shaft_b, LPT.shaft_a) annotation (Line(
            points={{52,32},{52,14},{44,14},{44,4}},
            color={0,0,0},
            pattern=LinePattern.Dash));
        connect(HPT.portLP, Moisture_Separator.port_a) annotation (Line(
            points={{52,38},{58,38},{58,40},{62,40}},
            color={0,127,255},
            thickness=0.5));
        connect(Moisture_Separator.port_b, tee.port_2) annotation (Line(
            points={{74,40},{82,40},{82,34}},
            color={0,127,255},
            thickness=0.5));

        connect(actuatorBus.opening_TCV, TCV.opening) annotation (Line(
            points={{30.1,100.1},{-4,100.1},{-4,46.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(sensor_p.port, TCV.port_a)
          annotation (Line(points={{-18,50},{-18,40},{-12,40}}, color={0,127,255}));
        connect(R_InternalBypass.port_b, BypassFeedwaterHeater.Shell_in) annotation (
            Line(points={{-24,-9},{-24,-34},{-20,-34}}, color={0,127,255}));
        connect(BypassFeedwaterHeater.Shell_out, FeedwaterMixVolume.port_a[1])
          annotation (Line(points={{0,-34},{30,-34},{30,-80},{33.3333,-80},{33.3333,
                -88}},                   color={0,127,255}));
        connect(LPT_Bypass.port_b, FeedwaterMixVolume.port_a[2])
          annotation (Line(points={{82,-36},{82,-44},{72,-44},{72,-58},{34,-58},{34,
                -88}},                                          color={0,127,255}));
        connect(Moisture_Separator.port_Liquid, FeedwaterMixVolume.port_a[3])
          annotation (Line(points={{64,36},{64,-44},{72,-44},{72,-58},{34.6667,-58},{
                34.6667,-88}},
                       color={0,127,255}));

        connect(LPT.shaft_b, generator1.shaft_a)
          annotation (Line(points={{44,-16},{44,-28}}, color={0,0,0}));
        connect(generator1.portElec, sensorW.port_a) annotation (Line(points={{44,-48},
                {110,-48}},                              color={255,0,0}));
        connect(sensorW.port_b, portElec_b) annotation (Line(points={{130,-48},{146,
                -48},{146,0},{160,0}},                     color={255,0,0}));
        connect(FeedwaterMixVolume.port_b[1], MainFeedwaterHeater.Shell_in)
          annotation (Line(points={{34,-100},{34,-126},{40,-126}},
              color={0,127,255}));
        connect(MainFeedwaterHeater.Shell_out,R_feedwater. port_b) annotation (Line(
              points={{60,-126},{90,-126},{90,-117}}, color={0,127,255}));
        connect(SecondFeedwaterPump.port_b, BypassFeedwaterHeater.Tube_in)
          annotation (Line(points={{6,-66},{6,-40},{0,-40}}, color={0,127,255}));
        connect(actuatorBus.Divert_Valve_Position, LPT_Bypass.opening) annotation (
            Line(
            points={{30,100},{114,100},{114,-26},{90,-26}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(sensorBus.Steam_Pressure, sensor_p.p) annotation (Line(
            points={{-30,100},{-30,60},{-24,60}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
        connect(sensorBus.Power, sensorW.W) annotation (Line(
            points={{-30,100},{120,100},{120,-37}},
            color={239,82,82},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(port_a, R_entry.port_a)
          annotation (Line(points={{-160,40},{-139,40}}, color={0,127,255}));
        connect(R_entry.port_b, header.port_a[1])
          annotation (Line(points={{-125,40},{-118,40}}, color={0,127,255}));
        connect(header.port_b[1], TCV.port_a)
          annotation (Line(points={{-106,39.5},{-60,39.5},{-60,40},{-12,40}},
                                                        color={0,127,255}));
        connect(TBV.port_a, TCV.port_a) annotation (Line(points={{-120,74},{-104,74},
                {-104,40},{-12,40}}, color={0,127,255}));
        connect(boundary.ports[1], TBV.port_b)
          annotation (Line(points={{-148,74},{-136,74}}, color={0,127,255}));
        connect(actuatorBus.TBV, TBV.opening) annotation (Line(
            points={{30,100},{-128,100},{-128,80.4}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(firstfeedpump.port_b, sensor_T4.port_b) annotation (Line(points={{98,-144},
                {90,-144}},                              color={0,127,255}));
        connect(sensor_T4.port_a, MainFeedwaterHeater.Tube_in) annotation (Line(
              points={{70,-144},{64,-144},{64,-132},{60,-132}}, color={0,127,255}));
        connect(MainFeedwaterHeater.Tube_out, sensor_T6.port_a)
          annotation (Line(points={{40,-132},{30,-132}}, color={0,127,255}));
        connect(sensor_T6.port_b, SecondFeedwaterPump.port_a)
          annotation (Line(points={{10,-132},{4,-132},{4,-90},{6,-90},{6,-86}},
                                                                color={0,127,255}));
        connect(sensor_T2.port_a, BypassFeedwaterHeater.Tube_out)
          annotation (Line(points={{-48,-40},{-20,-40}}, color={0,127,255}));
        connect(Condenser.port_b, firstfeedpump.port_a) annotation (Line(points={{146,
                -112},{146,-144},{118,-144}},         color={0,127,255}));
        connect(LPT.portLP, Condenser.port_a) annotation (Line(points={{50,-16},{60,
                -16},{60,-64},{154,-64},{154,-86},{153,-86},{153,-92}},
                                                               color={0,127,255}));
        connect(R_feedwater.port_a, Condenser.port_a) annotation (Line(points={{90,-103},
                {90,-78},{153,-78},{153,-92}},                 color={0,127,255}));
        connect(actuatorBus.Feed_Pump_Speed,pump_SimpleMassFlow2. inputSignal)
          annotation (Line(
            points={{30,100},{-56,100},{-56,-26},{-104,-26},{-104,-56},{-121,-56},{
                -121,-48.7}},
            color={111,216,99},
            pattern=LinePattern.Dash,
            thickness=0.5));
        connect(port_b, pump_SimpleMassFlow2.port_b) annotation (Line(points={{-160,
                -40},{-146,-40},{-146,-41},{-132,-41}}, color={0,127,255}));
        connect(pump_SimpleMassFlow2.port_a, sensor_T2.port_b) annotation (Line(
              points={{-110,-41},{-94,-41},{-94,-42},{-68,-42},{-68,-40}}, color={0,
                127,255}));
        connect(header.port_b[2], TBV1.port_a) annotation (Line(points={{-106,40.5},{
                -90,40.5},{-90,-7},{-84,-7}}, color={0,127,255}));
        connect(TBV1.port_b, R_InternalBypass.port_a) annotation (Line(points={{-62,
                -7},{-38,-7},{-38,12},{-24,12},{-24,5}}, color={0,127,255}));
        connect(const.y, TBV1.opening)
          annotation (Line(points={{-99,12},{-73,12},{-73,1.8}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-24,2},{24,-2}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={20,-42},
                rotation=180),
              Rectangle(
                extent={{-11.5,3},{11.5,-3}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-1,-28.5},
                rotation=90),
              Rectangle(
                extent={{-4.5,2.5},{4.5,-2.5}},
                lineColor={0,0,0},
                fillColor={64,164,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-8.5,-31.5},
                rotation=360),
              Rectangle(
                extent={{-0.800004,5},{29.1996,-5}},
                lineColor={0,0,0},
                origin={-71.1996,-49},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-18,3},{18,-3}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder,
                origin={-39,28},
                rotation=-90),
              Rectangle(
                extent={{-1.81332,3},{66.1869,-3}},
                lineColor={0,0,0},
                origin={-18.1867,-3},
                rotation=0,
                fillColor={135,135,135},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-70,46},{-36,34}},
                lineColor={0,0,0},
                fillColor={66,200,200},
                fillPattern=FillPattern.HorizontalCylinder),
              Polygon(
                points={{-42,12},{-42,-18},{-12,-36},{-12,32},{-42,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-31,-10},{-21,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="HPT"),
              Ellipse(
                extent={{46,12},{74,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.601938,3},{23.3253,-3}},
                lineColor={0,0,0},
                origin={22.6019,-29},
                rotation=0,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.43805,2.7864},{15.9886,-2.7864}},
                lineColor={0,0,0},
                origin={45.2136,-41.989},
                rotation=90,
                fillColor={0,128,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{32,-42},{60,-68}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-0.373344,2},{13.6267,-2}},
                lineColor={0,0,0},
                origin={18.3733,-56},
                rotation=0,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-0.341463,2},{13.6587,-2}},
                lineColor={0,0,0},
                origin={20,-44.3415},
                rotation=-90,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Rectangle(
                extent={{-1.41463,2.0001},{56.5851,-2.0001}},
                lineColor={0,0,0},
                origin={18.5851,-46.0001},
                rotation=180,
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-46,-40},{-34,-52}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{-44,-50},{-48,-54},{-32,-54},{-36,-50},{-44,-50}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder),
              Ellipse(
                extent={{-56,49},{-38,31}},
                lineColor={95,95,95},
                fillColor={175,175,175},
                fillPattern=FillPattern.Sphere),
              Rectangle(
                extent={{-46,49},{-48,61}},
                lineColor={0,0,0},
                fillColor={95,95,95},
                fillPattern=FillPattern.VerticalCylinder),
              Rectangle(
                extent={{-56,63},{-38,61}},
                lineColor={0,0,0},
                fillColor={181,0,0},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-45,49},{-49,31}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={162,162,0}),
              Text(
                extent={{55,-10},{65,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="G"),
              Text(
                extent={{41,-62},{51,-48}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="C"),
              Polygon(
                points={{-39,-43},{-39,-49},{-43,-46},{-39,-43}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Polygon(
                points={{-4,12},{-4,-18},{26,-36},{26,32},{-4,12}},
                lineColor={0,0,0},
                fillColor={0,114,208},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{7,-10},{17,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="LPT"),
              Rectangle(
                extent={{-4,-40},{22,-48}},
                lineColor={238,46,47},
                pattern=LinePattern.None,
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={28,108,200}),
              Line(
                points={{-4,-44},{22,-44}},
                color={255,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1000,
            Interval=10,
            __Dymola_Algorithm="Esdirk45a"),
          Documentation(info="<html>
<p>A two stage turbine rankine cycle with feedwater heating internal to the system - can be externally bypassed or LPT can be bypassed both will feedwater heat post bypass</p>
</html>"));
      end SteamTurbine_L2_ClosedFeedHeat_HTGR_Old;
    end Obsolete;
  end Models;

  package SupportComponents
    block VarLimVarK_PID
      "P, PI, PD, and PID controller with limited output, anti-windup compensation, setpoint weighting, feed forward, and reset"
      import InitPID =
             Modelica.Blocks.Types.Init;
      import Modelica.Blocks.Types.Init;
      import Modelica.Blocks.Types.SimpleController;
      extends Modelica.Blocks.Interfaces.SVcontrol;
      output Real controlError = u_s - u_m
        "Control error (set point - measurement)";
      parameter Boolean use_k_in = false
        "Get the controller gain from the input connector"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
      parameter Boolean use_lowlim_in= false
        "Get the lower limit from the input connector"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
      parameter Boolean use_uplim_in = false
        "Get the upper limit from the input connector"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));
      parameter SimpleController controllerType=
             SimpleController.PID "Type of controller";
      parameter Boolean with_FF=false "enable feed-forward input signal"
        annotation (Evaluate=true);
      parameter Boolean derMeas = true "=true avoid derivative kick" annotation(Evaluate=true,Dialog(enable=controllerType==SimpleController.PD or
                                    controllerType==SimpleController.PID));
      parameter Real k = 1 "Controller gain: +/- for direct/reverse acting" annotation(Dialog(group="Parameters: Tuning Controls"));
      parameter SI.Time Ti(min=Modelica.Constants.small)=0.5
        "Time constant of Integrator block" annotation (Dialog(group="Parameters: Tuning Controls",enable=
              controllerType == SimpleController.PI or
              controllerType == SimpleController.PID));
      parameter SI.Time Td(min=0)=0.1 "Time constant of Derivative block"
        annotation (Dialog(group="Parameters: Tuning Controls",enable=controllerType == SimpleController.PD
               or controllerType == SimpleController.PID));
      parameter Real yb = 0 "Output bias. May improve simulation";
      parameter Real k_s= 1 "Setpoint input scaling: k_s*u_s. May improve simulation";
      parameter Real k_m= 1 "Measurement input scaling: k_m*u_m. May improve simulation";
      parameter Real k_ff= 1 "Measurement input scaling: k_ff*u_ff. May improve simulation" annotation(Dialog(enable=with_FF));
      parameter Real yMax(start=1)=Modelica.Constants.inf "Upper limit of output";
      parameter Real yMin=-yMax "Lower limit of output";
      parameter Real wp(min=0) = 1
        "Set-point weight for Proportional block (0..1)" annotation(Dialog(group="Parameters: Tuning Controls"));
      parameter Real wd(min=0) = 0 "Set-point weight for Derivative block (0..1)"
           annotation(Dialog(group="Parameters: Tuning Controls",enable=controllerType==SimpleController.PD or
                                    controllerType==SimpleController.PID));
      parameter Real Ni(min=100*Modelica.Constants.eps) = 0.9
        "Ni*Ti is time constant of anti-windup compensation"
         annotation(Dialog(group="Parameters: Tuning Controls",enable=controllerType==SimpleController.PI or
                                  controllerType==SimpleController.PID));
      parameter Real Nd(min=100*Modelica.Constants.eps) = 10
        "The higher Nd, the more ideal the derivative block"
           annotation(Dialog(group="Parameters: Tuning Controls",enable=controllerType==SimpleController.PD or
                                    controllerType==SimpleController.PID));
      // Initialization
      parameter .Modelica.Blocks.Types.Init initType=.Modelica.Blocks.Types.Init.NoInit
        "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)"
        annotation (Evaluate=true, Dialog(tab="Initialization"));
      parameter Real xi_start=0
        "Initial or guess value value for integrator output (= integrator state)"
        annotation (Dialog(tab="Initialization",
                    enable=controllerType==SimpleController.PI or
                           controllerType==SimpleController.PID));
      parameter Real xd_start=0
        "Initial or guess value for state of derivative block"
        annotation (Dialog(tab="Initialization",
                             enable=controllerType==SimpleController.PD or
                                    controllerType==SimpleController.PID));
      parameter Real y_start=0 "Initial value of output"
        annotation(Dialog(enable=initType == .Modelica.Blocks.Types.Init.InitialOutput,    tab=
              "Initialization"));
      parameter Boolean strict=false "= true, if strict limits with noEvent(..)"
        annotation (Evaluate=true, choices(checkBox=true), Dialog(tab="Advanced"));
      parameter TRANSFORM.Types.Reset reset = TRANSFORM.Types.Reset.Disabled
        "Type of controller output reset"
        annotation(Evaluate=true, Dialog(group="Integrator reset"));
      parameter Real y_reset=xi_start
        "Value to which the controller output is reset if the boolean trigger has a rising edge, used if reset == TRANSFORM.Types.Reset.Parameter"
        annotation(Dialog(enable=reset == TRANSFORM.Types.Reset.Parameter,
                          group="Integrator reset"));
      Modelica.Blocks.Interfaces.BooleanInput trigger
        if reset <> TRANSFORM.Types.Reset.Disabled
        "Resets the controller output when trigger becomes true"
        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={-80,-120})));
      Modelica.Blocks.Interfaces.RealInput y_reset_in
        if reset == TRANSFORM.Types.Reset.Input
        "Input signal for state to which integrator is reset, enabled if reset = TRANSFORM.Types.Reset.Input"
        annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
      Modelica.Blocks.Math.Add addP(k1=wp, k2=-1)
        annotation (Placement(transformation(extent={{-70,40},{-50,60}})));
      Modelica.Blocks.Math.Add addD(k1=wd, k2=-1) if with_D
        annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
      Modelica.Blocks.Math.Gain P(k=1)
        annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
      TRANSFORM.Blocks.IntegratorWithReset I(
        k=unitTime/Ti,
        y_start=xi_start,
        initType=if initType == InitPID.SteadyState then Init.SteadyState else if
            initType == InitPID.InitialState or initType == InitPID.InitialState
             then Init.InitialState else Init.NoInit,
        reset=if reset == TRANSFORM.Types.Reset.Disabled then reset else TRANSFORM.Types.Reset.Input,
        y_reset=y_reset) if with_I
        annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));

      Modelica.Blocks.Continuous.Derivative D(
        k=Td/unitTime,
        T=max([Td/Nd,1.e-14]),
        x_start=xd_start,
        initType=if initType ==InitPID.SteadyState  or initType ==InitPID.InitialOutput
             then Init.SteadyState else if initType ==InitPID.InitialState  then
            Init.InitialState else Init.NoInit) if with_D
        annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
      Modelica.Blocks.Math.Add3 addPID
        annotation (Placement(transformation(extent={{-4,-10},{16,10}})));
      Modelica.Blocks.Math.Add3 addI(k2=-1) if with_I
        annotation (Placement(transformation(extent={{-70,-60},{-50,-40}})));
      Modelica.Blocks.Math.Add addSat(k1=+1, k2=-1) if with_I annotation (Placement(
            transformation(
            origin={80,-50},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      Modelica.Blocks.Math.Gain gainTrack(k=1/(k*Ni))  if with_I
        annotation (Placement(transformation(extent={{40,-80},{20,-60}})));
      Modelica.Blocks.Nonlinear.VariableLimiter
                                        variableLimiter(
        strict=strict,
        u(start=y_start))
        annotation (Placement(transformation(extent={{72,-10},{92,10}})));
      Modelica.Blocks.Interfaces.RealInput u_ff if with_FF
        "Connector of feed-forward signal" annotation (Placement(transformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-120,80}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-120,80})));
      Modelica.Blocks.Sources.Constant Fzero(k=0) if not with_FF annotation (
          Placement(transformation(extent={{25,20},{35,30}}, rotation=0)));
      Modelica.Blocks.Sources.Constant Dzero(k=0) if not with_D annotation (
          Placement(transformation(extent={{-30,20},{-20,30}}, rotation=0)));
      Modelica.Blocks.Sources.Constant Izero(k=0) if not with_I annotation (
          Placement(transformation(extent={{-30,-30},{-20,-20}},
                                                              rotation=0)));
      Modelica.Blocks.Math.Add3 addFF
        annotation (Placement(transformation(extent={{50,-5},{60,5}})));
      Modelica.Blocks.Math.Gain gain_u_s(k=k_s)
        annotation (Placement(transformation(extent={{-96,-6},{-84,6}})));
      Modelica.Blocks.Math.Gain gain_u_m(k=k_m) annotation (Placement(
            transformation(
            extent={{-6,-6},{6,6}},
            rotation=90,
            origin={0,-90})));
      Modelica.Blocks.Logical.Switch switch_derKick if with_D
        annotation (Placement(transformation(extent={{-66,-30},{-54,-18}})));
      Modelica.Blocks.Sources.BooleanConstant derKick(k=derMeas) if with_D
        annotation (Placement(transformation(extent={{-98,-30},{-86,-18}})));
      Modelica.Blocks.Sources.Constant null_bias(k=yb)
        annotation (Placement(transformation(extent={{20,-40},{40,-20}})));

    protected
      constant SI.Time unitTime=1  annotation(HideResult=true);
      parameter Boolean with_I = controllerType==SimpleController.PI or
                                 controllerType==SimpleController.PID annotation(Evaluate=true, HideResult=true);
      parameter Boolean with_D = controllerType==SimpleController.PD or
                                 controllerType==SimpleController.PID annotation(Evaluate=true, HideResult=true);
      Modelica.Blocks.Interfaces.RealInput y_reset_internal
       "Internal connector for controller output reset"
       annotation(Evaluate=true);
      Modelica.Blocks.Sources.RealExpression intRes(final y=y_reset_internal/k -
            addPID.u1 - addPID.u2)
        if reset <> TRANSFORM.Types.Reset.Disabled
        "Signal source for integrator reset"
        annotation (Placement(transformation(extent={{-90,-100},{-70,-80}})));
      Modelica.Blocks.Interfaces.RealInput k_in_internal
        "Needed to connect to conditional connector";
      Modelica.Blocks.Interfaces.RealInput lowlim_in_internal
        "Needed to connect to conditional connector";
      Modelica.Blocks.Interfaces.RealInput uplim_in_internal
        "Needed to connect to conditional connector";
    public
      Modelica.Blocks.Math.Gain gain_u_ff(k=k_ff) if with_FF
        annotation (Placement(transformation(extent={{-96,74},{-84,86}})));
      Modelica.Blocks.Interfaces.RealInput upperlim if use_uplim_in
        "Prescribed upper limit of output"
        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
            rotation=-90,
            origin={-60,110})));
      Modelica.Blocks.Interfaces.RealInput lowerlim if use_lowlim_in
        "Prescribed lower limit of output"
        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
            rotation=-90,
            origin={0,110})));
      Modelica.Blocks.Math.Product product1
        annotation (Placement(transformation(extent={{24,-10},{44,10}})));
      Modelica.Blocks.Interfaces.RealInput prop_k if use_k_in
        "Prescribed proportional constant"
        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
            rotation=-90,
            origin={74,114})));
    initial equation
      if initType==InitPID.InitialOutput then
         y = y_start;
      end if;

    equation
      connect(prop_k, k_in_internal);
      connect(lowerlim, lowlim_in_internal);
      connect(upperlim, uplim_in_internal);
      if not use_k_in then
        k_in_internal = k;
      end if;
      if not use_lowlim_in then
        lowlim_in_internal = yMin;
      end if;
      if not use_uplim_in then
        uplim_in_internal = yMax;
      end if;
      assert(yMax >= yMin, "LimPID: Limits must be consistent. However, yMax (=" +
        String(yMax) + ") < yMin (=" + String(yMin) + ")");
      if initType ==InitPID.InitialOutput  and (y_start < yMin or y_start > yMax) then
        Modelica.Utilities.Streams.error("LimPID: Start value y_start (=" + String(
          y_start) + ") is outside of the limits of yMin (=" + String(yMin) +
          ") and yMax (=" + String(yMax) + ")");
      end if;
      // Equations for conditional connectors
      connect(y_reset_in, y_reset_internal);
      if reset <> TRANSFORM.Types.Reset.Input then
        y_reset_internal = y_reset;
      end if;
      connect(addP.y, P.u) annotation (Line(points={{-49,50},{-42,50}}, color={0,
              0,127}));
      connect(addI.y, I.u) annotation (Line(points={{-49,-50},{-42,-50}}, color={
              0,0,127}));
      connect(P.y, addPID.u1) annotation (Line(points={{-19,50},{-10,50},{-10,8},{-6,
              8}},     color={0,0,127}));
      connect(D.y, addPID.u2)
        annotation (Line(points={{-19,0},{-6,0}}, color={0,0,127}));
      connect(I.y, addPID.u3) annotation (Line(points={{-19,-50},{-10,-50},{-10,-8},
              {-6,-8}},     color={0,0,127}));
      connect(variableLimiter.y, addSat.u1) annotation (Line(points={{93,0},{96,0},
              {96,-20},{86,-20},{86,-38}}, color={0,0,127}));
      connect(variableLimiter.y, y)
        annotation (Line(points={{93,0},{110,0}}, color={0,0,127}));
      connect(addSat.y, gainTrack.u) annotation (Line(points={{80,-61},{80,-70},{
              42,-70}}, color={0,0,127}));
      connect(gainTrack.y, addI.u3) annotation (Line(points={{19,-70},{-76,-70},{-76,
              -58},{-72,-58}},     color={0,0,127}));
      connect(Dzero.y, addPID.u2) annotation (Line(points={{-19.5,25},{-14,25},{-14,
              0},{-6,0}},     color={0,0,127}));
      connect(Fzero.y, addFF.u1) annotation (Line(points={{35.5,25},{44,25},{44,4},{
              49,4}}, color={0,0,127}));
      connect(addFF.y, variableLimiter.u)
        annotation (Line(points={{60.5,0},{64,0},{70,0}}, color={0,0,127}));
      connect(addSat.u2, variableLimiter.u) annotation (Line(points={{74,-38},{74,-20},
              {64,-20},{64,0},{70,0}}, color={0,0,127}));
      connect(Izero.y, addPID.u3) annotation (Line(points={{-19.5,-25},{-14,-25},{
              -14,-50},{-10,-50},{-10,-8},{-6,-8}}, color={0,0,127}));
      connect(u_s, gain_u_s.u)
        annotation (Line(points={{-120,0},{-97.2,0}}, color={0,0,127}));
      connect(gain_u_s.y, addP.u1) annotation (Line(points={{-83.4,0},{-80,0},{-80,56},
              {-72,56}}, color={0,0,127}));
      connect(addD.u1, addP.u1) annotation (Line(points={{-72,6},{-80,6},{-80,56},{-72,
              56}}, color={0,0,127}));
      connect(gain_u_s.y, addI.u1) annotation (Line(points={{-83.4,0},{-80,0},{-80,-42},
              {-72,-42}}, color={0,0,127}));
      connect(gain_u_m.u, u_m)
        annotation (Line(points={{0,-97.2},{0,-120}}, color={0,0,127}));
      connect(gain_u_m.y, addP.u2) annotation (Line(points={{0,-83.4},{0,-80},{-78,-80},
              {-78,44},{-72,44}}, color={0,0,127}));
      connect(addD.u2, addP.u2) annotation (Line(points={{-72,-6},{-78,-6},{-78,44},
              {-72,44}}, color={0,0,127}));
      connect(addI.u2, addP.u2) annotation (Line(points={{-72,-50},{-78,-50},{-78,44},
              {-72,44}}, color={0,0,127}));
      connect(switch_derKick.u1, addP.u2) annotation (Line(points={{-67.2,-19.2},{-78,
              -19.2},{-78,44},{-72,44}}, color={0,0,127}));
      connect(switch_derKick.u3, addD.y) annotation (Line(points={{-67.2,-28.8},{-74,
              -28.8},{-74,-14},{-49,-14},{-49,0}}, color={0,0,127}));
      connect(switch_derKick.y, D.u) annotation (Line(points={{-53.4,-24},{-46,-24},
              {-46,0},{-42,0}}, color={0,0,127}));
      connect(derKick.y, switch_derKick.u2)
        annotation (Line(points={{-85.4,-24},{-67.2,-24}}, color={255,0,255}));
      connect(null_bias.y, addFF.u3) annotation (Line(points={{41,-30},{44,-30},{44,
              -4},{49,-4}}, color={0,0,127}));
      connect(intRes.y, I.y_reset_in) annotation (Line(points={{-69,-90},{-46,-90},{
              -46,-58},{-42,-58}}, color={0,0,127}));
      connect(trigger, I.trigger) annotation (Line(points={{-80,-120},{-80,-96},{-30,
              -96},{-30,-62}}, color={255,0,255}));
      connect(u_ff, gain_u_ff.u)
        annotation (Line(points={{-120,80},{-97.2,80}}, color={0,0,127}));
      connect(gain_u_ff.y, addFF.u1) annotation (Line(points={{-83.4,80},{44,80},{
              44,4},{49,4}},
                          color={0,0,127}));
      connect(variableLimiter.limit1, uplim_in_internal) annotation (Line(points={{70,8},{
              64,8},{64,74},{-60,74},{-60,110}},  color={0,0,127}));
      connect(variableLimiter.limit2, lowlim_in_internal) annotation (Line(points={{70,-8},
              {62,-8},{62,86},{0,86},{0,110}},           color={0,0,127}));
      connect(addPID.y, product1.u2) annotation (Line(points={{17,0},{16,0},{16,-14},
              {22,-14},{22,-6}}, color={0,0,127}));
      connect(addFF.u2, product1.y)
        annotation (Line(points={{49,0},{45,0}}, color={0,0,127}));
      connect(product1.u1, k_in_internal) annotation (Line(points={{22,6},{18,6},{
              18,16},{74,16},{74,114}},
                                      color={0,0,127}));
      annotation (defaultComponentName="PID",
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}}), graphics={
            Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
            Polygon(
              points={{-80,90},{-88,68},{-72,68},{-80,90}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
            Polygon(
              points={{90,-80},{68,-72},{68,-88},{90,-80}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
            Text(
              extent={{-20,-20},{80,-60}},
              lineColor={192,192,192},
              textString="%controllerType"),
            Line(
              visible=strict,
              points={{30,60},{81,60}},
              color={255,0,0})}),
        Documentation(info="<html>
<p>This model duplicates the LimPID in the Modelica Standard Library but modifies it to enable a feed forward control option.</p>
<p>Via parameter <b>controllerType</b> either <b>P</b>, <b>PI</b>, <b>PD</b>, or <b>PID</b> can be selected. If, e.g., PI is selected, all components belonging to the D-part are removed from the block (via conditional declarations). The example model <a href=\"modelica://Modelica.Blocks.Examples.PID_Controller\">Modelica.Blocks.Examples.PID_Controller</a> demonstrates the usage of this controller. Several practical aspects of PID controller design are incorporated according to chapter 3 of the book: </p>
<dl><dt>&Aring;str&ouml;m K.J., and H&auml;gglund T.:</dt>
<dd><b>PID Controllers: Theory, Design, and Tuning</b>. Instrument Society of America, 2nd edition, 1995. </dd>
</dl><p>Besides the additive <b>proportional, integral</b> and <b>derivative</b> part of this controller, the following features are present: </p>
<ol>
<li>The output of this controller is limited. If the controller is in its limits, anti-windup compensation is activated to drive the integrator state to zero. </li>
<li>The high-frequency gain of the derivative part is limited to avoid excessive amplification of measurement noise.</li>
<li>Setpoint weighting is present, which allows to weight the setpoint in the proportional and the derivative part independently from the measurement. The controller will respond to load disturbances and measurement noise independently of this setting (parameters wp, wd). However, setpoint changes will depend on this setting. For example, it is useful to set the setpoint weight wd for the derivative part to zero, if steps may occur in the setpoint signal. </li>
<li>Feed forward option is available on any controllerType</li>
<li>derMeas = true uses the derivative on measurement value only to avoid the derivative kick of setpoint changes. = false will take the derivative w.r.t. error</li>
<li>It can be configured to enable an input port that allows resetting the controller output. The controller output can be reset as follows: </li>
<ul>
<li>If reset = TRANSFORM.Types.Reset.Disabled, which is the default, then the controller output is never reset. </li>
<li>If reset = TRANSFORM.Types.Reset.Parameter, then a boolean input signal trigger is enabled. Whenever the value of this input changes from false to true, the controller output is reset by setting y to the value of the parameter y_reset. </li>
<li>If reset = TRANSFORM.Types.Reset.Input, then a boolean input signal trigger is enabled. Whenever the value of this input changes from false to true, the controller output is reset by setting y to the value of the input signal y_reset_in. </li>
</ul>
</ol>
<p>Note that this controller implements an integrator anti-windup. Therefore, for most applications, keeping the default setting of reset = TRANSFORM.Types.Reset.Disabled is sufficient. Examples where it may be beneficial to reset the controller output are situations where the equipment control input should continuously increase as the equipment is switched on, such as as a light dimmer that may slowly increase the luminance, or a variable speed drive of a motor that should continuously increase the speed. </p>
<p>The parameters of the controller can be manually adjusted by performing simulations of the closed loop system (= controller + plant connected together) and using the following strategy: </p>
<ol>
<li>Set very large limits, e.g., yMax = Modelica.Constants.inf</li>
<li>Select a <b>P</b>-controller and manually enlarge parameter <b>k</b> (the total gain of the controller) until the closed-loop response cannot be improved any more.</li>
<li>Select a <b>PI</b>-controller and manually adjust parameters <b>k</b> and <b>Ti</b> (the time constant of the integrator). The first value of Ti can be selected, such that it is in the order of the time constant of the oscillations occurring with the P-controller. If, e.g., vibrations in the order of T=10 ms occur in the previous step, start with Ti=0.01 s.</li>
<li>If you want to make the reaction of the control loop faster (but probably less robust against disturbances and measurement noise) select a <b>PID</b>-Controller and manually adjust parameters <b>k</b>, <b>Ti</b>, <b>Td</b> (time constant of derivative block).</li>
<li>Set the limits yMax and yMin according to your specification.</li>
<li>Perform simulations such that the output of the PID controller goes in its limits. Tune <b>Ni</b> (Ni*Ti is the time constant of the anti-windup compensation) such that the input to the limiter block (= limiter.u) goes quickly enough back to its limits. If Ni is decreased, this happens faster. If Ni=infinity, the anti-windup compensation is switched off and the controller works bad. </li>
</ol>
<p><b>Initialization</b> </p>
<p>This block can be initialized in different ways controlled by parameter <b>initType</b>. The possible values of initType are defined in <a href=\"modelica://Modelica.Blocks.Types.InitPID\">Modelica.Blocks.Types.InitPID</a>. This type is identical to <a href=\"modelica://Modelica.Blocks.Types.Init\">Types.Init</a>, with the only exception that the additional option <b>DoNotUse_InitialIntegratorState</b> is added for backward compatibility reasons (= integrator is initialized with InitialState whereas differential part is initialized with NoInit which was the initialization in version 2.2 of the Modelica standard library). </p>
<p>Based on the setting of initType, the integrator (I) and derivative (D) blocks inside the PID controller are initialized according to the following table: </p>
<table cellspacing=\"0\" cellpadding=\"2\" border=\"1\"><tr>
<td valign=\"top\"><h4>initType</h4></td>
<td valign=\"top\"><h4>I.initType</h4></td>
<td valign=\"top\"><h4>D.initType</h4></td>
</tr>
<tr>
<td valign=\"top\"><h4>NoInit</h4></td>
<td valign=\"top\"><p>NoInit</p></td>
<td valign=\"top\"><p>NoInit</p></td>
</tr>
<tr>
<td valign=\"top\"><h4>SteadyState</h4></td>
<td valign=\"top\"><p>SteadyState</p></td>
<td valign=\"top\"><p>SteadyState</p></td>
</tr>
<tr>
<td valign=\"top\"><h4>InitialState</h4></td>
<td valign=\"top\"><p>InitialState</p></td>
<td valign=\"top\"><p>InitialState</p></td>
</tr>
<tr>
<td valign=\"top\"><h4>InitialOutput</h4><p>and initial equation: y = y_start</p></td>
<td valign=\"top\"><p>NoInit</p></td>
<td valign=\"top\"><p>SteadyState</p></td>
</tr>
<tr>
<td valign=\"top\"><h4>DoNotUse_InitialIntegratorState</h4></td>
<td valign=\"top\"><p>InitialState</p></td>
<td valign=\"top\"><p>NoInit</p></td>
</tr>
</table>
<p><br><br><br><br><br><br>In many cases, the most useful initial condition is <b>SteadyState</b> because initial transients are then no longer present. If initType = InitPID.SteadyState, then in some cases difficulties might occur. The reason is the equation of the integrator: </p>
<p><b><span style=\"font-family: Courier New;\">der</span></b>(y) = k*u; </p>
<p>The steady state equation &quot;der(x)=0&quot; leads to the condition that the input u to the integrator is zero. If the input u is already (directly or indirectly) defined by another initial condition, then the initialization problem is <b>singular</b> (has none or infinitely many solutions). This situation occurs often for mechanical systems, where, e.g., u = desiredSpeed - measuredSpeed and since speed is both a state and a derivative, it is natural to initialize it with zero. As sketched this is, however, not possible. The solution is to not initialize u_m or the variable that is used to compute u_m by an algebraic equation. </p>
<p>If parameter <b>limitAtInit</b> = <b>false</b>, the limits at the output of this controller block are removed from the initialization problem which leads to a much simpler equation system. After initialization has been performed, it is checked via an assert whether the output is in the defined limits. For backward compatibility reasons <b>limitAtInit</b> = <b>true</b>. In most cases it is best to use <b>limitAtInit</b> = <b>false</b>. </p>
</html>"),
        Diagram(graphics={         Text(
              extent={{-98,106},{-158,96}},
              lineColor={0,0,255},
              textString="(feed-forward)")}));
    end VarLimVarK_PID;
  end SupportComponents;
end RankineCycle;
