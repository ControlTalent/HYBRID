within NHES.Systems.BalanceOfPlant.StagebyStageTurbineSecondary;
package Control_and_Distribution
  "A support package for the stage by stage turbine package."
  model SpringBallValve
    "Valve that allows minimum flow until a pressure value is met, and then becomes completely open."
    extends TRANSFORM.Fluid.Valves.BaseClasses.PartialTwoPortTransport;
    parameter Modelica.Units.SI.AbsolutePressure p_spring
      "Nominal pressure at which valve will open"
      annotation (Dialog(group="Nominal operating point"));
    input Real K( unit="1/(m.kg)") "This value is equal to K_nominal/(2*A^2) for flow area A and lookup value K_nominal in standard engineering tables."
      annotation (Dialog(group="Inputs"));
    Modelica.Units.SI.AbsolutePressure p_in;
    parameter Real opening_init = 1;
    Real opening(start = opening_init);
    parameter Real tau(unit = "1/s") = 0.1;
    parameter Real open_min = 0;
  equation
    p_in = port_a.p;
    if p_in>p_spring then
      der(opening) = (1-opening)/tau;
    else
      der(opening) = (open_min-opening)/tau;
      end if;
    port_a.p-port_b.p = port_a.m_flow*sqrt(port_a.m_flow*port_a.m_flow + 0.001*0.001)*K/((opening+0.001));
    // Isenthalpic state transformation (no storage and no loss of energy)
    port_a.h_outflow = inStream(port_b.h_outflow);
    port_b.h_outflow = inStream(port_a.h_outflow);
  annotation (
    Icon(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={
          Line(points={{0,50},{0,0}}),
          Rectangle(
            extent={{-20,60},{20,50}},
            lineColor={0,0,0},
            fillColor={0,0,0},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,50}},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(
            points=DynamicSelect({{-100,0},{100,-0},{100,0},{0,0},{-100,-0},{-100,
                0}}, {{-100,50*opening_actual},{-100,50*opening_actual},{100,-50*opening_actual},{
                100,50*opening_actual},{0,0},{-100,-50*opening_actual},{-100,50*opening_actual}}),
            fillColor={0,255,0},
            lineColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,
                50}}, lineColor={0,0,0})}),
    Documentation(info="<html>
<p>A spring ball valve is a 1-directional valve. Its defining flow characteristics are identical to other valves in the TRANSFORM library (dp_nominal, m_flow_nominal). The spring ball valve operates based on the inlet pressure of the valve: opening when a threshold pressure is reached and diminishing to a minimum opening value when the pressure is not high enough. &nbsp;&nbsp; </p>
</html>",
      revisions="<html>
<ul>
<li><i>4 May 2020</i>
    by <a href=\"mailto:daniel.mikkelson@inl.gov\">Daniel Mikkelson</a>:<br>
       Adapted from the TRANSFORM library.</li>
</ul>
</html>"));
  end SpringBallValve;

  model ValveLineartanh
    "Valve for water/steam flows with near-linear pressure drop as a hyperbolic tangent function"
    extends TRANSFORM.Fluid.Valves.BaseClasses.PartialTwoPortTransport;
    parameter Modelica.Units.SI.AbsolutePressure dp_nominal
      "Nominal pressure drop at full opening"
      annotation (Dialog(group="Nominal operating point"));
    parameter Medium.MassFlowRate m_flow_nominal
      "Nominal mass flowrate at full opening";
    final parameter Modelica.Fluid.Types.HydraulicConductance k=m_flow_nominal/
        dp_nominal/0.93055 "Hydraulic conductance at full opening";
        Real opening_actual "Actual valve open amount";
    Modelica.Blocks.Interfaces.RealInput opening
      "=1: completely open, =0: completely closed"
    annotation (Placement(transformation(
          origin={0,90},
          extent={{-20,-20},{20,20}},
          rotation=270), iconTransformation(
          extent={{-20,-20},{20,20}},
          rotation=270,
          origin={0,80})));
  equation
    opening_actual = 0.5 + 0.5*tanh((opening-0.5)/0.379564427300032);
    //Note that this method allows for 6.5% overflow of nominal design points.
    m_flow = opening_actual*k*dp;

    // Isenthalpic state transformation (no storage and no loss of energy)
    port_a.h_outflow = inStream(port_b.h_outflow);
    port_b.h_outflow = inStream(port_a.h_outflow);
  annotation (
    Icon(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={
          Line(points={{0,50},{0,0}}),
          Rectangle(
            extent={{-20,60},{20,50}},
            lineColor={0,0,0},
            fillColor={0,0,0},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,50}},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(
            points=DynamicSelect({{-100,0},{100,-0},{100,0},{0,0},{-100,-0},{-100,
                0}}, {{-100,50*opening_actual},{-100,50*opening_actual},{100,-50*opening_actual},{
                100,50*opening_actual},{0,0},{-100,-50*opening_actual},{-100,50*opening_actual}}),
            fillColor={0,255,0},
            lineColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,
                50}}, lineColor={0,0,0})}),
    Documentation(info="<html>
<p>This valve is a standard linear valve with one notable exception. The controlled opening value is not applied to the pressure drop equation. Instead, the hyperbolic tangent of the opening value is named opening_actual and that value is applied to the pressure drop equation. </p>
<p>The hyperbolic tangent function appears as a horizontal tangent function, changing from one extreme value to another over a small range. The advantage of a hyperbolic tangent function as opposed to a logical switch or even a linear switch between two values is that the function has a continuous derivative that can be evaluated within Modelica models. </p>
<p>The purpose of using this filter is to allow controllers to span any real value as an input while the valve will actually operate on [0,1]. (If allowed to go negative, the valve will increase pressure of fluid moving across it. </p>
</html>",
      revisions="<html>
<ul>
<li><i>4 May 2020</i>
    by <a href=\"mailto:daniel.mikkelson@inl.gov\">Daniel Mikkelson</a>:<br>
       Adapted from the TRANSFORM library.</li>
</ul>
</html>"));
  end ValveLineartanh;

  block MinMaxFilter "Delays an input or output signal"
    parameter Real min = 0 "Minimum output value";
    parameter Real max = 1 "Maximum output value";

    Modelica.Blocks.Interfaces.RealInput u
      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
    Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
            extent={{100,-14},{128,14}}), iconTransformation(extent={{100,-14},{128,
              14}})));
  initial equation
  y=u;
  equation
    if
      (y <= min and u <= min) then
      der(y)=0;
    elseif
          (u >=max and y >= max) then
      der(y) = 0;
    else
      der(y) = u-y;
    end if;

    annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
          coordinateSystem(preserveAspectRatio=false)),
      Documentation(info="<html>
<p>The Min/Max filter uses a derivative term to exponentially approach a value. Once the minimum or maximum value is reached, then the derivative of the output is set to 0. </p>
</html>"));
  end MinMaxFilter;

  model ValveLinearTotal
    "Valve for water/steam flows with a linear pressure drop"
    extends TRANSFORM.Fluid.Valves.BaseClasses.PartialTwoPortTransport;
    parameter Modelica.Units.SI.AbsolutePressure dp_nominal
      "Nominal pressure drop at full opening"
      annotation (Dialog(group="Nominal operating point"));
    parameter Medium.MassFlowRate m_flow_nominal
      "Nominal mass flowrate at full opening";
    final parameter Modelica.Fluid.Types.HydraulicConductance k=m_flow_nominal/
        dp_nominal "Hydraulic conductance at full opening";
        Real opening_actual;
    Modelica.Blocks.Interfaces.RealInput opening
      "=1: completely open, =0: completely closed"
    annotation (Placement(transformation(
          origin={0,90},
          extent={{-20,-20},{20,20}},
          rotation=270), iconTransformation(
          extent={{-20,-20},{20,20}},
          rotation=270,
          origin={0,80})));

  equation

    opening_actual =opening;
    //Note that this method allows for 6.5% overflow of nominal design points.
    m_flow = opening_actual*k*dp;

    // Isenthalpic state transformation (no storage and no loss of energy)
    port_a.h_outflow = inStream(port_b.h_outflow);
    port_b.h_outflow = inStream(port_a.h_outflow);
  annotation (
    Icon(coordinateSystem(
          preserveAspectRatio=true,
          extent={{-100,-100},{100,100}}), graphics={
          Line(points={{0,50},{0,0}}),
          Rectangle(
            extent={{-20,60},{20,50}},
            lineColor={0,0,0},
            fillColor={0,0,0},
            fillPattern=FillPattern.Solid),
          Polygon(
            points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,50}},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(
            points=DynamicSelect({{-100,0},{100,-0},{100,0},{0,0},{-100,-0},{-100,
                0}}, {{-100,50*opening_actual},{-100,50*opening_actual},{100,-50*opening_actual},{
                100,50*opening_actual},{0,0},{-100,-50*opening_actual},{-100,50*opening_actual}}),
            fillColor={0,255,0},
            lineColor={255,255,255},
            fillPattern=FillPattern.Solid),
          Polygon(points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,
                50}}, lineColor={0,0,0})}),
    Documentation(info="<html>
<p>A linear valve, identical to TRANSFORM.Fluid.Valves.ValveLinear. Likely will replace in models and eliminate this. The renaming confused the author. </p>
</html>",
      revisions="<html>
<ul>
<li><i>4 May 2020</i>
    by <a href=\"mailto:daniel.mikkelson@inl.gov\">Daniel Mikkelson</a>:<br>
       Adapted from the TRANSFORM library.</li>
</ul>
</html>"));
  end ValveLinearTotal;

  block PI_Control_Reset_Input
    "Proportional-Integral controller: y = yb + Kc*e + Kc/Ti*integral(e), with a logical input for integral reset"
    import Modelica.Blocks.Types.Init;
    extends Modelica.Blocks.Interfaces.SVcontrol;
    parameter Real k(unit="1") = 1 "Error Gain";
    parameter Modelica.Units.SI.Time Ti(
      start=1,
      min=Modelica.Constants.small) = 1 "Time Constant (Ti>0 required)";
    parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.NoInit
      "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)"
      annotation (Evaluate=true, Dialog(group="Initialization"));

    parameter Real yb=0 "Output bias";
    parameter Real k_s=1 "Scaling factor for setpoint: k_s*u_s";
    parameter Real k_m=1 "Scaling factor for measurement: k_m*u_m";
    parameter Boolean directActing=true "=false reverse acting"
      annotation (Evaluate=true);
    parameter Real x_start=0 "Initial or guess value of error integral (state)"
      annotation (Dialog(group="Initialization"));
    parameter Real y_start=0 "Initial value of output" annotation (Dialog(enable=
            initType == Init.SteadyState or initType == Init.InitialOutput, group=
           "Initialization"));
    Real x(start=x_start) "Error integral (state)";
    Real Kc=k*(if directActing then +1 else -1);
    Real e=k_s*u_s - k_m*u_m;

    Modelica.Blocks.Interfaces.BooleanInput
              k_in
                  "Connector of setpoint input signal" annotation (Placement(
          transformation(extent={{-140,60},{-100,100}})));
  initial equation
    if initType == Init.SteadyState then
      der(x) = 0;
    elseif initType == Init.InitialState then
      x = x_start;
    elseif initType == Init.InitialOutput then
      y = y_start;
    end if;
  equation

  if k_in then
    Ti*der(x) = e;
  else
    der(x) = -10*x;
  end if;
    y = yb + Kc*e + Kc*x;
    //y = yb + Kc*e;
    annotation (
      defaultComponentName="PI",
      Documentation(info="<html>
<p>This is a custom PI controller based on the PI TRANSFORM controller but also uses a logical input to dictate a form of anti-windup. The purpose is to force a PI controller to effectively be forced to turn off when the logical input is false and operate normally when the logical is true. During long periods of controller integral calculation when the controller is not in use, the controller will produce a large integral term which could cause controller lag when the operational mode changes. </p>
<p>This blocks defines the transfer function between the input u and the output y (element-wise) as <i>PI</i> system: </p>
<p><span style=\"font-family: Courier New;\">                 1</span></p>
<p><span style=\"font-family: Courier New;\">   y = k * (1 + ---) * u</span></p>
<p><span style=\"font-family: Courier New;\">                T*s</span></p>
<p><span style=\"font-family: Courier New;\">           T*s + 1</span></p>
<p><span style=\"font-family: Courier New;\">     = k * ------- * u</span></p>
<p><span style=\"font-family: Courier New;\">             T*s</span></p>
<p>If you would like to be able to change easily between different transfer functions (FirstOrder, SecondOrder, ... ) by changing parameters, use the general model class <b>TransferFunction</b> instead and model a PI SISO system with parameters</p><p>b = {k*T, k}, a = {T, 0}. </p>
<p><span style=\"font-family: Courier New;\">Example:</span></p>
<p><br><span style=\"font-family: Courier New;\">   parameter: k = 0.3,  T = 0.4</span></p>
<p><br><span style=\"font-family: Courier New;\">   results in:</span></p>
<p><span style=\"font-family: Courier New;\">               0.4 s + 1</span></p>
<p><span style=\"font-family: Courier New;\">      y = 0.3 ----------- * u</span></p>
<p><span style=\"font-family: Courier New;\">                 0.4 s</span> </p>
<p>It might be difficult to initialize the PI component in steady state due to the integrator part. This is discussed in the description of package <a href=\"modelica://Modelica.Blocks.Continuous#info\">Continuous</a>. </p>
</html>"),
      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,
              100}}), graphics={
          Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
          Polygon(
            points={{-80,90},{-88,68},{-72,68},{-80,90}},
            lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid),
          Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
          Polygon(
            points={{90,-80},{68,-72},{68,-88},{90,-80}},
            lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid),
          Line(points={{-80.0,-80.0},{-80.0,-20.0},{60.0,80.0}}, color={0,0,127}),
          Text(
            extent={{0,6},{60,-56}},
            lineColor={192,192,192},
            textString="PI"),
          Text(
            extent={{-150,-150},{150,-110}},
            lineColor={0,0,0},
            textString="T=%T")}),
      Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,
              100}})));
  end PI_Control_Reset_Input;

  model TemperatureTwoPort_Superheat
    "Ideal two port temperature sensor measuring superheat"
    extends TRANSFORM.Fluid.Sensors.BaseClasses.PartialTwoPortSensor;
    extends TRANSFORM.Fluid.Sensors.BaseClasses.PartialMultiSensor_1values(final
        var=T, redeclare replaceable function iconUnit =
          TRANSFORM.Units.Conversions.Functions.Temperature_K.to_degC
        constrainedby
        TRANSFORM.Units.Conversions.Functions.Temperature_K.BaseClasses.to);
    Modelica.Units.SI.Temperature Tsat;
    Modelica.Units.SI.Temperature T;
    replaceable package HTF =Modelica.Media.Water.StandardWater
    constrainedby Modelica.Media.Interfaces.PartialMedium annotation(allMatchingChoices=true);
    /*"This is introduced because for some reason when I use Medium.saturationTemperature(),
  it says it's not in the Medium package. So. I've gone around it. It worked previously as 
  Medium.saturationTemperature(). Any fix would be greatly appreciated. -Daniel" */
    Modelica.Blocks.Interfaces.RealOutput dT(
      final quantity="ThermodynamicTemperature",
      min=0,
      displayUnit="degC") "Temperature of the passing fluid" annotation (
        Placement(transformation(
          origin={0,110},
          extent={{10,-10},{-10,10}},
          rotation=270), iconTransformation(
          extent={{10,-10},{-10,10}},
          rotation=270,
          origin={0,36})));
  protected
    Medium.Temperature T_a_inflow "Temperature of inflowing fluid at port_a";
    Medium.Temperature T_b_inflow
      "Temperature of inflowing fluid at port_b or T_a_inflow, if uni-directional flow";
  equation

    Tsat = HTF.saturationTemperature(port_a.p);
    //dT, which is the real output connector. By applying the spliceTanh function, this model is designed to be connected to a shutoff valve.
    dT = TRANSFORM.Math.spliceTanh(1,0,(T-Tsat-3),4.0);
    if allowFlowReversal then
      T_a_inflow = Medium.temperature(Medium.setState_phX(
        port_b.p,
        port_b.h_outflow,
        port_b.Xi_outflow));
      T_b_inflow = Medium.temperature(Medium.setState_phX(
        port_a.p,
        port_a.h_outflow,
        port_a.Xi_outflow));
      T = Modelica.Fluid.Utilities.regStep(
        port_a.m_flow,
        T_a_inflow,
        T_b_inflow,
        m_flow_small);
    else
      T = Medium.temperature(Medium.setState_phX(
        port_b.p,
        port_b.h_outflow,
        port_b.Xi_outflow));
      T_a_inflow = T;
      T_b_inflow = T;
    end if;
    annotation (
      defaultComponentName="sensor_T",
      Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
              100}}), graphics={
          Text(
            extent={{78,56},{-18,27}},
            lineColor={0,0,0},
            textString="T"),
          Line(points={{50,0},{100,0}}, color={0,128,255}),
          Line(points={{-100,0},{-50,0}}, color={0,128,255})}),
      Documentation(info="<html>
<p>The two port temperature sensor from TRANSFORM is the base model. The only difference is that instead of measuring the actual temperature, this model measures the amount of superheat of the fluid. This is then, in this model, transferred into an open or close signal. Its design is to then be connected into a valve and to close said valve if the temperature of the fluid becomes saturated or subcooled. </p>
</html>"));
  end TemperatureTwoPort_Superheat;

  block Delay "Delays an input or output signal"
    parameter Modelica.Units.SI.Time Ti=1 "Delay time";

    Modelica.Blocks.Interfaces.RealInput u
      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
    Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
            extent={{100,-14},{128,14}}), iconTransformation(extent={{100,-14},{128,
              14}})));
  initial equation
    y=u;
  equation
    der(y)*Ti = u-y;

    annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
          coordinateSystem(preserveAspectRatio=false)),
      Documentation(info="<html>
<p>The delay model simply communicates a value from point A to point B using a slight delay. Delay_Time*der(output) = input-output </p>
</html>"));
  end Delay;

  model LossResistance
    extends
      TRANSFORM.Fluid.FittingsAndResistances.BaseClasses.PartialResistance;
    input Real K( unit="1/(m4)") "This value is equal to K_nominal/(2*A^2) for flow area A and lookup value K_nominal in standard engineering tables."
      annotation (Dialog(group="Inputs"));

    Modelica.Units.SI.Density d;
    parameter Modelica.Units.SI.Pressure dp_init=10000;

  initial equation
  //  dp_init = port_a.m_flow*sqrt(port_a.m_flow*port_a.m_flow + 0.1*0.1)*K/state.d;
  equation
    d = Medium.density(state);

   port_a.p-port_b.p = port_a.m_flow*sqrt(port_a.m_flow*port_a.m_flow + 0.1*0.1)*K/state.d;

    annotation (defaultComponentName="resistance",
          Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
            extent={{-30,-50},{30,-70}},
            lineColor={0,0,0},
            textString="Set R")}),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
      Documentation(info="<html>
<p>Loss resistance is a 2 port fluid connector that calculates a pressure drop based on a loss coefficient K. This is a typical loss coefficient in lookup tables divided by the area of the resistance squared. </p>
</html>"));
  end LossResistance;

  block Timer "Delays a real signal until start time is established. Output=Input*multiplication_factor, which can be initially set to anything. Nominally, factor should be between 0 and 1"
    parameter Modelica.Units.SI.Time Start_Time=2700 "Time to allow multiplication rate change";
    parameter Real init_mult=0 "Initial multiplication rate";
    Real mult;
    Modelica.Blocks.Interfaces.RealInput u
      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
    Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
            extent={{100,-14},{128,14}}), iconTransformation(extent={{100,-14},{128,
              14}})));
  initial equation
  mult=init_mult;
  equation
    if
      (time < Start_Time) then
      der(mult) = 0;
    else
      der(mult) = 1-mult;
    end if;
    y=mult*u;

    annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
          coordinateSystem(preserveAspectRatio=false)),
      Documentation(info="<html>
<p>The timer block is an initialization block. The output is equal to a value multiplying the input. The multiplier is initialized after some start time. </p>
</html>"));
  end Timer;
end Control_and_Distribution;
